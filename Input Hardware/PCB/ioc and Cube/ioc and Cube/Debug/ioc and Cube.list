
ioc and Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004258  08004258  00005258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004288  08004288  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004288  08004288  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004288  08004288  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004288  08004288  00005288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800428c  0800428c  0000528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004290  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000618  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000624  20000624  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f63b  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002288  00000000  00000000  00015677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  00017900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a79  00000000  00000000  00018690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e37b  00000000  00000000  00019109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d41  00000000  00000000  00037484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba5f4  00000000  00000000  0004a1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001047b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003890  00000000  00000000  001047fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  0010808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004240 	.word	0x08004240

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004240 	.word	0x08004240

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 ffc6 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81c 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fbb4 	bl	8000940 <MX_GPIO_Init>
  MX_ADC3_Init();
 80001d8:	f000 f94e 	bl	8000478 <MX_ADC3_Init>
  MX_COMP3_Init();
 80001dc:	f000 fa1a 	bl	8000614 <MX_COMP3_Init>
  MX_COMP4_Init();
 80001e0:	f000 fa46 	bl	8000670 <MX_COMP4_Init>
  MX_COMP5_Init();
 80001e4:	f000 fa72 	bl	80006cc <MX_COMP5_Init>
  MX_COMP6_Init();
 80001e8:	f000 fa9e 	bl	8000728 <MX_COMP6_Init>
  MX_USB_PCD_Init();
 80001ec:	f000 fb86 	bl	80008fc <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80001f0:	f000 f874 	bl	80002dc <MX_ADC1_Init>
  MX_ADC2_Init();
 80001f4:	f000 f8e2 	bl	80003bc <MX_ADC2_Init>
  MX_ADC4_Init();
 80001f8:	f000 f9ae 	bl	8000558 <MX_ADC4_Init>
  MX_I2C2_Init();
 80001fc:	f000 fac2 	bl	8000784 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000200:	f000 fb00 	bl	8000804 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000204:	f000 fb3c 	bl	8000880 <MX_SPI3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	bf00      	nop
 800020a:	e7fd      	b.n	8000208 <main+0x40>

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b09e      	sub	sp, #120	@ 0x78
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000216:	2228      	movs	r2, #40	@ 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f003 ffe4 	bl	80041e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	223c      	movs	r2, #60	@ 0x3c
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f003 ffd6 	bl	80041e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800023c:	2303      	movs	r3, #3
 800023e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000240:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000244:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024e:	2310      	movs	r3, #16
 8000250:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000256:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800025a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800025c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000260:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fb1c 	bl	80028a4 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000272:	f000 fc29 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027a:	2302      	movs	r3, #2
 800027c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000282:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000286:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800028c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000290:	2101      	movs	r1, #1
 8000292:	4618      	mov	r0, r3
 8000294:	f003 fb44 	bl	8003920 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800029e:	f000 fc13 	bl	8000ac8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C2
 80002a2:	4b0d      	ldr	r3, [pc, #52]	@ (80002d8 <SystemClock_Config+0xcc>)
 80002a4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002aa:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80002ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80002b2:	2300      	movs	r3, #0
 80002b4:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002bc:	463b      	mov	r3, r7
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 fcfe 	bl	8003cc0 <HAL_RCCEx_PeriphCLKConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80002ca:	f000 fbfd 	bl	8000ac8 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3778      	adds	r7, #120	@ 0x78
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	000201c0 	.word	0x000201c0

080002dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	@ 0x28
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002e2:	f107 031c 	add.w	r3, r7, #28
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
 80002fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fe:	4b2e      	ldr	r3, [pc, #184]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000300:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000306:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800030c:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000312:	4b29      	ldr	r3, [pc, #164]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000318:	4b27      	ldr	r3, [pc, #156]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 800031a:	2200      	movs	r2, #0
 800031c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031e:	4b26      	ldr	r3, [pc, #152]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000320:	2200      	movs	r2, #0
 8000322:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000326:	4b24      	ldr	r3, [pc, #144]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000328:	2200      	movs	r2, #0
 800032a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800032c:	4b22      	ldr	r3, [pc, #136]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 800032e:	2201      	movs	r2, #1
 8000330:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000332:	4b21      	ldr	r3, [pc, #132]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000338:	4b1f      	ldr	r3, [pc, #124]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 800033a:	2201      	movs	r2, #1
 800033c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800033e:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000340:	2200      	movs	r2, #0
 8000342:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000346:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000348:	2204      	movs	r2, #4
 800034a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800034c:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 800034e:	2200      	movs	r2, #0
 8000350:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000352:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000354:	2200      	movs	r2, #0
 8000356:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000358:	4817      	ldr	r0, [pc, #92]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 800035a:	f000 ff65 	bl	8001228 <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000364:	f000 fbb0 	bl	8000ac8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	4619      	mov	r1, r3
 8000372:	4811      	ldr	r0, [pc, #68]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000374:	f001 fc22 	bl	8001bbc <HAL_ADCEx_MultiModeConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800037e:	f000 fba3 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000382:	2305      	movs	r3, #5
 8000384:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000386:	2301      	movs	r3, #1
 8000388:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4619      	mov	r1, r3
 800039e:	4806      	ldr	r0, [pc, #24]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 80003a0:	f001 f922 	bl	80015e8 <HAL_ADC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003aa:	f000 fb8d 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	3728      	adds	r7, #40	@ 0x28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000028 	.word	0x20000028

080003bc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c2:	463b      	mov	r3, r7
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003d2:	4b27      	ldr	r3, [pc, #156]	@ (8000470 <MX_ADC2_Init+0xb4>)
 80003d4:	4a27      	ldr	r2, [pc, #156]	@ (8000474 <MX_ADC2_Init+0xb8>)
 80003d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003d8:	4b25      	ldr	r3, [pc, #148]	@ (8000470 <MX_ADC2_Init+0xb4>)
 80003da:	2200      	movs	r2, #0
 80003dc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003de:	4b24      	ldr	r3, [pc, #144]	@ (8000470 <MX_ADC2_Init+0xb4>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e4:	4b22      	ldr	r3, [pc, #136]	@ (8000470 <MX_ADC2_Init+0xb4>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003ea:	4b21      	ldr	r3, [pc, #132]	@ (8000470 <MX_ADC2_Init+0xb4>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000470 <MX_ADC2_Init+0xb4>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000470 <MX_ADC2_Init+0xb4>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000470 <MX_ADC2_Init+0xb4>)
 8000400:	2201      	movs	r2, #1
 8000402:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000404:	4b1a      	ldr	r3, [pc, #104]	@ (8000470 <MX_ADC2_Init+0xb4>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800040a:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <MX_ADC2_Init+0xb4>)
 800040c:	2201      	movs	r2, #1
 800040e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000410:	4b17      	ldr	r3, [pc, #92]	@ (8000470 <MX_ADC2_Init+0xb4>)
 8000412:	2200      	movs	r2, #0
 8000414:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000418:	4b15      	ldr	r3, [pc, #84]	@ (8000470 <MX_ADC2_Init+0xb4>)
 800041a:	2204      	movs	r2, #4
 800041c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800041e:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <MX_ADC2_Init+0xb4>)
 8000420:	2200      	movs	r2, #0
 8000422:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000424:	4b12      	ldr	r3, [pc, #72]	@ (8000470 <MX_ADC2_Init+0xb4>)
 8000426:	2200      	movs	r2, #0
 8000428:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800042a:	4811      	ldr	r0, [pc, #68]	@ (8000470 <MX_ADC2_Init+0xb4>)
 800042c:	f000 fefc 	bl	8001228 <HAL_ADC_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000436:	f000 fb47 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800043a:	2303      	movs	r3, #3
 800043c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800043e:	2301      	movs	r3, #1
 8000440:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000452:	463b      	mov	r3, r7
 8000454:	4619      	mov	r1, r3
 8000456:	4806      	ldr	r0, [pc, #24]	@ (8000470 <MX_ADC2_Init+0xb4>)
 8000458:	f001 f8c6 	bl	80015e8 <HAL_ADC_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000462:	f000 fb31 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	3718      	adds	r7, #24
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000078 	.word	0x20000078
 8000474:	50000100 	.word	0x50000100

08000478 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	@ 0x28
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
 8000498:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800049a:	4b2d      	ldr	r3, [pc, #180]	@ (8000550 <MX_ADC3_Init+0xd8>)
 800049c:	4a2d      	ldr	r2, [pc, #180]	@ (8000554 <MX_ADC3_Init+0xdc>)
 800049e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80004a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ac:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80004b2:	4b27      	ldr	r3, [pc, #156]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80004b8:	4b25      	ldr	r3, [pc, #148]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004c0:	4b23      	ldr	r3, [pc, #140]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004c6:	4b22      	ldr	r3, [pc, #136]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004cc:	4b20      	ldr	r3, [pc, #128]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80004d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80004d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80004e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004ec:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80004f2:	4817      	ldr	r0, [pc, #92]	@ (8000550 <MX_ADC3_Init+0xd8>)
 80004f4:	f000 fe98 	bl	8001228 <HAL_ADC_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80004fe:	f000 fae3 	bl	8000ac8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000502:	2300      	movs	r3, #0
 8000504:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000506:	f107 031c 	add.w	r3, r7, #28
 800050a:	4619      	mov	r1, r3
 800050c:	4810      	ldr	r0, [pc, #64]	@ (8000550 <MX_ADC3_Init+0xd8>)
 800050e:	f001 fb55 	bl	8001bbc <HAL_ADCEx_MultiModeConfigChannel>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000518:	f000 fad6 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800051c:	2301      	movs	r3, #1
 800051e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000520:	2301      	movs	r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000524:	2300      	movs	r3, #0
 8000526:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	@ (8000550 <MX_ADC3_Init+0xd8>)
 800053a:	f001 f855 	bl	80015e8 <HAL_ADC_ConfigChannel>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000544:	f000 fac0 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	3728      	adds	r7, #40	@ 0x28
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200000c8 	.word	0x200000c8
 8000554:	50000400 	.word	0x50000400

08000558 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800055e:	463b      	mov	r3, r7
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
 800056c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800056e:	4b27      	ldr	r3, [pc, #156]	@ (800060c <MX_ADC4_Init+0xb4>)
 8000570:	4a27      	ldr	r2, [pc, #156]	@ (8000610 <MX_ADC4_Init+0xb8>)
 8000572:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000574:	4b25      	ldr	r3, [pc, #148]	@ (800060c <MX_ADC4_Init+0xb4>)
 8000576:	2200      	movs	r2, #0
 8000578:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800057a:	4b24      	ldr	r3, [pc, #144]	@ (800060c <MX_ADC4_Init+0xb4>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000580:	4b22      	ldr	r3, [pc, #136]	@ (800060c <MX_ADC4_Init+0xb4>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000586:	4b21      	ldr	r3, [pc, #132]	@ (800060c <MX_ADC4_Init+0xb4>)
 8000588:	2200      	movs	r2, #0
 800058a:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800058c:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <MX_ADC4_Init+0xb4>)
 800058e:	2200      	movs	r2, #0
 8000590:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000594:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <MX_ADC4_Init+0xb4>)
 8000596:	2200      	movs	r2, #0
 8000598:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059a:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <MX_ADC4_Init+0xb4>)
 800059c:	2201      	movs	r2, #1
 800059e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <MX_ADC4_Init+0xb4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80005a6:	4b19      	ldr	r3, [pc, #100]	@ (800060c <MX_ADC4_Init+0xb4>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80005ac:	4b17      	ldr	r3, [pc, #92]	@ (800060c <MX_ADC4_Init+0xb4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b4:	4b15      	ldr	r3, [pc, #84]	@ (800060c <MX_ADC4_Init+0xb4>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80005ba:	4b14      	ldr	r3, [pc, #80]	@ (800060c <MX_ADC4_Init+0xb4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005c0:	4b12      	ldr	r3, [pc, #72]	@ (800060c <MX_ADC4_Init+0xb4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80005c6:	4811      	ldr	r0, [pc, #68]	@ (800060c <MX_ADC4_Init+0xb4>)
 80005c8:	f000 fe2e 	bl	8001228 <HAL_ADC_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80005d2:	f000 fa79 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005d6:	2303      	movs	r3, #3
 80005d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005da:	2301      	movs	r3, #1
 80005dc:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80005ee:	463b      	mov	r3, r7
 80005f0:	4619      	mov	r1, r3
 80005f2:	4806      	ldr	r0, [pc, #24]	@ (800060c <MX_ADC4_Init+0xb4>)
 80005f4:	f000 fff8 	bl	80015e8 <HAL_ADC_ConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 80005fe:	f000 fa63 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000118 	.word	0x20000118
 8000610:	50000500 	.word	0x50000500

08000614 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8000618:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <MX_COMP3_Init+0x54>)
 800061a:	4a14      	ldr	r2, [pc, #80]	@ (800066c <MX_COMP3_Init+0x58>)
 800061c:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 800061e:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_COMP3_Init+0x54>)
 8000620:	2240      	movs	r2, #64	@ 0x40
 8000622:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000624:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <MX_COMP3_Init+0x54>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_COMP3_Init+0x54>)
 800062c:	227f      	movs	r2, #127	@ 0x7f
 800062e:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000630:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <MX_COMP3_Init+0x54>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_COMP3_Init+0x54>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <MX_COMP3_Init+0x54>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  hcomp3.Init.Mode = COMP_MODE_HIGHSPEED;
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_COMP3_Init+0x54>)
 8000644:	2200      	movs	r2, #0
 8000646:	61da      	str	r2, [r3, #28]
  hcomp3.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <MX_COMP3_Init+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_COMP3_Init+0x54>)
 8000650:	2200      	movs	r2, #0
 8000652:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_COMP3_Init+0x54>)
 8000656:	f001 fc09 	bl	8001e6c <HAL_COMP_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_COMP3_Init+0x50>
  {
    Error_Handler();
 8000660:	f000 fa32 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000168 	.word	0x20000168
 800066c:	40010024 	.word	0x40010024

08000670 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_COMP4_Init+0x54>)
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <MX_COMP4_Init+0x58>)
 8000678:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 800067a:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_COMP4_Init+0x54>)
 800067c:	2270      	movs	r2, #112	@ 0x70
 800067e:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000680:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <MX_COMP4_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_NONE;
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_COMP4_Init+0x54>)
 8000688:	227f      	movs	r2, #127	@ 0x7f
 800068a:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800068c:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <MX_COMP4_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_COMP4_Init+0x54>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_COMP4_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_COMP4_Init+0x54>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_COMP4_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_COMP4_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_COMP4_Init+0x54>)
 80006b2:	f001 fbdb 	bl	8001e6c <HAL_COMP_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_COMP4_Init+0x50>
  {
    Error_Handler();
 80006bc:	f000 fa04 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000198 	.word	0x20000198
 80006c8:	40010028 	.word	0x40010028

080006cc <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_COMP5_Init+0x54>)
 80006d2:	4a14      	ldr	r2, [pc, #80]	@ (8000724 <MX_COMP5_Init+0x58>)
 80006d4:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH2;
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_COMP5_Init+0x54>)
 80006d8:	2250      	movs	r2, #80	@ 0x50
 80006da:	605a      	str	r2, [r3, #4]
  hcomp5.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 80006dc:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_COMP5_Init+0x54>)
 80006de:	2280      	movs	r2, #128	@ 0x80
 80006e0:	609a      	str	r2, [r3, #8]
  hcomp5.Init.Output = COMP_OUTPUT_NONE;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_COMP5_Init+0x54>)
 80006e4:	227f      	movs	r2, #127	@ 0x7f
 80006e6:	60da      	str	r2, [r3, #12]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_COMP5_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_COMP5_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_COMP5_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hcomp5.Init.Mode = COMP_MODE_HIGHSPEED;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_COMP5_Init+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hcomp5.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_COMP5_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_COMP5_Init+0x54>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_COMP5_Init+0x54>)
 800070e:	f001 fbad 	bl	8001e6c <HAL_COMP_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_COMP5_Init+0x50>
  {
    Error_Handler();
 8000718:	f000 f9d6 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200001c8 	.word	0x200001c8
 8000724:	4001002c 	.word	0x4001002c

08000728 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 800072c:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_COMP6_Init+0x54>)
 800072e:	4a14      	ldr	r2, [pc, #80]	@ (8000780 <MX_COMP6_Init+0x58>)
 8000730:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 8000732:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_COMP6_Init+0x54>)
 8000734:	2270      	movs	r2, #112	@ 0x70
 8000736:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8000738:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_COMP6_Init+0x54>)
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_NONE;
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_COMP6_Init+0x54>)
 8000740:	227f      	movs	r2, #127	@ 0x7f
 8000742:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000744:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <MX_COMP6_Init+0x54>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_COMP6_Init+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_COMP6_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hcomp6.Init.Mode = COMP_MODE_HIGHSPEED;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_COMP6_Init+0x54>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hcomp6.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_COMP6_Init+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_COMP6_Init+0x54>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_COMP6_Init+0x54>)
 800076a:	f001 fb7f 	bl	8001e6c <HAL_COMP_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_COMP6_Init+0x50>
  {
    Error_Handler();
 8000774:	f000 f9a8 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200001f8 	.word	0x200001f8
 8000780:	40010030 	.word	0x40010030

08000784 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <MX_I2C2_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	@ (80007fc <MX_I2C2_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_I2C2_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	@ (8000800 <MX_I2C2_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_I2C2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_I2C2_Init+0x74>)
 800079c:	2201      	movs	r2, #1
 800079e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007be:	480e      	ldr	r0, [pc, #56]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007c0:	f001 fe76 	bl	80024b0 <HAL_I2C_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007ca:	f000 f97d 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007d2:	f001 ff08 	bl	80025e6 <HAL_I2CEx_ConfigAnalogFilter>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f000 f974 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_I2C2_Init+0x74>)
 80007e4:	f001 ff4a 	bl	800267c <HAL_I2CEx_ConfigDigitalFilter>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 f96b 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000228 	.word	0x20000228
 80007fc:	40005800 	.word	0x40005800
 8000800:	00201d2b 	.word	0x00201d2b

08000804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_SPI1_Init+0x74>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	@ (800087c <MX_SPI1_Init+0x78>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_SPI1_Init+0x74>)
 8000810:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_SPI1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_SPI1_Init+0x74>)
 800081e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000822:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000824:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_SPI1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <MX_SPI1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_SPI1_Init+0x74>)
 8000832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000836:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_SPI1_Init+0x74>)
 800083a:	2208      	movs	r2, #8
 800083c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_SPI1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_SPI1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_SPI1_Init+0x74>)
 8000852:	2207      	movs	r2, #7
 8000854:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_SPI1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_SPI1_Init+0x74>)
 800085e:	2208      	movs	r2, #8
 8000860:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_SPI1_Init+0x74>)
 8000864:	f003 fbdc 	bl	8004020 <HAL_SPI_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800086e:	f000 f92b 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000027c 	.word	0x2000027c
 800087c:	40013000 	.word	0x40013000

08000880 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000884:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_SPI3_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	@ (80008f8 <MX_SPI3_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_SPI3_Init+0x74>)
 800088c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_SPI3_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_SPI3_Init+0x74>)
 800089a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800089e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008ce:	2207      	movs	r2, #7
 80008d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008da:	2208      	movs	r2, #8
 80008dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_SPI3_Init+0x74>)
 80008e0:	f003 fb9e 	bl	8004020 <HAL_SPI_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 f8ed 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200002e0 	.word	0x200002e0
 80008f8:	40003c00 	.word	0x40003c00

080008fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <MX_USB_PCD_Init+0x3c>)
 8000902:	4a0e      	ldr	r2, [pc, #56]	@ (800093c <MX_USB_PCD_Init+0x40>)
 8000904:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_USB_PCD_Init+0x3c>)
 8000908:	2208      	movs	r2, #8
 800090a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <MX_USB_PCD_Init+0x3c>)
 800090e:	2202      	movs	r2, #2
 8000910:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_USB_PCD_Init+0x3c>)
 8000914:	2202      	movs	r2, #2
 8000916:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <MX_USB_PCD_Init+0x3c>)
 800091a:	2200      	movs	r2, #0
 800091c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_USB_PCD_Init+0x3c>)
 8000920:	2200      	movs	r2, #0
 8000922:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_USB_PCD_Init+0x3c>)
 8000926:	f001 fef5 	bl	8002714 <HAL_PCD_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000930:	f000 f8ca 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000344 	.word	0x20000344
 800093c:	40005c00 	.word	0x40005c00

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	@ 0x28
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b58      	ldr	r3, [pc, #352]	@ (8000ab8 <MX_GPIO_Init+0x178>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	4a57      	ldr	r2, [pc, #348]	@ (8000ab8 <MX_GPIO_Init+0x178>)
 800095c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000960:	6153      	str	r3, [r2, #20]
 8000962:	4b55      	ldr	r3, [pc, #340]	@ (8000ab8 <MX_GPIO_Init+0x178>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800096e:	4b52      	ldr	r3, [pc, #328]	@ (8000ab8 <MX_GPIO_Init+0x178>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a51      	ldr	r2, [pc, #324]	@ (8000ab8 <MX_GPIO_Init+0x178>)
 8000974:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ab8 <MX_GPIO_Init+0x178>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b4c      	ldr	r3, [pc, #304]	@ (8000ab8 <MX_GPIO_Init+0x178>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	4a4b      	ldr	r2, [pc, #300]	@ (8000ab8 <MX_GPIO_Init+0x178>)
 800098c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000990:	6153      	str	r3, [r2, #20]
 8000992:	4b49      	ldr	r3, [pc, #292]	@ (8000ab8 <MX_GPIO_Init+0x178>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b46      	ldr	r3, [pc, #280]	@ (8000ab8 <MX_GPIO_Init+0x178>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	4a45      	ldr	r2, [pc, #276]	@ (8000ab8 <MX_GPIO_Init+0x178>)
 80009a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009a8:	6153      	str	r3, [r2, #20]
 80009aa:	4b43      	ldr	r3, [pc, #268]	@ (8000ab8 <MX_GPIO_Init+0x178>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_COM_GPIO_Port, INPUT_COM_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2102      	movs	r1, #2
 80009ba:	4840      	ldr	r0, [pc, #256]	@ (8000abc <MX_GPIO_Init+0x17c>)
 80009bc:	f001 fd60 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUTPUT_COM_Pin|TP906_Pin|TP907_Pin|MUX_A_Pin
 80009c0:	2200      	movs	r2, #0
 80009c2:	f640 31f1 	movw	r1, #3057	@ 0xbf1
 80009c6:	483e      	ldr	r0, [pc, #248]	@ (8000ac0 <MX_GPIO_Init+0x180>)
 80009c8:	f001 fd5a 	bl	8002480 <HAL_GPIO_WritePin>
                          |MUX_B_Pin|MUX_C_Pin|MUX_INHIBIT_Pin|UI_RCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP908_Pin|TX_SLEEP_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80009d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d6:	f001 fd53 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP909_Pin|PUSH_2_Pin|TX_RCLK_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80009e0:	4838      	ldr	r0, [pc, #224]	@ (8000ac4 <MX_GPIO_Init+0x184>)
 80009e2:	f001 fd4d 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OFFSET_CENTER_Pin OFFSET_RIGHT_Pin OFFSET_UP_Pin SCALE_B_Pin
                           SCALE_A_Pin SCALE_PUSH_Pin */
  GPIO_InitStruct.Pin = OFFSET_CENTER_Pin|OFFSET_RIGHT_Pin|OFFSET_UP_Pin|SCALE_B_Pin
 80009e6:	f24e 030e 	movw	r3, #57358	@ 0xe00e
 80009ea:	617b      	str	r3, [r7, #20]
                          |SCALE_A_Pin|SCALE_PUSH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4831      	ldr	r0, [pc, #196]	@ (8000ac0 <MX_GPIO_Init+0x180>)
 80009fc:	f001 fbc6 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_COM_Pin */
  GPIO_InitStruct.Pin = INPUT_COM_Pin;
 8000a00:	2302      	movs	r3, #2
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_COM_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4829      	ldr	r0, [pc, #164]	@ (8000abc <MX_GPIO_Init+0x17c>)
 8000a18:	f001 fbb8 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_COM_Pin TP906_Pin TP907_Pin MUX_A_Pin
                           MUX_B_Pin MUX_C_Pin MUX_INHIBIT_Pin UI_RCLK_Pin */
  GPIO_InitStruct.Pin = OUTPUT_COM_Pin|TP906_Pin|TP907_Pin|MUX_A_Pin
 8000a1c:	f640 33f1 	movw	r3, #3057	@ 0xbf1
 8000a20:	617b      	str	r3, [r7, #20]
                          |MUX_B_Pin|MUX_C_Pin|MUX_INHIBIT_Pin|UI_RCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4822      	ldr	r0, [pc, #136]	@ (8000ac0 <MX_GPIO_Init+0x180>)
 8000a36:	f001 fba9 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP908_Pin TX_SLEEP_Pin */
  GPIO_InitStruct.Pin = TP908_Pin|TX_SLEEP_Pin;
 8000a3a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a56:	f001 fb99 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP909_Pin PUSH_2_Pin TX_RCLK_Pin */
  GPIO_InitStruct.Pin = TP909_Pin|PUSH_2_Pin|TX_RCLK_Pin;
 8000a5a:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4814      	ldr	r0, [pc, #80]	@ (8000ac4 <MX_GPIO_Init+0x184>)
 8000a74:	f001 fb8a 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_1_Pin */
  GPIO_InitStruct.Pin = PUSH_1_Pin;
 8000a78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_1_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a90:	f001 fb7c 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_3_Pin OFFSET_UPB8_Pin OFFSET_DOWN_Pin */
  GPIO_InitStruct.Pin = PUSH_3_Pin|OFFSET_UPB8_Pin|OFFSET_DOWN_Pin;
 8000a94:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4806      	ldr	r0, [pc, #24]	@ (8000ac4 <MX_GPIO_Init+0x184>)
 8000aaa:	f001 fb6f 	bl	800218c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	@ 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	48001400 	.word	0x48001400
 8000ac0:	48000800 	.word	0x48000800
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <Error_Handler+0x8>

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_MspInit+0x44>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a0e      	ldr	r2, [pc, #56]	@ (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <HAL_MspInit+0x44>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a08      	ldr	r2, [pc, #32]	@ (8000b18 <HAL_MspInit+0x44>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_MspInit+0x44>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b090      	sub	sp, #64	@ 0x40
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b3c:	d12d      	bne.n	8000b9a <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b3e:	4b66      	ldr	r3, [pc, #408]	@ (8000cd8 <HAL_ADC_MspInit+0x1bc>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a64      	ldr	r2, [pc, #400]	@ (8000cd8 <HAL_ADC_MspInit+0x1bc>)
 8000b46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b48:	4b63      	ldr	r3, [pc, #396]	@ (8000cd8 <HAL_ADC_MspInit+0x1bc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d10b      	bne.n	8000b68 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b50:	4b62      	ldr	r3, [pc, #392]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	4a61      	ldr	r2, [pc, #388]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	6153      	str	r3, [r2, #20]
 8000b5c:	4b5f      	ldr	r3, [pc, #380]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b68:	4b5c      	ldr	r3, [pc, #368]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	4a5b      	ldr	r2, [pc, #364]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000b6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b72:	6153      	str	r3, [r2, #20]
 8000b74:	4b59      	ldr	r3, [pc, #356]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = RX1_ADC_Pin;
 8000b80:	2310      	movs	r3, #16
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b84:	2303      	movs	r3, #3
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX1_ADC_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b90:	4619      	mov	r1, r3
 8000b92:	4853      	ldr	r0, [pc, #332]	@ (8000ce0 <HAL_ADC_MspInit+0x1c4>)
 8000b94:	f001 fafa 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000b98:	e099      	b.n	8000cce <HAL_ADC_MspInit+0x1b2>
  else if(hadc->Instance==ADC2)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a51      	ldr	r2, [pc, #324]	@ (8000ce4 <HAL_ADC_MspInit+0x1c8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d12e      	bne.n	8000c02 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8000cd8 <HAL_ADC_MspInit+0x1bc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	4a4b      	ldr	r2, [pc, #300]	@ (8000cd8 <HAL_ADC_MspInit+0x1bc>)
 8000bac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bae:	4b4a      	ldr	r3, [pc, #296]	@ (8000cd8 <HAL_ADC_MspInit+0x1bc>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d10b      	bne.n	8000bce <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bb6:	4b49      	ldr	r3, [pc, #292]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4a48      	ldr	r2, [pc, #288]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc0:	6153      	str	r3, [r2, #20]
 8000bc2:	4b46      	ldr	r3, [pc, #280]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	623b      	str	r3, [r7, #32]
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b43      	ldr	r3, [pc, #268]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	4a42      	ldr	r2, [pc, #264]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd8:	6153      	str	r3, [r2, #20]
 8000bda:	4b40      	ldr	r3, [pc, #256]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = RX3_ADC_Pin;
 8000be6:	2340      	movs	r3, #64	@ 0x40
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bea:	2303      	movs	r3, #3
 8000bec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX3_ADC_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfc:	f001 fac6 	bl	800218c <HAL_GPIO_Init>
}
 8000c00:	e065      	b.n	8000cce <HAL_ADC_MspInit+0x1b2>
  else if(hadc->Instance==ADC3)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a38      	ldr	r2, [pc, #224]	@ (8000ce8 <HAL_ADC_MspInit+0x1cc>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d12d      	bne.n	8000c68 <HAL_ADC_MspInit+0x14c>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000c0c:	4b37      	ldr	r3, [pc, #220]	@ (8000cec <HAL_ADC_MspInit+0x1d0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	4a36      	ldr	r2, [pc, #216]	@ (8000cec <HAL_ADC_MspInit+0x1d0>)
 8000c14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000c16:	4b35      	ldr	r3, [pc, #212]	@ (8000cec <HAL_ADC_MspInit+0x1d0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d10b      	bne.n	8000c36 <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a2e      	ldr	r2, [pc, #184]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000c24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c28:	6153      	str	r3, [r2, #20]
 8000c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a28      	ldr	r2, [pc, #160]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b26      	ldr	r3, [pc, #152]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RX2_ADC_Pin;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	2303      	movs	r3, #3
 8000c54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX2_ADC_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4823      	ldr	r0, [pc, #140]	@ (8000cf0 <HAL_ADC_MspInit+0x1d4>)
 8000c62:	f001 fa93 	bl	800218c <HAL_GPIO_Init>
}
 8000c66:	e032      	b.n	8000cce <HAL_ADC_MspInit+0x1b2>
  else if(hadc->Instance==ADC4)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a21      	ldr	r2, [pc, #132]	@ (8000cf4 <HAL_ADC_MspInit+0x1d8>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12d      	bne.n	8000cce <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <HAL_ADC_MspInit+0x1d0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	4a1c      	ldr	r2, [pc, #112]	@ (8000cec <HAL_ADC_MspInit+0x1d0>)
 8000c7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <HAL_ADC_MspInit+0x1d0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d10b      	bne.n	8000c9c <HAL_ADC_MspInit+0x180>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000c8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c8e:	6153      	str	r3, [r2, #20]
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000ca2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ca6:	6153      	str	r3, [r2, #20]
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_ADC_MspInit+0x1c0>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX4_ADC_Pin;
 8000cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX4_ADC_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4809      	ldr	r0, [pc, #36]	@ (8000cf0 <HAL_ADC_MspInit+0x1d4>)
 8000cca:	f001 fa5f 	bl	800218c <HAL_GPIO_Init>
}
 8000cce:	bf00      	nop
 8000cd0:	3740      	adds	r7, #64	@ 0x40
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000618 	.word	0x20000618
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	48001400 	.word	0x48001400
 8000ce4:	50000100 	.word	0x50000100
 8000ce8:	50000400 	.word	0x50000400
 8000cec:	2000061c 	.word	0x2000061c
 8000cf0:	48000400 	.word	0x48000400
 8000cf4:	50000500 	.word	0x50000500

08000cf8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	@ 0x38
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a56      	ldr	r2, [pc, #344]	@ (8000e70 <HAL_COMP_MspInit+0x178>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d132      	bne.n	8000d80 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b56      	ldr	r3, [pc, #344]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a55      	ldr	r2, [pc, #340]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d24:	6153      	str	r3, [r2, #20]
 8000d26:	4b53      	ldr	r3, [pc, #332]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2e:	623b      	str	r3, [r7, #32]
 8000d30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b50      	ldr	r3, [pc, #320]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	4a4f      	ldr	r2, [pc, #316]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d3c:	6153      	str	r3, [r2, #20]
 8000d3e:	4b4d      	ldr	r3, [pc, #308]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	69fb      	ldr	r3, [r7, #28]
    /**COMP3 GPIO Configuration
    PA4     ------> COMP3_INM
    PB14     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = RX1_COMP_Pin;
 8000d4a:	2310      	movs	r3, #16
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RX1_COMP_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d60:	f001 fa14 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VREFB14_Pin;
 8000d64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VREFB14_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	483f      	ldr	r0, [pc, #252]	@ (8000e78 <HAL_COMP_MspInit+0x180>)
 8000d7a:	f001 fa07 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 8000d7e:	e073      	b.n	8000e68 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP4)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a3d      	ldr	r2, [pc, #244]	@ (8000e7c <HAL_COMP_MspInit+0x184>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d118      	bne.n	8000dbc <HAL_COMP_MspInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	4a39      	ldr	r2, [pc, #228]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d94:	6153      	str	r3, [r2, #20]
 8000d96:	4b37      	ldr	r3, [pc, #220]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RX2_COMP_Pin|VREF_Pin;
 8000da2:	2305      	movs	r3, #5
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da6:	2303      	movs	r3, #3
 8000da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4830      	ldr	r0, [pc, #192]	@ (8000e78 <HAL_COMP_MspInit+0x180>)
 8000db6:	f001 f9e9 	bl	800218c <HAL_GPIO_Init>
}
 8000dba:	e055      	b.n	8000e68 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP5)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a2f      	ldr	r2, [pc, #188]	@ (8000e80 <HAL_COMP_MspInit+0x188>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d132      	bne.n	8000e2c <HAL_COMP_MspInit+0x134>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	4a2a      	ldr	r2, [pc, #168]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	6153      	str	r3, [r2, #20]
 8000dd2:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4a24      	ldr	r2, [pc, #144]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000de8:	6153      	str	r3, [r2, #20]
 8000dea:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_COMP_Pin;
 8000df6:	2320      	movs	r3, #32
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RX3_COMP_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0c:	f001 f9be 	bl	800218c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VREFB13_Pin;
 8000e10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e16:	2303      	movs	r3, #3
 8000e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VREFB13_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <HAL_COMP_MspInit+0x180>)
 8000e26:	f001 f9b1 	bl	800218c <HAL_GPIO_Init>
}
 8000e2a:	e01d      	b.n	8000e68 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP6)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a14      	ldr	r2, [pc, #80]	@ (8000e84 <HAL_COMP_MspInit+0x18c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d118      	bne.n	8000e68 <HAL_COMP_MspInit+0x170>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <HAL_COMP_MspInit+0x17c>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX4_COMP_Pin|VREFB15_Pin;
 8000e4e:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e54:	2303      	movs	r3, #3
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <HAL_COMP_MspInit+0x180>)
 8000e64:	f001 f992 	bl	800218c <HAL_GPIO_Init>
}
 8000e68:	bf00      	nop
 8000e6a:	3738      	adds	r7, #56	@ 0x38
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40010024 	.word	0x40010024
 8000e74:	40021000 	.word	0x40021000
 8000e78:	48000400 	.word	0x48000400
 8000e7c:	40010028 	.word	0x40010028
 8000e80:	4001002c 	.word	0x4001002c
 8000e84:	40010030 	.word	0x40010030

08000e88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a18      	ldr	r2, [pc, #96]	@ (8000f08 <HAL_I2C_MspInit+0x80>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d129      	bne.n	8000efe <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <HAL_I2C_MspInit+0x84>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a17      	ldr	r2, [pc, #92]	@ (8000f0c <HAL_I2C_MspInit+0x84>)
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb4:	6153      	str	r3, [r2, #20]
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_I2C_MspInit+0x84>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8000ec2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec8:	2312      	movs	r3, #18
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee2:	f001 f953 	bl	800218c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <HAL_I2C_MspInit+0x84>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4a08      	ldr	r2, [pc, #32]	@ (8000f0c <HAL_I2C_MspInit+0x84>)
 8000eec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ef0:	61d3      	str	r3, [r2, #28]
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_I2C_MspInit+0x84>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	@ 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40005800 	.word	0x40005800
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	@ 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8000fe8 <HAL_SPI_MspInit+0xd8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d128      	bne.n	8000f84 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f32:	4b2e      	ldr	r3, [pc, #184]	@ (8000fec <HAL_SPI_MspInit+0xdc>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a2d      	ldr	r2, [pc, #180]	@ (8000fec <HAL_SPI_MspInit+0xdc>)
 8000f38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fec <HAL_SPI_MspInit+0xdc>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f46:	61bb      	str	r3, [r7, #24]
 8000f48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <HAL_SPI_MspInit+0xdc>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	4a27      	ldr	r2, [pc, #156]	@ (8000fec <HAL_SPI_MspInit+0xdc>)
 8000f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f54:	6153      	str	r3, [r2, #20]
 8000f56:	4b25      	ldr	r3, [pc, #148]	@ (8000fec <HAL_SPI_MspInit+0xdc>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TX_CLK_Pin|TX_MOSI_Pin;
 8000f62:	2328      	movs	r3, #40	@ 0x28
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f72:	2305      	movs	r3, #5
 8000f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481c      	ldr	r0, [pc, #112]	@ (8000ff0 <HAL_SPI_MspInit+0xe0>)
 8000f7e:	f001 f905 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f82:	e02d      	b.n	8000fe0 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff4 <HAL_SPI_MspInit+0xe4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d128      	bne.n	8000fe0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <HAL_SPI_MspInit+0xdc>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a16      	ldr	r2, [pc, #88]	@ (8000fec <HAL_SPI_MspInit+0xdc>)
 8000f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <HAL_SPI_MspInit+0xdc>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <HAL_SPI_MspInit+0xdc>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a10      	ldr	r2, [pc, #64]	@ (8000fec <HAL_SPI_MspInit+0xdc>)
 8000fac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_SPI_MspInit+0xdc>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UI_SCK_Pin|UI_MOSI_Pin;
 8000fbe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fd0:	2306      	movs	r3, #6
 8000fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <HAL_SPI_MspInit+0xe8>)
 8000fdc:	f001 f8d6 	bl	800218c <HAL_GPIO_Init>
}
 8000fe0:	bf00      	nop
 8000fe2:	3730      	adds	r7, #48	@ 0x30
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40013000 	.word	0x40013000
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48000400 	.word	0x48000400
 8000ff4:	40003c00 	.word	0x40003c00
 8000ff8:	48000800 	.word	0x48000800

08000ffc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	@ 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a18      	ldr	r2, [pc, #96]	@ (800107c <HAL_PCD_MspInit+0x80>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d129      	bne.n	8001072 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <HAL_PCD_MspInit+0x84>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <HAL_PCD_MspInit+0x84>)
 8001024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001028:	6153      	str	r3, [r2, #20]
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <HAL_PCD_MspInit+0x84>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001036:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001048:	230e      	movs	r3, #14
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001056:	f001 f899 	bl	800218c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <HAL_PCD_MspInit+0x84>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <HAL_PCD_MspInit+0x84>)
 8001060:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001064:	61d3      	str	r3, [r2, #28]
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_PCD_MspInit+0x84>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	@ 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40005c00 	.word	0x40005c00
 8001080:	40021000 	.word	0x40021000

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <NMI_Handler+0x4>

0800108c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <MemManage_Handler+0x4>

0800109c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <UsageFault_Handler+0x4>

080010ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010da:	f000 f885 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001140 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800110c:	f7ff ffea 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	@ (8001144 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	@ (8001148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	@ (8001154 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001136:	f003 f85f 	bl	80041f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113a:	f7ff f845 	bl	80001c8 <main>

0800113e <LoopForever>:

LoopForever:
    b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001140:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800114c:	08004290 	.word	0x08004290
  ldr r2, =_sbss
 8001150:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001154:	20000624 	.word	0x20000624

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>
	...

0800115c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <HAL_Init+0x28>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <HAL_Init+0x28>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 ffd9 	bl	8002124 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	200f      	movs	r0, #15
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fcac 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 ffe3 	bl	8002172 <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 ffb9 	bl	800213a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	@ (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000004 	.word	0x20000004

080011e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	@ (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008
 800120c:	20000620 	.word	0x20000620

08001210 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;  
 8001214:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000620 	.word	0x20000620

08001228 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b09a      	sub	sp, #104	@ 0x68
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e1c9      	b.n	80015dc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b00      	cmp	r3, #0
 8001258:	d176      	bne.n	8001348 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	2b00      	cmp	r3, #0
 8001260:	d152      	bne.n	8001308 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fc4d 	bl	8000b1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d13b      	bne.n	8001308 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 fd85 	bl	8001da0 <ADC_Disable>
 8001296:	4603      	mov	r3, r0
 8001298:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d12f      	bne.n	8001308 <HAL_ADC_Init+0xe0>
 80012a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d12b      	bne.n	8001308 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012b8:	f023 0302 	bic.w	r3, r3, #2
 80012bc:	f043 0202 	orr.w	r2, r3, #2
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012d2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012e2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012e4:	4b86      	ldr	r3, [pc, #536]	@ (8001500 <HAL_ADC_Init+0x2d8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a86      	ldr	r2, [pc, #536]	@ (8001504 <HAL_ADC_Init+0x2dc>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0c9a      	lsrs	r2, r3, #18
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012fa:	e002      	b.n	8001302 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3b01      	subs	r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f9      	bne.n	80012fc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001324:	d110      	bne.n	8001348 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	f023 0312 	bic.w	r3, r3, #18
 800132e:	f043 0210 	orr.w	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f043 0201 	orr.w	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134c:	f003 0310 	and.w	r3, r3, #16
 8001350:	2b00      	cmp	r3, #0
 8001352:	f040 8136 	bne.w	80015c2 <HAL_ADC_Init+0x39a>
 8001356:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 8131 	bne.w	80015c2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800136a:	2b00      	cmp	r3, #0
 800136c:	f040 8129 	bne.w	80015c2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001378:	f043 0202 	orr.w	r2, r3, #2
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001388:	d004      	beq.n	8001394 <HAL_ADC_Init+0x16c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a5e      	ldr	r2, [pc, #376]	@ (8001508 <HAL_ADC_Init+0x2e0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d101      	bne.n	8001398 <HAL_ADC_Init+0x170>
 8001394:	4b5d      	ldr	r3, [pc, #372]	@ (800150c <HAL_ADC_Init+0x2e4>)
 8001396:	e000      	b.n	800139a <HAL_ADC_Init+0x172>
 8001398:	4b5d      	ldr	r3, [pc, #372]	@ (8001510 <HAL_ADC_Init+0x2e8>)
 800139a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013a4:	d102      	bne.n	80013ac <HAL_ADC_Init+0x184>
 80013a6:	4b58      	ldr	r3, [pc, #352]	@ (8001508 <HAL_ADC_Init+0x2e0>)
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e01a      	b.n	80013e2 <HAL_ADC_Init+0x1ba>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a55      	ldr	r2, [pc, #340]	@ (8001508 <HAL_ADC_Init+0x2e0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d103      	bne.n	80013be <HAL_ADC_Init+0x196>
 80013b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	e011      	b.n	80013e2 <HAL_ADC_Init+0x1ba>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a54      	ldr	r2, [pc, #336]	@ (8001514 <HAL_ADC_Init+0x2ec>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d102      	bne.n	80013ce <HAL_ADC_Init+0x1a6>
 80013c8:	4b53      	ldr	r3, [pc, #332]	@ (8001518 <HAL_ADC_Init+0x2f0>)
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	e009      	b.n	80013e2 <HAL_ADC_Init+0x1ba>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a51      	ldr	r2, [pc, #324]	@ (8001518 <HAL_ADC_Init+0x2f0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d102      	bne.n	80013de <HAL_ADC_Init+0x1b6>
 80013d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001514 <HAL_ADC_Init+0x2ec>)
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	e001      	b.n	80013e2 <HAL_ADC_Init+0x1ba>
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d108      	bne.n	8001402 <HAL_ADC_Init+0x1da>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <HAL_ADC_Init+0x1da>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_ADC_Init+0x1dc>
 8001402:	2300      	movs	r3, #0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d11c      	bne.n	8001442 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001408:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800140a:	2b00      	cmp	r3, #0
 800140c:	d010      	beq.n	8001430 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d107      	bne.n	800142a <HAL_ADC_Init+0x202>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_ADC_Init+0x202>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_ADC_Init+0x204>
 800142a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800142c:	2b00      	cmp	r3, #0
 800142e:	d108      	bne.n	8001442 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	431a      	orrs	r2, r3
 800143e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001440:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7e5b      	ldrb	r3, [r3, #25]
 8001446:	035b      	lsls	r3, r3, #13
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800144c:	2a01      	cmp	r2, #1
 800144e:	d002      	beq.n	8001456 <HAL_ADC_Init+0x22e>
 8001450:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001454:	e000      	b.n	8001458 <HAL_ADC_Init+0x230>
 8001456:	2200      	movs	r2, #0
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	4313      	orrs	r3, r2
 8001466:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001468:	4313      	orrs	r3, r2
 800146a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d11b      	bne.n	80014ae <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7e5b      	ldrb	r3, [r3, #25]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d109      	bne.n	8001492 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001482:	3b01      	subs	r3, #1
 8001484:	045a      	lsls	r2, r3, #17
 8001486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001488:	4313      	orrs	r3, r2
 800148a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800148e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001490:	e00d      	b.n	80014ae <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800149a:	f043 0220 	orr.w	r2, r3, #32
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f043 0201 	orr.w	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d03a      	beq.n	800152c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a16      	ldr	r2, [pc, #88]	@ (8001514 <HAL_ADC_Init+0x2ec>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d004      	beq.n	80014ca <HAL_ADC_Init+0x2a2>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a14      	ldr	r2, [pc, #80]	@ (8001518 <HAL_ADC_Init+0x2f0>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d128      	bne.n	800151c <HAL_ADC_Init+0x2f4>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ce:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80014d2:	d012      	beq.n	80014fa <HAL_ADC_Init+0x2d2>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014dc:	d00a      	beq.n	80014f4 <HAL_ADC_Init+0x2cc>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e2:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80014e6:	d002      	beq.n	80014ee <HAL_ADC_Init+0x2c6>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ec:	e018      	b.n	8001520 <HAL_ADC_Init+0x2f8>
 80014ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f2:	e015      	b.n	8001520 <HAL_ADC_Init+0x2f8>
 80014f4:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80014f8:	e012      	b.n	8001520 <HAL_ADC_Init+0x2f8>
 80014fa:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80014fe:	e00f      	b.n	8001520 <HAL_ADC_Init+0x2f8>
 8001500:	20000000 	.word	0x20000000
 8001504:	431bde83 	.word	0x431bde83
 8001508:	50000100 	.word	0x50000100
 800150c:	50000300 	.word	0x50000300
 8001510:	50000700 	.word	0x50000700
 8001514:	50000400 	.word	0x50000400
 8001518:	50000500 	.word	0x50000500
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001524:	4313      	orrs	r3, r2
 8001526:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001528:	4313      	orrs	r3, r2
 800152a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b00      	cmp	r3, #0
 8001538:	d114      	bne.n	8001564 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001548:	f023 0302 	bic.w	r3, r3, #2
 800154c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7e1b      	ldrb	r3, [r3, #24]
 8001552:	039a      	lsls	r2, r3, #14
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4313      	orrs	r3, r2
 800155e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001560:	4313      	orrs	r3, r2
 8001562:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <HAL_ADC_Init+0x3bc>)
 800156c:	4013      	ands	r3, r2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001574:	430b      	orrs	r3, r1
 8001576:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d10c      	bne.n	800159a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f023 010f 	bic.w	r1, r3, #15
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	631a      	str	r2, [r3, #48]	@ 0x30
 8001598:	e007      	b.n	80015aa <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 020f 	bic.w	r2, r2, #15
 80015a8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	f023 0303 	bic.w	r3, r3, #3
 80015b8:	f043 0201 	orr.w	r2, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	641a      	str	r2, [r3, #64]	@ 0x40
 80015c0:	e00a      	b.n	80015d8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f023 0312 	bic.w	r3, r3, #18
 80015ca:	f043 0210 	orr.w	r2, r3, #16
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80015d2:	2301      	movs	r3, #1
 80015d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80015d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3768      	adds	r7, #104	@ 0x68
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	fff0c007 	.word	0xfff0c007

080015e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b09b      	sub	sp, #108	@ 0x6c
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_ADC_ConfigChannel+0x22>
 8001606:	2302      	movs	r3, #2
 8001608:	e2c8      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x5b4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 82ac 	bne.w	8001b7a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b04      	cmp	r3, #4
 8001628:	d81c      	bhi.n	8001664 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	461a      	mov	r2, r3
 800163e:	231f      	movs	r3, #31
 8001640:	4093      	lsls	r3, r2
 8001642:	43db      	mvns	r3, r3
 8001644:	4019      	ands	r1, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fa00 f203 	lsl.w	r2, r0, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	631a      	str	r2, [r3, #48]	@ 0x30
 8001662:	e063      	b.n	800172c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b09      	cmp	r3, #9
 800166a:	d81e      	bhi.n	80016aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	3b1e      	subs	r3, #30
 8001680:	221f      	movs	r2, #31
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	4019      	ands	r1, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	3b1e      	subs	r3, #30
 800169c:	fa00 f203 	lsl.w	r2, r0, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80016a8:	e040      	b.n	800172c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b0e      	cmp	r3, #14
 80016b0:	d81e      	bhi.n	80016f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	3b3c      	subs	r3, #60	@ 0x3c
 80016c6:	221f      	movs	r2, #31
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4019      	ands	r1, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	3b3c      	subs	r3, #60	@ 0x3c
 80016e2:	fa00 f203 	lsl.w	r2, r0, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80016ee:	e01d      	b.n	800172c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	3b5a      	subs	r3, #90	@ 0x5a
 8001704:	221f      	movs	r2, #31
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	4019      	ands	r1, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	3b5a      	subs	r3, #90	@ 0x5a
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 80e5 	bne.w	8001906 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b09      	cmp	r3, #9
 8001742:	d91c      	bls.n	800177e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6999      	ldr	r1, [r3, #24]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	3b1e      	subs	r3, #30
 8001756:	2207      	movs	r2, #7
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	4019      	ands	r1, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6898      	ldr	r0, [r3, #8]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	3b1e      	subs	r3, #30
 8001770:	fa00 f203 	lsl.w	r2, r0, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	619a      	str	r2, [r3, #24]
 800177c:	e019      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6959      	ldr	r1, [r3, #20]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	2207      	movs	r2, #7
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	4019      	ands	r1, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6898      	ldr	r0, [r3, #8]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	fa00 f203 	lsl.w	r2, r0, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	08db      	lsrs	r3, r3, #3
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d84f      	bhi.n	8001874 <HAL_ADC_ConfigChannel+0x28c>
 80017d4:	a201      	add	r2, pc, #4	@ (adr r2, 80017dc <HAL_ADC_ConfigChannel+0x1f4>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	0800180f 	.word	0x0800180f
 80017e4:	08001831 	.word	0x08001831
 80017e8:	08001853 	.word	0x08001853
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017f2:	4b99      	ldr	r3, [pc, #612]	@ (8001a58 <HAL_ADC_ConfigChannel+0x470>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	0691      	lsls	r1, r2, #26
 80017fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017fe:	430a      	orrs	r2, r1
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800180a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800180c:	e07b      	b.n	8001906 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001814:	4b90      	ldr	r3, [pc, #576]	@ (8001a58 <HAL_ADC_ConfigChannel+0x470>)
 8001816:	4013      	ands	r3, r2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	0691      	lsls	r1, r2, #26
 800181e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001820:	430a      	orrs	r2, r1
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800182c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800182e:	e06a      	b.n	8001906 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001836:	4b88      	ldr	r3, [pc, #544]	@ (8001a58 <HAL_ADC_ConfigChannel+0x470>)
 8001838:	4013      	ands	r3, r2
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	0691      	lsls	r1, r2, #26
 8001840:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001842:	430a      	orrs	r2, r1
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800184e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001850:	e059      	b.n	8001906 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001858:	4b7f      	ldr	r3, [pc, #508]	@ (8001a58 <HAL_ADC_ConfigChannel+0x470>)
 800185a:	4013      	ands	r3, r2
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	0691      	lsls	r1, r2, #26
 8001862:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001864:	430a      	orrs	r2, r1
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001870:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001872:	e048      	b.n	8001906 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	069b      	lsls	r3, r3, #26
 8001884:	429a      	cmp	r2, r3
 8001886:	d107      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001896:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800189e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	069b      	lsls	r3, r3, #26
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d107      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80018ba:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80018c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	069b      	lsls	r3, r3, #26
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d107      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80018de:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	069b      	lsls	r3, r3, #26
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d107      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001902:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001904:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d108      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x33e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x33e>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_ADC_ConfigChannel+0x340>
 8001926:	2300      	movs	r3, #0
 8001928:	2b00      	cmp	r3, #0
 800192a:	f040 8131 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d00f      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43da      	mvns	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	400a      	ands	r2, r1
 8001950:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001954:	e049      	b.n	80019ea <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	409a      	lsls	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b09      	cmp	r3, #9
 8001976:	d91c      	bls.n	80019b2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6999      	ldr	r1, [r3, #24]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	3b1b      	subs	r3, #27
 800198a:	2207      	movs	r2, #7
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	4019      	ands	r1, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	6898      	ldr	r0, [r3, #8]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	3b1b      	subs	r3, #27
 80019a4:	fa00 f203 	lsl.w	r2, r0, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	619a      	str	r2, [r3, #24]
 80019b0:	e01b      	b.n	80019ea <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6959      	ldr	r1, [r3, #20]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	2207      	movs	r2, #7
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	4019      	ands	r1, r3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6898      	ldr	r0, [r3, #8]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	fa00 f203 	lsl.w	r2, r0, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019f2:	d004      	beq.n	80019fe <HAL_ADC_ConfigChannel+0x416>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a18      	ldr	r2, [pc, #96]	@ (8001a5c <HAL_ADC_ConfigChannel+0x474>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x41a>
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <HAL_ADC_ConfigChannel+0x478>)
 8001a00:	e000      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x41c>
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_ADC_ConfigChannel+0x47c>)
 8001a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d105      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d015      	beq.n	8001a46 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a1e:	2b11      	cmp	r3, #17
 8001a20:	d105      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00b      	beq.n	8001a46 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	f040 80ac 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f040 80a5 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a4e:	d10b      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x480>
 8001a50:	4b02      	ldr	r3, [pc, #8]	@ (8001a5c <HAL_ADC_ConfigChannel+0x474>)
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e023      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x4b6>
 8001a56:	bf00      	nop
 8001a58:	83fff000 	.word	0x83fff000
 8001a5c:	50000100 	.word	0x50000100
 8001a60:	50000300 	.word	0x50000300
 8001a64:	50000700 	.word	0x50000700
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ba8 <HAL_ADC_ConfigChannel+0x5c0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d103      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x492>
 8001a72:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e011      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x4b6>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a4b      	ldr	r2, [pc, #300]	@ (8001bac <HAL_ADC_ConfigChannel+0x5c4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d102      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x4a2>
 8001a84:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	e009      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x4b6>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a48      	ldr	r2, [pc, #288]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d102      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x4b2>
 8001a94:	4b45      	ldr	r3, [pc, #276]	@ (8001bac <HAL_ADC_ConfigChannel+0x5c4>)
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e001      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x4b6>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d108      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x4d6>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x4d6>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x4d8>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d150      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ac4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d010      	beq.n	8001aec <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x4fe>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x4fe>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x500>
 8001ae6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d13c      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d11d      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x548>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001afc:	d118      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b08:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb4 <HAL_ADC_ConfigChannel+0x5cc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	0c9a      	lsrs	r2, r3, #18
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b20:	e002      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f9      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b2e:	e02e      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b11      	cmp	r3, #17
 8001b36:	d10b      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x568>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b40:	d106      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b4c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b4e:	e01e      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b12      	cmp	r3, #18
 8001b56:	d11a      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b62:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b64:	e013      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f043 0220 	orr.w	r2, r3, #32
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001b78:	e00a      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f043 0220 	orr.w	r2, r3, #32
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001b8c:	e000      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b8e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	376c      	adds	r7, #108	@ 0x6c
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	50000100 	.word	0x50000100
 8001bac:	50000400 	.word	0x50000400
 8001bb0:	50000500 	.word	0x50000500
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	431bde83 	.word	0x431bde83

08001bbc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b099      	sub	sp, #100	@ 0x64
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bd4:	d102      	bne.n	8001bdc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	e01a      	b.n	8001c12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6a      	ldr	r2, [pc, #424]	@ (8001d8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d103      	bne.n	8001bee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001be6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	e011      	b.n	8001c12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a67      	ldr	r2, [pc, #412]	@ (8001d90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d102      	bne.n	8001bfe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001bf8:	4b66      	ldr	r3, [pc, #408]	@ (8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	e009      	b.n	8001c12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a64      	ldr	r2, [pc, #400]	@ (8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d102      	bne.n	8001c0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001c08:	4b61      	ldr	r3, [pc, #388]	@ (8001d90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	e001      	b.n	8001c12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0b0      	b.n	8001d7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e0a9      	b.n	8001d7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f040 808d 	bne.w	8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 8086 	bne.w	8001d5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c58:	d004      	beq.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001c64:	4b4c      	ldr	r3, [pc, #304]	@ (8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001c66:	e000      	b.n	8001c6a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001c68:	4b4c      	ldr	r3, [pc, #304]	@ (8001d9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d040      	beq.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c86:	035b      	lsls	r3, r3, #13
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c8e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d108      	bne.n	8001cb0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d15c      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001cd2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d14b      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001ce0:	f023 030f 	bic.w	r3, r3, #15
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	6811      	ldr	r1, [r2, #0]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	6892      	ldr	r2, [r2, #8]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cf2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cf4:	e03c      	b.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001cf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d00:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d108      	bne.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001d22:	2300      	movs	r3, #0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d123      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d107      	bne.n	8001d44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001d44:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d112      	bne.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001d4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001d52:	f023 030f 	bic.w	r3, r3, #15
 8001d56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d58:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d5a:	e009      	b.n	8001d70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d60:	f043 0220 	orr.w	r2, r3, #32
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001d6e:	e000      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d70:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3764      	adds	r7, #100	@ 0x64
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	50000100 	.word	0x50000100
 8001d90:	50000400 	.word	0x50000400
 8001d94:	50000500 	.word	0x50000500
 8001d98:	50000300 	.word	0x50000300
 8001d9c:	50000700 	.word	0x50000700

08001da0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <ADC_Disable+0x2c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <ADC_Disable+0x2c>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <ADC_Disable+0x2e>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d047      	beq.n	8001e62 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 030d 	and.w	r3, r3, #13
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d10f      	bne.n	8001e00 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0202 	orr.w	r2, r2, #2
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2203      	movs	r2, #3
 8001df6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001df8:	f7ff fa0a 	bl	8001210 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dfe:	e029      	b.n	8001e54 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	f043 0210 	orr.w	r2, r3, #16
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e023      	b.n	8001e64 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e1c:	f7ff f9f8 	bl	8001210 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d914      	bls.n	8001e54 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d10d      	bne.n	8001e54 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	f043 0210 	orr.w	r2, r3, #16
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e48:	f043 0201 	orr.w	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e007      	b.n	8001e64 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d0dc      	beq.n	8001e1c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_COMP_Init+0x26>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_COMP_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	77fb      	strb	r3, [r7, #31]
 8001e96:	e088      	b.n	8001faa <HAL_COMP_Init+0x13e>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e98:	4b46      	ldr	r3, [pc, #280]	@ (8001fb4 <HAL_COMP_Init+0x148>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a45      	ldr	r2, [pc, #276]	@ (8001fb4 <HAL_COMP_Init+0x148>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b43      	ldr	r3, [pc, #268]	@ (8001fb4 <HAL_COMP_Init+0x148>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7fe ff21 	bl	8000cf8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001ec0:	61bb      	str	r3, [r7, #24]

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f023 0282 	bic.w	r2, r3, #130	@ 0x82
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f023 020c 	bic.w	r2, r3, #12
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	601a      	str	r2, [r3, #0]

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0)) != 0UL) &&
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d016      	beq.n	8001fa2 <HAL_COMP_Init+0x136>
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d113      	bne.n	8001fa2 <HAL_COMP_Init+0x136>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <HAL_COMP_Init+0x14c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	4a0e      	ldr	r2, [pc, #56]	@ (8001fbc <HAL_COMP_Init+0x150>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	099b      	lsrs	r3, r3, #6
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8001f94:	e002      	b.n	8001f9c <HAL_COMP_Init+0x130>
      {
        wait_loop_index--;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_COMP_Init+0x12a>
      }
    }

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  return status;
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	053e2d63 	.word	0x053e2d63

08001fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800200c:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <__NVIC_GetPriorityGrouping+0x18>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	f003 0307 	and.w	r3, r3, #7
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	db0a      	blt.n	800204e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	490c      	ldr	r1, [pc, #48]	@ (8002070 <__NVIC_SetPriority+0x4c>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	0112      	lsls	r2, r2, #4
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	440b      	add	r3, r1
 8002048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800204c:	e00a      	b.n	8002064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4908      	ldr	r1, [pc, #32]	@ (8002074 <__NVIC_SetPriority+0x50>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3b04      	subs	r3, #4
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	440b      	add	r3, r1
 8002062:	761a      	strb	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000e100 	.word	0xe000e100
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	@ 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f1c3 0307 	rsb	r3, r3, #7
 8002092:	2b04      	cmp	r3, #4
 8002094:	bf28      	it	cs
 8002096:	2304      	movcs	r3, #4
 8002098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3304      	adds	r3, #4
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d902      	bls.n	80020a8 <NVIC_EncodePriority+0x30>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3b03      	subs	r3, #3
 80020a6:	e000      	b.n	80020aa <NVIC_EncodePriority+0x32>
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	4313      	orrs	r3, r2
         );
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	@ 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020f0:	d301      	bcc.n	80020f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00f      	b.n	8002116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002120 <SysTick_Config+0x40>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fe:	210f      	movs	r1, #15
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f7ff ff8e 	bl	8002024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <SysTick_Config+0x40>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210e:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <SysTick_Config+0x40>)
 8002110:	2207      	movs	r2, #7
 8002112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff47 	bl	8001fc0 <__NVIC_SetPriorityGrouping>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800214c:	f7ff ff5c 	bl	8002008 <__NVIC_GetPriorityGrouping>
 8002150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7ff ff8e 	bl	8002078 <NVIC_EncodePriority>
 800215c:	4602      	mov	r2, r0
 800215e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff5d 	bl	8002024 <__NVIC_SetPriority>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffb0 	bl	80020e0 <SysTick_Config>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219a:	e154      	b.n	8002446 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8146 	beq.w	8002440 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d005      	beq.n	80021cc <HAL_GPIO_Init+0x40>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d130      	bne.n	800222e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002202:	2201      	movs	r2, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f003 0201 	and.w	r2, r3, #1
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b03      	cmp	r3, #3
 8002238:	d017      	beq.n	800226a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d123      	bne.n	80022be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	6939      	ldr	r1, [r7, #16]
 80022ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0203 	and.w	r2, r3, #3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80a0 	beq.w	8002440 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002300:	4b58      	ldr	r3, [pc, #352]	@ (8002464 <HAL_GPIO_Init+0x2d8>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	4a57      	ldr	r2, [pc, #348]	@ (8002464 <HAL_GPIO_Init+0x2d8>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6193      	str	r3, [r2, #24]
 800230c:	4b55      	ldr	r3, [pc, #340]	@ (8002464 <HAL_GPIO_Init+0x2d8>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002318:	4a53      	ldr	r2, [pc, #332]	@ (8002468 <HAL_GPIO_Init+0x2dc>)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	220f      	movs	r2, #15
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002342:	d019      	beq.n	8002378 <HAL_GPIO_Init+0x1ec>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a49      	ldr	r2, [pc, #292]	@ (800246c <HAL_GPIO_Init+0x2e0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d013      	beq.n	8002374 <HAL_GPIO_Init+0x1e8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a48      	ldr	r2, [pc, #288]	@ (8002470 <HAL_GPIO_Init+0x2e4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00d      	beq.n	8002370 <HAL_GPIO_Init+0x1e4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a47      	ldr	r2, [pc, #284]	@ (8002474 <HAL_GPIO_Init+0x2e8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d007      	beq.n	800236c <HAL_GPIO_Init+0x1e0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a46      	ldr	r2, [pc, #280]	@ (8002478 <HAL_GPIO_Init+0x2ec>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d101      	bne.n	8002368 <HAL_GPIO_Init+0x1dc>
 8002364:	2304      	movs	r3, #4
 8002366:	e008      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002368:	2305      	movs	r3, #5
 800236a:	e006      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 800236c:	2303      	movs	r3, #3
 800236e:	e004      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002370:	2302      	movs	r3, #2
 8002372:	e002      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_GPIO_Init+0x1ee>
 8002378:	2300      	movs	r3, #0
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	f002 0203 	and.w	r2, r2, #3
 8002380:	0092      	lsls	r2, r2, #2
 8002382:	4093      	lsls	r3, r2
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800238a:	4937      	ldr	r1, [pc, #220]	@ (8002468 <HAL_GPIO_Init+0x2dc>)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002398:	4b38      	ldr	r3, [pc, #224]	@ (800247c <HAL_GPIO_Init+0x2f0>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023bc:	4a2f      	ldr	r2, [pc, #188]	@ (800247c <HAL_GPIO_Init+0x2f0>)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c2:	4b2e      	ldr	r3, [pc, #184]	@ (800247c <HAL_GPIO_Init+0x2f0>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023e6:	4a25      	ldr	r2, [pc, #148]	@ (800247c <HAL_GPIO_Init+0x2f0>)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ec:	4b23      	ldr	r3, [pc, #140]	@ (800247c <HAL_GPIO_Init+0x2f0>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002410:	4a1a      	ldr	r2, [pc, #104]	@ (800247c <HAL_GPIO_Init+0x2f0>)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002416:	4b19      	ldr	r3, [pc, #100]	@ (800247c <HAL_GPIO_Init+0x2f0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800243a:	4a10      	ldr	r2, [pc, #64]	@ (800247c <HAL_GPIO_Init+0x2f0>)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	3301      	adds	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	f47f aea3 	bne.w	800219c <HAL_GPIO_Init+0x10>
  }
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	371c      	adds	r7, #28
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40021000 	.word	0x40021000
 8002468:	40010000 	.word	0x40010000
 800246c:	48000400 	.word	0x48000400
 8002470:	48000800 	.word	0x48000800
 8002474:	48000c00 	.word	0x48000c00
 8002478:	48001000 	.word	0x48001000
 800247c:	40010400 	.word	0x40010400

08002480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	807b      	strh	r3, [r7, #2]
 800248c:	4613      	mov	r3, r2
 800248e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002490:	787b      	ldrb	r3, [r7, #1]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002496:	887a      	ldrh	r2, [r7, #2]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e08d      	b.n	80025de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe fcd6 	bl	8000e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2224      	movs	r2, #36	@ 0x24
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002500:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002510:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d107      	bne.n	800252a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	e006      	b.n	8002538 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002536:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d108      	bne.n	8002552 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	e007      	b.n	8002562 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002560:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002574:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002584:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69d9      	ldr	r1, [r3, #28]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1a      	ldr	r2, [r3, #32]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	d138      	bne.n	800266e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002606:	2302      	movs	r3, #2
 8002608:	e032      	b.n	8002670 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2224      	movs	r2, #36	@ 0x24
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002638:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6819      	ldr	r1, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800266e:	2302      	movs	r3, #2
  }
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	d139      	bne.n	8002706 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800269c:	2302      	movs	r3, #2
 800269e:	e033      	b.n	8002708 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2224      	movs	r2, #36	@ 0x24
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0201 	orr.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0b9      	b.n	800289a <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe fc5e 	bl	8000ffc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2203      	movs	r2, #3
 8002744:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f001 fd12 	bl	8004176 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	e03e      	b.n	80027d6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	3311      	adds	r3, #17
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	3310      	adds	r3, #16
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	3313      	adds	r3, #19
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	3320      	adds	r3, #32
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	3324      	adds	r3, #36	@ 0x24
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	3301      	adds	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	791b      	ldrb	r3, [r3, #4]
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d3bb      	bcc.n	8002758 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	e044      	b.n	8002870 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	3301      	adds	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	791b      	ldrb	r3, [r3, #4]
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	429a      	cmp	r2, r3
 8002878:	d3b5      	bcc.n	80027e6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002886:	f001 fc91 	bl	80041ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f001 b823 	b.w	8003910 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 817d 	beq.w	8002bda <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028e0:	4bbc      	ldr	r3, [pc, #752]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d00c      	beq.n	8002906 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028ec:	4bb9      	ldr	r3, [pc, #740]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d15c      	bne.n	80029b2 <HAL_RCC_OscConfig+0x10e>
 80028f8:	4bb6      	ldr	r3, [pc, #728]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002904:	d155      	bne.n	80029b2 <HAL_RCC_OscConfig+0x10e>
 8002906:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800290a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800291a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d102      	bne.n	8002938 <HAL_RCC_OscConfig+0x94>
 8002932:	4ba8      	ldr	r3, [pc, #672]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	e015      	b.n	8002964 <HAL_RCC_OscConfig+0xc0>
 8002938:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800293c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002944:	fa93 f3a3 	rbit	r3, r3
 8002948:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800294c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002950:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002954:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002960:	4b9c      	ldr	r3, [pc, #624]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002968:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800296c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002970:	fa92 f2a2 	rbit	r2, r2
 8002974:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002978:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800297c:	fab2 f282 	clz	r2, r2
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	f042 0220 	orr.w	r2, r2, #32
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	f002 021f 	and.w	r2, r2, #31
 800298c:	2101      	movs	r1, #1
 800298e:	fa01 f202 	lsl.w	r2, r1, r2
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 811f 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x334>
 800299a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 8116 	bne.w	8002bd8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f000 bfaf 	b.w	8003910 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x12e>
 80029c4:	4b83      	ldr	r3, [pc, #524]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a82      	ldr	r2, [pc, #520]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	e036      	b.n	8002a40 <HAL_RCC_OscConfig+0x19c>
 80029d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10c      	bne.n	80029fc <HAL_RCC_OscConfig+0x158>
 80029e2:	4b7c      	ldr	r3, [pc, #496]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a7b      	ldr	r2, [pc, #492]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 80029e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	4b79      	ldr	r3, [pc, #484]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a78      	ldr	r2, [pc, #480]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 80029f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e021      	b.n	8002a40 <HAL_RCC_OscConfig+0x19c>
 80029fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x184>
 8002a0e:	4b71      	ldr	r3, [pc, #452]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a70      	ldr	r2, [pc, #448]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b6e      	ldr	r3, [pc, #440]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6d      	ldr	r2, [pc, #436]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e00b      	b.n	8002a40 <HAL_RCC_OscConfig+0x19c>
 8002a28:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a69      	ldr	r2, [pc, #420]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b67      	ldr	r3, [pc, #412]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a66      	ldr	r2, [pc, #408]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a40:	4b64      	ldr	r3, [pc, #400]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a44:	f023 020f 	bic.w	r2, r3, #15
 8002a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	495f      	ldr	r1, [pc, #380]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d059      	beq.n	8002b1e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fbd1 	bl	8001210 <HAL_GetTick>
 8002a6e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a74:	f7fe fbcc 	bl	8001210 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	@ 0x64
 8002a82:	d902      	bls.n	8002a8a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	f000 bf43 	b.w	8003910 <HAL_RCC_OscConfig+0x106c>
 8002a8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a8e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002a9e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d102      	bne.n	8002abc <HAL_RCC_OscConfig+0x218>
 8002ab6:	4b47      	ldr	r3, [pc, #284]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	e015      	b.n	8002ae8 <HAL_RCC_OscConfig+0x244>
 8002abc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ac0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002ad0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ad4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002ad8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002aec:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002af0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002afc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002b00:	fab2 f282 	clz	r2, r2
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	f042 0220 	orr.w	r2, r2, #32
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f002 021f 	and.w	r2, r2, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f202 	lsl.w	r2, r1, r2
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ab      	beq.n	8002a74 <HAL_RCC_OscConfig+0x1d0>
 8002b1c:	e05d      	b.n	8002bda <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fb77 	bl	8001210 <HAL_GetTick>
 8002b22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b28:	f7fe fb72 	bl	8001210 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b64      	cmp	r3, #100	@ 0x64
 8002b36:	d902      	bls.n	8002b3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	f000 bee9 	b.w	8003910 <HAL_RCC_OscConfig+0x106c>
 8002b3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b42:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002b52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d102      	bne.n	8002b70 <HAL_RCC_OscConfig+0x2cc>
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	e015      	b.n	8002b9c <HAL_RCC_OscConfig+0x2f8>
 8002b70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b74:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002b84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b88:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002b8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002b98:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd4 <HAL_RCC_OscConfig+0x330>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ba0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002ba4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002ba8:	fa92 f2a2 	rbit	r2, r2
 8002bac:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002bb0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002bb4:	fab2 f282 	clz	r2, r2
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	f042 0220 	orr.w	r2, r2, #32
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f002 021f 	and.w	r2, r2, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ab      	bne.n	8002b28 <HAL_RCC_OscConfig+0x284>
 8002bd0:	e003      	b.n	8002bda <HAL_RCC_OscConfig+0x336>
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 817d 	beq.w	8002eea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bf0:	4ba6      	ldr	r3, [pc, #664]	@ (8002e8c <HAL_RCC_OscConfig+0x5e8>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bfc:	4ba3      	ldr	r3, [pc, #652]	@ (8002e8c <HAL_RCC_OscConfig+0x5e8>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d172      	bne.n	8002cee <HAL_RCC_OscConfig+0x44a>
 8002c08:	4ba0      	ldr	r3, [pc, #640]	@ (8002e8c <HAL_RCC_OscConfig+0x5e8>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d16c      	bne.n	8002cee <HAL_RCC_OscConfig+0x44a>
 8002c14:	2302      	movs	r3, #2
 8002c16:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002c26:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <HAL_RCC_OscConfig+0x3a0>
 8002c3e:	4b93      	ldr	r3, [pc, #588]	@ (8002e8c <HAL_RCC_OscConfig+0x5e8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	e013      	b.n	8002c6c <HAL_RCC_OscConfig+0x3c8>
 8002c44:	2302      	movs	r3, #2
 8002c46:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002c56:	2302      	movs	r3, #2
 8002c58:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002c5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002c68:	4b88      	ldr	r3, [pc, #544]	@ (8002e8c <HAL_RCC_OscConfig+0x5e8>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002c72:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002c76:	fa92 f2a2 	rbit	r2, r2
 8002c7a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002c7e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002c82:	fab2 f282 	clz	r2, r2
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f042 0220 	orr.w	r2, r2, #32
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	f002 021f 	and.w	r2, r2, #31
 8002c92:	2101      	movs	r1, #1
 8002c94:	fa01 f202 	lsl.w	r2, r1, r2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x410>
 8002c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f000 be2e 	b.w	8003910 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b75      	ldr	r3, [pc, #468]	@ (8002e8c <HAL_RCC_OscConfig+0x5e8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	21f8      	movs	r1, #248	@ 0xf8
 8002cca:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002cd2:	fa91 f1a1 	rbit	r1, r1
 8002cd6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002cda:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002cde:	fab1 f181 	clz	r1, r1
 8002ce2:	b2c9      	uxtb	r1, r1
 8002ce4:	408b      	lsls	r3, r1
 8002ce6:	4969      	ldr	r1, [pc, #420]	@ (8002e8c <HAL_RCC_OscConfig+0x5e8>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cec:	e0fd      	b.n	8002eea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8088 	beq.w	8002e10 <HAL_RCC_OscConfig+0x56c>
 8002d00:	2301      	movs	r3, #1
 8002d02:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002d12:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	461a      	mov	r2, r3
 8002d28:	2301      	movs	r3, #1
 8002d2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fa70 	bl	8001210 <HAL_GetTick>
 8002d30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d36:	f7fe fa6b 	bl	8001210 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d902      	bls.n	8002d4c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	f000 bde2 	b.w	8003910 <HAL_RCC_OscConfig+0x106c>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002d5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d102      	bne.n	8002d7c <HAL_RCC_OscConfig+0x4d8>
 8002d76:	4b45      	ldr	r3, [pc, #276]	@ (8002e8c <HAL_RCC_OscConfig+0x5e8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	e013      	b.n	8002da4 <HAL_RCC_OscConfig+0x500>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002d8e:	2302      	movs	r3, #2
 8002d90:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002d94:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002da0:	4b3a      	ldr	r3, [pc, #232]	@ (8002e8c <HAL_RCC_OscConfig+0x5e8>)
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	2202      	movs	r2, #2
 8002da6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002daa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002dae:	fa92 f2a2 	rbit	r2, r2
 8002db2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002db6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002dba:	fab2 f282 	clz	r2, r2
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	f042 0220 	orr.w	r2, r2, #32
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f002 021f 	and.w	r2, r2, #31
 8002dca:	2101      	movs	r1, #1
 8002dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0af      	beq.n	8002d36 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002e8c <HAL_RCC_OscConfig+0x5e8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	21f8      	movs	r1, #248	@ 0xf8
 8002dec:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002df4:	fa91 f1a1 	rbit	r1, r1
 8002df8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002dfc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002e00:	fab1 f181 	clz	r1, r1
 8002e04:	b2c9      	uxtb	r1, r1
 8002e06:	408b      	lsls	r3, r1
 8002e08:	4920      	ldr	r1, [pc, #128]	@ (8002e8c <HAL_RCC_OscConfig+0x5e8>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
 8002e0e:	e06c      	b.n	8002eea <HAL_RCC_OscConfig+0x646>
 8002e10:	2301      	movs	r3, #1
 8002e12:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002e22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	461a      	mov	r2, r3
 8002e38:	2300      	movs	r3, #0
 8002e3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe f9e8 	bl	8001210 <HAL_GetTick>
 8002e40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e46:	f7fe f9e3 	bl	8001210 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d902      	bls.n	8002e5c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	f000 bd5a 	b.w	8003910 <HAL_RCC_OscConfig+0x106c>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d104      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5ec>
 8002e86:	4b01      	ldr	r3, [pc, #4]	@ (8002e8c <HAL_RCC_OscConfig+0x5e8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	e015      	b.n	8002eb8 <HAL_RCC_OscConfig+0x614>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	2302      	movs	r3, #2
 8002e92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ea8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002eb4:	4bc8      	ldr	r3, [pc, #800]	@ (80031d8 <HAL_RCC_OscConfig+0x934>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002ebe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002ec2:	fa92 f2a2 	rbit	r2, r2
 8002ec6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002eca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002ece:	fab2 f282 	clz	r2, r2
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	f042 0220 	orr.w	r2, r2, #32
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	f002 021f 	and.w	r2, r2, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1ad      	bne.n	8002e46 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8110 	beq.w	8003120 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d079      	beq.n	8003004 <HAL_RCC_OscConfig+0x760>
 8002f10:	2301      	movs	r3, #1
 8002f12:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4bab      	ldr	r3, [pc, #684]	@ (80031dc <HAL_RCC_OscConfig+0x938>)
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	461a      	mov	r2, r3
 8002f36:	2301      	movs	r3, #1
 8002f38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe f969 	bl	8001210 <HAL_GetTick>
 8002f3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fe f964 	bl	8001210 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d902      	bls.n	8002f5a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	f000 bcdb 	b.w	8003910 <HAL_RCC_OscConfig+0x106c>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f70:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f74:	2202      	movs	r2, #2
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	fa93 f2a3 	rbit	r2, r3
 8002f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f98:	2202      	movs	r2, #2
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fa93 f2a3 	rbit	r2, r3
 8002faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002fb2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb4:	4b88      	ldr	r3, [pc, #544]	@ (80031d8 <HAL_RCC_OscConfig+0x934>)
 8002fb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	6019      	str	r1, [r3, #0]
 8002fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	fa93 f1a3 	rbit	r1, r3
 8002fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002fda:	6019      	str	r1, [r3, #0]
  return result;
 8002fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0a0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x6a0>
 8003002:	e08d      	b.n	8003120 <HAL_RCC_OscConfig+0x87c>
 8003004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003008:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003014:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	fa93 f2a3 	rbit	r2, r3
 800301e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003022:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003026:	601a      	str	r2, [r3, #0]
  return result;
 8003028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003030:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	4b68      	ldr	r3, [pc, #416]	@ (80031dc <HAL_RCC_OscConfig+0x938>)
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	461a      	mov	r2, r3
 8003042:	2300      	movs	r3, #0
 8003044:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003046:	f7fe f8e3 	bl	8001210 <HAL_GetTick>
 800304a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003050:	f7fe f8de 	bl	8001210 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d902      	bls.n	8003066 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	f000 bc55 	b.w	8003910 <HAL_RCC_OscConfig+0x106c>
 8003066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800306e:	2202      	movs	r2, #2
 8003070:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003076:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	fa93 f2a3 	rbit	r2, r3
 8003080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003084:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003092:	2202      	movs	r2, #2
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	fa93 f2a3 	rbit	r2, r3
 80030a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80030b6:	2202      	movs	r2, #2
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	fa93 f2a3 	rbit	r2, r3
 80030c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80030d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d2:	4b41      	ldr	r3, [pc, #260]	@ (80031d8 <HAL_RCC_OscConfig+0x934>)
 80030d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80030de:	2102      	movs	r1, #2
 80030e0:	6019      	str	r1, [r3, #0]
 80030e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	fa93 f1a3 	rbit	r1, r3
 80030f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030f8:	6019      	str	r1, [r3, #0]
  return result;
 80030fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2101      	movs	r1, #1
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d197      	bne.n	8003050 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003124:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 81a1 	beq.w	8003478 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313c:	4b26      	ldr	r3, [pc, #152]	@ (80031d8 <HAL_RCC_OscConfig+0x934>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d116      	bne.n	8003176 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	4b23      	ldr	r3, [pc, #140]	@ (80031d8 <HAL_RCC_OscConfig+0x934>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4a22      	ldr	r2, [pc, #136]	@ (80031d8 <HAL_RCC_OscConfig+0x934>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003152:	61d3      	str	r3, [r2, #28]
 8003154:	4b20      	ldr	r3, [pc, #128]	@ (80031d8 <HAL_RCC_OscConfig+0x934>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800315c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003160:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800316e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b1a      	ldr	r3, [pc, #104]	@ (80031e0 <HAL_RCC_OscConfig+0x93c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11a      	bne.n	80031b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003182:	4b17      	ldr	r3, [pc, #92]	@ (80031e0 <HAL_RCC_OscConfig+0x93c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a16      	ldr	r2, [pc, #88]	@ (80031e0 <HAL_RCC_OscConfig+0x93c>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800318c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318e:	f7fe f83f 	bl	8001210 <HAL_GetTick>
 8003192:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003196:	e009      	b.n	80031ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003198:	f7fe f83a 	bl	8001210 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b64      	cmp	r3, #100	@ 0x64
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e3b1      	b.n	8003910 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	4b0c      	ldr	r3, [pc, #48]	@ (80031e0 <HAL_RCC_OscConfig+0x93c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ef      	beq.n	8003198 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d10d      	bne.n	80031e4 <HAL_RCC_OscConfig+0x940>
 80031c8:	4b03      	ldr	r3, [pc, #12]	@ (80031d8 <HAL_RCC_OscConfig+0x934>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4a02      	ldr	r2, [pc, #8]	@ (80031d8 <HAL_RCC_OscConfig+0x934>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6213      	str	r3, [r2, #32]
 80031d4:	e03c      	b.n	8003250 <HAL_RCC_OscConfig+0x9ac>
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	10908120 	.word	0x10908120
 80031e0:	40007000 	.word	0x40007000
 80031e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10c      	bne.n	800320e <HAL_RCC_OscConfig+0x96a>
 80031f4:	4bc1      	ldr	r3, [pc, #772]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4ac0      	ldr	r2, [pc, #768]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	6213      	str	r3, [r2, #32]
 8003200:	4bbe      	ldr	r3, [pc, #760]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4abd      	ldr	r2, [pc, #756]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 8003206:	f023 0304 	bic.w	r3, r3, #4
 800320a:	6213      	str	r3, [r2, #32]
 800320c:	e020      	b.n	8003250 <HAL_RCC_OscConfig+0x9ac>
 800320e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003212:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x994>
 800321e:	4bb7      	ldr	r3, [pc, #732]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4ab6      	ldr	r2, [pc, #728]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	6213      	str	r3, [r2, #32]
 800322a:	4bb4      	ldr	r3, [pc, #720]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4ab3      	ldr	r2, [pc, #716]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0x9ac>
 8003238:	4bb0      	ldr	r3, [pc, #704]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4aaf      	ldr	r2, [pc, #700]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6213      	str	r3, [r2, #32]
 8003244:	4bad      	ldr	r3, [pc, #692]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4aac      	ldr	r2, [pc, #688]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 800324a:	f023 0304 	bic.w	r3, r3, #4
 800324e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003254:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8081 	beq.w	8003364 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7fd ffd5 	bl	8001210 <HAL_GetTick>
 8003266:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326a:	e00b      	b.n	8003284 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fd ffd0 	bl	8001210 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e345      	b.n	8003910 <HAL_RCC_OscConfig+0x106c>
 8003284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003288:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800328c:	2202      	movs	r2, #2
 800328e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003294:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	fa93 f2a3 	rbit	r2, r3
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80032b0:	2202      	movs	r2, #2
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	fa93 f2a3 	rbit	r2, r3
 80032c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80032ca:	601a      	str	r2, [r3, #0]
  return result;
 80032cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80032d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d102      	bne.n	80032f0 <HAL_RCC_OscConfig+0xa4c>
 80032ea:	4b84      	ldr	r3, [pc, #528]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	e013      	b.n	8003318 <HAL_RCC_OscConfig+0xa74>
 80032f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80032f8:	2202      	movs	r2, #2
 80032fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003300:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	fa93 f2a3 	rbit	r2, r3
 800330a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	4b79      	ldr	r3, [pc, #484]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800331c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003320:	2102      	movs	r1, #2
 8003322:	6011      	str	r1, [r2, #0]
 8003324:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003328:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	fa92 f1a2 	rbit	r1, r2
 8003332:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003336:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800333a:	6011      	str	r1, [r2, #0]
  return result;
 800333c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003340:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	fab2 f282 	clz	r2, r2
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f002 021f 	and.w	r2, r2, #31
 8003356:	2101      	movs	r1, #1
 8003358:	fa01 f202 	lsl.w	r2, r1, r2
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d084      	beq.n	800326c <HAL_RCC_OscConfig+0x9c8>
 8003362:	e07f      	b.n	8003464 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003364:	f7fd ff54 	bl	8001210 <HAL_GetTick>
 8003368:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336c:	e00b      	b.n	8003386 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fd ff4f 	bl	8001210 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e2c4      	b.n	8003910 <HAL_RCC_OscConfig+0x106c>
 8003386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800338e:	2202      	movs	r2, #2
 8003390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003396:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	fa93 f2a3 	rbit	r2, r3
 80033a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80033b2:	2202      	movs	r2, #2
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fa93 f2a3 	rbit	r2, r3
 80033c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80033cc:	601a      	str	r2, [r3, #0]
  return result;
 80033ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80033d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f043 0302 	orr.w	r3, r3, #2
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d102      	bne.n	80033f2 <HAL_RCC_OscConfig+0xb4e>
 80033ec:	4b43      	ldr	r3, [pc, #268]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	e013      	b.n	800341a <HAL_RCC_OscConfig+0xb76>
 80033f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80033fa:	2202      	movs	r2, #2
 80033fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003402:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	fa93 f2a3 	rbit	r2, r3
 800340c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003410:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	4b39      	ldr	r3, [pc, #228]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800341e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003422:	2102      	movs	r1, #2
 8003424:	6011      	str	r1, [r2, #0]
 8003426:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800342a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	fa92 f1a2 	rbit	r1, r2
 8003434:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003438:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800343c:	6011      	str	r1, [r2, #0]
  return result;
 800343e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003442:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	fab2 f282 	clz	r2, r2
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	f002 021f 	and.w	r2, r2, #31
 8003458:	2101      	movs	r1, #1
 800345a:	fa01 f202 	lsl.w	r2, r1, r2
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d184      	bne.n	800336e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003464:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003468:	2b01      	cmp	r3, #1
 800346a:	d105      	bne.n	8003478 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346c:	4b23      	ldr	r3, [pc, #140]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	4a22      	ldr	r2, [pc, #136]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 8003472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003476:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8242 	beq.w	800390e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800348a:	4b1c      	ldr	r3, [pc, #112]	@ (80034fc <HAL_RCC_OscConfig+0xc58>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b08      	cmp	r3, #8
 8003494:	f000 8213 	beq.w	80038be <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	f040 8162 	bne.w	800376e <HAL_RCC_OscConfig+0xeca>
 80034aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ae:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80034b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034bc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	fa93 f2a3 	rbit	r2, r3
 80034c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80034ce:	601a      	str	r2, [r3, #0]
  return result;
 80034d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80034d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	461a      	mov	r2, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fd fe8e 	bl	8001210 <HAL_GetTick>
 80034f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f8:	e00c      	b.n	8003514 <HAL_RCC_OscConfig+0xc70>
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003500:	f7fd fe86 	bl	8001210 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e1fd      	b.n	8003910 <HAL_RCC_OscConfig+0x106c>
 8003514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003518:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800351c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003526:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	fa93 f2a3 	rbit	r2, r3
 8003530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003534:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003538:	601a      	str	r2, [r3, #0]
  return result;
 800353a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003542:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	b2db      	uxtb	r3, r3
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d102      	bne.n	800355e <HAL_RCC_OscConfig+0xcba>
 8003558:	4bb0      	ldr	r3, [pc, #704]	@ (800381c <HAL_RCC_OscConfig+0xf78>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	e027      	b.n	80035ae <HAL_RCC_OscConfig+0xd0a>
 800355e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003562:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003566:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800356a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003570:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	fa93 f2a3 	rbit	r2, r3
 800357a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003588:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800358c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003596:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	fa93 f2a3 	rbit	r2, r3
 80035a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	4b9c      	ldr	r3, [pc, #624]	@ (800381c <HAL_RCC_OscConfig+0xf78>)
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035b2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80035b6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035ba:	6011      	str	r1, [r2, #0]
 80035bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035c0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80035c4:	6812      	ldr	r2, [r2, #0]
 80035c6:	fa92 f1a2 	rbit	r1, r2
 80035ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035ce:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80035d2:	6011      	str	r1, [r2, #0]
  return result;
 80035d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035d8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	fab2 f282 	clz	r2, r2
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	f042 0220 	orr.w	r2, r2, #32
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	f002 021f 	and.w	r2, r2, #31
 80035ee:	2101      	movs	r1, #1
 80035f0:	fa01 f202 	lsl.w	r2, r1, r2
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d182      	bne.n	8003500 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035fa:	4b88      	ldr	r3, [pc, #544]	@ (800381c <HAL_RCC_OscConfig+0xf78>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003606:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800360e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003612:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	430b      	orrs	r3, r1
 800361c:	497f      	ldr	r1, [pc, #508]	@ (800381c <HAL_RCC_OscConfig+0xf78>)
 800361e:	4313      	orrs	r3, r2
 8003620:	604b      	str	r3, [r1, #4]
 8003622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003626:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800362a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800362e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003634:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	fa93 f2a3 	rbit	r2, r3
 800363e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003642:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003646:	601a      	str	r2, [r3, #0]
  return result;
 8003648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003650:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800365c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	461a      	mov	r2, r3
 8003664:	2301      	movs	r3, #1
 8003666:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fd fdd2 	bl	8001210 <HAL_GetTick>
 800366c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003670:	e009      	b.n	8003686 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003672:	f7fd fdcd 	bl	8001210 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e144      	b.n	8003910 <HAL_RCC_OscConfig+0x106c>
 8003686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800368e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003698:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	fa93 f2a3 	rbit	r2, r3
 80036a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80036aa:	601a      	str	r2, [r3, #0]
  return result;
 80036ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80036b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d102      	bne.n	80036d0 <HAL_RCC_OscConfig+0xe2c>
 80036ca:	4b54      	ldr	r3, [pc, #336]	@ (800381c <HAL_RCC_OscConfig+0xf78>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	e027      	b.n	8003720 <HAL_RCC_OscConfig+0xe7c>
 80036d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80036d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fa93 f2a3 	rbit	r2, r3
 80036ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80036fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003708:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f2a3 	rbit	r2, r3
 8003712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003716:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	4b3f      	ldr	r3, [pc, #252]	@ (800381c <HAL_RCC_OscConfig+0xf78>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003724:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003728:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800372c:	6011      	str	r1, [r2, #0]
 800372e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003732:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	fa92 f1a2 	rbit	r1, r2
 800373c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003740:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003744:	6011      	str	r1, [r2, #0]
  return result;
 8003746:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800374a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	fab2 f282 	clz	r2, r2
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	f042 0220 	orr.w	r2, r2, #32
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	f002 021f 	and.w	r2, r2, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f202 	lsl.w	r2, r1, r2
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d082      	beq.n	8003672 <HAL_RCC_OscConfig+0xdce>
 800376c:	e0cf      	b.n	800390e <HAL_RCC_OscConfig+0x106a>
 800376e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003772:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003776:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800377a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003780:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	fa93 f2a3 	rbit	r2, r3
 800378a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003792:	601a      	str	r2, [r3, #0]
  return result;
 8003794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003798:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800379c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037a8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	461a      	mov	r2, r3
 80037b0:	2300      	movs	r3, #0
 80037b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fd fd2c 	bl	8001210 <HAL_GetTick>
 80037b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037bc:	e009      	b.n	80037d2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037be:	f7fd fd27 	bl	8001210 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e09e      	b.n	8003910 <HAL_RCC_OscConfig+0x106c>
 80037d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80037da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	fa93 f2a3 	rbit	r2, r3
 80037ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80037f6:	601a      	str	r2, [r3, #0]
  return result;
 80037f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003800:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d104      	bne.n	8003820 <HAL_RCC_OscConfig+0xf7c>
 8003816:	4b01      	ldr	r3, [pc, #4]	@ (800381c <HAL_RCC_OscConfig+0xf78>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	e029      	b.n	8003870 <HAL_RCC_OscConfig+0xfcc>
 800381c:	40021000 	.word	0x40021000
 8003820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003824:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003828:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800382c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003832:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	fa93 f2a3 	rbit	r2, r3
 800383c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003840:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800384e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003858:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	fa93 f2a3 	rbit	r2, r3
 8003862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003866:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	4b2b      	ldr	r3, [pc, #172]	@ (800391c <HAL_RCC_OscConfig+0x1078>)
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003874:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003878:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800387c:	6011      	str	r1, [r2, #0]
 800387e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003882:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	fa92 f1a2 	rbit	r1, r2
 800388c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003890:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003894:	6011      	str	r1, [r2, #0]
  return result;
 8003896:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800389a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	fab2 f282 	clz	r2, r2
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	f042 0220 	orr.w	r2, r2, #32
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	f002 021f 	and.w	r2, r2, #31
 80038b0:	2101      	movs	r1, #1
 80038b2:	fa01 f202 	lsl.w	r2, r1, r2
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d180      	bne.n	80037be <HAL_RCC_OscConfig+0xf1a>
 80038bc:	e027      	b.n	800390e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e01e      	b.n	8003910 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038d2:	4b12      	ldr	r3, [pc, #72]	@ (800391c <HAL_RCC_OscConfig+0x1078>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80038de:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d10b      	bne.n	800390a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80038f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003906:	429a      	cmp	r2, r3
 8003908:	d001      	beq.n	800390e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40021000 	.word	0x40021000

08003920 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b09e      	sub	sp, #120	@ 0x78
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e162      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003938:	4b90      	ldr	r3, [pc, #576]	@ (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d910      	bls.n	8003968 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b8d      	ldr	r3, [pc, #564]	@ (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f023 0207 	bic.w	r2, r3, #7
 800394e:	498b      	ldr	r1, [pc, #556]	@ (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	4b89      	ldr	r3, [pc, #548]	@ (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e14a      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003974:	4b82      	ldr	r3, [pc, #520]	@ (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	497f      	ldr	r1, [pc, #508]	@ (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80dc 	beq.w	8003b4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d13c      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xf6>
 800399c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039a0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039a4:	fa93 f3a3 	rbit	r3, r3
 80039a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80039aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d102      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xa6>
 80039c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b80 <HAL_RCC_ClockConfig+0x260>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	e00f      	b.n	80039e6 <HAL_RCC_ClockConfig+0xc6>
 80039c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80039d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80039da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039e2:	4b67      	ldr	r3, [pc, #412]	@ (8003b80 <HAL_RCC_ClockConfig+0x260>)
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039ee:	fa92 f2a2 	rbit	r2, r2
 80039f2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80039f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80039f6:	fab2 f282 	clz	r2, r2
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	f042 0220 	orr.w	r2, r2, #32
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	f002 021f 	and.w	r2, r2, #31
 8003a06:	2101      	movs	r1, #1
 8003a08:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d17b      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0f3      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d13c      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x178>
 8003a1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a22:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2e:	fab3 f383 	clz	r3, r3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	095b      	lsrs	r3, r3, #5
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d102      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x128>
 8003a42:	4b4f      	ldr	r3, [pc, #316]	@ (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	e00f      	b.n	8003a68 <HAL_RCC_ClockConfig+0x148>
 8003a48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a50:	fa93 f3a3 	rbit	r3, r3
 8003a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a5e:	fa93 f3a3 	rbit	r3, r3
 8003a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a64:	4b46      	ldr	r3, [pc, #280]	@ (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a6c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003a6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a70:	fa92 f2a2 	rbit	r2, r2
 8003a74:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003a76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a78:	fab2 f282 	clz	r2, r2
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	f042 0220 	orr.w	r2, r2, #32
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	f002 021f 	and.w	r2, r2, #31
 8003a88:	2101      	movs	r1, #1
 8003a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d13a      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0b2      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	fab3 f383 	clz	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d102      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x1a0>
 8003aba:	4b31      	ldr	r3, [pc, #196]	@ (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	e00d      	b.n	8003adc <HAL_RCC_ClockConfig+0x1bc>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8003acc:	2302      	movs	r3, #2
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	4b29      	ldr	r3, [pc, #164]	@ (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	2202      	movs	r2, #2
 8003ade:	61ba      	str	r2, [r7, #24]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	fa92 f2a2 	rbit	r2, r2
 8003ae6:	617a      	str	r2, [r7, #20]
  return result;
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	fab2 f282 	clz	r2, r2
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	f042 0220 	orr.w	r2, r2, #32
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	f002 021f 	and.w	r2, r2, #31
 8003afa:	2101      	movs	r1, #1
 8003afc:	fa01 f202 	lsl.w	r2, r1, r2
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e079      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f023 0203 	bic.w	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	491a      	ldr	r1, [pc, #104]	@ (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b1c:	f7fd fb78 	bl	8001210 <HAL_GetTick>
 8003b20:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b24:	f7fd fb74 	bl	8001210 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e061      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	4b11      	ldr	r3, [pc, #68]	@ (8003b80 <HAL_RCC_ClockConfig+0x260>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 020c 	and.w	r2, r3, #12
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d1eb      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d214      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5a:	4b08      	ldr	r3, [pc, #32]	@ (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 0207 	bic.w	r2, r3, #7
 8003b62:	4906      	ldr	r1, [pc, #24]	@ (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b04      	ldr	r3, [pc, #16]	@ (8003b7c <HAL_RCC_ClockConfig+0x25c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e040      	b.n	8003bfe <HAL_RCC_ClockConfig+0x2de>
 8003b7c:	40022000 	.word	0x40022000
 8003b80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b1d      	ldr	r3, [pc, #116]	@ (8003c08 <HAL_RCC_ClockConfig+0x2e8>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	491a      	ldr	r1, [pc, #104]	@ (8003c08 <HAL_RCC_ClockConfig+0x2e8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bae:	4b16      	ldr	r3, [pc, #88]	@ (8003c08 <HAL_RCC_ClockConfig+0x2e8>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4912      	ldr	r1, [pc, #72]	@ (8003c08 <HAL_RCC_ClockConfig+0x2e8>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bc2:	f000 f829 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c08 <HAL_RCC_ClockConfig+0x2e8>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bd0:	22f0      	movs	r2, #240	@ 0xf0
 8003bd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	fa92 f2a2 	rbit	r2, r2
 8003bda:	60fa      	str	r2, [r7, #12]
  return result;
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	fab2 f282 	clz	r2, r2
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	40d3      	lsrs	r3, r2
 8003be6:	4a09      	ldr	r2, [pc, #36]	@ (8003c0c <HAL_RCC_ClockConfig+0x2ec>)
 8003be8:	5cd3      	ldrb	r3, [r2, r3]
 8003bea:	fa21 f303 	lsr.w	r3, r1, r3
 8003bee:	4a08      	ldr	r2, [pc, #32]	@ (8003c10 <HAL_RCC_ClockConfig+0x2f0>)
 8003bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003bf2:	4b08      	ldr	r3, [pc, #32]	@ (8003c14 <HAL_RCC_ClockConfig+0x2f4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd fac6 	bl	8001188 <HAL_InitTick>
  
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3778      	adds	r7, #120	@ 0x78
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	08004258 	.word	0x08004258
 8003c10:	20000000 	.word	0x20000000
 8003c14:	20000004 	.word	0x20000004

08003c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c32:	4b1e      	ldr	r3, [pc, #120]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x94>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d002      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x30>
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d003      	beq.n	8003c4e <HAL_RCC_GetSysClockFreq+0x36>
 8003c46:	e026      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c48:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c4a:	613b      	str	r3, [r7, #16]
      break;
 8003c4c:	e026      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	0c9b      	lsrs	r3, r3, #18
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	4a17      	ldr	r2, [pc, #92]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c58:	5cd3      	ldrb	r3, [r2, r3]
 8003c5a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003c5c:	4b13      	ldr	r3, [pc, #76]	@ (8003cac <HAL_RCC_GetSysClockFreq+0x94>)
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	4a14      	ldr	r2, [pc, #80]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c66:	5cd3      	ldrb	r3, [r2, r3]
 8003c68:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c74:	4a0e      	ldr	r2, [pc, #56]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e004      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a0c      	ldr	r2, [pc, #48]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	613b      	str	r3, [r7, #16]
      break;
 8003c94:	e002      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c96:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c98:	613b      	str	r3, [r7, #16]
      break;
 8003c9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9c:	693b      	ldr	r3, [r7, #16]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	007a1200 	.word	0x007a1200
 8003cb4:	08004268 	.word	0x08004268
 8003cb8:	08004278 	.word	0x08004278
 8003cbc:	003d0900 	.word	0x003d0900

08003cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b092      	sub	sp, #72	@ 0x48
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80d4 	beq.w	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce4:	4b4e      	ldr	r3, [pc, #312]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10e      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	61d3      	str	r3, [r2, #28]
 8003cfc:	4b48      	ldr	r3, [pc, #288]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0e:	4b45      	ldr	r3, [pc, #276]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d118      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1a:	4b42      	ldr	r3, [pc, #264]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a41      	ldr	r2, [pc, #260]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d26:	f7fd fa73 	bl	8001210 <HAL_GetTick>
 8003d2a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2c:	e008      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2e:	f7fd fa6f 	bl	8001210 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b64      	cmp	r3, #100	@ 0x64
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e169      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	4b38      	ldr	r3, [pc, #224]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d4c:	4b34      	ldr	r3, [pc, #208]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8084 	beq.w	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d07c      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7e:	fa93 f3a3 	rbit	r3, r3
 8003d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4b26      	ldr	r3, [pc, #152]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	461a      	mov	r2, r3
 8003d96:	2301      	movs	r3, #1
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003daa:	fab3 f383 	clz	r3, r3
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	461a      	mov	r2, r3
 8003dba:	2300      	movs	r3, #0
 8003dbc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dbe:	4a18      	ldr	r2, [pc, #96]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d04b      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fd fa1f 	bl	8001210 <HAL_GetTick>
 8003dd2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fd fa1b 	bl	8001210 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e113      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003dec:	2302      	movs	r3, #2
 8003dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df8:	2302      	movs	r3, #2
 8003dfa:	623b      	str	r3, [r7, #32]
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	61fb      	str	r3, [r7, #28]
  return result;
 8003e04:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e06:	fab3 f383 	clz	r3, r3
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	f043 0302 	orr.w	r3, r3, #2
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d108      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e1a:	4b01      	ldr	r3, [pc, #4]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	e00d      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40007000 	.word	0x40007000
 8003e28:	10908100 	.word	0x10908100
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	4b78      	ldr	r3, [pc, #480]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	613a      	str	r2, [r7, #16]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	fa92 f2a2 	rbit	r2, r2
 8003e46:	60fa      	str	r2, [r7, #12]
  return result;
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	fab2 f282 	clz	r2, r2
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	f002 021f 	and.w	r2, r2, #31
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0b7      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e66:	4b6d      	ldr	r3, [pc, #436]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	496a      	ldr	r1, [pc, #424]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d105      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e80:	4b66      	ldr	r3, [pc, #408]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	4a65      	ldr	r2, [pc, #404]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e98:	4b60      	ldr	r3, [pc, #384]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	f023 0203 	bic.w	r2, r3, #3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	495d      	ldr	r1, [pc, #372]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eb6:	4b59      	ldr	r3, [pc, #356]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	4956      	ldr	r1, [pc, #344]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ed4:	4b51      	ldr	r3, [pc, #324]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	494e      	ldr	r1, [pc, #312]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	f023 0210 	bic.w	r2, r3, #16
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	4947      	ldr	r1, [pc, #284]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f10:	4b42      	ldr	r3, [pc, #264]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1c:	493f      	ldr	r1, [pc, #252]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	f023 0220 	bic.w	r2, r3, #32
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	4938      	ldr	r1, [pc, #224]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f4c:	4b33      	ldr	r3, [pc, #204]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	4930      	ldr	r1, [pc, #192]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d008      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	4929      	ldr	r1, [pc, #164]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f88:	4b24      	ldr	r3, [pc, #144]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	4921      	ldr	r1, [pc, #132]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003faa:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb2:	491a      	ldr	r1, [pc, #104]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003fc4:	4b15      	ldr	r3, [pc, #84]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	4912      	ldr	r1, [pc, #72]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d008      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	490b      	ldr	r1, [pc, #44]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004000:	4b06      	ldr	r3, [pc, #24]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004004:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800400c:	4903      	ldr	r1, [pc, #12]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800400e:	4313      	orrs	r3, r2
 8004010:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3748      	adds	r7, #72	@ 0x48
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000

08004020 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e09d      	b.n	800416e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	2b00      	cmp	r3, #0
 8004038:	d108      	bne.n	800404c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004042:	d009      	beq.n	8004058 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	61da      	str	r2, [r3, #28]
 800404a:	e005      	b.n	8004058 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fc ff4c 	bl	8000f10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800408e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004098:	d902      	bls.n	80040a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e002      	b.n	80040a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80040ae:	d007      	beq.n	80040c0 <HAL_SPI_Init+0xa0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040b8:	d002      	beq.n	80040c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004102:	ea42 0103 	orr.w	r1, r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	0c1b      	lsrs	r3, r3, #16
 800411c:	f003 0204 	and.w	r2, r3, #4
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800413c:	ea42 0103 	orr.w	r1, r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800415c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800417e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004182:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	b29b      	uxth	r3, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	b29b      	uxth	r3, r3
 8004194:	4013      	ands	r3, r2
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <memset>:
 80041e8:	4402      	add	r2, r0
 80041ea:	4603      	mov	r3, r0
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d100      	bne.n	80041f2 <memset+0xa>
 80041f0:	4770      	bx	lr
 80041f2:	f803 1b01 	strb.w	r1, [r3], #1
 80041f6:	e7f9      	b.n	80041ec <memset+0x4>

080041f8 <__libc_init_array>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004230 <__libc_init_array+0x38>)
 80041fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004234 <__libc_init_array+0x3c>)
 80041fe:	1b64      	subs	r4, r4, r5
 8004200:	10a4      	asrs	r4, r4, #2
 8004202:	2600      	movs	r6, #0
 8004204:	42a6      	cmp	r6, r4
 8004206:	d109      	bne.n	800421c <__libc_init_array+0x24>
 8004208:	4d0b      	ldr	r5, [pc, #44]	@ (8004238 <__libc_init_array+0x40>)
 800420a:	4c0c      	ldr	r4, [pc, #48]	@ (800423c <__libc_init_array+0x44>)
 800420c:	f000 f818 	bl	8004240 <_init>
 8004210:	1b64      	subs	r4, r4, r5
 8004212:	10a4      	asrs	r4, r4, #2
 8004214:	2600      	movs	r6, #0
 8004216:	42a6      	cmp	r6, r4
 8004218:	d105      	bne.n	8004226 <__libc_init_array+0x2e>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004220:	4798      	blx	r3
 8004222:	3601      	adds	r6, #1
 8004224:	e7ee      	b.n	8004204 <__libc_init_array+0xc>
 8004226:	f855 3b04 	ldr.w	r3, [r5], #4
 800422a:	4798      	blx	r3
 800422c:	3601      	adds	r6, #1
 800422e:	e7f2      	b.n	8004216 <__libc_init_array+0x1e>
 8004230:	08004288 	.word	0x08004288
 8004234:	08004288 	.word	0x08004288
 8004238:	08004288 	.word	0x08004288
 800423c:	0800428c 	.word	0x0800428c

08004240 <_init>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	bf00      	nop
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr

0800424c <_fini>:
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	bf00      	nop
 8004250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004252:	bc08      	pop	{r3}
 8004254:	469e      	mov	lr, r3
 8004256:	4770      	bx	lr
