
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db48  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800dcd8  0800dcd8  0000ecd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e418  0800e418  0001018c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e418  0800e418  0000f418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e420  0800e420  0001018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e420  0800e420  0000f420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e424  0800e424  0000f424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  0800e428  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001018c  2**0
                  CONTENTS
 10 .bss          00002a30  2000018c  2000018c  0001018c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002bbc  20002bbc  0001018c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022031  00000000  00000000  000101bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005444  00000000  00000000  000321ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e88  00000000  00000000  00037638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000176f  00000000  00000000  000394c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002529d  00000000  00000000  0003ac2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026a06  00000000  00000000  0005fecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d348d  00000000  00000000  000868d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00159d5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f20  00000000  00000000  00159da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00161cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dcc0 	.word	0x0800dcc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	0800dcc0 	.word	0x0800dcc0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	@ (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	@ (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	@ 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	200001a8 	.word	0x200001a8
 8000210:	200001fc 	.word	0x200001fc

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b098      	sub	sp, #96	@ 0x60
 8000218:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f001 fd87 	bl	8001d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f87b 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 fc2d 	bl	8000a80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000226:	f000 fbe9 	bl	80009fc <MX_DMA_Init>
  MX_ADC3_Init();
 800022a:	f000 f9a3 	bl	8000574 <MX_ADC3_Init>
  MX_COMP3_Init();
 800022e:	f000 fa71 	bl	8000714 <MX_COMP3_Init>
  MX_COMP4_Init();
 8000232:	f000 fa9d 	bl	8000770 <MX_COMP4_Init>
  MX_COMP5_Init();
 8000236:	f000 fac9 	bl	80007cc <MX_COMP5_Init>
  MX_COMP6_Init();
 800023a:	f000 faf5 	bl	8000828 <MX_COMP6_Init>
  MX_ADC1_Init();
 800023e:	f000 f8cb 	bl	80003d8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000242:	f000 f939 	bl	80004b8 <MX_ADC2_Init>
  MX_ADC4_Init();
 8000246:	f000 fa07 	bl	8000658 <MX_ADC4_Init>
  MX_I2C2_Init();
 800024a:	f000 fb1b 	bl	8000884 <MX_I2C2_Init>
  MX_SPI1_Init();
 800024e:	f000 fb59 	bl	8000904 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000252:	f000 fb95 	bl	8000980 <MX_SPI3_Init>





  ssd1306_Init();
 8000256:	f001 fb69 	bl	800192c <ssd1306_Init>
  ssd1306_Fill(White);
 800025a:	2001      	movs	r0, #1
 800025c:	f001 fbd0 	bl	8001a00 <ssd1306_Fill>
  ssd1306_SetCursor(6, 20);
 8000260:	2114      	movs	r1, #20
 8000262:	2006      	movs	r0, #6
 8000264:	f001 fd18 	bl	8001c98 <ssd1306_SetCursor>
  ssd1306_WriteString(startupmessage, Font_6x8, Black);
 8000268:	4b23      	ldr	r3, [pc, #140]	@ (80002f8 <main+0xe4>)
 800026a:	6818      	ldr	r0, [r3, #0]
 800026c:	4b23      	ldr	r3, [pc, #140]	@ (80002fc <main+0xe8>)
 800026e:	2200      	movs	r2, #0
 8000270:	9200      	str	r2, [sp, #0]
 8000272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000274:	f001 fcea 	bl	8001c4c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000278:	f001 fbda 	bl	8001a30 <ssd1306_UpdateScreen>

  MX_USB_DEVICE_Init();
 800027c:	f00d f82c 	bl	800d2d8 <MX_USB_DEVICE_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of USB_Transmit */
  osThreadDef(USB_Transmit, StartUSB_Transmit, osPriorityNormal, 0, 128);
 8000280:	4b1f      	ldr	r3, [pc, #124]	@ (8000300 <main+0xec>)
 8000282:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000286:	461d      	mov	r5, r3
 8000288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_TransmitHandle = osThreadCreate(osThread(USB_Transmit), NULL);
 8000294:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f00b fde9 	bl	800be72 <osThreadCreate>
 80002a0:	4603      	mov	r3, r0
 80002a2:	4a18      	ldr	r2, [pc, #96]	@ (8000304 <main+0xf0>)
 80002a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_Write */
  osThreadDef(LED_Write, StartLED_Write, osPriorityLow, 0, 128);
 80002a6:	4b18      	ldr	r3, [pc, #96]	@ (8000308 <main+0xf4>)
 80002a8:	f107 0420 	add.w	r4, r7, #32
 80002ac:	461d      	mov	r5, r3
 80002ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_WriteHandle = osThreadCreate(osThread(LED_Write), NULL);
 80002ba:	f107 0320 	add.w	r3, r7, #32
 80002be:	2100      	movs	r1, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	f00b fdd6 	bl	800be72 <osThreadCreate>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a10      	ldr	r2, [pc, #64]	@ (800030c <main+0xf8>)
 80002ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of UI_Read */
  osThreadDef(UI_Read, StartUI_Read, osPriorityLow, 0, 128);
 80002cc:	4b10      	ldr	r3, [pc, #64]	@ (8000310 <main+0xfc>)
 80002ce:	1d3c      	adds	r4, r7, #4
 80002d0:	461d      	mov	r5, r3
 80002d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UI_ReadHandle = osThreadCreate(osThread(UI_Read), NULL);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f00b fdc5 	bl	800be72 <osThreadCreate>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <main+0x100>)
 80002ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002ee:	f00b fdb9 	bl	800be64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f2:	bf00      	nop
 80002f4:	e7fd      	b.n	80002f2 <main+0xde>
 80002f6:	bf00      	nop
 80002f8:	20000004 	.word	0x20000004
 80002fc:	0800e3ec 	.word	0x0800e3ec
 8000300:	0800dd08 	.word	0x0800dd08
 8000304:	20000828 	.word	0x20000828
 8000308:	0800dd30 	.word	0x0800dd30
 800030c:	2000082c 	.word	0x2000082c
 8000310:	0800dd54 	.word	0x0800dd54
 8000314:	20000830 	.word	0x20000830

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b09e      	sub	sp, #120	@ 0x78
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000322:	2228      	movs	r2, #40	@ 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f00d fc9e 	bl	800dc68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	223c      	movs	r2, #60	@ 0x3c
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f00d fc90 	bl	800dc68 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000348:	2303      	movs	r3, #3
 800034a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800034c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000350:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000352:	2301      	movs	r3, #1
 8000354:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035a:	2310      	movs	r3, #16
 800035c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035e:	2302      	movs	r3, #2
 8000360:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000362:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000366:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000368:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800036c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000372:	4618      	mov	r0, r3
 8000374:	f005 fc5c 	bl	8005c30 <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800037e:	f000 fdff 	bl	8000f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	2302      	movs	r3, #2
 8000388:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000392:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000398:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f006 fc54 	bl	8006c4c <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003aa:	f000 fde9 	bl	8000f80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C2;
 80003ae:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <SystemClock_Config+0xbc>)
 80003b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80003b2:	2300      	movs	r3, #0
 80003b4:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003b6:	2300      	movs	r3, #0
 80003b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ba:	463b      	mov	r3, r7
 80003bc:	4618      	mov	r0, r3
 80003be:	f006 fe69 	bl	8007094 <HAL_RCCEx_PeriphCLKConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003c8:	f000 fdda 	bl	8000f80 <Error_Handler>
  }
}
 80003cc:	bf00      	nop
 80003ce:	3778      	adds	r7, #120	@ 0x78
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	00020040 	.word	0x00020040

080003d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	@ 0x28
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003de:	f107 031c 	add.w	r3, r7, #28
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
 80003f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003fa:	4b2e      	ldr	r3, [pc, #184]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 80003fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000400:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000402:	4b2c      	ldr	r3, [pc, #176]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000404:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000408:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040a:	4b2a      	ldr	r3, [pc, #168]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000410:	4b28      	ldr	r3, [pc, #160]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000416:	4b27      	ldr	r3, [pc, #156]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000418:	2200      	movs	r2, #0
 800041a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800041c:	4b25      	ldr	r3, [pc, #148]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 800041e:	2200      	movs	r2, #0
 8000420:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000424:	4b23      	ldr	r3, [pc, #140]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000426:	2200      	movs	r2, #0
 8000428:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800042a:	4b22      	ldr	r3, [pc, #136]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 800042c:	2201      	movs	r2, #1
 800042e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000430:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000436:	4b1f      	ldr	r3, [pc, #124]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000438:	2201      	movs	r2, #1
 800043a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800043c:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 800043e:	2200      	movs	r2, #0
 8000440:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000446:	2204      	movs	r2, #4
 8000448:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 800044c:	2200      	movs	r2, #0
 800044e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000450:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000452:	2200      	movs	r2, #0
 8000454:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000456:	4817      	ldr	r0, [pc, #92]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000458:	f001 fce0 	bl	8001e1c <HAL_ADC_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000462:	f000 fd8d 	bl	8000f80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800046a:	f107 031c 	add.w	r3, r7, #28
 800046e:	4619      	mov	r1, r3
 8000470:	4810      	ldr	r0, [pc, #64]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000472:	f002 fcab 	bl	8002dcc <HAL_ADCEx_MultiModeConfigChannel>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800047c:	f000 fd80 	bl	8000f80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000480:	2305      	movs	r3, #5
 8000482:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000484:	2301      	movs	r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 800049e:	f002 f9ab 	bl	80027f8 <HAL_ADC_ConfigChannel>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80004a8:	f000 fd6a 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3728      	adds	r7, #40	@ 0x28
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	200003fc 	.word	0x200003fc

080004b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
 80004cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80004ce:	4b27      	ldr	r3, [pc, #156]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004d0:	4a27      	ldr	r2, [pc, #156]	@ (8000570 <MX_ADC2_Init+0xb8>)
 80004d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004d4:	4b25      	ldr	r3, [pc, #148]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004dc:	4b23      	ldr	r3, [pc, #140]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004e2:	4b22      	ldr	r3, [pc, #136]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004e8:	4b20      	ldr	r3, [pc, #128]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004ee:	4b1f      	ldr	r3, [pc, #124]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f6:	4b1d      	ldr	r3, [pc, #116]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004fe:	2201      	movs	r2, #1
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000502:	4b1a      	ldr	r3, [pc, #104]	@ (800056c <MX_ADC2_Init+0xb4>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000508:	4b18      	ldr	r3, [pc, #96]	@ (800056c <MX_ADC2_Init+0xb4>)
 800050a:	2201      	movs	r2, #1
 800050c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800050e:	4b17      	ldr	r3, [pc, #92]	@ (800056c <MX_ADC2_Init+0xb4>)
 8000510:	2200      	movs	r2, #0
 8000512:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000516:	4b15      	ldr	r3, [pc, #84]	@ (800056c <MX_ADC2_Init+0xb4>)
 8000518:	2204      	movs	r2, #4
 800051a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800051c:	4b13      	ldr	r3, [pc, #76]	@ (800056c <MX_ADC2_Init+0xb4>)
 800051e:	2200      	movs	r2, #0
 8000520:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000522:	4b12      	ldr	r3, [pc, #72]	@ (800056c <MX_ADC2_Init+0xb4>)
 8000524:	2200      	movs	r2, #0
 8000526:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000528:	4810      	ldr	r0, [pc, #64]	@ (800056c <MX_ADC2_Init+0xb4>)
 800052a:	f001 fc77 	bl	8001e1c <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000534:	f000 fd24 	bl	8000f80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000538:	2303      	movs	r3, #3
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	4619      	mov	r1, r3
 8000554:	4805      	ldr	r0, [pc, #20]	@ (800056c <MX_ADC2_Init+0xb4>)
 8000556:	f002 f94f 	bl	80027f8 <HAL_ADC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000560:	f000 fd0e 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000044c 	.word	0x2000044c
 8000570:	50000100 	.word	0x50000100

08000574 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	@ 0x28
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000596:	4b2e      	ldr	r3, [pc, #184]	@ (8000650 <MX_ADC3_Init+0xdc>)
 8000598:	4a2e      	ldr	r2, [pc, #184]	@ (8000654 <MX_ADC3_Init+0xe0>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800059c:	4b2c      	ldr	r3, [pc, #176]	@ (8000650 <MX_ADC3_Init+0xdc>)
 800059e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005aa:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005b0:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005b6:	4b26      	ldr	r3, [pc, #152]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005be:	4b24      	ldr	r3, [pc, #144]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c4:	4b22      	ldr	r3, [pc, #136]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ca:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005f0:	4817      	ldr	r0, [pc, #92]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005f2:	f001 fc13 	bl	8001e1c <HAL_ADC_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 80005fc:	f000 fcc0 	bl	8000f80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4619      	mov	r1, r3
 800060a:	4811      	ldr	r0, [pc, #68]	@ (8000650 <MX_ADC3_Init+0xdc>)
 800060c:	f002 fbde 	bl	8002dcc <HAL_ADCEx_MultiModeConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 8000616:	f000 fcb3 	bl	8000f80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800061a:	2301      	movs	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061e:	2301      	movs	r3, #1
 8000620:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	@ (8000650 <MX_ADC3_Init+0xdc>)
 8000638:	f002 f8de 	bl	80027f8 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000642:	f000 fc9d 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	@ 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000049c 	.word	0x2000049c
 8000654:	50000400 	.word	0x50000400

08000658 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800066e:	4b27      	ldr	r3, [pc, #156]	@ (800070c <MX_ADC4_Init+0xb4>)
 8000670:	4a27      	ldr	r2, [pc, #156]	@ (8000710 <MX_ADC4_Init+0xb8>)
 8000672:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000674:	4b25      	ldr	r3, [pc, #148]	@ (800070c <MX_ADC4_Init+0xb4>)
 8000676:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800067a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800067c:	4b23      	ldr	r3, [pc, #140]	@ (800070c <MX_ADC4_Init+0xb4>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000682:	4b22      	ldr	r3, [pc, #136]	@ (800070c <MX_ADC4_Init+0xb4>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000688:	4b20      	ldr	r3, [pc, #128]	@ (800070c <MX_ADC4_Init+0xb4>)
 800068a:	2200      	movs	r2, #0
 800068c:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800068e:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <MX_ADC4_Init+0xb4>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000696:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <MX_ADC4_Init+0xb4>)
 8000698:	2200      	movs	r2, #0
 800069a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069c:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <MX_ADC4_Init+0xb4>)
 800069e:	2201      	movs	r2, #1
 80006a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80006a8:	4b18      	ldr	r3, [pc, #96]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80006ae:	4b17      	ldr	r3, [pc, #92]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b15      	ldr	r3, [pc, #84]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80006c8:	4810      	ldr	r0, [pc, #64]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006ca:	f001 fba7 	bl	8001e1c <HAL_ADC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 80006d4:	f000 fc54 	bl	8000f80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006d8:	2303      	movs	r3, #3
 80006da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006dc:	2301      	movs	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006f6:	f002 f87f 	bl	80027f8 <HAL_ADC_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 8000700:	f000 fc3e 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200004ec 	.word	0x200004ec
 8000710:	50000500 	.word	0x50000500

08000714 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_COMP3_Init+0x54>)
 800071a:	4a14      	ldr	r2, [pc, #80]	@ (800076c <MX_COMP3_Init+0x58>)
 800071c:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000720:	2240      	movs	r2, #64	@ 0x40
 8000722:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000724:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_COMP3_Init+0x54>)
 800072c:	227f      	movs	r2, #127	@ 0x7f
 800072e:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000730:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_COMP3_Init+0x54>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  hcomp3.Init.Mode = COMP_MODE_HIGHSPEED;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hcomp3.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_COMP3_Init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000756:	f002 fc91 	bl	800307c <HAL_COMP_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_COMP3_Init+0x50>
  {
    Error_Handler();
 8000760:	f000 fc0e 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000064c 	.word	0x2000064c
 800076c:	40010024 	.word	0x40010024

08000770 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <MX_COMP4_Init+0x54>)
 8000776:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <MX_COMP4_Init+0x58>)
 8000778:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_COMP4_Init+0x54>)
 800077c:	2270      	movs	r2, #112	@ 0x70
 800077e:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_COMP4_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_NONE;
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_COMP4_Init+0x54>)
 8000788:	227f      	movs	r2, #127	@ 0x7f
 800078a:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <MX_COMP4_Init+0x54>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_COMP4_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_COMP4_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_COMP4_Init+0x54>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <MX_COMP4_Init+0x54>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_COMP4_Init+0x54>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_COMP4_Init+0x54>)
 80007b2:	f002 fc63 	bl	800307c <HAL_COMP_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_COMP4_Init+0x50>
  {
    Error_Handler();
 80007bc:	f000 fbe0 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000067c 	.word	0x2000067c
 80007c8:	40010028 	.word	0x40010028

080007cc <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 80007d0:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007d2:	4a14      	ldr	r2, [pc, #80]	@ (8000824 <MX_COMP5_Init+0x58>)
 80007d4:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH2;
 80007d6:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007d8:	2250      	movs	r2, #80	@ 0x50
 80007da:	605a      	str	r2, [r3, #4]
  hcomp5.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 80007dc:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007de:	2280      	movs	r2, #128	@ 0x80
 80007e0:	609a      	str	r2, [r3, #8]
  hcomp5.Init.Output = COMP_OUTPUT_NONE;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007e4:	227f      	movs	r2, #127	@ 0x7f
 80007e6:	60da      	str	r2, [r3, #12]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hcomp5.Init.Mode = COMP_MODE_HIGHSPEED;
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hcomp5.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <MX_COMP5_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_COMP5_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_COMP5_Init+0x54>)
 800080e:	f002 fc35 	bl	800307c <HAL_COMP_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_COMP5_Init+0x50>
  {
    Error_Handler();
 8000818:	f000 fbb2 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200006ac 	.word	0x200006ac
 8000824:	4001002c 	.word	0x4001002c

08000828 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 800082c:	4b13      	ldr	r3, [pc, #76]	@ (800087c <MX_COMP6_Init+0x54>)
 800082e:	4a14      	ldr	r2, [pc, #80]	@ (8000880 <MX_COMP6_Init+0x58>)
 8000830:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_COMP6_Init+0x54>)
 8000834:	2270      	movs	r2, #112	@ 0x70
 8000836:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8000838:	4b10      	ldr	r3, [pc, #64]	@ (800087c <MX_COMP6_Init+0x54>)
 800083a:	2280      	movs	r2, #128	@ 0x80
 800083c:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_NONE;
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_COMP6_Init+0x54>)
 8000840:	227f      	movs	r2, #127	@ 0x7f
 8000842:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000844:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <MX_COMP6_Init+0x54>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_COMP6_Init+0x54>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <MX_COMP6_Init+0x54>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hcomp6.Init.Mode = COMP_MODE_HIGHSPEED;
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_COMP6_Init+0x54>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hcomp6.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	@ (800087c <MX_COMP6_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_COMP6_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	@ (800087c <MX_COMP6_Init+0x54>)
 800086a:	f002 fc07 	bl	800307c <HAL_COMP_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_COMP6_Init+0x50>
  {
    Error_Handler();
 8000874:	f000 fb84 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200006dc 	.word	0x200006dc
 8000880:	40010030 	.word	0x40010030

08000884 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000888:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_I2C2_Init+0x74>)
 800088a:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <MX_I2C2_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 800088e:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <MX_I2C2_Init+0x74>)
 8000890:	4a1b      	ldr	r2, [pc, #108]	@ (8000900 <MX_I2C2_Init+0x7c>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_I2C2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <MX_I2C2_Init+0x74>)
 800089c:	2201      	movs	r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008be:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008c0:	f003 f838 	bl	8003934 <HAL_I2C_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ca:	f000 fb59 	bl	8000f80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4809      	ldr	r0, [pc, #36]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008d2:	f003 fc4d 	bl	8004170 <HAL_I2CEx_ConfigAnalogFilter>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008dc:	f000 fb50 	bl	8000f80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008e4:	f003 fc8f 	bl	8004206 <HAL_I2CEx_ConfigDigitalFilter>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f000 fb47 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000070c 	.word	0x2000070c
 80008fc:	40005800 	.word	0x40005800
 8000900:	00201d2b 	.word	0x00201d2b

08000904 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_SPI1_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <MX_SPI1_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000910:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000914:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800091c:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_SPI1_Init+0x74>)
 800091e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000922:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092a:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_SPI1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000936:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_SPI1_Init+0x74>)
 800093a:	2208      	movs	r2, #8
 800093c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_SPI1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000952:	2207      	movs	r2, #7
 8000954:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_SPI1_Init+0x74>)
 800095e:	2208      	movs	r2, #8
 8000960:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000964:	f006 fd44 	bl	80073f0 <HAL_SPI_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 fb07 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000760 	.word	0x20000760
 800097c:	40013000 	.word	0x40013000

08000980 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <MX_SPI3_Init+0x74>)
 8000986:	4a1c      	ldr	r2, [pc, #112]	@ (80009f8 <MX_SPI3_Init+0x78>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <MX_SPI3_Init+0x74>)
 800098c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000990:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_SPI3_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <MX_SPI3_Init+0x74>)
 800099a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800099e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a6:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009b6:	2220      	movs	r2, #32
 80009b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009ce:	2207      	movs	r2, #7
 80009d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009da:	2208      	movs	r2, #8
 80009dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009e0:	f006 fd06 	bl	80073f0 <HAL_SPI_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 fac9 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200007c4 	.word	0x200007c4
 80009f8:	40003c00 	.word	0x40003c00

080009fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_DMA_Init+0x80>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	4a1d      	ldr	r2, [pc, #116]	@ (8000a7c <MX_DMA_Init+0x80>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6153      	str	r3, [r2, #20]
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_DMA_Init+0x80>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_DMA_Init+0x80>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	4a17      	ldr	r2, [pc, #92]	@ (8000a7c <MX_DMA_Init+0x80>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6153      	str	r3, [r2, #20]
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_DMA_Init+0x80>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2105      	movs	r1, #5
 8000a36:	200b      	movs	r0, #11
 8000a38:	f002 fc82 	bl	8003340 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a3c:	200b      	movs	r0, #11
 8000a3e:	f002 fc9b 	bl	8003378 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2105      	movs	r1, #5
 8000a46:	2038      	movs	r0, #56	@ 0x38
 8000a48:	f002 fc7a 	bl	8003340 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000a4c:	2038      	movs	r0, #56	@ 0x38
 8000a4e:	f002 fc93 	bl	8003378 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2105      	movs	r1, #5
 8000a56:	2039      	movs	r0, #57	@ 0x39
 8000a58:	f002 fc72 	bl	8003340 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000a5c:	2039      	movs	r0, #57	@ 0x39
 8000a5e:	f002 fc8b 	bl	8003378 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2105      	movs	r1, #5
 8000a66:	203c      	movs	r0, #60	@ 0x3c
 8000a68:	f002 fc6a 	bl	8003340 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000a6c:	203c      	movs	r0, #60	@ 0x3c
 8000a6e:	f002 fc83 	bl	8003378 <HAL_NVIC_EnableIRQ>

}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	4b58      	ldr	r3, [pc, #352]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a57      	ldr	r2, [pc, #348]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000a9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b55      	ldr	r3, [pc, #340]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aae:	4b52      	ldr	r3, [pc, #328]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a51      	ldr	r2, [pc, #324]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000ab4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ab8:	6153      	str	r3, [r2, #20]
 8000aba:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b4c      	ldr	r3, [pc, #304]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	4a4b      	ldr	r2, [pc, #300]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad0:	6153      	str	r3, [r2, #20]
 8000ad2:	4b49      	ldr	r3, [pc, #292]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b46      	ldr	r3, [pc, #280]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	4a45      	ldr	r2, [pc, #276]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ae8:	6153      	str	r3, [r2, #20]
 8000aea:	4b43      	ldr	r3, [pc, #268]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_COM_GPIO_Port, INPUT_COM_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2102      	movs	r1, #2
 8000afa:	4840      	ldr	r0, [pc, #256]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000afc:	f002 ff02 	bl	8003904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OFFSET_COM_Pin|TP906_Pin|TP907_Pin|MUX_A_Pin
 8000b00:	2200      	movs	r2, #0
 8000b02:	f640 31f1 	movw	r1, #3057	@ 0xbf1
 8000b06:	483e      	ldr	r0, [pc, #248]	@ (8000c00 <MX_GPIO_Init+0x180>)
 8000b08:	f002 fefc 	bl	8003904 <HAL_GPIO_WritePin>
                          |MUX_B_Pin|MUX_C_Pin|MUX_INHIBIT_Pin|UI_RCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP908_Pin|TX_SLEEP_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b16:	f002 fef5 	bl	8003904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP909_Pin|PUSH_2_Pin|TX_RCLK_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000b20:	4838      	ldr	r0, [pc, #224]	@ (8000c04 <MX_GPIO_Init+0x184>)
 8000b22:	f002 feef 	bl	8003904 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OFFSET_CENTER_Pin OFFSET_RIGHT_Pin OFFSET_UP_Pin SCALE_B_Pin
                           SCALE_A_Pin SCALE_PUSH_Pin */
  GPIO_InitStruct.Pin = OFFSET_CENTER_Pin|OFFSET_RIGHT_Pin|OFFSET_UP_Pin|SCALE_B_Pin
 8000b26:	f24e 030e 	movw	r3, #57358	@ 0xe00e
 8000b2a:	617b      	str	r3, [r7, #20]
                          |SCALE_A_Pin|SCALE_PUSH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4831      	ldr	r0, [pc, #196]	@ (8000c00 <MX_GPIO_Init+0x180>)
 8000b3c:	f002 fd50 	bl	80035e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_COM_Pin */
  GPIO_InitStruct.Pin = INPUT_COM_Pin;
 8000b40:	2302      	movs	r3, #2
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_COM_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4829      	ldr	r0, [pc, #164]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000b58:	f002 fd42 	bl	80035e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OFFSET_COM_Pin TP906_Pin TP907_Pin MUX_A_Pin
                           MUX_B_Pin MUX_C_Pin MUX_INHIBIT_Pin UI_RCLK_Pin */
  GPIO_InitStruct.Pin = OFFSET_COM_Pin|TP906_Pin|TP907_Pin|MUX_A_Pin
 8000b5c:	f640 33f1 	movw	r3, #3057	@ 0xbf1
 8000b60:	617b      	str	r3, [r7, #20]
                          |MUX_B_Pin|MUX_C_Pin|MUX_INHIBIT_Pin|UI_RCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4822      	ldr	r0, [pc, #136]	@ (8000c00 <MX_GPIO_Init+0x180>)
 8000b76:	f002 fd33 	bl	80035e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP908_Pin TX_SLEEP_Pin */
  GPIO_InitStruct.Pin = TP908_Pin|TX_SLEEP_Pin;
 8000b7a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b96:	f002 fd23 	bl	80035e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP909_Pin PUSH_2_Pin TX_RCLK_Pin */
  GPIO_InitStruct.Pin = TP909_Pin|PUSH_2_Pin|TX_RCLK_Pin;
 8000b9a:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <MX_GPIO_Init+0x184>)
 8000bb4:	f002 fd14 	bl	80035e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_1_Pin */
  GPIO_InitStruct.Pin = PUSH_1_Pin;
 8000bb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_1_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd0:	f002 fd06 	bl	80035e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_3_Pin OFFSET_LEFT_Pin OFFSET_DOWN_Pin */
  GPIO_InitStruct.Pin = PUSH_3_Pin|OFFSET_LEFT_Pin|OFFSET_DOWN_Pin;
 8000bd4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4806      	ldr	r0, [pc, #24]	@ (8000c04 <MX_GPIO_Init+0x184>)
 8000bea:	f002 fcf9 	bl	80035e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	@ 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48001400 	.word	0x48001400
 8000c00:	48000800 	.word	0x48000800
 8000c04:	48000400 	.word	0x48000400

08000c08 <StartUSB_Transmit>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUSB_Transmit */
void StartUSB_Transmit(void const * argument)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c10:	f00c fb62 	bl	800d2d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  osDelay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f00b f978 	bl	800bf0a <osDelay>
  for(;;)
  {
	  osDelay(1);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f00b f975 	bl	800bf0a <osDelay>
	  if (CDC_Transmit_FS((uint8_t *) usbdata, strlen(usbdata)) != USBD_OK) {
 8000c20:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <StartUSB_Transmit+0x7c>)
 8000c22:	681c      	ldr	r4, [r3, #0]
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <StartUSB_Transmit+0x7c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fad1 	bl	80001d0 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4619      	mov	r1, r3
 8000c34:	4620      	mov	r0, r4
 8000c36:	f00c fc0d 	bl	800d454 <CDC_Transmit_FS>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d010      	beq.n	8000c62 <StartUSB_Transmit+0x5a>
		  ssd1306_Fill(White);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f000 fedd 	bl	8001a00 <ssd1306_Fill>
	  	  ssd1306_SetCursor(6, 20);
 8000c46:	2114      	movs	r1, #20
 8000c48:	2006      	movs	r0, #6
 8000c4a:	f001 f825 	bl	8001c98 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("COM not established", Font_6x8, Black);
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <StartUSB_Transmit+0x80>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	9200      	str	r2, [sp, #0]
 8000c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c56:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <StartUSB_Transmit+0x84>)
 8000c58:	f000 fff8 	bl	8001c4c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8000c5c:	f000 fee8 	bl	8001a30 <ssd1306_UpdateScreen>
 8000c60:	e7db      	b.n	8000c1a <StartUSB_Transmit+0x12>
	  }
	  else {
		  ssd1306_Fill(White);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f000 fecc 	bl	8001a00 <ssd1306_Fill>
	  	  ssd1306_SetCursor(6, 20);
 8000c68:	2114      	movs	r1, #20
 8000c6a:	2006      	movs	r0, #6
 8000c6c:	f001 f814 	bl	8001c98 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("COM established", Font_6x8, Black);
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <StartUSB_Transmit+0x80>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	9200      	str	r2, [sp, #0]
 8000c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c78:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <StartUSB_Transmit+0x88>)
 8000c7a:	f000 ffe7 	bl	8001c4c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8000c7e:	f000 fed7 	bl	8001a30 <ssd1306_UpdateScreen>
	  osDelay(1);
 8000c82:	e7ca      	b.n	8000c1a <StartUSB_Transmit+0x12>
 8000c84:	20000000 	.word	0x20000000
 8000c88:	0800e3ec 	.word	0x0800e3ec
 8000c8c:	0800dd70 	.word	0x0800dd70
 8000c90:	0800dd84 	.word	0x0800dd84

08000c94 <StartLED_Write>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_Write */
void StartLED_Write(void const * argument)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_Write */
  /* Infinite loop */
  for(;;)
  {
	uint8_t current_leds = led_status & 0b11110000;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <StartLED_Write+0x48>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	f023 030f 	bic.w	r3, r3, #15
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi3, &current_leds, 1, HAL_MAX_DELAY);
 8000ca8:	f107 010f 	add.w	r1, r7, #15
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <StartLED_Write+0x4c>)
 8000cb4:	f006 fc47 	bl	8007546 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, UI_RCLK_Pin, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cbe:	4809      	ldr	r0, [pc, #36]	@ (8000ce4 <StartLED_Write+0x50>)
 8000cc0:	f002 fe20 	bl	8003904 <HAL_GPIO_WritePin>
    osDelay(1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f00b f920 	bl	800bf0a <osDelay>
	HAL_GPIO_WritePin(GPIOC, UI_RCLK_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <StartLED_Write+0x50>)
 8000cd2:	f002 fe17 	bl	8003904 <HAL_GPIO_WritePin>
  {
 8000cd6:	bf00      	nop
 8000cd8:	e7e0      	b.n	8000c9c <StartLED_Write+0x8>
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	200007c4 	.word	0x200007c4
 8000ce4:	48000800 	.word	0x48000800

08000ce8 <StartUI_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUI_Read */
void StartUI_Read(void const * argument)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUI_Read */
  HAL_GPIO_WritePin(GPIOC, OFFSET_COM_Pin, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	487f      	ldr	r0, [pc, #508]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000cf6:	f002 fe05 	bl	8003904 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, INPUT_COM_Pin, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	487e      	ldr	r0, [pc, #504]	@ (8000ef8 <StartUI_Read+0x210>)
 8000d00:	f002 fe00 	bl	8003904 <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
      /* --- Rotary Encoder 1 --- */
      HAL_GPIO_WritePin(GPIOC, OFFSET_COM_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2101      	movs	r1, #1
 8000d08:	487a      	ldr	r0, [pc, #488]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000d0a:	f002 fdfb 	bl	8003904 <HAL_GPIO_WritePin>
      osDelay(1);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f00b f8fb 	bl	800bf0a <osDelay>
      a1 = HAL_GPIO_ReadPin(GPIOC, SCALE_A_Pin);
 8000d14:	2104      	movs	r1, #4
 8000d16:	4877      	ldr	r0, [pc, #476]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000d18:	f002 fddc 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b76      	ldr	r3, [pc, #472]	@ (8000efc <StartUI_Read+0x214>)
 8000d22:	701a      	strb	r2, [r3, #0]
      b1 = HAL_GPIO_ReadPin(GPIOC, SCALE_B_Pin);
 8000d24:	2102      	movs	r1, #2
 8000d26:	4873      	ldr	r0, [pc, #460]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000d28:	f002 fdd4 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b73      	ldr	r3, [pc, #460]	@ (8000f00 <StartUI_Read+0x218>)
 8000d32:	701a      	strb	r2, [r3, #0]
      encoder1_button_state = HAL_GPIO_ReadPin(GPIOC, SCALE_PUSH_Pin);
 8000d34:	2108      	movs	r1, #8
 8000d36:	486f      	ldr	r0, [pc, #444]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000d38:	f002 fdcc 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b70      	ldr	r3, [pc, #448]	@ (8000f04 <StartUI_Read+0x21c>)
 8000d42:	701a      	strb	r2, [r3, #0]

      if(a1 != last_a_encoder1) {
 8000d44:	4b6d      	ldr	r3, [pc, #436]	@ (8000efc <StartUI_Read+0x214>)
 8000d46:	781a      	ldrb	r2, [r3, #0]
 8000d48:	4b6f      	ldr	r3, [pc, #444]	@ (8000f08 <StartUI_Read+0x220>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d00e      	beq.n	8000d6e <StartUI_Read+0x86>
        encoder1_count += (b1 != a1) ? 1 : -1;
 8000d50:	4b6b      	ldr	r3, [pc, #428]	@ (8000f00 <StartUI_Read+0x218>)
 8000d52:	781a      	ldrb	r2, [r3, #0]
 8000d54:	4b69      	ldr	r3, [pc, #420]	@ (8000efc <StartUI_Read+0x214>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d001      	beq.n	8000d60 <StartUI_Read+0x78>
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	e001      	b.n	8000d64 <StartUI_Read+0x7c>
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d64:	4b69      	ldr	r3, [pc, #420]	@ (8000f0c <StartUI_Read+0x224>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a68      	ldr	r2, [pc, #416]	@ (8000f0c <StartUI_Read+0x224>)
 8000d6c:	6013      	str	r3, [r2, #0]
      }
      last_a_encoder1 = a1;
 8000d6e:	4b63      	ldr	r3, [pc, #396]	@ (8000efc <StartUI_Read+0x214>)
 8000d70:	781a      	ldrb	r2, [r3, #0]
 8000d72:	4b65      	ldr	r3, [pc, #404]	@ (8000f08 <StartUI_Read+0x220>)
 8000d74:	701a      	strb	r2, [r3, #0]

      /* --- D-Pad 2 --- */
      dpad2_up = HAL_GPIO_ReadPin(GPIOC, OFFSET_UP_Pin);
 8000d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d7a:	485e      	ldr	r0, [pc, #376]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000d7c:	f002 fdaa 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b62      	ldr	r3, [pc, #392]	@ (8000f10 <StartUI_Read+0x228>)
 8000d86:	701a      	strb	r2, [r3, #0]
      dpad2_down = HAL_GPIO_ReadPin(GPIOB, OFFSET_DOWN_Pin);
 8000d88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8c:	4861      	ldr	r0, [pc, #388]	@ (8000f14 <StartUI_Read+0x22c>)
 8000d8e:	f002 fda1 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b60      	ldr	r3, [pc, #384]	@ (8000f18 <StartUI_Read+0x230>)
 8000d98:	701a      	strb	r2, [r3, #0]
      dpad2_left = HAL_GPIO_ReadPin(GPIOB, OFFSET_LEFT_Pin);
 8000d9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d9e:	485d      	ldr	r0, [pc, #372]	@ (8000f14 <StartUI_Read+0x22c>)
 8000da0:	f002 fd98 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b5c      	ldr	r3, [pc, #368]	@ (8000f1c <StartUI_Read+0x234>)
 8000daa:	701a      	strb	r2, [r3, #0]
      dpad2_right = HAL_GPIO_ReadPin(GPIOC, OFFSET_RIGHT_Pin);
 8000dac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000db0:	4850      	ldr	r0, [pc, #320]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000db2:	f002 fd8f 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b59      	ldr	r3, [pc, #356]	@ (8000f20 <StartUI_Read+0x238>)
 8000dbc:	701a      	strb	r2, [r3, #0]
      dpad2_button = HAL_GPIO_ReadPin(GPIOC, OFFSET_CENTER_Pin);
 8000dbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dc2:	484c      	ldr	r0, [pc, #304]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000dc4:	f002 fd86 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b55      	ldr	r3, [pc, #340]	@ (8000f24 <StartUI_Read+0x23c>)
 8000dce:	701a      	strb	r2, [r3, #0]

      HAL_GPIO_WritePin(GPIOC, OFFSET_COM_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4847      	ldr	r0, [pc, #284]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000dd6:	f002 fd95 	bl	8003904 <HAL_GPIO_WritePin>
      osDelay(1);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f00b f895 	bl	800bf0a <osDelay>

      /* --- Rotary Encoder 2 --- */
      HAL_GPIO_WritePin(GPIOF, INPUT_COM_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2102      	movs	r1, #2
 8000de4:	4844      	ldr	r0, [pc, #272]	@ (8000ef8 <StartUI_Read+0x210>)
 8000de6:	f002 fd8d 	bl	8003904 <HAL_GPIO_WritePin>
      osDelay(1);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f00b f88d 	bl	800bf0a <osDelay>
      a2 = HAL_GPIO_ReadPin(GPIOC, SCALE_A_Pin);
 8000df0:	2104      	movs	r1, #4
 8000df2:	4840      	ldr	r0, [pc, #256]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000df4:	f002 fd6e 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8000f28 <StartUI_Read+0x240>)
 8000dfe:	701a      	strb	r2, [r3, #0]
      b2 = HAL_GPIO_ReadPin(GPIOC, SCALE_B_Pin);
 8000e00:	2102      	movs	r1, #2
 8000e02:	483c      	ldr	r0, [pc, #240]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000e04:	f002 fd66 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b47      	ldr	r3, [pc, #284]	@ (8000f2c <StartUI_Read+0x244>)
 8000e0e:	701a      	strb	r2, [r3, #0]
      encoder2_button_state = HAL_GPIO_ReadPin(GPIOC, SCALE_PUSH_Pin);
 8000e10:	2108      	movs	r1, #8
 8000e12:	4838      	ldr	r0, [pc, #224]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000e14:	f002 fd5e 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b44      	ldr	r3, [pc, #272]	@ (8000f30 <StartUI_Read+0x248>)
 8000e1e:	701a      	strb	r2, [r3, #0]

      if(a2 != last_a_encoder2) {
 8000e20:	4b41      	ldr	r3, [pc, #260]	@ (8000f28 <StartUI_Read+0x240>)
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	4b43      	ldr	r3, [pc, #268]	@ (8000f34 <StartUI_Read+0x24c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d00e      	beq.n	8000e4a <StartUI_Read+0x162>
        encoder2_count += (b2 != a2) ? 1 : -1;
 8000e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f2c <StartUI_Read+0x244>)
 8000e2e:	781a      	ldrb	r2, [r3, #0]
 8000e30:	4b3d      	ldr	r3, [pc, #244]	@ (8000f28 <StartUI_Read+0x240>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d001      	beq.n	8000e3c <StartUI_Read+0x154>
 8000e38:	2201      	movs	r2, #1
 8000e3a:	e001      	b.n	8000e40 <StartUI_Read+0x158>
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e40:	4b3d      	ldr	r3, [pc, #244]	@ (8000f38 <StartUI_Read+0x250>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a3c      	ldr	r2, [pc, #240]	@ (8000f38 <StartUI_Read+0x250>)
 8000e48:	6013      	str	r3, [r2, #0]
      }
      last_a_encoder2 = a2;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	@ (8000f28 <StartUI_Read+0x240>)
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	4b39      	ldr	r3, [pc, #228]	@ (8000f34 <StartUI_Read+0x24c>)
 8000e50:	701a      	strb	r2, [r3, #0]

      /* --- D-Pad 1 --- */
      dpad1_up = HAL_GPIO_ReadPin(GPIOC, OFFSET_UP_Pin);
 8000e52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e56:	4827      	ldr	r0, [pc, #156]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000e58:	f002 fd3c 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b36      	ldr	r3, [pc, #216]	@ (8000f3c <StartUI_Read+0x254>)
 8000e62:	701a      	strb	r2, [r3, #0]
      dpad1_down = HAL_GPIO_ReadPin(GPIOB, OFFSET_DOWN_Pin);
 8000e64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e68:	482a      	ldr	r0, [pc, #168]	@ (8000f14 <StartUI_Read+0x22c>)
 8000e6a:	f002 fd33 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b33      	ldr	r3, [pc, #204]	@ (8000f40 <StartUI_Read+0x258>)
 8000e74:	701a      	strb	r2, [r3, #0]
      dpad1_left = HAL_GPIO_ReadPin(GPIOB, OFFSET_LEFT_Pin);
 8000e76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e7a:	4826      	ldr	r0, [pc, #152]	@ (8000f14 <StartUI_Read+0x22c>)
 8000e7c:	f002 fd2a 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b2f      	ldr	r3, [pc, #188]	@ (8000f44 <StartUI_Read+0x25c>)
 8000e86:	701a      	strb	r2, [r3, #0]
      dpad1_right = HAL_GPIO_ReadPin(GPIOC, OFFSET_RIGHT_Pin);
 8000e88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e8c:	4819      	ldr	r0, [pc, #100]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000e8e:	f002 fd21 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b2c      	ldr	r3, [pc, #176]	@ (8000f48 <StartUI_Read+0x260>)
 8000e98:	701a      	strb	r2, [r3, #0]
      dpad1_button = HAL_GPIO_ReadPin(GPIOC, OFFSET_CENTER_Pin);
 8000e9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e9e:	4815      	ldr	r0, [pc, #84]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000ea0:	f002 fd18 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b28      	ldr	r3, [pc, #160]	@ (8000f4c <StartUI_Read+0x264>)
 8000eaa:	701a      	strb	r2, [r3, #0]

      HAL_GPIO_WritePin(GPIOF, INPUT_COM_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <StartUI_Read+0x210>)
 8000eb2:	f002 fd27 	bl	8003904 <HAL_GPIO_WritePin>
      osDelay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f00b f827 	bl	800bf0a <osDelay>

      /* --- Standalone Buttons --- */
      button1_state = HAL_GPIO_ReadPin(GPIOA, PUSH_1_Pin);
 8000ebc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec4:	f002 fd06 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <StartUI_Read+0x268>)
 8000ece:	701a      	strb	r2, [r3, #0]
      button2_state = HAL_GPIO_ReadPin(GPIOB, PUSH_2_Pin);
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	4810      	ldr	r0, [pc, #64]	@ (8000f14 <StartUI_Read+0x22c>)
 8000ed4:	f002 fcfe 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <StartUI_Read+0x26c>)
 8000ede:	701a      	strb	r2, [r3, #0]
      button3_state = HAL_GPIO_ReadPin(GPIOB, PUSH_3_Pin);
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <StartUI_Read+0x22c>)
 8000ee4:	f002 fcf6 	bl	80038d4 <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <StartUI_Read+0x270>)
 8000eee:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOC, OFFSET_COM_Pin, GPIO_PIN_RESET);
 8000ef0:	e708      	b.n	8000d04 <StartUI_Read+0x1c>
 8000ef2:	bf00      	nop
 8000ef4:	48000800 	.word	0x48000800
 8000ef8:	48001400 	.word	0x48001400
 8000efc:	2000084d 	.word	0x2000084d
 8000f00:	2000084f 	.word	0x2000084f
 8000f04:	20000841 	.word	0x20000841
 8000f08:	2000083c 	.word	0x2000083c
 8000f0c:	20000834 	.word	0x20000834
 8000f10:	20000848 	.word	0x20000848
 8000f14:	48000400 	.word	0x48000400
 8000f18:	20000849 	.word	0x20000849
 8000f1c:	2000084a 	.word	0x2000084a
 8000f20:	2000084b 	.word	0x2000084b
 8000f24:	2000084c 	.word	0x2000084c
 8000f28:	2000084e 	.word	0x2000084e
 8000f2c:	20000850 	.word	0x20000850
 8000f30:	20000842 	.word	0x20000842
 8000f34:	2000083d 	.word	0x2000083d
 8000f38:	20000838 	.word	0x20000838
 8000f3c:	20000843 	.word	0x20000843
 8000f40:	20000844 	.word	0x20000844
 8000f44:	20000845 	.word	0x20000845
 8000f48:	20000846 	.word	0x20000846
 8000f4c:	20000847 	.word	0x20000847
 8000f50:	2000083e 	.word	0x2000083e
 8000f54:	2000083f 	.word	0x2000083f
 8000f58:	20000840 	.word	0x20000840

08000f5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d101      	bne.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f6e:	f000 fef3 	bl	8001d58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40012c00 	.word	0x40012c00

08000f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <Error_Handler+0x8>

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b11      	ldr	r3, [pc, #68]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6193      	str	r3, [r2, #24]
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb4:	61d3      	str	r3, [r2, #28]
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <HAL_MspInit+0x4c>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	f06f 0001 	mvn.w	r0, #1
 8000fca:	f002 f9b9 	bl	8003340 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b090      	sub	sp, #64	@ 0x40
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ffc:	d15e      	bne.n	80010bc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ffe:	4b94      	ldr	r3, [pc, #592]	@ (8001250 <HAL_ADC_MspInit+0x274>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	4a92      	ldr	r2, [pc, #584]	@ (8001250 <HAL_ADC_MspInit+0x274>)
 8001006:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001008:	4b91      	ldr	r3, [pc, #580]	@ (8001250 <HAL_ADC_MspInit+0x274>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d10b      	bne.n	8001028 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001010:	4b90      	ldr	r3, [pc, #576]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	4a8f      	ldr	r2, [pc, #572]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101a:	6153      	str	r3, [r2, #20]
 800101c:	4b8d      	ldr	r3, [pc, #564]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001028:	4b8a      	ldr	r3, [pc, #552]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	4a89      	ldr	r2, [pc, #548]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 800102e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001032:	6153      	str	r3, [r2, #20]
 8001034:	4b87      	ldr	r3, [pc, #540]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = RX1_ADC_Pin;
 8001040:	2310      	movs	r3, #16
 8001042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001044:	2303      	movs	r3, #3
 8001046:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX1_ADC_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001050:	4619      	mov	r1, r3
 8001052:	4881      	ldr	r0, [pc, #516]	@ (8001258 <HAL_ADC_MspInit+0x27c>)
 8001054:	f002 fac4 	bl	80035e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001058:	4b80      	ldr	r3, [pc, #512]	@ (800125c <HAL_ADC_MspInit+0x280>)
 800105a:	4a81      	ldr	r2, [pc, #516]	@ (8001260 <HAL_ADC_MspInit+0x284>)
 800105c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800105e:	4b7f      	ldr	r3, [pc, #508]	@ (800125c <HAL_ADC_MspInit+0x280>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001064:	4b7d      	ldr	r3, [pc, #500]	@ (800125c <HAL_ADC_MspInit+0x280>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800106a:	4b7c      	ldr	r3, [pc, #496]	@ (800125c <HAL_ADC_MspInit+0x280>)
 800106c:	2280      	movs	r2, #128	@ 0x80
 800106e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001070:	4b7a      	ldr	r3, [pc, #488]	@ (800125c <HAL_ADC_MspInit+0x280>)
 8001072:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001076:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001078:	4b78      	ldr	r3, [pc, #480]	@ (800125c <HAL_ADC_MspInit+0x280>)
 800107a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800107e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001080:	4b76      	ldr	r3, [pc, #472]	@ (800125c <HAL_ADC_MspInit+0x280>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001086:	4b75      	ldr	r3, [pc, #468]	@ (800125c <HAL_ADC_MspInit+0x280>)
 8001088:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800108c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800108e:	4873      	ldr	r0, [pc, #460]	@ (800125c <HAL_ADC_MspInit+0x280>)
 8001090:	f002 f980 	bl	8003394 <HAL_DMA_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800109a:	f7ff ff71 	bl	8000f80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a6e      	ldr	r2, [pc, #440]	@ (800125c <HAL_ADC_MspInit+0x280>)
 80010a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80010a4:	4a6d      	ldr	r2, [pc, #436]	@ (800125c <HAL_ADC_MspInit+0x280>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2105      	movs	r1, #5
 80010ae:	2012      	movs	r0, #18
 80010b0:	f002 f946 	bl	8003340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010b4:	2012      	movs	r0, #18
 80010b6:	f002 f95f 	bl	8003378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80010ba:	e147      	b.n	800134c <HAL_ADC_MspInit+0x370>
  else if(hadc->Instance==ADC2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a68      	ldr	r2, [pc, #416]	@ (8001264 <HAL_ADC_MspInit+0x288>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d15f      	bne.n	8001186 <HAL_ADC_MspInit+0x1aa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80010c6:	4b62      	ldr	r3, [pc, #392]	@ (8001250 <HAL_ADC_MspInit+0x274>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4a60      	ldr	r2, [pc, #384]	@ (8001250 <HAL_ADC_MspInit+0x274>)
 80010ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80010d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001250 <HAL_ADC_MspInit+0x274>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d10b      	bne.n	80010f0 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 80010de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e2:	6153      	str	r3, [r2, #20]
 80010e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b58      	ldr	r3, [pc, #352]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	4a57      	ldr	r2, [pc, #348]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 80010f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010fa:	6153      	str	r3, [r2, #20]
 80010fc:	4b55      	ldr	r3, [pc, #340]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = RX3_ADC_Pin;
 8001108:	2340      	movs	r3, #64	@ 0x40
 800110a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110c:	2303      	movs	r3, #3
 800110e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX3_ADC_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001118:	4619      	mov	r1, r3
 800111a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111e:	f002 fa5f 	bl	80035e0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001122:	4b51      	ldr	r3, [pc, #324]	@ (8001268 <HAL_ADC_MspInit+0x28c>)
 8001124:	4a51      	ldr	r2, [pc, #324]	@ (800126c <HAL_ADC_MspInit+0x290>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001128:	4b4f      	ldr	r3, [pc, #316]	@ (8001268 <HAL_ADC_MspInit+0x28c>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800112e:	4b4e      	ldr	r3, [pc, #312]	@ (8001268 <HAL_ADC_MspInit+0x28c>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001134:	4b4c      	ldr	r3, [pc, #304]	@ (8001268 <HAL_ADC_MspInit+0x28c>)
 8001136:	2280      	movs	r2, #128	@ 0x80
 8001138:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113a:	4b4b      	ldr	r3, [pc, #300]	@ (8001268 <HAL_ADC_MspInit+0x28c>)
 800113c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001140:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001142:	4b49      	ldr	r3, [pc, #292]	@ (8001268 <HAL_ADC_MspInit+0x28c>)
 8001144:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001148:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800114a:	4b47      	ldr	r3, [pc, #284]	@ (8001268 <HAL_ADC_MspInit+0x28c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001150:	4b45      	ldr	r3, [pc, #276]	@ (8001268 <HAL_ADC_MspInit+0x28c>)
 8001152:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001156:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001158:	4843      	ldr	r0, [pc, #268]	@ (8001268 <HAL_ADC_MspInit+0x28c>)
 800115a:	f002 f91b 	bl	8003394 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 8001164:	f7ff ff0c 	bl	8000f80 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a3f      	ldr	r2, [pc, #252]	@ (8001268 <HAL_ADC_MspInit+0x28c>)
 800116c:	639a      	str	r2, [r3, #56]	@ 0x38
 800116e:	4a3e      	ldr	r2, [pc, #248]	@ (8001268 <HAL_ADC_MspInit+0x28c>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2105      	movs	r1, #5
 8001178:	2012      	movs	r0, #18
 800117a:	f002 f8e1 	bl	8003340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800117e:	2012      	movs	r0, #18
 8001180:	f002 f8fa 	bl	8003378 <HAL_NVIC_EnableIRQ>
}
 8001184:	e0e2      	b.n	800134c <HAL_ADC_MspInit+0x370>
  else if(hadc->Instance==ADC3)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a39      	ldr	r2, [pc, #228]	@ (8001270 <HAL_ADC_MspInit+0x294>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d179      	bne.n	8001284 <HAL_ADC_MspInit+0x2a8>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8001190:	4b38      	ldr	r3, [pc, #224]	@ (8001274 <HAL_ADC_MspInit+0x298>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	4a37      	ldr	r2, [pc, #220]	@ (8001274 <HAL_ADC_MspInit+0x298>)
 8001198:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 800119a:	4b36      	ldr	r3, [pc, #216]	@ (8001274 <HAL_ADC_MspInit+0x298>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d10b      	bne.n	80011ba <HAL_ADC_MspInit+0x1de>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80011a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 80011a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80011ac:	6153      	str	r3, [r2, #20]
 80011ae:	4b29      	ldr	r3, [pc, #164]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4a25      	ldr	r2, [pc, #148]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 80011c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011c4:	6153      	str	r3, [r2, #20]
 80011c6:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <HAL_ADC_MspInit+0x278>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RX2_ADC_Pin;
 80011d2:	2302      	movs	r3, #2
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d6:	2303      	movs	r3, #3
 80011d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX2_ADC_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e2:	4619      	mov	r1, r3
 80011e4:	4824      	ldr	r0, [pc, #144]	@ (8001278 <HAL_ADC_MspInit+0x29c>)
 80011e6:	f002 f9fb 	bl	80035e0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 80011ea:	4b24      	ldr	r3, [pc, #144]	@ (800127c <HAL_ADC_MspInit+0x2a0>)
 80011ec:	4a24      	ldr	r2, [pc, #144]	@ (8001280 <HAL_ADC_MspInit+0x2a4>)
 80011ee:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f0:	4b22      	ldr	r3, [pc, #136]	@ (800127c <HAL_ADC_MspInit+0x2a0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f6:	4b21      	ldr	r3, [pc, #132]	@ (800127c <HAL_ADC_MspInit+0x2a0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <HAL_ADC_MspInit+0x2a0>)
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001202:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <HAL_ADC_MspInit+0x2a0>)
 8001204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001208:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <HAL_ADC_MspInit+0x2a0>)
 800120c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001210:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <HAL_ADC_MspInit+0x2a0>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_ADC_MspInit+0x2a0>)
 800121a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800121e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001220:	4816      	ldr	r0, [pc, #88]	@ (800127c <HAL_ADC_MspInit+0x2a0>)
 8001222:	f002 f8b7 	bl	8003394 <HAL_DMA_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_ADC_MspInit+0x254>
      Error_Handler();
 800122c:	f7ff fea8 	bl	8000f80 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a12      	ldr	r2, [pc, #72]	@ (800127c <HAL_ADC_MspInit+0x2a0>)
 8001234:	639a      	str	r2, [r3, #56]	@ 0x38
 8001236:	4a11      	ldr	r2, [pc, #68]	@ (800127c <HAL_ADC_MspInit+0x2a0>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2105      	movs	r1, #5
 8001240:	202f      	movs	r0, #47	@ 0x2f
 8001242:	f002 f87d 	bl	8003340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001246:	202f      	movs	r0, #47	@ 0x2f
 8001248:	f002 f896 	bl	8003378 <HAL_NVIC_EnableIRQ>
}
 800124c:	e07e      	b.n	800134c <HAL_ADC_MspInit+0x370>
 800124e:	bf00      	nop
 8001250:	20000854 	.word	0x20000854
 8001254:	40021000 	.word	0x40021000
 8001258:	48001400 	.word	0x48001400
 800125c:	2000053c 	.word	0x2000053c
 8001260:	40020008 	.word	0x40020008
 8001264:	50000100 	.word	0x50000100
 8001268:	20000580 	.word	0x20000580
 800126c:	40020408 	.word	0x40020408
 8001270:	50000400 	.word	0x50000400
 8001274:	20000858 	.word	0x20000858
 8001278:	48000400 	.word	0x48000400
 800127c:	200005c4 	.word	0x200005c4
 8001280:	40020458 	.word	0x40020458
  else if(hadc->Instance==ADC4)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a32      	ldr	r2, [pc, #200]	@ (8001354 <HAL_ADC_MspInit+0x378>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d15e      	bne.n	800134c <HAL_ADC_MspInit+0x370>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800128e:	4b32      	ldr	r3, [pc, #200]	@ (8001358 <HAL_ADC_MspInit+0x37c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	4a30      	ldr	r2, [pc, #192]	@ (8001358 <HAL_ADC_MspInit+0x37c>)
 8001296:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001298:	4b2f      	ldr	r3, [pc, #188]	@ (8001358 <HAL_ADC_MspInit+0x37c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d10b      	bne.n	80012b8 <HAL_ADC_MspInit+0x2dc>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80012a0:	4b2e      	ldr	r3, [pc, #184]	@ (800135c <HAL_ADC_MspInit+0x380>)
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	4a2d      	ldr	r2, [pc, #180]	@ (800135c <HAL_ADC_MspInit+0x380>)
 80012a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80012aa:	6153      	str	r3, [r2, #20]
 80012ac:	4b2b      	ldr	r3, [pc, #172]	@ (800135c <HAL_ADC_MspInit+0x380>)
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b28      	ldr	r3, [pc, #160]	@ (800135c <HAL_ADC_MspInit+0x380>)
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	4a27      	ldr	r2, [pc, #156]	@ (800135c <HAL_ADC_MspInit+0x380>)
 80012be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c2:	6153      	str	r3, [r2, #20]
 80012c4:	4b25      	ldr	r3, [pc, #148]	@ (800135c <HAL_ADC_MspInit+0x380>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX4_ADC_Pin;
 80012d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d6:	2303      	movs	r3, #3
 80012d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX4_ADC_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012e2:	4619      	mov	r1, r3
 80012e4:	481e      	ldr	r0, [pc, #120]	@ (8001360 <HAL_ADC_MspInit+0x384>)
 80012e6:	f002 f97b 	bl	80035e0 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001364 <HAL_ADC_MspInit+0x388>)
 80012ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001368 <HAL_ADC_MspInit+0x38c>)
 80012ee:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <HAL_ADC_MspInit+0x388>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <HAL_ADC_MspInit+0x388>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80012fc:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <HAL_ADC_MspInit+0x388>)
 80012fe:	2280      	movs	r2, #128	@ 0x80
 8001300:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001302:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <HAL_ADC_MspInit+0x388>)
 8001304:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001308:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <HAL_ADC_MspInit+0x388>)
 800130c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001310:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 8001312:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <HAL_ADC_MspInit+0x388>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_ADC_MspInit+0x388>)
 800131a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800131e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001320:	4810      	ldr	r0, [pc, #64]	@ (8001364 <HAL_ADC_MspInit+0x388>)
 8001322:	f002 f837 	bl	8003394 <HAL_DMA_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_ADC_MspInit+0x354>
      Error_Handler();
 800132c:	f7ff fe28 	bl	8000f80 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a0c      	ldr	r2, [pc, #48]	@ (8001364 <HAL_ADC_MspInit+0x388>)
 8001334:	639a      	str	r2, [r3, #56]	@ 0x38
 8001336:	4a0b      	ldr	r2, [pc, #44]	@ (8001364 <HAL_ADC_MspInit+0x388>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC4_IRQn, 5, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2105      	movs	r1, #5
 8001340:	203d      	movs	r0, #61	@ 0x3d
 8001342:	f001 fffd 	bl	8003340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8001346:	203d      	movs	r0, #61	@ 0x3d
 8001348:	f002 f816 	bl	8003378 <HAL_NVIC_EnableIRQ>
}
 800134c:	bf00      	nop
 800134e:	3740      	adds	r7, #64	@ 0x40
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	50000500 	.word	0x50000500
 8001358:	20000858 	.word	0x20000858
 800135c:	40021000 	.word	0x40021000
 8001360:	48000400 	.word	0x48000400
 8001364:	20000608 	.word	0x20000608
 8001368:	4002041c 	.word	0x4002041c

0800136c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	@ 0x38
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a56      	ldr	r2, [pc, #344]	@ (80014e4 <HAL_COMP_MspInit+0x178>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d132      	bne.n	80013f4 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b56      	ldr	r3, [pc, #344]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	4a55      	ldr	r2, [pc, #340]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 8001394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001398:	6153      	str	r3, [r2, #20]
 800139a:	4b53      	ldr	r3, [pc, #332]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a2:	623b      	str	r3, [r7, #32]
 80013a4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b50      	ldr	r3, [pc, #320]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	4a4f      	ldr	r2, [pc, #316]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 80013ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013b0:	6153      	str	r3, [r2, #20]
 80013b2:	4b4d      	ldr	r3, [pc, #308]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
    /**COMP3 GPIO Configuration
    PA4     ------> COMP3_INM
    PB14     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = RX1_COMP_Pin;
 80013be:	2310      	movs	r3, #16
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RX1_COMP_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d4:	f002 f904 	bl	80035e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VREFB14_Pin;
 80013d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013de:	2303      	movs	r3, #3
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VREFB14_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	483f      	ldr	r0, [pc, #252]	@ (80014ec <HAL_COMP_MspInit+0x180>)
 80013ee:	f002 f8f7 	bl	80035e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 80013f2:	e073      	b.n	80014dc <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP4)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a3d      	ldr	r2, [pc, #244]	@ (80014f0 <HAL_COMP_MspInit+0x184>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d118      	bne.n	8001430 <HAL_COMP_MspInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b3a      	ldr	r3, [pc, #232]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a39      	ldr	r2, [pc, #228]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001408:	6153      	str	r3, [r2, #20]
 800140a:	4b37      	ldr	r3, [pc, #220]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RX2_COMP_Pin|VREF_Pin;
 8001416:	2305      	movs	r3, #5
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	4830      	ldr	r0, [pc, #192]	@ (80014ec <HAL_COMP_MspInit+0x180>)
 800142a:	f002 f8d9 	bl	80035e0 <HAL_GPIO_Init>
}
 800142e:	e055      	b.n	80014dc <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP5)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a2f      	ldr	r2, [pc, #188]	@ (80014f4 <HAL_COMP_MspInit+0x188>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d132      	bne.n	80014a0 <HAL_COMP_MspInit+0x134>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a2a      	ldr	r2, [pc, #168]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 8001440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a24      	ldr	r2, [pc, #144]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b22      	ldr	r3, [pc, #136]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_COMP_Pin;
 800146a:	2320      	movs	r3, #32
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146e:	2303      	movs	r3, #3
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RX3_COMP_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001480:	f002 f8ae 	bl	80035e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VREFB13_Pin;
 8001484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148a:	2303      	movs	r3, #3
 800148c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VREFB13_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	4814      	ldr	r0, [pc, #80]	@ (80014ec <HAL_COMP_MspInit+0x180>)
 800149a:	f002 f8a1 	bl	80035e0 <HAL_GPIO_Init>
}
 800149e:	e01d      	b.n	80014dc <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP6)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <HAL_COMP_MspInit+0x18c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d118      	bne.n	80014dc <HAL_COMP_MspInit+0x170>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4a0e      	ldr	r2, [pc, #56]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b4:	6153      	str	r3, [r2, #20]
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <HAL_COMP_MspInit+0x17c>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX4_COMP_Pin|VREFB15_Pin;
 80014c2:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c8:	2303      	movs	r3, #3
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <HAL_COMP_MspInit+0x180>)
 80014d8:	f002 f882 	bl	80035e0 <HAL_GPIO_Init>
}
 80014dc:	bf00      	nop
 80014de:	3738      	adds	r7, #56	@ 0x38
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40010024 	.word	0x40010024
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	40010028 	.word	0x40010028
 80014f4:	4001002c 	.word	0x4001002c
 80014f8:	40010030 	.word	0x40010030

080014fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a18      	ldr	r2, [pc, #96]	@ (800157c <HAL_I2C_MspInit+0x80>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d129      	bne.n	8001572 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <HAL_I2C_MspInit+0x84>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	4a17      	ldr	r2, [pc, #92]	@ (8001580 <HAL_I2C_MspInit+0x84>)
 8001524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001528:	6153      	str	r3, [r2, #20]
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <HAL_I2C_MspInit+0x84>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001536:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153c:	2312      	movs	r3, #18
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001548:	2304      	movs	r3, #4
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001556:	f002 f843 	bl	80035e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_I2C_MspInit+0x84>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <HAL_I2C_MspInit+0x84>)
 8001560:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_I2C_MspInit+0x84>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	@ 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005800 	.word	0x40005800
 8001580:	40021000 	.word	0x40021000

08001584 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08c      	sub	sp, #48	@ 0x30
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a2e      	ldr	r2, [pc, #184]	@ (800165c <HAL_SPI_MspInit+0xd8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d128      	bne.n	80015f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <HAL_SPI_MspInit+0xdc>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001660 <HAL_SPI_MspInit+0xdc>)
 80015ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015b0:	6193      	str	r3, [r2, #24]
 80015b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <HAL_SPI_MspInit+0xdc>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b28      	ldr	r3, [pc, #160]	@ (8001660 <HAL_SPI_MspInit+0xdc>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4a27      	ldr	r2, [pc, #156]	@ (8001660 <HAL_SPI_MspInit+0xdc>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c8:	6153      	str	r3, [r2, #20]
 80015ca:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <HAL_SPI_MspInit+0xdc>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TX_CLK_Pin|TX_MOSI_Pin;
 80015d6:	2328      	movs	r3, #40	@ 0x28
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015e6:	2305      	movs	r3, #5
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	481c      	ldr	r0, [pc, #112]	@ (8001664 <HAL_SPI_MspInit+0xe0>)
 80015f2:	f001 fff5 	bl	80035e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015f6:	e02d      	b.n	8001654 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001668 <HAL_SPI_MspInit+0xe4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d128      	bne.n	8001654 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <HAL_SPI_MspInit+0xdc>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a16      	ldr	r2, [pc, #88]	@ (8001660 <HAL_SPI_MspInit+0xdc>)
 8001608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <HAL_SPI_MspInit+0xdc>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_SPI_MspInit+0xdc>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <HAL_SPI_MspInit+0xdc>)
 8001620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001624:	6153      	str	r3, [r2, #20]
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_SPI_MspInit+0xdc>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UI_SCK_Pin|UI_MOSI_Pin;
 8001632:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001644:	2306      	movs	r3, #6
 8001646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4807      	ldr	r0, [pc, #28]	@ (800166c <HAL_SPI_MspInit+0xe8>)
 8001650:	f001 ffc6 	bl	80035e0 <HAL_GPIO_Init>
}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	@ 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40013000 	.word	0x40013000
 8001660:	40021000 	.word	0x40021000
 8001664:	48000400 	.word	0x48000400
 8001668:	40003c00 	.word	0x40003c00
 800166c:	48000800 	.word	0x48000800

08001670 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	@ 0x30
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001680:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <HAL_InitTick+0xcc>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a2d      	ldr	r2, [pc, #180]	@ (800173c <HAL_InitTick+0xcc>)
 8001686:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <HAL_InitTick+0xcc>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001698:	f107 020c 	add.w	r2, r7, #12
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 fcc4 	bl	8007030 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016a8:	f005 fca0 	bl	8006fec <HAL_RCC_GetPCLK2Freq>
 80016ac:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b0:	4a23      	ldr	r2, [pc, #140]	@ (8001740 <HAL_InitTick+0xd0>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0c9b      	lsrs	r3, r3, #18
 80016b8:	3b01      	subs	r3, #1
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016bc:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <HAL_InitTick+0xd4>)
 80016be:	4a22      	ldr	r2, [pc, #136]	@ (8001748 <HAL_InitTick+0xd8>)
 80016c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_InitTick+0xd4>)
 80016c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001744 <HAL_InitTick+0xd4>)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <HAL_InitTick+0xd4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <HAL_InitTick+0xd4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_InitTick+0xd4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80016e2:	4818      	ldr	r0, [pc, #96]	@ (8001744 <HAL_InitTick+0xd4>)
 80016e4:	f006 fa08 	bl	8007af8 <HAL_TIM_Base_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80016ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11b      	bne.n	800172e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016f6:	4813      	ldr	r0, [pc, #76]	@ (8001744 <HAL_InitTick+0xd4>)
 80016f8:	f006 fa60 	bl	8007bbc <HAL_TIM_Base_Start_IT>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001702:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001706:	2b00      	cmp	r3, #0
 8001708:	d111      	bne.n	800172e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800170a:	2019      	movs	r0, #25
 800170c:	f001 fe34 	bl	8003378 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b0f      	cmp	r3, #15
 8001714:	d808      	bhi.n	8001728 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001716:	2200      	movs	r2, #0
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	2019      	movs	r0, #25
 800171c:	f001 fe10 	bl	8003340 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001720:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <HAL_InitTick+0xdc>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e002      	b.n	800172e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800172e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001732:	4618      	mov	r0, r3
 8001734:	3730      	adds	r7, #48	@ 0x30
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	431bde83 	.word	0x431bde83
 8001744:	2000085c 	.word	0x2000085c
 8001748:	40012c00 	.word	0x40012c00
 800174c:	20000010 	.word	0x20000010

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <NMI_Handler+0x4>

08001758 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <MemManage_Handler+0x4>

08001768 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <UsageFault_Handler+0x4>

08001778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <DMA1_Channel1_IRQHandler+0x10>)
 800178e:	f001 fe48 	bl	8003422 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000053c 	.word	0x2000053c

0800179c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017a0:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <ADC1_2_IRQHandler+0x14>)
 80017a2:	f000 fd1b 	bl	80021dc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80017a6:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <ADC1_2_IRQHandler+0x18>)
 80017a8:	f000 fd18 	bl	80021dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200003fc 	.word	0x200003fc
 80017b4:	2000044c 	.word	0x2000044c

080017b8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80017be:	f002 fe5b 	bl	8004478 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200026c8 	.word	0x200026c8

080017cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80017d2:	f006 fa5d 	bl	8007c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000085c 	.word	0x2000085c

080017e0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <ADC3_IRQHandler+0x10>)
 80017e6:	f000 fcf9 	bl	80021dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000049c 	.word	0x2000049c

080017f4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <DMA2_Channel1_IRQHandler+0x10>)
 80017fa:	f001 fe12 	bl	8003422 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000580 	.word	0x20000580

08001808 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <DMA2_Channel2_IRQHandler+0x10>)
 800180e:	f001 fe08 	bl	8003422 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000608 	.word	0x20000608

0800181c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <DMA2_Channel5_IRQHandler+0x10>)
 8001822:	f001 fdfe 	bl	8003422 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200005c4 	.word	0x200005c4

08001830 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <ADC4_IRQHandler+0x10>)
 8001836:	f000 fcd1 	bl	80021dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200004ec 	.word	0x200004ec

08001844 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	@ (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800186c:	f7ff ffea 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	@ (80018a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <LoopForever+0xe>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	@ (80018b4 <LoopForever+0x16>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f00c f9ef 	bl	800dc78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189a:	f7fe fcbb 	bl	8000214 <main>

0800189e <LoopForever>:

LoopForever:
    b LoopForever
 800189e:	e7fe      	b.n	800189e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80018ac:	0800e428 	.word	0x0800e428
  ldr r2, =_sbss
 80018b0:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80018b4:	20002bbc 	.word	0x20002bbc

080018b8 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <CAN_RX1_IRQHandler>

080018ba <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af04      	add	r7, sp, #16
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	2301      	movs	r3, #1
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2301      	movs	r3, #1
 80018e2:	2200      	movs	r2, #0
 80018e4:	2178      	movs	r1, #120	@ 0x78
 80018e6:	4803      	ldr	r0, [pc, #12]	@ (80018f4 <ssd1306_WriteCommand+0x2c>)
 80018e8:	f002 f8c0 	bl	8003a6c <HAL_I2C_Mem_Write>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000070c 	.word	0x2000070c

080018f8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800190a:	9202      	str	r2, [sp, #8]
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2301      	movs	r3, #1
 8001914:	2240      	movs	r2, #64	@ 0x40
 8001916:	2178      	movs	r1, #120	@ 0x78
 8001918:	4803      	ldr	r0, [pc, #12]	@ (8001928 <ssd1306_WriteData+0x30>)
 800191a:	f002 f8a7 	bl	8003a6c <HAL_I2C_Mem_Write>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000070c 	.word	0x2000070c

0800192c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001930:	f7ff ffc3 	bl	80018ba <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001934:	2064      	movs	r0, #100	@ 0x64
 8001936:	f000 fa2f 	bl	8001d98 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800193a:	2000      	movs	r0, #0
 800193c:	f000 f9d8 	bl	8001cf0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001940:	2020      	movs	r0, #32
 8001942:	f7ff ffc1 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001946:	2000      	movs	r0, #0
 8001948:	f7ff ffbe 	bl	80018c8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800194c:	20b0      	movs	r0, #176	@ 0xb0
 800194e:	f7ff ffbb 	bl	80018c8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8001952:	20c0      	movs	r0, #192	@ 0xc0
 8001954:	f7ff ffb8 	bl	80018c8 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff ffb5 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800195e:	2010      	movs	r0, #16
 8001960:	f7ff ffb2 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001964:	2040      	movs	r0, #64	@ 0x40
 8001966:	f7ff ffaf 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800196a:	20ff      	movs	r0, #255	@ 0xff
 800196c:	f000 f9ac 	bl	8001cc8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001970:	20a1      	movs	r0, #161	@ 0xa1
 8001972:	f7ff ffa9 	bl	80018c8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001976:	20a6      	movs	r0, #166	@ 0xa6
 8001978:	f7ff ffa6 	bl	80018c8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800197c:	20a8      	movs	r0, #168	@ 0xa8
 800197e:	f7ff ffa3 	bl	80018c8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001982:	203f      	movs	r0, #63	@ 0x3f
 8001984:	f7ff ffa0 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001988:	20a4      	movs	r0, #164	@ 0xa4
 800198a:	f7ff ff9d 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800198e:	20d3      	movs	r0, #211	@ 0xd3
 8001990:	f7ff ff9a 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff ff97 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800199a:	20d5      	movs	r0, #213	@ 0xd5
 800199c:	f7ff ff94 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80019a0:	20f0      	movs	r0, #240	@ 0xf0
 80019a2:	f7ff ff91 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80019a6:	20d9      	movs	r0, #217	@ 0xd9
 80019a8:	f7ff ff8e 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80019ac:	2022      	movs	r0, #34	@ 0x22
 80019ae:	f7ff ff8b 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80019b2:	20da      	movs	r0, #218	@ 0xda
 80019b4:	f7ff ff88 	bl	80018c8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80019b8:	2012      	movs	r0, #18
 80019ba:	f7ff ff85 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80019be:	20db      	movs	r0, #219	@ 0xdb
 80019c0:	f7ff ff82 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80019c4:	2020      	movs	r0, #32
 80019c6:	f7ff ff7f 	bl	80018c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80019ca:	208d      	movs	r0, #141	@ 0x8d
 80019cc:	f7ff ff7c 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80019d0:	2014      	movs	r0, #20
 80019d2:	f7ff ff79 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80019d6:	2001      	movs	r0, #1
 80019d8:	f000 f98a 	bl	8001cf0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80019dc:	2000      	movs	r0, #0
 80019de:	f000 f80f 	bl	8001a00 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80019e2:	f000 f825 	bl	8001a30 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80019e6:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <ssd1306_Init+0xd0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80019ec:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <ssd1306_Init+0xd0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80019f2:	4b02      	ldr	r3, [pc, #8]	@ (80019fc <ssd1306_Init+0xd0>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	711a      	strb	r2, [r3, #4]
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000ca8 	.word	0x20000ca8

08001a00 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <ssd1306_Fill+0x14>
 8001a10:	2300      	movs	r3, #0
 8001a12:	e000      	b.n	8001a16 <ssd1306_Fill+0x16>
 8001a14:	23ff      	movs	r3, #255	@ 0xff
 8001a16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4803      	ldr	r0, [pc, #12]	@ (8001a2c <ssd1306_Fill+0x2c>)
 8001a1e:	f00c f923 	bl	800dc68 <memset>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200008a8 	.word	0x200008a8

08001a30 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a36:	2300      	movs	r3, #0
 8001a38:	71fb      	strb	r3, [r7, #7]
 8001a3a:	e016      	b.n	8001a6a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	3b50      	subs	r3, #80	@ 0x50
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff40 	bl	80018c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff ff3d 	bl	80018c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a4e:	2010      	movs	r0, #16
 8001a50:	f7ff ff3a 	bl	80018c8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	01db      	lsls	r3, r3, #7
 8001a58:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <ssd1306_UpdateScreen+0x4c>)
 8001a5a:	4413      	add	r3, r2
 8001a5c:	2180      	movs	r1, #128	@ 0x80
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff4a 	bl	80018f8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	3301      	adds	r3, #1
 8001a68:	71fb      	strb	r3, [r7, #7]
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	2b07      	cmp	r3, #7
 8001a6e:	d9e5      	bls.n	8001a3c <ssd1306_UpdateScreen+0xc>
    }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200008a8 	.word	0x200008a8

08001a80 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	71bb      	strb	r3, [r7, #6]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db3d      	blt.n	8001b16 <ssd1306_DrawPixel+0x96>
 8001a9a:	79bb      	ldrb	r3, [r7, #6]
 8001a9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a9e:	d83a      	bhi.n	8001b16 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001aa0:	797b      	ldrb	r3, [r7, #5]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d11a      	bne.n	8001adc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001aa6:	79fa      	ldrb	r2, [r7, #7]
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
 8001aaa:	08db      	lsrs	r3, r3, #3
 8001aac:	b2d8      	uxtb	r0, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	01db      	lsls	r3, r3, #7
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b24 <ssd1306_DrawPixel+0xa4>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	b25a      	sxtb	r2, r3
 8001aba:	79bb      	ldrb	r3, [r7, #6]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	b259      	sxtb	r1, r3
 8001acc:	79fa      	ldrb	r2, [r7, #7]
 8001ace:	4603      	mov	r3, r0
 8001ad0:	01db      	lsls	r3, r3, #7
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b2c9      	uxtb	r1, r1
 8001ad6:	4a13      	ldr	r2, [pc, #76]	@ (8001b24 <ssd1306_DrawPixel+0xa4>)
 8001ad8:	54d1      	strb	r1, [r2, r3]
 8001ada:	e01d      	b.n	8001b18 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	79bb      	ldrb	r3, [r7, #6]
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	b2d8      	uxtb	r0, r3
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	01db      	lsls	r3, r3, #7
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a0e      	ldr	r2, [pc, #56]	@ (8001b24 <ssd1306_DrawPixel+0xa4>)
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	b25a      	sxtb	r2, r3
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	2101      	movs	r1, #1
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	4013      	ands	r3, r2
 8001b04:	b259      	sxtb	r1, r3
 8001b06:	79fa      	ldrb	r2, [r7, #7]
 8001b08:	4603      	mov	r3, r0
 8001b0a:	01db      	lsls	r3, r3, #7
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b2c9      	uxtb	r1, r1
 8001b10:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <ssd1306_DrawPixel+0xa4>)
 8001b12:	54d1      	strb	r1, [r2, r3]
 8001b14:	e000      	b.n	8001b18 <ssd1306_DrawPixel+0x98>
        return;
 8001b16:	bf00      	nop
    }
}
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200008a8 	.word	0x200008a8

08001b28 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b089      	sub	sp, #36	@ 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4604      	mov	r4, r0
 8001b30:	4638      	mov	r0, r7
 8001b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001b36:	4623      	mov	r3, r4
 8001b38:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	2b1f      	cmp	r3, #31
 8001b3e:	d902      	bls.n	8001b46 <ssd1306_WriteChar+0x1e>
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b7e      	cmp	r3, #126	@ 0x7e
 8001b44:	d901      	bls.n	8001b4a <ssd1306_WriteChar+0x22>
        return 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e079      	b.n	8001c3e <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <ssd1306_WriteChar+0x34>
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	3b20      	subs	r3, #32
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	e000      	b.n	8001b5e <ssd1306_WriteChar+0x36>
 8001b5c:	783b      	ldrb	r3, [r7, #0]
 8001b5e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001b60:	4b39      	ldr	r3, [pc, #228]	@ (8001c48 <ssd1306_WriteChar+0x120>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
 8001b68:	4413      	add	r3, r2
 8001b6a:	2b80      	cmp	r3, #128	@ 0x80
 8001b6c:	dc06      	bgt.n	8001b7c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001b6e:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <ssd1306_WriteChar+0x120>)
 8001b70:	885b      	ldrh	r3, [r3, #2]
 8001b72:	461a      	mov	r2, r3
 8001b74:	787b      	ldrb	r3, [r7, #1]
 8001b76:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001b78:	2b40      	cmp	r3, #64	@ 0x40
 8001b7a:	dd01      	ble.n	8001b80 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e05e      	b.n	8001c3e <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	e04d      	b.n	8001c22 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	3b20      	subs	r3, #32
 8001b8c:	7879      	ldrb	r1, [r7, #1]
 8001b8e:	fb01 f303 	mul.w	r3, r1, r3
 8001b92:	4619      	mov	r1, r3
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	440b      	add	r3, r1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
 8001ba4:	e036      	b.n	8001c14 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d013      	beq.n	8001bde <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001bb6:	4b24      	ldr	r3, [pc, #144]	@ (8001c48 <ssd1306_WriteChar+0x120>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b2d8      	uxtb	r0, r3
 8001bc4:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <ssd1306_WriteChar+0x120>)
 8001bc6:	885b      	ldrh	r3, [r3, #2]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7ff ff52 	bl	8001a80 <ssd1306_DrawPixel>
 8001bdc:	e017      	b.n	8001c0e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001bde:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <ssd1306_WriteChar+0x120>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	b2d8      	uxtb	r0, r3
 8001bec:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <ssd1306_WriteChar+0x120>)
 8001bee:	885b      	ldrh	r3, [r3, #2]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b2d9      	uxtb	r1, r3
 8001bfa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f7ff ff39 	bl	8001a80 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d3c4      	bcc.n	8001ba6 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	787b      	ldrb	r3, [r7, #1]
 8001c24:	461a      	mov	r2, r3
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d3ac      	bcc.n	8001b86 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <ssd1306_WriteChar+0x120>)
 8001c2e:	881a      	ldrh	r2, [r3, #0]
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <ssd1306_WriteChar+0x120>)
 8001c3a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	@ 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000ca8 	.word	0x20000ca8

08001c4c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	4638      	mov	r0, r7
 8001c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001c5a:	e013      	b.n	8001c84 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	7818      	ldrb	r0, [r3, #0]
 8001c60:	7e3b      	ldrb	r3, [r7, #24]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	463b      	mov	r3, r7
 8001c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c68:	f7ff ff5e 	bl	8001b28 <ssd1306_WriteChar>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d002      	beq.n	8001c7e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	e008      	b.n	8001c90 <ssd1306_WriteString+0x44>
        }
        str++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e7      	bne.n	8001c5c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	460a      	mov	r2, r1
 8001ca2:	71fb      	strb	r3, [r7, #7]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <ssd1306_SetCursor+0x2c>)
 8001cae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001cb0:	79bb      	ldrb	r3, [r7, #6]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <ssd1306_SetCursor+0x2c>)
 8001cb6:	805a      	strh	r2, [r3, #2]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20000ca8 	.word	0x20000ca8

08001cc8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001cd2:	2381      	movs	r3, #129	@ 0x81
 8001cd4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fdf5 	bl	80018c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fdf1 	bl	80018c8 <ssd1306_WriteCommand>
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001d00:	23af      	movs	r3, #175	@ 0xaf
 8001d02:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <ssd1306_SetDisplayOn+0x38>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	715a      	strb	r2, [r3, #5]
 8001d0a:	e004      	b.n	8001d16 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001d0c:	23ae      	movs	r3, #174	@ 0xae
 8001d0e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <ssd1306_SetDisplayOn+0x38>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fdd5 	bl	80018c8 <ssd1306_WriteCommand>
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000ca8 	.word	0x20000ca8

08001d2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d30:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <HAL_Init+0x28>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a07      	ldr	r2, [pc, #28]	@ (8001d54 <HAL_Init+0x28>)
 8001d36:	f043 0310 	orr.w	r3, r3, #16
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f001 faf4 	bl	800332a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d42:	200f      	movs	r0, #15
 8001d44:	f7ff fc94 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d48:	f7ff f920 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40022000 	.word	0x40022000

08001d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_IncTick+0x20>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_IncTick+0x24>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a04      	ldr	r2, [pc, #16]	@ (8001d7c <HAL_IncTick+0x24>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000014 	.word	0x20000014
 8001d7c:	20000cb0 	.word	0x20000cb0

08001d80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d84:	4b03      	ldr	r3, [pc, #12]	@ (8001d94 <HAL_GetTick+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000cb0 	.word	0x20000cb0

08001d98 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff ffee 	bl	8001d80 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001db0:	d005      	beq.n	8001dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_Delay+0x44>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001dbe:	bf00      	nop
 8001dc0:	f7ff ffde 	bl	8001d80 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d8f7      	bhi.n	8001dc0 <HAL_Delay+0x28>
  {
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000014 	.word	0x20000014

08001de0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b09a      	sub	sp, #104	@ 0x68
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e1c9      	b.n	80021d0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d176      	bne.n	8001f3c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d152      	bne.n	8001efc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff f8b3 	bl	8000fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d13b      	bne.n	8001efc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f001 f893 	bl	8002fb0 <ADC_Disable>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d12f      	bne.n	8001efc <HAL_ADC_Init+0xe0>
 8001e9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d12b      	bne.n	8001efc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001eac:	f023 0302 	bic.w	r3, r3, #2
 8001eb0:	f043 0202 	orr.w	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ec6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ed6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed8:	4b86      	ldr	r3, [pc, #536]	@ (80020f4 <HAL_ADC_Init+0x2d8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a86      	ldr	r2, [pc, #536]	@ (80020f8 <HAL_ADC_Init+0x2dc>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0c9a      	lsrs	r2, r3, #18
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eee:	e002      	b.n	8001ef6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f9      	bne.n	8001ef0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f18:	d110      	bne.n	8001f3c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f023 0312 	bic.w	r3, r3, #18
 8001f22:	f043 0210 	orr.w	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f040 8136 	bne.w	80021b6 <HAL_ADC_Init+0x39a>
 8001f4a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 8131 	bne.w	80021b6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 8129 	bne.w	80021b6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f6c:	f043 0202 	orr.w	r2, r3, #2
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f7c:	d004      	beq.n	8001f88 <HAL_ADC_Init+0x16c>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a5e      	ldr	r2, [pc, #376]	@ (80020fc <HAL_ADC_Init+0x2e0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_Init+0x170>
 8001f88:	4b5d      	ldr	r3, [pc, #372]	@ (8002100 <HAL_ADC_Init+0x2e4>)
 8001f8a:	e000      	b.n	8001f8e <HAL_ADC_Init+0x172>
 8001f8c:	4b5d      	ldr	r3, [pc, #372]	@ (8002104 <HAL_ADC_Init+0x2e8>)
 8001f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f98:	d102      	bne.n	8001fa0 <HAL_ADC_Init+0x184>
 8001f9a:	4b58      	ldr	r3, [pc, #352]	@ (80020fc <HAL_ADC_Init+0x2e0>)
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	e01a      	b.n	8001fd6 <HAL_ADC_Init+0x1ba>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a55      	ldr	r2, [pc, #340]	@ (80020fc <HAL_ADC_Init+0x2e0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d103      	bne.n	8001fb2 <HAL_ADC_Init+0x196>
 8001faa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e011      	b.n	8001fd6 <HAL_ADC_Init+0x1ba>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a54      	ldr	r2, [pc, #336]	@ (8002108 <HAL_ADC_Init+0x2ec>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d102      	bne.n	8001fc2 <HAL_ADC_Init+0x1a6>
 8001fbc:	4b53      	ldr	r3, [pc, #332]	@ (800210c <HAL_ADC_Init+0x2f0>)
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e009      	b.n	8001fd6 <HAL_ADC_Init+0x1ba>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a51      	ldr	r2, [pc, #324]	@ (800210c <HAL_ADC_Init+0x2f0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d102      	bne.n	8001fd2 <HAL_ADC_Init+0x1b6>
 8001fcc:	4b4e      	ldr	r3, [pc, #312]	@ (8002108 <HAL_ADC_Init+0x2ec>)
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	e001      	b.n	8001fd6 <HAL_ADC_Init+0x1ba>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d108      	bne.n	8001ff6 <HAL_ADC_Init+0x1da>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0x1da>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_ADC_Init+0x1dc>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d11c      	bne.n	8002036 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d010      	beq.n	8002024 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_ADC_Init+0x202>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_ADC_Init+0x202>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_ADC_Init+0x204>
 800201e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002020:	2b00      	cmp	r3, #0
 8002022:	d108      	bne.n	8002036 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	431a      	orrs	r2, r3
 8002032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002034:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7e5b      	ldrb	r3, [r3, #25]
 800203a:	035b      	lsls	r3, r3, #13
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002040:	2a01      	cmp	r2, #1
 8002042:	d002      	beq.n	800204a <HAL_ADC_Init+0x22e>
 8002044:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002048:	e000      	b.n	800204c <HAL_ADC_Init+0x230>
 800204a:	2200      	movs	r2, #0
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4313      	orrs	r3, r2
 800205a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800205c:	4313      	orrs	r3, r2
 800205e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d11b      	bne.n	80020a2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7e5b      	ldrb	r3, [r3, #25]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	3b01      	subs	r3, #1
 8002078:	045a      	lsls	r2, r3, #17
 800207a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800207c:	4313      	orrs	r3, r2
 800207e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002082:	663b      	str	r3, [r7, #96]	@ 0x60
 8002084:	e00d      	b.n	80020a2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800208e:	f043 0220 	orr.w	r2, r3, #32
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d03a      	beq.n	8002120 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a16      	ldr	r2, [pc, #88]	@ (8002108 <HAL_ADC_Init+0x2ec>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d004      	beq.n	80020be <HAL_ADC_Init+0x2a2>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a14      	ldr	r2, [pc, #80]	@ (800210c <HAL_ADC_Init+0x2f0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d128      	bne.n	8002110 <HAL_ADC_Init+0x2f4>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c2:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80020c6:	d012      	beq.n	80020ee <HAL_ADC_Init+0x2d2>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020d0:	d00a      	beq.n	80020e8 <HAL_ADC_Init+0x2cc>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d6:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80020da:	d002      	beq.n	80020e2 <HAL_ADC_Init+0x2c6>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e0:	e018      	b.n	8002114 <HAL_ADC_Init+0x2f8>
 80020e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020e6:	e015      	b.n	8002114 <HAL_ADC_Init+0x2f8>
 80020e8:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80020ec:	e012      	b.n	8002114 <HAL_ADC_Init+0x2f8>
 80020ee:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80020f2:	e00f      	b.n	8002114 <HAL_ADC_Init+0x2f8>
 80020f4:	2000000c 	.word	0x2000000c
 80020f8:	431bde83 	.word	0x431bde83
 80020fc:	50000100 	.word	0x50000100
 8002100:	50000300 	.word	0x50000300
 8002104:	50000700 	.word	0x50000700
 8002108:	50000400 	.word	0x50000400
 800210c:	50000500 	.word	0x50000500
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002118:	4313      	orrs	r3, r2
 800211a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800211c:	4313      	orrs	r3, r2
 800211e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b00      	cmp	r3, #0
 800212c:	d114      	bne.n	8002158 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800213c:	f023 0302 	bic.w	r3, r3, #2
 8002140:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7e1b      	ldrb	r3, [r3, #24]
 8002146:	039a      	lsls	r2, r3, #14
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4313      	orrs	r3, r2
 8002152:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002154:	4313      	orrs	r3, r2
 8002156:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	4b1e      	ldr	r3, [pc, #120]	@ (80021d8 <HAL_ADC_Init+0x3bc>)
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002168:	430b      	orrs	r3, r1
 800216a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10c      	bne.n	800218e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f023 010f 	bic.w	r1, r3, #15
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	1e5a      	subs	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	631a      	str	r2, [r3, #48]	@ 0x30
 800218c:	e007      	b.n	800219e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 020f 	bic.w	r2, r2, #15
 800219c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	f023 0303 	bic.w	r3, r3, #3
 80021ac:	f043 0201 	orr.w	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80021b4:	e00a      	b.n	80021cc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f023 0312 	bic.w	r3, r3, #18
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80021c6:	2301      	movs	r3, #1
 80021c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80021cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3768      	adds	r7, #104	@ 0x68
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	fff0c007 	.word	0xfff0c007

080021dc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <HAL_ADC_IRQHandler+0x38>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 80bc 	beq.w	8002398 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80b6 	beq.w	8002398 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800224c:	d004      	beq.n	8002258 <HAL_ADC_IRQHandler+0x7c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a90      	ldr	r2, [pc, #576]	@ (8002494 <HAL_ADC_IRQHandler+0x2b8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d106      	bne.n	8002266 <HAL_ADC_IRQHandler+0x8a>
 8002258:	4b8f      	ldr	r3, [pc, #572]	@ (8002498 <HAL_ADC_IRQHandler+0x2bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	2b00      	cmp	r3, #0
 8002262:	d03e      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x106>
 8002264:	e005      	b.n	8002272 <HAL_ADC_IRQHandler+0x96>
 8002266:	4b8d      	ldr	r3, [pc, #564]	@ (800249c <HAL_ADC_IRQHandler+0x2c0>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	2b00      	cmp	r3, #0
 8002270:	d037      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x106>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800227a:	d004      	beq.n	8002286 <HAL_ADC_IRQHandler+0xaa>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a84      	ldr	r2, [pc, #528]	@ (8002494 <HAL_ADC_IRQHandler+0x2b8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d106      	bne.n	8002294 <HAL_ADC_IRQHandler+0xb8>
 8002286:	4b84      	ldr	r3, [pc, #528]	@ (8002498 <HAL_ADC_IRQHandler+0x2bc>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	2b05      	cmp	r3, #5
 8002290:	d027      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x106>
 8002292:	e005      	b.n	80022a0 <HAL_ADC_IRQHandler+0xc4>
 8002294:	4b81      	ldr	r3, [pc, #516]	@ (800249c <HAL_ADC_IRQHandler+0x2c0>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2b05      	cmp	r3, #5
 800229e:	d020      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x106>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022a8:	d004      	beq.n	80022b4 <HAL_ADC_IRQHandler+0xd8>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a79      	ldr	r2, [pc, #484]	@ (8002494 <HAL_ADC_IRQHandler+0x2b8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d106      	bne.n	80022c2 <HAL_ADC_IRQHandler+0xe6>
 80022b4:	4b78      	ldr	r3, [pc, #480]	@ (8002498 <HAL_ADC_IRQHandler+0x2bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	2b09      	cmp	r3, #9
 80022be:	d010      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x106>
 80022c0:	e005      	b.n	80022ce <HAL_ADC_IRQHandler+0xf2>
 80022c2:	4b76      	ldr	r3, [pc, #472]	@ (800249c <HAL_ADC_IRQHandler+0x2c0>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	d009      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x106>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022d6:	d004      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x106>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a70      	ldr	r2, [pc, #448]	@ (80024a0 <HAL_ADC_IRQHandler+0x2c4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d104      	bne.n	80022ec <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	e00f      	b.n	800230c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022f4:	d004      	beq.n	8002300 <HAL_ADC_IRQHandler+0x124>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a66      	ldr	r2, [pc, #408]	@ (8002494 <HAL_ADC_IRQHandler+0x2b8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d102      	bne.n	8002306 <HAL_ADC_IRQHandler+0x12a>
 8002300:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002304:	e000      	b.n	8002308 <HAL_ADC_IRQHandler+0x12c>
 8002306:	4b66      	ldr	r3, [pc, #408]	@ (80024a0 <HAL_ADC_IRQHandler+0x2c4>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002316:	2b00      	cmp	r3, #0
 8002318:	d137      	bne.n	800238a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002320:	2b00      	cmp	r3, #0
 8002322:	d132      	bne.n	800238a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d02d      	beq.n	800238a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d11a      	bne.n	8002372 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 020c 	bic.w	r2, r2, #12
 800234a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d112      	bne.n	800238a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	f043 0201 	orr.w	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002370:	e00b      	b.n	800238a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	f043 0210 	orr.w	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff fd28 	bl	8001de0 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	220c      	movs	r2, #12
 8002396:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <HAL_ADC_IRQHandler+0x1d0>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 8138 	beq.w	8002628 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8132 	beq.w	8002628 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023d8:	d004      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x208>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2d      	ldr	r2, [pc, #180]	@ (8002494 <HAL_ADC_IRQHandler+0x2b8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d106      	bne.n	80023f2 <HAL_ADC_IRQHandler+0x216>
 80023e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002498 <HAL_ADC_IRQHandler+0x2bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03e      	beq.n	800246e <HAL_ADC_IRQHandler+0x292>
 80023f0:	e005      	b.n	80023fe <HAL_ADC_IRQHandler+0x222>
 80023f2:	4b2a      	ldr	r3, [pc, #168]	@ (800249c <HAL_ADC_IRQHandler+0x2c0>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d037      	beq.n	800246e <HAL_ADC_IRQHandler+0x292>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002406:	d004      	beq.n	8002412 <HAL_ADC_IRQHandler+0x236>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a21      	ldr	r2, [pc, #132]	@ (8002494 <HAL_ADC_IRQHandler+0x2b8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d106      	bne.n	8002420 <HAL_ADC_IRQHandler+0x244>
 8002412:	4b21      	ldr	r3, [pc, #132]	@ (8002498 <HAL_ADC_IRQHandler+0x2bc>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	2b05      	cmp	r3, #5
 800241c:	d027      	beq.n	800246e <HAL_ADC_IRQHandler+0x292>
 800241e:	e005      	b.n	800242c <HAL_ADC_IRQHandler+0x250>
 8002420:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <HAL_ADC_IRQHandler+0x2c0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2b05      	cmp	r3, #5
 800242a:	d020      	beq.n	800246e <HAL_ADC_IRQHandler+0x292>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002434:	d004      	beq.n	8002440 <HAL_ADC_IRQHandler+0x264>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a16      	ldr	r2, [pc, #88]	@ (8002494 <HAL_ADC_IRQHandler+0x2b8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d106      	bne.n	800244e <HAL_ADC_IRQHandler+0x272>
 8002440:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <HAL_ADC_IRQHandler+0x2bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2b09      	cmp	r3, #9
 800244a:	d010      	beq.n	800246e <HAL_ADC_IRQHandler+0x292>
 800244c:	e005      	b.n	800245a <HAL_ADC_IRQHandler+0x27e>
 800244e:	4b13      	ldr	r3, [pc, #76]	@ (800249c <HAL_ADC_IRQHandler+0x2c0>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2b09      	cmp	r3, #9
 8002458:	d009      	beq.n	800246e <HAL_ADC_IRQHandler+0x292>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002462:	d004      	beq.n	800246e <HAL_ADC_IRQHandler+0x292>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0d      	ldr	r2, [pc, #52]	@ (80024a0 <HAL_ADC_IRQHandler+0x2c4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d104      	bne.n	8002478 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	e018      	b.n	80024aa <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002480:	d004      	beq.n	800248c <HAL_ADC_IRQHandler+0x2b0>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a03      	ldr	r2, [pc, #12]	@ (8002494 <HAL_ADC_IRQHandler+0x2b8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d10b      	bne.n	80024a4 <HAL_ADC_IRQHandler+0x2c8>
 800248c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002490:	e009      	b.n	80024a6 <HAL_ADC_IRQHandler+0x2ca>
 8002492:	bf00      	nop
 8002494:	50000100 	.word	0x50000100
 8002498:	50000300 	.word	0x50000300
 800249c:	50000700 	.word	0x50000700
 80024a0:	50000400 	.word	0x50000400
 80024a4:	4b92      	ldr	r3, [pc, #584]	@ (80026f0 <HAL_ADC_IRQHandler+0x514>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 80b0 	bne.w	800261a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 80a3 	bne.w	800261a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 809d 	bne.w	800261a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8097 	beq.w	800261a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024f4:	d004      	beq.n	8002500 <HAL_ADC_IRQHandler+0x324>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a7e      	ldr	r2, [pc, #504]	@ (80026f4 <HAL_ADC_IRQHandler+0x518>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d106      	bne.n	800250e <HAL_ADC_IRQHandler+0x332>
 8002500:	4b7d      	ldr	r3, [pc, #500]	@ (80026f8 <HAL_ADC_IRQHandler+0x51c>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2b00      	cmp	r3, #0
 800250a:	d03e      	beq.n	800258a <HAL_ADC_IRQHandler+0x3ae>
 800250c:	e005      	b.n	800251a <HAL_ADC_IRQHandler+0x33e>
 800250e:	4b7b      	ldr	r3, [pc, #492]	@ (80026fc <HAL_ADC_IRQHandler+0x520>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2b00      	cmp	r3, #0
 8002518:	d037      	beq.n	800258a <HAL_ADC_IRQHandler+0x3ae>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002522:	d004      	beq.n	800252e <HAL_ADC_IRQHandler+0x352>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a72      	ldr	r2, [pc, #456]	@ (80026f4 <HAL_ADC_IRQHandler+0x518>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d106      	bne.n	800253c <HAL_ADC_IRQHandler+0x360>
 800252e:	4b72      	ldr	r3, [pc, #456]	@ (80026f8 <HAL_ADC_IRQHandler+0x51c>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2b06      	cmp	r3, #6
 8002538:	d027      	beq.n	800258a <HAL_ADC_IRQHandler+0x3ae>
 800253a:	e005      	b.n	8002548 <HAL_ADC_IRQHandler+0x36c>
 800253c:	4b6f      	ldr	r3, [pc, #444]	@ (80026fc <HAL_ADC_IRQHandler+0x520>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2b06      	cmp	r3, #6
 8002546:	d020      	beq.n	800258a <HAL_ADC_IRQHandler+0x3ae>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002550:	d004      	beq.n	800255c <HAL_ADC_IRQHandler+0x380>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a67      	ldr	r2, [pc, #412]	@ (80026f4 <HAL_ADC_IRQHandler+0x518>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d106      	bne.n	800256a <HAL_ADC_IRQHandler+0x38e>
 800255c:	4b66      	ldr	r3, [pc, #408]	@ (80026f8 <HAL_ADC_IRQHandler+0x51c>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	2b07      	cmp	r3, #7
 8002566:	d010      	beq.n	800258a <HAL_ADC_IRQHandler+0x3ae>
 8002568:	e005      	b.n	8002576 <HAL_ADC_IRQHandler+0x39a>
 800256a:	4b64      	ldr	r3, [pc, #400]	@ (80026fc <HAL_ADC_IRQHandler+0x520>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2b07      	cmp	r3, #7
 8002574:	d009      	beq.n	800258a <HAL_ADC_IRQHandler+0x3ae>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800257e:	d004      	beq.n	800258a <HAL_ADC_IRQHandler+0x3ae>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a5a      	ldr	r2, [pc, #360]	@ (80026f0 <HAL_ADC_IRQHandler+0x514>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d104      	bne.n	8002594 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	e00f      	b.n	80025b4 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800259c:	d004      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x3cc>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a54      	ldr	r2, [pc, #336]	@ (80026f4 <HAL_ADC_IRQHandler+0x518>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d102      	bne.n	80025ae <HAL_ADC_IRQHandler+0x3d2>
 80025a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025ac:	e000      	b.n	80025b0 <HAL_ADC_IRQHandler+0x3d4>
 80025ae:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <HAL_ADC_IRQHandler+0x514>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d12d      	bne.n	800261a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d11a      	bne.n	8002602 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80025da:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d112      	bne.n	800261a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8002600:	e00b      	b.n	800261a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	f043 0210 	orr.w	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8c4 	bl	80027a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2260      	movs	r2, #96	@ 0x60
 8002626:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262e:	2b00      	cmp	r3, #0
 8002630:	d011      	beq.n	8002656 <HAL_ADC_IRQHandler+0x47a>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00c      	beq.n	8002656 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff fbd3 	bl	8001df4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2280      	movs	r2, #128	@ 0x80
 8002654:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d012      	beq.n	8002686 <HAL_ADC_IRQHandler+0x4aa>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8aa 	bl	80027d0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002684:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800268c:	2b00      	cmp	r3, #0
 800268e:	d012      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x4da>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f89c 	bl	80027e4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d04f      	beq.n	8002760 <HAL_ADC_IRQHandler+0x584>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d04a      	beq.n	8002760 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d102      	bne.n	80026d8 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e02d      	b.n	8002734 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026e0:	d004      	beq.n	80026ec <HAL_ADC_IRQHandler+0x510>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a03      	ldr	r2, [pc, #12]	@ (80026f4 <HAL_ADC_IRQHandler+0x518>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d109      	bne.n	8002700 <HAL_ADC_IRQHandler+0x524>
 80026ec:	4b02      	ldr	r3, [pc, #8]	@ (80026f8 <HAL_ADC_IRQHandler+0x51c>)
 80026ee:	e008      	b.n	8002702 <HAL_ADC_IRQHandler+0x526>
 80026f0:	50000400 	.word	0x50000400
 80026f4:	50000100 	.word	0x50000100
 80026f8:	50000300 	.word	0x50000300
 80026fc:	50000700 	.word	0x50000700
 8002700:	4b28      	ldr	r3, [pc, #160]	@ (80027a4 <HAL_ADC_IRQHandler+0x5c8>)
 8002702:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d10a      	bne.n	8002734 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800271e:	2301      	movs	r3, #1
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	e007      	b.n	8002734 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002730:	2301      	movs	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d10e      	bne.n	8002758 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	f043 0202 	orr.w	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff fb58 	bl	8001e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2210      	movs	r2, #16
 800275e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002766:	2b00      	cmp	r3, #0
 8002768:	d018      	beq.n	800279c <HAL_ADC_IRQHandler+0x5c0>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d013      	beq.n	800279c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002784:	f043 0208 	orr.w	r2, r3, #8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002794:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f810 	bl	80027bc <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800279c:	bf00      	nop
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	50000700 	.word	0x50000700

080027a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b09b      	sub	sp, #108	@ 0x6c
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x22>
 8002816:	2302      	movs	r3, #2
 8002818:	e2c8      	b.n	8002dac <HAL_ADC_ConfigChannel+0x5b4>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	f040 82ac 	bne.w	8002d8a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b04      	cmp	r3, #4
 8002838:	d81c      	bhi.n	8002874 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	461a      	mov	r2, r3
 800284e:	231f      	movs	r3, #31
 8002850:	4093      	lsls	r3, r2
 8002852:	43db      	mvns	r3, r3
 8002854:	4019      	ands	r1, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa00 f203 	lsl.w	r2, r0, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	631a      	str	r2, [r3, #48]	@ 0x30
 8002872:	e063      	b.n	800293c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b09      	cmp	r3, #9
 800287a:	d81e      	bhi.n	80028ba <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	3b1e      	subs	r3, #30
 8002890:	221f      	movs	r2, #31
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	4019      	ands	r1, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	3b1e      	subs	r3, #30
 80028ac:	fa00 f203 	lsl.w	r2, r0, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80028b8:	e040      	b.n	800293c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b0e      	cmp	r3, #14
 80028c0:	d81e      	bhi.n	8002900 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	3b3c      	subs	r3, #60	@ 0x3c
 80028d6:	221f      	movs	r2, #31
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	4019      	ands	r1, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	3b3c      	subs	r3, #60	@ 0x3c
 80028f2:	fa00 f203 	lsl.w	r2, r0, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80028fe:	e01d      	b.n	800293c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	3b5a      	subs	r3, #90	@ 0x5a
 8002914:	221f      	movs	r2, #31
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	4019      	ands	r1, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	3b5a      	subs	r3, #90	@ 0x5a
 8002930:	fa00 f203 	lsl.w	r2, r0, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 80e5 	bne.w	8002b16 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b09      	cmp	r3, #9
 8002952:	d91c      	bls.n	800298e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6999      	ldr	r1, [r3, #24]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4613      	mov	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4413      	add	r3, r2
 8002964:	3b1e      	subs	r3, #30
 8002966:	2207      	movs	r2, #7
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	4019      	ands	r1, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6898      	ldr	r0, [r3, #8]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	3b1e      	subs	r3, #30
 8002980:	fa00 f203 	lsl.w	r2, r0, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	619a      	str	r2, [r3, #24]
 800298c:	e019      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6959      	ldr	r1, [r3, #20]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	2207      	movs	r2, #7
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	4019      	ands	r1, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6898      	ldr	r0, [r3, #8]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	08db      	lsrs	r3, r3, #3
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	3b01      	subs	r3, #1
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d84f      	bhi.n	8002a84 <HAL_ADC_ConfigChannel+0x28c>
 80029e4:	a201      	add	r2, pc, #4	@ (adr r2, 80029ec <HAL_ADC_ConfigChannel+0x1f4>)
 80029e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ea:	bf00      	nop
 80029ec:	080029fd 	.word	0x080029fd
 80029f0:	08002a1f 	.word	0x08002a1f
 80029f4:	08002a41 	.word	0x08002a41
 80029f8:	08002a63 	.word	0x08002a63
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a02:	4b99      	ldr	r3, [pc, #612]	@ (8002c68 <HAL_ADC_ConfigChannel+0x470>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	0691      	lsls	r1, r2, #26
 8002a0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a1a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a1c:	e07b      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002a24:	4b90      	ldr	r3, [pc, #576]	@ (8002c68 <HAL_ADC_ConfigChannel+0x470>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	0691      	lsls	r1, r2, #26
 8002a2e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a30:	430a      	orrs	r2, r1
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a3c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a3e:	e06a      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002a46:	4b88      	ldr	r3, [pc, #544]	@ (8002c68 <HAL_ADC_ConfigChannel+0x470>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	0691      	lsls	r1, r2, #26
 8002a50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a52:	430a      	orrs	r2, r1
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a5e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a60:	e059      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a68:	4b7f      	ldr	r3, [pc, #508]	@ (8002c68 <HAL_ADC_ConfigChannel+0x470>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	0691      	lsls	r1, r2, #26
 8002a72:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a74:	430a      	orrs	r2, r1
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a80:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a82:	e048      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	069b      	lsls	r3, r3, #26
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d107      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002aa6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	069b      	lsls	r3, r3, #26
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d107      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002aca:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ad2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	069b      	lsls	r3, r3, #26
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d107      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002aee:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002af6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	069b      	lsls	r3, r3, #26
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d107      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b12:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002b14:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d108      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x33e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x33e>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x340>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f040 8131 	bne.w	8002da0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d00f      	beq.n	8002b66 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2201      	movs	r2, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	400a      	ands	r2, r1
 8002b60:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002b64:	e049      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2201      	movs	r2, #1
 8002b74:	409a      	lsls	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b09      	cmp	r3, #9
 8002b86:	d91c      	bls.n	8002bc2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6999      	ldr	r1, [r3, #24]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	3b1b      	subs	r3, #27
 8002b9a:	2207      	movs	r2, #7
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	4019      	ands	r1, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6898      	ldr	r0, [r3, #8]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3b1b      	subs	r3, #27
 8002bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	619a      	str	r2, [r3, #24]
 8002bc0:	e01b      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6959      	ldr	r1, [r3, #20]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	4019      	ands	r1, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6898      	ldr	r0, [r3, #8]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c02:	d004      	beq.n	8002c0e <HAL_ADC_ConfigChannel+0x416>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a18      	ldr	r2, [pc, #96]	@ (8002c6c <HAL_ADC_ConfigChannel+0x474>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x41a>
 8002c0e:	4b18      	ldr	r3, [pc, #96]	@ (8002c70 <HAL_ADC_ConfigChannel+0x478>)
 8002c10:	e000      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x41c>
 8002c12:	4b18      	ldr	r3, [pc, #96]	@ (8002c74 <HAL_ADC_ConfigChannel+0x47c>)
 8002c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d105      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d015      	beq.n	8002c56 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c2e:	2b11      	cmp	r3, #17
 8002c30:	d105      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c42:	2b12      	cmp	r3, #18
 8002c44:	f040 80ac 	bne.w	8002da0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f040 80a5 	bne.w	8002da0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c5e:	d10b      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x480>
 8002c60:	4b02      	ldr	r3, [pc, #8]	@ (8002c6c <HAL_ADC_ConfigChannel+0x474>)
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e023      	b.n	8002cae <HAL_ADC_ConfigChannel+0x4b6>
 8002c66:	bf00      	nop
 8002c68:	83fff000 	.word	0x83fff000
 8002c6c:	50000100 	.word	0x50000100
 8002c70:	50000300 	.word	0x50000300
 8002c74:	50000700 	.word	0x50000700
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a4e      	ldr	r2, [pc, #312]	@ (8002db8 <HAL_ADC_ConfigChannel+0x5c0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d103      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x492>
 8002c82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e011      	b.n	8002cae <HAL_ADC_ConfigChannel+0x4b6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a4b      	ldr	r2, [pc, #300]	@ (8002dbc <HAL_ADC_ConfigChannel+0x5c4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d102      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x4a2>
 8002c94:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	e009      	b.n	8002cae <HAL_ADC_ConfigChannel+0x4b6>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a48      	ldr	r2, [pc, #288]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d102      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x4b2>
 8002ca4:	4b45      	ldr	r3, [pc, #276]	@ (8002dbc <HAL_ADC_ConfigChannel+0x5c4>)
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e001      	b.n	8002cae <HAL_ADC_ConfigChannel+0x4b6>
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d108      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x4d6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x4d6>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x4d8>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d150      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cd4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d010      	beq.n	8002cfc <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d107      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x4fe>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x4fe>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x500>
 8002cf6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d13c      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b10      	cmp	r3, #16
 8002d02:	d11d      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x548>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d0c:	d118      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d18:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8002dc8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	0c9a      	lsrs	r2, r3, #18
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d30:	e002      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f9      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d3e:	e02e      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b11      	cmp	r3, #17
 8002d46:	d10b      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x568>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d50:	d106      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d5c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d5e:	e01e      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b12      	cmp	r3, #18
 8002d66:	d11a      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d72:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d74:	e013      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002d88:	e00a      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f043 0220 	orr.w	r2, r3, #32
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002d9c:	e000      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d9e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002da8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	376c      	adds	r7, #108	@ 0x6c
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	50000100 	.word	0x50000100
 8002dbc:	50000400 	.word	0x50000400
 8002dc0:	50000500 	.word	0x50000500
 8002dc4:	2000000c 	.word	0x2000000c
 8002dc8:	431bde83 	.word	0x431bde83

08002dcc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b099      	sub	sp, #100	@ 0x64
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002de4:	d102      	bne.n	8002dec <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002de6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	e01a      	b.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a6a      	ldr	r2, [pc, #424]	@ (8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d103      	bne.n	8002dfe <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002df6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	e011      	b.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a67      	ldr	r2, [pc, #412]	@ (8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e08:	4b66      	ldr	r3, [pc, #408]	@ (8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	e009      	b.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a64      	ldr	r2, [pc, #400]	@ (8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d102      	bne.n	8002e1e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e18:	4b61      	ldr	r3, [pc, #388]	@ (8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	e001      	b.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0b0      	b.n	8002f8e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0a9      	b.n	8002f8e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f040 808d 	bne.w	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 8086 	bne.w	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e68:	d004      	beq.n	8002e74 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a4b      	ldr	r2, [pc, #300]	@ (8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d101      	bne.n	8002e78 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002e74:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002e76:	e000      	b.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e78:	4b4c      	ldr	r3, [pc, #304]	@ (8002fac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002e7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d040      	beq.n	8002f06 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e96:	035b      	lsls	r3, r3, #13
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e9e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d108      	bne.n	8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d15c      	bne.n	8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d107      	bne.n	8002ee2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002ee2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d14b      	bne.n	8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ee8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ef0:	f023 030f 	bic.w	r3, r3, #15
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	6811      	ldr	r1, [r2, #0]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	6892      	ldr	r2, [r2, #8]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	431a      	orrs	r2, r3
 8002f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f02:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f04:	e03c      	b.n	8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f10:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f32:	2300      	movs	r3, #0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d123      	bne.n	8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002f54:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d112      	bne.n	8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f62:	f023 030f 	bic.w	r3, r3, #15
 8002f66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f68:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f6a:	e009      	b.n	8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002f7e:	e000      	b.n	8002f82 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f80:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3764      	adds	r7, #100	@ 0x64
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	50000100 	.word	0x50000100
 8002fa0:	50000400 	.word	0x50000400
 8002fa4:	50000500 	.word	0x50000500
 8002fa8:	50000300 	.word	0x50000300
 8002fac:	50000700 	.word	0x50000700

08002fb0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d108      	bne.n	8002fdc <ADC_Disable+0x2c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <ADC_Disable+0x2c>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <ADC_Disable+0x2e>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d047      	beq.n	8003072 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030d 	and.w	r3, r3, #13
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d10f      	bne.n	8003010 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0202 	orr.w	r2, r2, #2
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2203      	movs	r2, #3
 8003006:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003008:	f7fe feba 	bl	8001d80 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800300e:	e029      	b.n	8003064 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	f043 0210 	orr.w	r2, r3, #16
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003020:	f043 0201 	orr.w	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e023      	b.n	8003074 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800302c:	f7fe fea8 	bl	8001d80 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d914      	bls.n	8003064 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10d      	bne.n	8003064 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	f043 0210 	orr.w	r2, r3, #16
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e007      	b.n	8003074 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d0dc      	beq.n	800302c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <HAL_COMP_Init+0x26>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_COMP_Init+0x2c>
  {
    status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e088      	b.n	80031ba <HAL_COMP_Init+0x13e>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a8:	4b46      	ldr	r3, [pc, #280]	@ (80031c4 <HAL_COMP_Init+0x148>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	4a45      	ldr	r2, [pc, #276]	@ (80031c4 <HAL_COMP_Init+0x148>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6193      	str	r3, [r2, #24]
 80030b4:	4b43      	ldr	r3, [pc, #268]	@ (80031c4 <HAL_COMP_Init+0x148>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7fe f953 	bl	800136c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030d0:	61bb      	str	r3, [r7, #24]

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 0282 	bic.w	r2, r3, #130	@ 0x82
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f023 020c 	bic.w	r2, r3, #12
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	601a      	str	r2, [r3, #0]

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0)) != 0UL) &&
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003180:	2b00      	cmp	r3, #0
 8003182:	d016      	beq.n	80031b2 <HAL_COMP_Init+0x136>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d113      	bne.n	80031b2 <HAL_COMP_Init+0x136>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800318a:	4b0f      	ldr	r3, [pc, #60]	@ (80031c8 <HAL_COMP_Init+0x14c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	099b      	lsrs	r3, r3, #6
 8003190:	4a0e      	ldr	r2, [pc, #56]	@ (80031cc <HAL_COMP_Init+0x150>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 80031a4:	e002      	b.n	80031ac <HAL_COMP_Init+0x130>
      {
        wait_loop_index--;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f9      	bne.n	80031a6 <HAL_COMP_Init+0x12a>
      }
    }

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  return status;
 80031ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	2000000c 	.word	0x2000000c
 80031cc:	053e2d63 	.word	0x053e2d63

080031d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031ec:	4013      	ands	r3, r2
 80031ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003202:	4a04      	ldr	r2, [pc, #16]	@ (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	60d3      	str	r3, [r2, #12]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800321c:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <__NVIC_GetPriorityGrouping+0x18>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	0a1b      	lsrs	r3, r3, #8
 8003222:	f003 0307 	and.w	r3, r3, #7
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	2b00      	cmp	r3, #0
 8003244:	db0b      	blt.n	800325e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	f003 021f 	and.w	r2, r3, #31
 800324c:	4907      	ldr	r1, [pc, #28]	@ (800326c <__NVIC_EnableIRQ+0x38>)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2001      	movs	r0, #1
 8003256:	fa00 f202 	lsl.w	r2, r0, r2
 800325a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000e100 	.word	0xe000e100

08003270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003280:	2b00      	cmp	r3, #0
 8003282:	db0a      	blt.n	800329a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	490c      	ldr	r1, [pc, #48]	@ (80032bc <__NVIC_SetPriority+0x4c>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	0112      	lsls	r2, r2, #4
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	440b      	add	r3, r1
 8003294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003298:	e00a      	b.n	80032b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4908      	ldr	r1, [pc, #32]	@ (80032c0 <__NVIC_SetPriority+0x50>)
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	3b04      	subs	r3, #4
 80032a8:	0112      	lsls	r2, r2, #4
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	440b      	add	r3, r1
 80032ae:	761a      	strb	r2, [r3, #24]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000e100 	.word	0xe000e100
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	@ 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f1c3 0307 	rsb	r3, r3, #7
 80032de:	2b04      	cmp	r3, #4
 80032e0:	bf28      	it	cs
 80032e2:	2304      	movcs	r3, #4
 80032e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3304      	adds	r3, #4
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d902      	bls.n	80032f4 <NVIC_EncodePriority+0x30>
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3b03      	subs	r3, #3
 80032f2:	e000      	b.n	80032f6 <NVIC_EncodePriority+0x32>
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	401a      	ands	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800330c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43d9      	mvns	r1, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	4313      	orrs	r3, r2
         );
}
 800331e:	4618      	mov	r0, r3
 8003320:	3724      	adds	r7, #36	@ 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ff4c 	bl	80031d0 <__NVIC_SetPriorityGrouping>
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003352:	f7ff ff61 	bl	8003218 <__NVIC_GetPriorityGrouping>
 8003356:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	6978      	ldr	r0, [r7, #20]
 800335e:	f7ff ffb1 	bl	80032c4 <NVIC_EncodePriority>
 8003362:	4602      	mov	r2, r0
 8003364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ff80 	bl	8003270 <__NVIC_SetPriority>
}
 8003370:	bf00      	nop
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff54 	bl	8003234 <__NVIC_EnableIRQ>
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e037      	b.n	800341a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033c0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80033c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8b3 	bl	8003568 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	2204      	movs	r2, #4
 8003440:	409a      	lsls	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d024      	beq.n	8003494 <HAL_DMA_IRQHandler+0x72>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01f      	beq.n	8003494 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0204 	bic.w	r2, r2, #4
 8003470:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347a:	2104      	movs	r1, #4
 800347c:	fa01 f202 	lsl.w	r2, r1, r2
 8003480:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	2b00      	cmp	r3, #0
 8003488:	d06a      	beq.n	8003560 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003492:	e065      	b.n	8003560 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	2202      	movs	r2, #2
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02c      	beq.n	80034fe <HAL_DMA_IRQHandler+0xdc>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d027      	beq.n	80034fe <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10b      	bne.n	80034d4 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 020a 	bic.w	r2, r2, #10
 80034ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	2102      	movs	r1, #2
 80034de:	fa01 f202 	lsl.w	r2, r1, r2
 80034e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d035      	beq.n	8003560 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034fc:	e030      	b.n	8003560 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	2208      	movs	r2, #8
 8003504:	409a      	lsls	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d028      	beq.n	8003560 <HAL_DMA_IRQHandler+0x13e>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d023      	beq.n	8003560 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 020e 	bic.w	r2, r2, #14
 8003526:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003530:	2101      	movs	r1, #1
 8003532:	fa01 f202 	lsl.w	r2, r1, r2
 8003536:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	2b00      	cmp	r3, #0
 8003554:	d004      	beq.n	8003560 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
    }
  }
}
 800355e:	e7ff      	b.n	8003560 <HAL_DMA_IRQHandler+0x13e>
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <DMA_CalcBaseAndBitshift+0x60>)
 8003578:	429a      	cmp	r2, r3
 800357a:	d80f      	bhi.n	800359c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	4b12      	ldr	r3, [pc, #72]	@ (80035cc <DMA_CalcBaseAndBitshift+0x64>)
 8003584:	4413      	add	r3, r2
 8003586:	4a12      	ldr	r2, [pc, #72]	@ (80035d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	009a      	lsls	r2, r3, #2
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a0f      	ldr	r2, [pc, #60]	@ (80035d4 <DMA_CalcBaseAndBitshift+0x6c>)
 8003598:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800359a:	e00e      	b.n	80035ba <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <DMA_CalcBaseAndBitshift+0x70>)
 80035a4:	4413      	add	r3, r2
 80035a6:	4a0a      	ldr	r2, [pc, #40]	@ (80035d0 <DMA_CalcBaseAndBitshift+0x68>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	009a      	lsls	r2, r3, #2
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a09      	ldr	r2, [pc, #36]	@ (80035dc <DMA_CalcBaseAndBitshift+0x74>)
 80035b8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40020407 	.word	0x40020407
 80035cc:	bffdfff8 	.word	0xbffdfff8
 80035d0:	cccccccd 	.word	0xcccccccd
 80035d4:	40020000 	.word	0x40020000
 80035d8:	bffdfbf8 	.word	0xbffdfbf8
 80035dc:	40020400 	.word	0x40020400

080035e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ee:	e154      	b.n	800389a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	2101      	movs	r1, #1
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	4013      	ands	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8146 	beq.w	8003894 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d005      	beq.n	8003620 <HAL_GPIO_Init+0x40>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d130      	bne.n	8003682 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4013      	ands	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003656:	2201      	movs	r2, #1
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 0201 	and.w	r2, r3, #1
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b03      	cmp	r3, #3
 800368c:	d017      	beq.n	80036be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	2203      	movs	r2, #3
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d123      	bne.n	8003712 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	08da      	lsrs	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3208      	adds	r2, #8
 80036d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	220f      	movs	r2, #15
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	08da      	lsrs	r2, r3, #3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3208      	adds	r2, #8
 800370c:	6939      	ldr	r1, [r7, #16]
 800370e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2203      	movs	r2, #3
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4013      	ands	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0203 	and.w	r2, r3, #3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80a0 	beq.w	8003894 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003754:	4b58      	ldr	r3, [pc, #352]	@ (80038b8 <HAL_GPIO_Init+0x2d8>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	4a57      	ldr	r2, [pc, #348]	@ (80038b8 <HAL_GPIO_Init+0x2d8>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6193      	str	r3, [r2, #24]
 8003760:	4b55      	ldr	r3, [pc, #340]	@ (80038b8 <HAL_GPIO_Init+0x2d8>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800376c:	4a53      	ldr	r2, [pc, #332]	@ (80038bc <HAL_GPIO_Init+0x2dc>)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	3302      	adds	r3, #2
 8003774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	220f      	movs	r2, #15
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4013      	ands	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003796:	d019      	beq.n	80037cc <HAL_GPIO_Init+0x1ec>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a49      	ldr	r2, [pc, #292]	@ (80038c0 <HAL_GPIO_Init+0x2e0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <HAL_GPIO_Init+0x1e8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a48      	ldr	r2, [pc, #288]	@ (80038c4 <HAL_GPIO_Init+0x2e4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00d      	beq.n	80037c4 <HAL_GPIO_Init+0x1e4>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a47      	ldr	r2, [pc, #284]	@ (80038c8 <HAL_GPIO_Init+0x2e8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <HAL_GPIO_Init+0x1e0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a46      	ldr	r2, [pc, #280]	@ (80038cc <HAL_GPIO_Init+0x2ec>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_GPIO_Init+0x1dc>
 80037b8:	2304      	movs	r3, #4
 80037ba:	e008      	b.n	80037ce <HAL_GPIO_Init+0x1ee>
 80037bc:	2305      	movs	r3, #5
 80037be:	e006      	b.n	80037ce <HAL_GPIO_Init+0x1ee>
 80037c0:	2303      	movs	r3, #3
 80037c2:	e004      	b.n	80037ce <HAL_GPIO_Init+0x1ee>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e002      	b.n	80037ce <HAL_GPIO_Init+0x1ee>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <HAL_GPIO_Init+0x1ee>
 80037cc:	2300      	movs	r3, #0
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	f002 0203 	and.w	r2, r2, #3
 80037d4:	0092      	lsls	r2, r2, #2
 80037d6:	4093      	lsls	r3, r2
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037de:	4937      	ldr	r1, [pc, #220]	@ (80038bc <HAL_GPIO_Init+0x2dc>)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ec:	4b38      	ldr	r3, [pc, #224]	@ (80038d0 <HAL_GPIO_Init+0x2f0>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003810:	4a2f      	ldr	r2, [pc, #188]	@ (80038d0 <HAL_GPIO_Init+0x2f0>)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003816:	4b2e      	ldr	r3, [pc, #184]	@ (80038d0 <HAL_GPIO_Init+0x2f0>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	43db      	mvns	r3, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800383a:	4a25      	ldr	r2, [pc, #148]	@ (80038d0 <HAL_GPIO_Init+0x2f0>)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003840:	4b23      	ldr	r3, [pc, #140]	@ (80038d0 <HAL_GPIO_Init+0x2f0>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	43db      	mvns	r3, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003864:	4a1a      	ldr	r2, [pc, #104]	@ (80038d0 <HAL_GPIO_Init+0x2f0>)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800386a:	4b19      	ldr	r3, [pc, #100]	@ (80038d0 <HAL_GPIO_Init+0x2f0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	43db      	mvns	r3, r3
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800388e:	4a10      	ldr	r2, [pc, #64]	@ (80038d0 <HAL_GPIO_Init+0x2f0>)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	3301      	adds	r3, #1
 8003898:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	fa22 f303 	lsr.w	r3, r2, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f47f aea3 	bne.w	80035f0 <HAL_GPIO_Init+0x10>
  }
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40010000 	.word	0x40010000
 80038c0:	48000400 	.word	0x48000400
 80038c4:	48000800 	.word	0x48000800
 80038c8:	48000c00 	.word	0x48000c00
 80038cc:	48001000 	.word	0x48001000
 80038d0:	40010400 	.word	0x40010400

080038d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	887b      	ldrh	r3, [r7, #2]
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e001      	b.n	80038f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038f2:	2300      	movs	r3, #0
 80038f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
 8003910:	4613      	mov	r3, r2
 8003912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003914:	787b      	ldrb	r3, [r7, #1]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800391a:	887a      	ldrh	r2, [r7, #2]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003920:	e002      	b.n	8003928 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003922:	887a      	ldrh	r2, [r7, #2]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e08d      	b.n	8003a62 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd fdce 	bl	80014fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2224      	movs	r2, #36	@ 0x24
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003984:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003994:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d107      	bne.n	80039ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	e006      	b.n	80039bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80039ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d108      	bne.n	80039d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d2:	605a      	str	r2, [r3, #4]
 80039d4:	e007      	b.n	80039e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691a      	ldr	r2, [r3, #16]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69d9      	ldr	r1, [r3, #28]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1a      	ldr	r2, [r3, #32]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	4608      	mov	r0, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	817b      	strh	r3, [r7, #10]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	813b      	strh	r3, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	f040 80f9 	bne.w	8003c86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_I2C_Mem_Write+0x34>
 8003a9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aa6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0ed      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_I2C_Mem_Write+0x4e>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e0e6      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ac2:	f7fe f95d 	bl	8001d80 <HAL_GetTick>
 8003ac6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2319      	movs	r3, #25
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f955 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0d1      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2221      	movs	r2, #33	@ 0x21
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2240      	movs	r2, #64	@ 0x40
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b0c:	88f8      	ldrh	r0, [r7, #6]
 8003b0e:	893a      	ldrh	r2, [r7, #8]
 8003b10:	8979      	ldrh	r1, [r7, #10]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	9301      	str	r3, [sp, #4]
 8003b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f8b9 	bl	8003c94 <I2C_RequestMemoryWrite>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0a9      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2bff      	cmp	r3, #255	@ 0xff
 8003b3c:	d90e      	bls.n	8003b5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	22ff      	movs	r2, #255	@ 0xff
 8003b42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	8979      	ldrh	r1, [r7, #10]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fad9 	bl	800410c <I2C_TransferConfig>
 8003b5a:	e00f      	b.n	8003b7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	8979      	ldrh	r1, [r7, #10]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fac8 	bl	800410c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f958 	bl	8003e36 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e07b      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d034      	beq.n	8003c34 <HAL_I2C_Mem_Write+0x1c8>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d130      	bne.n	8003c34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2180      	movs	r1, #128	@ 0x80
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f8d1 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e04d      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2bff      	cmp	r3, #255	@ 0xff
 8003bf4:	d90e      	bls.n	8003c14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	22ff      	movs	r2, #255	@ 0xff
 8003bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	8979      	ldrh	r1, [r7, #10]
 8003c04:	2300      	movs	r3, #0
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fa7d 	bl	800410c <I2C_TransferConfig>
 8003c12:	e00f      	b.n	8003c34 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	8979      	ldrh	r1, [r7, #10]
 8003c26:	2300      	movs	r3, #0
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fa6c 	bl	800410c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d19e      	bne.n	8003b7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f93e 	bl	8003ec4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e01a      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2220      	movs	r2, #32
 8003c58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <HAL_I2C_Mem_Write+0x224>)
 8003c66:	400b      	ands	r3, r1
 8003c68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e000      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
  }
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	fe00e800 	.word	0xfe00e800

08003c94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	817b      	strh	r3, [r7, #10]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	813b      	strh	r3, [r7, #8]
 8003caa:	4613      	mov	r3, r2
 8003cac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	8979      	ldrh	r1, [r7, #10]
 8003cb4:	4b20      	ldr	r3, [pc, #128]	@ (8003d38 <I2C_RequestMemoryWrite+0xa4>)
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fa25 	bl	800410c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	69b9      	ldr	r1, [r7, #24]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f8b5 	bl	8003e36 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e02c      	b.n	8003d30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cdc:	893b      	ldrh	r3, [r7, #8]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ce6:	e015      	b.n	8003d14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ce8:	893b      	ldrh	r3, [r7, #8]
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	69b9      	ldr	r1, [r7, #24]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f89b 	bl	8003e36 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e012      	b.n	8003d30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d0a:	893b      	ldrh	r3, [r7, #8]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2180      	movs	r1, #128	@ 0x80
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f830 	bl	8003d84 <I2C_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	80002000 	.word	0x80002000

08003d3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d103      	bne.n	8003d5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d007      	beq.n	8003d78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	619a      	str	r2, [r3, #24]
  }
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d94:	e03b      	b.n	8003e0e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	6839      	ldr	r1, [r7, #0]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f8d6 	bl	8003f4c <I2C_IsErrorOccurred>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e041      	b.n	8003e2e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003db0:	d02d      	beq.n	8003e0e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db2:	f7fd ffe5 	bl	8001d80 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d302      	bcc.n	8003dc8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d122      	bne.n	8003e0e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d113      	bne.n	8003e0e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dea:	f043 0220 	orr.w	r2, r3, #32
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e00f      	b.n	8003e2e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699a      	ldr	r2, [r3, #24]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	4013      	ands	r3, r2
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	bf0c      	ite	eq
 8003e1e:	2301      	moveq	r3, #1
 8003e20:	2300      	movne	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d0b4      	beq.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e42:	e033      	b.n	8003eac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f87f 	bl	8003f4c <I2C_IsErrorOccurred>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e031      	b.n	8003ebc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e5e:	d025      	beq.n	8003eac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e60:	f7fd ff8e 	bl	8001d80 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d302      	bcc.n	8003e76 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d11a      	bne.n	8003eac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d013      	beq.n	8003eac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e007      	b.n	8003ebc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d1c4      	bne.n	8003e44 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ed0:	e02f      	b.n	8003f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f838 	bl	8003f4c <I2C_IsErrorOccurred>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e02d      	b.n	8003f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee6:	f7fd ff4b 	bl	8001d80 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d11a      	bne.n	8003f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d013      	beq.n	8003f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	f043 0220 	orr.w	r2, r3, #32
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e007      	b.n	8003f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d1c8      	bne.n	8003ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	@ 0x28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d068      	beq.n	800404a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2210      	movs	r2, #16
 8003f7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f80:	e049      	b.n	8004016 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f88:	d045      	beq.n	8004016 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f8a:	f7fd fef9 	bl	8001d80 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d302      	bcc.n	8003fa0 <I2C_IsErrorOccurred+0x54>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d13a      	bne.n	8004016 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003faa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fc2:	d121      	bne.n	8004008 <I2C_IsErrorOccurred+0xbc>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fca:	d01d      	beq.n	8004008 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d01a      	beq.n	8004008 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fe0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fe2:	f7fd fecd 	bl	8001d80 <HAL_GetTick>
 8003fe6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe8:	e00e      	b.n	8004008 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fea:	f7fd fec9 	bl	8001d80 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b19      	cmp	r3, #25
 8003ff6:	d907      	bls.n	8004008 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f043 0320 	orr.w	r3, r3, #32
 8003ffe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004006:	e006      	b.n	8004016 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b20      	cmp	r3, #32
 8004014:	d1e9      	bne.n	8003fea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b20      	cmp	r3, #32
 8004022:	d003      	beq.n	800402c <I2C_IsErrorOccurred+0xe0>
 8004024:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0aa      	beq.n	8003f82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800402c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004030:	2b00      	cmp	r3, #0
 8004032:	d103      	bne.n	800403c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2220      	movs	r2, #32
 800403a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	f043 0304 	orr.w	r3, r3, #4
 8004042:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800406c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00b      	beq.n	8004096 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	f043 0308 	orr.w	r3, r3, #8
 8004084:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800408e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00b      	beq.n	80040b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f043 0302 	orr.w	r3, r3, #2
 80040a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80040b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01c      	beq.n	80040fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff fe3b 	bl	8003d3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6859      	ldr	r1, [r3, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <I2C_IsErrorOccurred+0x1bc>)
 80040d2:	400b      	ands	r3, r1
 80040d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80040fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3728      	adds	r7, #40	@ 0x28
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	fe00e800 	.word	0xfe00e800

0800410c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	817b      	strh	r3, [r7, #10]
 800411a:	4613      	mov	r3, r2
 800411c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800411e:	897b      	ldrh	r3, [r7, #10]
 8004120:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004124:	7a7b      	ldrb	r3, [r7, #9]
 8004126:	041b      	lsls	r3, r3, #16
 8004128:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800412c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	4313      	orrs	r3, r2
 8004136:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800413a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	0d5b      	lsrs	r3, r3, #21
 8004146:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800414a:	4b08      	ldr	r3, [pc, #32]	@ (800416c <I2C_TransferConfig+0x60>)
 800414c:	430b      	orrs	r3, r1
 800414e:	43db      	mvns	r3, r3
 8004150:	ea02 0103 	and.w	r1, r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	03ff63ff 	.word	0x03ff63ff

08004170 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b20      	cmp	r3, #32
 8004184:	d138      	bne.n	80041f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004190:	2302      	movs	r3, #2
 8004192:	e032      	b.n	80041fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2224      	movs	r2, #36	@ 0x24
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0201 	bic.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e000      	b.n	80041fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
  }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b20      	cmp	r3, #32
 800421a:	d139      	bne.n	8004290 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004226:	2302      	movs	r3, #2
 8004228:	e033      	b.n	8004292 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2224      	movs	r2, #36	@ 0x24
 8004236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004258:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e000      	b.n	8004292 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0b9      	b.n	8004424 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f009 f9fb 	bl	800d6c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2203      	movs	r2, #3
 80042ce:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f003 fed5 	bl	8008086 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042dc:	2300      	movs	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	e03e      	b.n	8004360 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	440b      	add	r3, r1
 80042f0:	3311      	adds	r3, #17
 80042f2:	2201      	movs	r2, #1
 80042f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	440b      	add	r3, r1
 8004304:	3310      	adds	r3, #16
 8004306:	7bfa      	ldrb	r2, [r7, #15]
 8004308:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800430a:	7bfa      	ldrb	r2, [r7, #15]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	440b      	add	r3, r1
 8004318:	3313      	adds	r3, #19
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800431e:	7bfa      	ldrb	r2, [r7, #15]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	440b      	add	r3, r1
 800432c:	3320      	adds	r3, #32
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004332:	7bfa      	ldrb	r2, [r7, #15]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	440b      	add	r3, r1
 8004340:	3324      	adds	r3, #36	@ 0x24
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	440b      	add	r3, r1
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	3301      	adds	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	791b      	ldrb	r3, [r3, #4]
 8004364:	7bfa      	ldrb	r2, [r7, #15]
 8004366:	429a      	cmp	r2, r3
 8004368:	d3bb      	bcc.n	80042e2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800436a:	2300      	movs	r3, #0
 800436c:	73fb      	strb	r3, [r7, #15]
 800436e:	e044      	b.n	80043fa <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	440b      	add	r3, r1
 800437e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004386:	7bfa      	ldrb	r2, [r7, #15]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	440b      	add	r3, r1
 8004394:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004398:	7bfa      	ldrb	r2, [r7, #15]
 800439a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800439c:	7bfa      	ldrb	r2, [r7, #15]
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	440b      	add	r3, r1
 80043aa:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80043ae:	2200      	movs	r2, #0
 80043b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	440b      	add	r3, r1
 80043c0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	440b      	add	r3, r1
 80043d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043de:	7bfa      	ldrb	r2, [r7, #15]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	440b      	add	r3, r1
 80043ec:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	3301      	adds	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	791b      	ldrb	r3, [r3, #4]
 80043fe:	7bfa      	ldrb	r2, [r7, #15]
 8004400:	429a      	cmp	r2, r3
 8004402:	d3b5      	bcc.n	8004370 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004410:	f003 fe54 	bl	80080bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_PCD_Start+0x16>
 800443e:	2302      	movs	r3, #2
 8004440:	e016      	b.n	8004470 <HAL_PCD_Start+0x44>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f003 fe02 	bl	8008058 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004454:	2101      	movs	r1, #1
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f009 fbce 	bl	800dbf8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f006 f8bf 	bl	800a5e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f006 f8b8 	bl	800a5fa <USB_ReadInterrupts>
 800448a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fab1 	bl	80049fe <PCD_EP_ISR_Handler>

    return;
 800449c:	e0bd      	b.n	800461a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d013      	beq.n	80044d0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ba:	b292      	uxth	r2, r2
 80044bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f009 f99e 	bl	800d802 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80044c6:	2100      	movs	r1, #0
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f8a9 	bl	8004620 <HAL_PCD_SetAddress>

    return;
 80044ce:	e0a4      	b.n	800461a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00c      	beq.n	80044f4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044ec:	b292      	uxth	r2, r2
 80044ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80044f2:	e092      	b.n	800461a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00c      	beq.n	8004518 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004506:	b29a      	uxth	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004510:	b292      	uxth	r2, r2
 8004512:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004516:	e080      	b.n	800461a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d027      	beq.n	8004572 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800452a:	b29a      	uxth	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0204 	bic.w	r2, r2, #4
 8004534:	b292      	uxth	r2, r2
 8004536:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004542:	b29a      	uxth	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0208 	bic.w	r2, r2, #8
 800454c:	b292      	uxth	r2, r2
 800454e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f009 f98e 	bl	800d874 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004560:	b29a      	uxth	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800456a:	b292      	uxth	r2, r2
 800456c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004570:	e053      	b.n	800461a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004578:	2b00      	cmp	r3, #0
 800457a:	d027      	beq.n	80045cc <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004584:	b29a      	uxth	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0208 	orr.w	r2, r2, #8
 800458e:	b292      	uxth	r2, r2
 8004590:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800459c:	b29a      	uxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045a6:	b292      	uxth	r2, r2
 80045a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0204 	orr.w	r2, r2, #4
 80045be:	b292      	uxth	r2, r2
 80045c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f009 f93b 	bl	800d840 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80045ca:	e026      	b.n	800461a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00f      	beq.n	80045f6 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80045de:	b29a      	uxth	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80045e8:	b292      	uxth	r2, r2
 80045ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f009 f8f9 	bl	800d7e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80045f4:	e011      	b.n	800461a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00c      	beq.n	800461a <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004612:	b292      	uxth	r2, r2
 8004614:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004618:	bf00      	nop
  }
}
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_PCD_SetAddress+0x1a>
 8004636:	2302      	movs	r3, #2
 8004638:	e012      	b.n	8004660 <HAL_PCD_SetAddress+0x40>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	78fa      	ldrb	r2, [r7, #3]
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f005 ffb3 	bl	800a5bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	461a      	mov	r2, r3
 8004676:	4603      	mov	r3, r0
 8004678:	70fb      	strb	r3, [r7, #3]
 800467a:	460b      	mov	r3, r1
 800467c:	803b      	strh	r3, [r7, #0]
 800467e:	4613      	mov	r3, r2
 8004680:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800468a:	2b00      	cmp	r3, #0
 800468c:	da0e      	bge.n	80046ac <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	f003 0207 	and.w	r2, r3, #7
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	3310      	adds	r3, #16
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	705a      	strb	r2, [r3, #1]
 80046aa:	e00e      	b.n	80046ca <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	f003 0207 	and.w	r2, r3, #7
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4413      	add	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80046d6:	883a      	ldrh	r2, [r7, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	78ba      	ldrb	r2, [r7, #2]
 80046e0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046e2:	78bb      	ldrb	r3, [r7, #2]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d102      	bne.n	80046ee <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_PCD_EP_Open+0x94>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e00e      	b.n	800471a <HAL_PCD_EP_Open+0xb2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68f9      	ldr	r1, [r7, #12]
 800470a:	4618      	mov	r0, r3
 800470c:	f003 fcf4 	bl	80080f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004718:	7afb      	ldrb	r3, [r7, #11]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800472e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004732:	2b00      	cmp	r3, #0
 8004734:	da0e      	bge.n	8004754 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	f003 0207 	and.w	r2, r3, #7
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	3310      	adds	r3, #16
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	705a      	strb	r2, [r3, #1]
 8004752:	e00e      	b.n	8004772 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	f003 0207 	and.w	r2, r3, #7
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4413      	add	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_PCD_EP_Close+0x6a>
 8004788:	2302      	movs	r3, #2
 800478a:	e00e      	b.n	80047aa <HAL_PCD_EP_Close+0x88>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68f9      	ldr	r1, [r7, #12]
 800479a:	4618      	mov	r0, r3
 800479c:	f004 f870 	bl	8008880 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	460b      	mov	r3, r1
 80047c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047c2:	7afb      	ldrb	r3, [r7, #11]
 80047c4:	f003 0207 	and.w	r2, r3, #7
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2200      	movs	r2, #0
 80047ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2200      	movs	r2, #0
 80047f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047f2:	7afb      	ldrb	r3, [r7, #11]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6979      	ldr	r1, [r7, #20]
 8004804:	4618      	mov	r0, r3
 8004806:	f004 fa28 	bl	8008c5a <USB_EPStartXfer>

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	f003 0207 	and.w	r2, r3, #7
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	440b      	add	r3, r1
 8004832:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004836:	681b      	ldr	r3, [r3, #0]
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	460b      	mov	r3, r1
 8004852:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004854:	7afb      	ldrb	r3, [r7, #11]
 8004856:	f003 0207 	and.w	r2, r3, #7
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	3310      	adds	r3, #16
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2200      	movs	r2, #0
 8004888:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2201      	movs	r2, #1
 800488e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004890:	7afb      	ldrb	r3, [r7, #11]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	b2da      	uxtb	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6979      	ldr	r1, [r7, #20]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f004 f9d9 	bl	8008c5a <USB_EPStartXfer>

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	460b      	mov	r3, r1
 80048bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	7912      	ldrb	r2, [r2, #4]
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e03e      	b.n	800494e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	da0e      	bge.n	80048f6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	f003 0207 	and.w	r2, r3, #7
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	3310      	adds	r3, #16
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	4413      	add	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	705a      	strb	r2, [r3, #1]
 80048f4:	e00c      	b.n	8004910 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	4413      	add	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	b2da      	uxtb	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_PCD_EP_SetStall+0x7e>
 800492c:	2302      	movs	r3, #2
 800492e:	e00e      	b.n	800494e <HAL_PCD_EP_SetStall+0x9c>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68f9      	ldr	r1, [r7, #12]
 800493e:	4618      	mov	r0, r3
 8004940:	f005 fd3d 	bl	800a3be <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	7912      	ldrb	r2, [r2, #4]
 800496c:	4293      	cmp	r3, r2
 800496e:	d901      	bls.n	8004974 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e040      	b.n	80049f6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004978:	2b00      	cmp	r3, #0
 800497a:	da0e      	bge.n	800499a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	f003 0207 	and.w	r2, r3, #7
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	3310      	adds	r3, #16
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4413      	add	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	705a      	strb	r2, [r3, #1]
 8004998:	e00e      	b.n	80049b8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	f003 0207 	and.w	r2, r3, #7
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_PCD_EP_ClrStall+0x82>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e00e      	b.n	80049f6 <HAL_PCD_EP_ClrStall+0xa0>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68f9      	ldr	r1, [r7, #12]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f005 fd3a 	bl	800a460 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b096      	sub	sp, #88	@ 0x58
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a06:	e3bb      	b.n	8005180 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a10:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004a14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8004a22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f040 8175 	bne.w	8004d16 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d14e      	bne.n	8004ad6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004a44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a48:	81fb      	strh	r3, [r7, #14]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	89fb      	ldrh	r3, [r7, #14]
 8004a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3310      	adds	r3, #16
 8004a60:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4413      	add	r3, r2
 8004a76:	3302      	adds	r3, #2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	441a      	add	r2, r3
 8004a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a9a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f008 fe87 	bl	800d7b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	7b1b      	ldrb	r3, [r3, #12]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 8368 	beq.w	8005180 <PCD_EP_ISR_Handler+0x782>
 8004ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f040 8363 	bne.w	8005180 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	7b1b      	ldrb	r3, [r3, #12]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	731a      	strb	r2, [r3, #12]
 8004ad4:	e354      	b.n	8005180 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004adc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004ae8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d034      	beq.n	8004b5e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4413      	add	r3, r2
 8004b08:	3306      	adds	r3, #6
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b1e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b2c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b30:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f005 fdb8 	bl	800a6a8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004b44:	4013      	ands	r3, r2
 8004b46:	823b      	strh	r3, [r7, #16]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	8a3a      	ldrh	r2, [r7, #16]
 8004b4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b52:	b292      	uxth	r2, r2
 8004b54:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f008 fdfe 	bl	800d758 <HAL_PCD_SetupStageCallback>
 8004b5c:	e310      	b.n	8005180 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f280 830c 	bge.w	8005180 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004b74:	4013      	ands	r3, r2
 8004b76:	83fb      	strh	r3, [r7, #30]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	8bfa      	ldrh	r2, [r7, #30]
 8004b7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b82:	b292      	uxth	r2, r2
 8004b84:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	3306      	adds	r3, #6
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d019      	beq.n	8004bee <PCD_EP_ISR_Handler+0x1f0>
 8004bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d015      	beq.n	8004bee <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc8:	6959      	ldr	r1, [r3, #20]
 8004bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bcc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f005 fd68 	bl	800a6a8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bda:	695a      	ldr	r2, [r3, #20]
 8004bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	441a      	add	r2, r3
 8004be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004be6:	2100      	movs	r1, #0
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f008 fdc7 	bl	800d77c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004bf8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f040 82bd 	bne.w	8005180 <PCD_EP_ISR_Handler+0x782>
 8004c06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004c0a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c12:	f000 82b5 	beq.w	8005180 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	801a      	strh	r2, [r3, #0]
 8004c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <PCD_EP_ISR_Handler+0x266>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	e039      	b.n	8004cd8 <PCD_EP_ISR_Handler+0x2da>
 8004c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c6a:	d818      	bhi.n	8004c9e <PCD_EP_ISR_Handler+0x2a0>
 8004c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <PCD_EP_ISR_Handler+0x288>
 8004c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c82:	3301      	adds	r3, #1
 8004c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	029b      	lsls	r3, r3, #10
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	4313      	orrs	r3, r2
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	e01c      	b.n	8004cd8 <PCD_EP_ISR_Handler+0x2da>
 8004c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <PCD_EP_ISR_Handler+0x2ba>
 8004cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	029b      	lsls	r3, r3, #10
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce8:	827b      	strh	r3, [r7, #18]
 8004cea:	8a7b      	ldrh	r3, [r7, #18]
 8004cec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004cf0:	827b      	strh	r3, [r7, #18]
 8004cf2:	8a7b      	ldrh	r3, [r7, #18]
 8004cf4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004cf8:	827b      	strh	r3, [r7, #18]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	8a7b      	ldrh	r3, [r7, #18]
 8004d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	8013      	strh	r3, [r2, #0]
 8004d14:	e234      	b.n	8005180 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d2a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f280 80fc 	bge.w	8004f2c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8004d62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d66:	b292      	uxth	r2, r2
 8004d68:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004d6a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d82:	7b1b      	ldrb	r3, [r3, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d125      	bne.n	8004dd4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3306      	adds	r3, #6
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004db0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004db4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8092 	beq.w	8004ee2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc4:	6959      	ldr	r1, [r3, #20]
 8004dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc8:	88da      	ldrh	r2, [r3, #6]
 8004dca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004dce:	f005 fc6b 	bl	800a6a8 <USB_ReadPMA>
 8004dd2:	e086      	b.n	8004ee2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd6:	78db      	ldrb	r3, [r3, #3]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d10a      	bne.n	8004df2 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ddc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004de0:	461a      	mov	r2, r3
 8004de2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f9d9 	bl	800519c <HAL_PCD_EP_DB_Receive>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004df0:	e077      	b.n	8004ee2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	441a      	add	r2, r3
 8004e1e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d024      	beq.n	8004e9a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	4413      	add	r3, r2
 8004e64:	3302      	adds	r3, #2
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e78:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004e7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d02e      	beq.n	8004ee2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e8a:	6959      	ldr	r1, [r3, #20]
 8004e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e8e:	891a      	ldrh	r2, [r3, #8]
 8004e90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004e94:	f005 fc08 	bl	800a6a8 <USB_ReadPMA>
 8004e98:	e023      	b.n	8004ee2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4413      	add	r3, r2
 8004eae:	3306      	adds	r3, #6
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ec2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004ec6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed4:	6959      	ldr	r1, [r3, #20]
 8004ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed8:	895a      	ldrh	r2, [r3, #10]
 8004eda:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ede:	f005 fbe3 	bl	800a6a8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee4:	69da      	ldr	r2, [r3, #28]
 8004ee6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004eea:	441a      	add	r2, r3
 8004eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ef8:	441a      	add	r2, r3
 8004efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <PCD_EP_ISR_Handler+0x514>
 8004f06:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d206      	bcs.n	8004f20 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	4619      	mov	r1, r3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f008 fc2f 	bl	800d77c <HAL_PCD_DataOutStageCallback>
 8004f1e:	e005      	b.n	8004f2c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f26:	4618      	mov	r0, r3
 8004f28:	f003 fe97 	bl	8008c5a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004f2c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8123 	beq.w	8005180 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004f3a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	3310      	adds	r3, #16
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	461a      	mov	r2, r3
 8004f54:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f68:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	441a      	add	r2, r3
 8004f7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8c:	78db      	ldrb	r3, [r3, #3]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	f040 80a2 	bne.w	80050d8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f96:	2200      	movs	r2, #0
 8004f98:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9c:	7b1b      	ldrb	r3, [r3, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8093 	beq.w	80050ca <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004fa4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d046      	beq.n	800503e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d126      	bne.n	8005006 <PCD_EP_ISR_Handler+0x608>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	4413      	add	r3, r2
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	011a      	lsls	r2, r3, #4
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	4413      	add	r3, r2
 8004fda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fde:	623b      	str	r3, [r7, #32]
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	e061      	b.n	80050ca <PCD_EP_ISR_Handler+0x6cc>
 8005006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005008:	785b      	ldrb	r3, [r3, #1]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d15d      	bne.n	80050ca <PCD_EP_ISR_Handler+0x6cc>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800501c:	b29b      	uxth	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005022:	4413      	add	r3, r2
 8005024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	011a      	lsls	r2, r3, #4
 800502c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502e:	4413      	add	r3, r2
 8005030:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005038:	2200      	movs	r2, #0
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	e045      	b.n	80050ca <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005046:	785b      	ldrb	r3, [r3, #1]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d126      	bne.n	800509a <PCD_EP_ISR_Handler+0x69c>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	637b      	str	r3, [r7, #52]	@ 0x34
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800505a:	b29b      	uxth	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005060:	4413      	add	r3, r2
 8005062:	637b      	str	r3, [r7, #52]	@ 0x34
 8005064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	011a      	lsls	r2, r3, #4
 800506a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506c:	4413      	add	r3, r2
 800506e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005072:	633b      	str	r3, [r7, #48]	@ 0x30
 8005074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800507e:	b29a      	uxth	r2, r3
 8005080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005082:	801a      	strh	r2, [r3, #0]
 8005084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800508e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005092:	b29a      	uxth	r2, r3
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	e017      	b.n	80050ca <PCD_EP_ISR_Handler+0x6cc>
 800509a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d113      	bne.n	80050ca <PCD_EP_ISR_Handler+0x6cc>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b0:	4413      	add	r3, r2
 80050b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	011a      	lsls	r2, r3, #4
 80050ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050bc:	4413      	add	r3, r2
 80050be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c6:	2200      	movs	r2, #0
 80050c8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	4619      	mov	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f008 fb6e 	bl	800d7b2 <HAL_PCD_DataInStageCallback>
 80050d6:	e053      	b.n	8005180 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80050d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80050dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d146      	bne.n	8005172 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	4413      	add	r3, r2
 80050f8:	3302      	adds	r3, #2
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800510c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005118:	429a      	cmp	r2, r3
 800511a:	d907      	bls.n	800512c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800511c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800511e:	699a      	ldr	r2, [r3, #24]
 8005120:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005124:	1ad2      	subs	r2, r2, r3
 8005126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005128:	619a      	str	r2, [r3, #24]
 800512a:	e002      	b.n	8005132 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800512c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800512e:	2200      	movs	r2, #0
 8005130:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800513a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f008 fb36 	bl	800d7b2 <HAL_PCD_DataInStageCallback>
 8005146:	e01b      	b.n	8005180 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800514a:	695a      	ldr	r2, [r3, #20]
 800514c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005150:	441a      	add	r2, r3
 8005152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005154:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005158:	69da      	ldr	r2, [r3, #28]
 800515a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800515e:	441a      	add	r2, r3
 8005160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005162:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800516a:	4618      	mov	r0, r3
 800516c:	f003 fd75 	bl	8008c5a <USB_EPStartXfer>
 8005170:	e006      	b.n	8005180 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005172:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005176:	461a      	mov	r2, r3
 8005178:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f91b 	bl	80053b6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005188:	b29b      	uxth	r3, r3
 800518a:	b21b      	sxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	f6ff ac3b 	blt.w	8004a08 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3758      	adds	r7, #88	@ 0x58
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	4613      	mov	r3, r2
 80051a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d07e      	beq.n	80052b2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051bc:	b29b      	uxth	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4413      	add	r3, r2
 80051c8:	3302      	adds	r3, #2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051dc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	8b7b      	ldrh	r3, [r7, #26]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d306      	bcc.n	80051f6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	8b7b      	ldrh	r3, [r7, #26]
 80051ee:	1ad2      	subs	r2, r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	619a      	str	r2, [r3, #24]
 80051f4:	e002      	b.n	80051fc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2200      	movs	r2, #0
 80051fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d123      	bne.n	800524c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800521a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521e:	833b      	strh	r3, [r7, #24]
 8005220:	8b3b      	ldrh	r3, [r7, #24]
 8005222:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005226:	833b      	strh	r3, [r7, #24]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	441a      	add	r2, r3
 8005236:	8b3b      	ldrh	r3, [r7, #24]
 8005238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800523c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005240:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005248:	b29b      	uxth	r3, r3
 800524a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01f      	beq.n	8005296 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800526c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005270:	82fb      	strh	r3, [r7, #22]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	441a      	add	r2, r3
 8005280:	8afb      	ldrh	r3, [r7, #22]
 8005282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800528a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800528e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005292:	b29b      	uxth	r3, r3
 8005294:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005296:	8b7b      	ldrh	r3, [r7, #26]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8087 	beq.w	80053ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6959      	ldr	r1, [r3, #20]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	891a      	ldrh	r2, [r3, #8]
 80052aa:	8b7b      	ldrh	r3, [r7, #26]
 80052ac:	f005 f9fc 	bl	800a6a8 <USB_ReadPMA>
 80052b0:	e07c      	b.n	80053ac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4413      	add	r3, r2
 80052c6:	3306      	adds	r3, #6
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	699a      	ldr	r2, [r3, #24]
 80052e0:	8b7b      	ldrh	r3, [r7, #26]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d306      	bcc.n	80052f4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	8b7b      	ldrh	r3, [r7, #26]
 80052ec:	1ad2      	subs	r2, r2, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	619a      	str	r2, [r3, #24]
 80052f2:	e002      	b.n	80052fa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2200      	movs	r2, #0
 80052f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d123      	bne.n	800534a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531c:	83fb      	strh	r3, [r7, #30]
 800531e:	8bfb      	ldrh	r3, [r7, #30]
 8005320:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005324:	83fb      	strh	r3, [r7, #30]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	441a      	add	r2, r3
 8005334:	8bfb      	ldrh	r3, [r7, #30]
 8005336:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800533a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800533e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005346:	b29b      	uxth	r3, r3
 8005348:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d11f      	bne.n	8005394 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800536a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536e:	83bb      	strh	r3, [r7, #28]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	441a      	add	r2, r3
 800537e:	8bbb      	ldrh	r3, [r7, #28]
 8005380:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005384:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005388:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800538c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005390:	b29b      	uxth	r3, r3
 8005392:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005394:	8b7b      	ldrh	r3, [r7, #26]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6959      	ldr	r1, [r3, #20]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	895a      	ldrh	r2, [r3, #10]
 80053a6:	8b7b      	ldrh	r3, [r7, #26]
 80053a8:	f005 f97e 	bl	800a6a8 <USB_ReadPMA>
    }
  }

  return count;
 80053ac:	8b7b      	ldrh	r3, [r7, #26]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b0a4      	sub	sp, #144	@ 0x90
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	4613      	mov	r3, r2
 80053c2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 81dd 	beq.w	800578a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053d8:	b29b      	uxth	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4413      	add	r3, r2
 80053e4:	3302      	adds	r3, #2
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053f8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005404:	429a      	cmp	r2, r3
 8005406:	d907      	bls.n	8005418 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	699a      	ldr	r2, [r3, #24]
 800540c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005410:	1ad2      	subs	r2, r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	619a      	str	r2, [r3, #24]
 8005416:	e002      	b.n	800541e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2200      	movs	r2, #0
 800541c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	2b00      	cmp	r3, #0
 8005424:	f040 80b9 	bne.w	800559a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d126      	bne.n	800547e <HAL_PCD_EP_DB_Transmit+0xc8>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800543e:	b29b      	uxth	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005444:	4413      	add	r3, r2
 8005446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	011a      	lsls	r2, r3, #4
 800544e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005450:	4413      	add	r3, r2
 8005452:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005456:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005462:	b29a      	uxth	r2, r3
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005476:	b29a      	uxth	r2, r3
 8005478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	e01a      	b.n	80054b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d116      	bne.n	80054b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	637b      	str	r3, [r7, #52]	@ 0x34
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005494:	b29b      	uxth	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549a:	4413      	add	r3, r2
 800549c:	637b      	str	r3, [r7, #52]	@ 0x34
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	011a      	lsls	r2, r3, #4
 80054a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a6:	4413      	add	r3, r2
 80054a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b0:	2200      	movs	r2, #0
 80054b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d126      	bne.n	8005510 <HAL_PCD_EP_DB_Transmit+0x15a>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	61fb      	str	r3, [r7, #28]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	011a      	lsls	r2, r3, #4
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005508:	b29a      	uxth	r2, r3
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	e017      	b.n	8005540 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d113      	bne.n	8005540 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005520:	b29b      	uxth	r3, r3
 8005522:	461a      	mov	r2, r3
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	4413      	add	r3, r2
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	011a      	lsls	r2, r3, #4
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	4413      	add	r3, r2
 8005534:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005538:	623b      	str	r3, [r7, #32]
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	2200      	movs	r2, #0
 800553e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	4619      	mov	r1, r3
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f008 f933 	bl	800d7b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 82fc 	beq.w	8005b50 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800556e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005572:	82fb      	strh	r3, [r7, #22]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	8afb      	ldrh	r3, [r7, #22]
 8005584:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005588:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800558c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005594:	b29b      	uxth	r3, r3
 8005596:	8013      	strh	r3, [r2, #0]
 8005598:	e2da      	b.n	8005b50 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d021      	beq.n	80055e8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055be:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	441a      	add	r2, r3
 80055d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80055d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	f040 82ae 	bne.w	8005b50 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	695a      	ldr	r2, [r3, #20]
 80055f8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80055fc:	441a      	add	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	69da      	ldr	r2, [r3, #28]
 8005606:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800560a:	441a      	add	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6a1a      	ldr	r2, [r3, #32]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	429a      	cmp	r2, r3
 800561a:	d30b      	bcc.n	8005634 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	6a1a      	ldr	r2, [r3, #32]
 8005628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800562c:	1ad2      	subs	r2, r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	621a      	str	r2, [r3, #32]
 8005632:	e017      	b.n	8005664 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d108      	bne.n	800564e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800563c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005640:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800564c:	e00a      	b.n	8005664 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2200      	movs	r2, #0
 8005662:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	785b      	ldrb	r3, [r3, #1]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d165      	bne.n	8005738 <HAL_PCD_EP_DB_Transmit+0x382>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800567a:	b29b      	uxth	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005680:	4413      	add	r3, r2
 8005682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	011a      	lsls	r2, r3, #4
 800568a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800568c:	4413      	add	r3, r2
 800568e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005692:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800569e:	b29a      	uxth	r2, r3
 80056a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a2:	801a      	strh	r2, [r3, #0]
 80056a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x30c>
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056be:	801a      	strh	r2, [r3, #0]
 80056c0:	e057      	b.n	8005772 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80056c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80056c8:	d818      	bhi.n	80056fc <HAL_PCD_EP_DB_Transmit+0x346>
 80056ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_PCD_EP_DB_Transmit+0x32e>
 80056de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056e0:	3301      	adds	r3, #1
 80056e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	029b      	lsls	r3, r3, #10
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	4313      	orrs	r3, r2
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f8:	801a      	strh	r2, [r3, #0]
 80056fa:	e03a      	b.n	8005772 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80056fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005700:	095b      	lsrs	r3, r3, #5
 8005702:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005704:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005708:	f003 031f 	and.w	r3, r3, #31
 800570c:	2b00      	cmp	r3, #0
 800570e:	d102      	bne.n	8005716 <HAL_PCD_EP_DB_Transmit+0x360>
 8005710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005712:	3b01      	subs	r3, #1
 8005714:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29a      	uxth	r2, r3
 800571c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800571e:	b29b      	uxth	r3, r3
 8005720:	029b      	lsls	r3, r3, #10
 8005722:	b29b      	uxth	r3, r3
 8005724:	4313      	orrs	r3, r2
 8005726:	b29b      	uxth	r3, r3
 8005728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005730:	b29a      	uxth	r2, r3
 8005732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	e01c      	b.n	8005772 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d118      	bne.n	8005772 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	647b      	str	r3, [r7, #68]	@ 0x44
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800574e:	b29b      	uxth	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005754:	4413      	add	r3, r2
 8005756:	647b      	str	r3, [r7, #68]	@ 0x44
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	011a      	lsls	r2, r3, #4
 800575e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005760:	4413      	add	r3, r2
 8005762:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005766:	643b      	str	r3, [r7, #64]	@ 0x40
 8005768:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800576c:	b29a      	uxth	r2, r3
 800576e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005770:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	6959      	ldr	r1, [r3, #20]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	891a      	ldrh	r2, [r3, #8]
 800577e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005782:	b29b      	uxth	r3, r3
 8005784:	f004 ff49 	bl	800a61a <USB_WritePMA>
 8005788:	e1e2      	b.n	8005b50 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005792:	b29b      	uxth	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4413      	add	r3, r2
 800579e:	3306      	adds	r3, #6
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057b2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80057be:	429a      	cmp	r2, r3
 80057c0:	d307      	bcc.n	80057d2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80057ca:	1ad2      	subs	r2, r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	619a      	str	r2, [r3, #24]
 80057d0:	e002      	b.n	80057d8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2200      	movs	r2, #0
 80057d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f040 80c0 	bne.w	8005962 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d126      	bne.n	8005838 <HAL_PCD_EP_DB_Transmit+0x482>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	461a      	mov	r2, r3
 80057fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057fe:	4413      	add	r3, r2
 8005800:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	011a      	lsls	r2, r3, #4
 8005808:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800580a:	4413      	add	r3, r2
 800580c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005810:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005812:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800581c:	b29a      	uxth	r2, r3
 800581e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005820:	801a      	strh	r2, [r3, #0]
 8005822:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005830:	b29a      	uxth	r2, r3
 8005832:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	e01a      	b.n	800586e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d116      	bne.n	800586e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	667b      	str	r3, [r7, #100]	@ 0x64
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800584e:	b29b      	uxth	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005854:	4413      	add	r3, r2
 8005856:	667b      	str	r3, [r7, #100]	@ 0x64
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	011a      	lsls	r2, r3, #4
 800585e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005860:	4413      	add	r3, r2
 8005862:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005866:	663b      	str	r3, [r7, #96]	@ 0x60
 8005868:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800586a:	2200      	movs	r2, #0
 800586c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	677b      	str	r3, [r7, #116]	@ 0x74
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d12b      	bne.n	80058d4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800588a:	b29b      	uxth	r3, r3
 800588c:	461a      	mov	r2, r3
 800588e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005890:	4413      	add	r3, r2
 8005892:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	011a      	lsls	r2, r3, #4
 800589a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800589c:	4413      	add	r3, r2
 800589e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	e017      	b.n	8005904 <HAL_PCD_EP_DB_Transmit+0x54e>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d113      	bne.n	8005904 <HAL_PCD_EP_DB_Transmit+0x54e>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058ea:	4413      	add	r3, r2
 80058ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	011a      	lsls	r2, r3, #4
 80058f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058f6:	4413      	add	r3, r2
 80058f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80058fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005900:	2200      	movs	r2, #0
 8005902:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	4619      	mov	r1, r3
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f007 ff51 	bl	800d7b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005910:	88fb      	ldrh	r3, [r7, #6]
 8005912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 811a 	bne.w	8005b50 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	461a      	mov	r2, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005936:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	441a      	add	r2, r3
 8005948:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800594c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005950:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005954:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800595c:	b29b      	uxth	r3, r3
 800595e:	8013      	strh	r3, [r2, #0]
 8005960:	e0f6      	b.n	8005b50 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d121      	bne.n	80059b0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005986:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	441a      	add	r2, r3
 8005998:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800599c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	f040 80ca 	bne.w	8005b50 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	695a      	ldr	r2, [r3, #20]
 80059c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80059c4:	441a      	add	r2, r3
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80059d2:	441a      	add	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	6a1a      	ldr	r2, [r3, #32]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d30b      	bcc.n	80059fc <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059f4:	1ad2      	subs	r2, r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	621a      	str	r2, [r3, #32]
 80059fa:	e017      	b.n	8005a2c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d108      	bne.n	8005a16 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005a04:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005a08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005a14:	e00a      	b.n	8005a2c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2200      	movs	r2, #0
 8005a22:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d165      	bne.n	8005b06 <HAL_PCD_EP_DB_Transmit+0x750>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a4e:	4413      	add	r3, r2
 8005a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	011a      	lsls	r2, r3, #4
 8005a58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10a      	bne.n	8005a90 <HAL_PCD_EP_DB_Transmit+0x6da>
 8005a7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	e054      	b.n	8005b3a <HAL_PCD_EP_DB_Transmit+0x784>
 8005a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a94:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a96:	d818      	bhi.n	8005aca <HAL_PCD_EP_DB_Transmit+0x714>
 8005a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aae:	3301      	adds	r3, #1
 8005ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	029b      	lsls	r3, r3, #10
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ac6:	801a      	strh	r2, [r3, #0]
 8005ac8:	e037      	b.n	8005b3a <HAL_PCD_EP_DB_Transmit+0x784>
 8005aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005ade:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ae4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	029b      	lsls	r3, r3, #10
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	e019      	b.n	8005b3a <HAL_PCD_EP_DB_Transmit+0x784>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	785b      	ldrb	r3, [r3, #1]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d115      	bne.n	8005b3a <HAL_PCD_EP_DB_Transmit+0x784>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b1c:	4413      	add	r3, r2
 8005b1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	011a      	lsls	r2, r3, #4
 8005b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b28:	4413      	add	r3, r2
 8005b2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b38:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6959      	ldr	r1, [r3, #20]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	895a      	ldrh	r2, [r3, #10]
 8005b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f004 fd65 	bl	800a61a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b6a:	82bb      	strh	r3, [r7, #20]
 8005b6c:	8abb      	ldrh	r3, [r7, #20]
 8005b6e:	f083 0310 	eor.w	r3, r3, #16
 8005b72:	82bb      	strh	r3, [r7, #20]
 8005b74:	8abb      	ldrh	r3, [r7, #20]
 8005b76:	f083 0320 	eor.w	r3, r3, #32
 8005b7a:	82bb      	strh	r3, [r7, #20]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	441a      	add	r2, r3
 8005b8a:	8abb      	ldrh	r3, [r7, #20]
 8005b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3790      	adds	r7, #144	@ 0x90
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b087      	sub	sp, #28
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	607b      	str	r3, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	817b      	strh	r3, [r7, #10]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005bbc:	897b      	ldrh	r3, [r7, #10]
 8005bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bc8:	897b      	ldrh	r3, [r7, #10]
 8005bca:	f003 0207 	and.w	r2, r3, #7
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	3310      	adds	r3, #16
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	e009      	b.n	8005bf4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005be0:	897a      	ldrh	r2, [r7, #10]
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005bf4:	893b      	ldrh	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d107      	bne.n	8005c0a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	80da      	strh	r2, [r3, #6]
 8005c08:	e00b      	b.n	8005c22 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	0c1b      	lsrs	r3, r3, #16
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c40:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	f000 bff4 	b.w	8006c3e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 816d 	beq.w	8005f46 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005c6c:	4bb4      	ldr	r3, [pc, #720]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f003 030c 	and.w	r3, r3, #12
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d00c      	beq.n	8005c92 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c78:	4bb1      	ldr	r3, [pc, #708]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f003 030c 	and.w	r3, r3, #12
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d157      	bne.n	8005d34 <HAL_RCC_OscConfig+0x104>
 8005c84:	4bae      	ldr	r3, [pc, #696]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c90:	d150      	bne.n	8005d34 <HAL_RCC_OscConfig+0x104>
 8005c92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c96:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005c9e:	fa93 f3a3 	rbit	r3, r3
 8005ca2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ca6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005caa:	fab3 f383 	clz	r3, r3
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b3f      	cmp	r3, #63	@ 0x3f
 8005cb2:	d802      	bhi.n	8005cba <HAL_RCC_OscConfig+0x8a>
 8005cb4:	4ba2      	ldr	r3, [pc, #648]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	e015      	b.n	8005ce6 <HAL_RCC_OscConfig+0xb6>
 8005cba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cbe:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005cc6:	fa93 f3a3 	rbit	r3, r3
 8005cca:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005cce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cd2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005cd6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005cda:	fa93 f3a3 	rbit	r3, r3
 8005cde:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005ce2:	4b97      	ldr	r3, [pc, #604]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005cea:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005cee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005cf2:	fa92 f2a2 	rbit	r2, r2
 8005cf6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8005cfa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005cfe:	fab2 f282 	clz	r2, r2
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	f042 0220 	orr.w	r2, r2, #32
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	f002 021f 	and.w	r2, r2, #31
 8005d0e:	2101      	movs	r1, #1
 8005d10:	fa01 f202 	lsl.w	r2, r1, r2
 8005d14:	4013      	ands	r3, r2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8114 	beq.w	8005f44 <HAL_RCC_OscConfig+0x314>
 8005d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f040 810b 	bne.w	8005f44 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f000 bf85 	b.w	8006c3e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d44:	d106      	bne.n	8005d54 <HAL_RCC_OscConfig+0x124>
 8005d46:	4b7e      	ldr	r3, [pc, #504]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a7d      	ldr	r2, [pc, #500]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	e036      	b.n	8005dc2 <HAL_RCC_OscConfig+0x192>
 8005d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10c      	bne.n	8005d7e <HAL_RCC_OscConfig+0x14e>
 8005d64:	4b76      	ldr	r3, [pc, #472]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a75      	ldr	r2, [pc, #468]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	4b73      	ldr	r3, [pc, #460]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a72      	ldr	r2, [pc, #456]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	e021      	b.n	8005dc2 <HAL_RCC_OscConfig+0x192>
 8005d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d8e:	d10c      	bne.n	8005daa <HAL_RCC_OscConfig+0x17a>
 8005d90:	4b6b      	ldr	r3, [pc, #428]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a6a      	ldr	r2, [pc, #424]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005d96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	4b68      	ldr	r3, [pc, #416]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a67      	ldr	r2, [pc, #412]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	e00b      	b.n	8005dc2 <HAL_RCC_OscConfig+0x192>
 8005daa:	4b65      	ldr	r3, [pc, #404]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a64      	ldr	r2, [pc, #400]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	4b62      	ldr	r3, [pc, #392]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a61      	ldr	r2, [pc, #388]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005dbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dc0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005dc2:	4b5f      	ldr	r3, [pc, #380]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc6:	f023 020f 	bic.w	r2, r3, #15
 8005dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	495a      	ldr	r1, [pc, #360]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005de0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d054      	beq.n	8005e96 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dec:	f7fb ffc8 	bl	8001d80 <HAL_GetTick>
 8005df0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df4:	e00a      	b.n	8005e0c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df6:	f7fb ffc3 	bl	8001d80 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b64      	cmp	r3, #100	@ 0x64
 8005e04:	d902      	bls.n	8005e0c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	f000 bf19 	b.w	8006c3e <HAL_RCC_OscConfig+0x100e>
 8005e0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e10:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005e18:	fa93 f3a3 	rbit	r3, r3
 8005e1c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005e20:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e24:	fab3 f383 	clz	r3, r3
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8005e2c:	d802      	bhi.n	8005e34 <HAL_RCC_OscConfig+0x204>
 8005e2e:	4b44      	ldr	r3, [pc, #272]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	e015      	b.n	8005e60 <HAL_RCC_OscConfig+0x230>
 8005e34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e38:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005e40:	fa93 f3a3 	rbit	r3, r3
 8005e44:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005e48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e4c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005e50:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005e54:	fa93 f3a3 	rbit	r3, r3
 8005e58:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005e5c:	4b38      	ldr	r3, [pc, #224]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005e64:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005e68:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005e6c:	fa92 f2a2 	rbit	r2, r2
 8005e70:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005e74:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005e78:	fab2 f282 	clz	r2, r2
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	f042 0220 	orr.w	r2, r2, #32
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	f002 021f 	and.w	r2, r2, #31
 8005e88:	2101      	movs	r1, #1
 8005e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0b0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x1c6>
 8005e94:	e057      	b.n	8005f46 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e96:	f7fb ff73 	bl	8001d80 <HAL_GetTick>
 8005e9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9e:	e00a      	b.n	8005eb6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea0:	f7fb ff6e 	bl	8001d80 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b64      	cmp	r3, #100	@ 0x64
 8005eae:	d902      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	f000 bec4 	b.w	8006c3e <HAL_RCC_OscConfig+0x100e>
 8005eb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005eba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ebe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005ec2:	fa93 f3a3 	rbit	r3, r3
 8005ec6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005eca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ece:	fab3 f383 	clz	r3, r3
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ed6:	d802      	bhi.n	8005ede <HAL_RCC_OscConfig+0x2ae>
 8005ed8:	4b19      	ldr	r3, [pc, #100]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	e015      	b.n	8005f0a <HAL_RCC_OscConfig+0x2da>
 8005ede:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ee2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005eea:	fa93 f3a3 	rbit	r3, r3
 8005eee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005ef2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ef6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005efa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005efe:	fa93 f3a3 	rbit	r3, r3
 8005f02:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8005f06:	4b0e      	ldr	r3, [pc, #56]	@ (8005f40 <HAL_RCC_OscConfig+0x310>)
 8005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005f0e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005f12:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005f16:	fa92 f2a2 	rbit	r2, r2
 8005f1a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005f1e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005f22:	fab2 f282 	clz	r2, r2
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	f042 0220 	orr.w	r2, r2, #32
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	f002 021f 	and.w	r2, r2, #31
 8005f32:	2101      	movs	r1, #1
 8005f34:	fa01 f202 	lsl.w	r2, r1, r2
 8005f38:	4013      	ands	r3, r2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1b0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x270>
 8005f3e:	e002      	b.n	8005f46 <HAL_RCC_OscConfig+0x316>
 8005f40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 816c 	beq.w	8006234 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005f5c:	4bcc      	ldr	r3, [pc, #816]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f003 030c 	and.w	r3, r3, #12
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00b      	beq.n	8005f80 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005f68:	4bc9      	ldr	r3, [pc, #804]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f003 030c 	and.w	r3, r3, #12
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d16d      	bne.n	8006050 <HAL_RCC_OscConfig+0x420>
 8005f74:	4bc6      	ldr	r3, [pc, #792]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d167      	bne.n	8006050 <HAL_RCC_OscConfig+0x420>
 8005f80:	2302      	movs	r3, #2
 8005f82:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f86:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005f8a:	fa93 f3a3 	rbit	r3, r3
 8005f8e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005f92:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f96:	fab3 f383 	clz	r3, r3
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8005f9e:	d802      	bhi.n	8005fa6 <HAL_RCC_OscConfig+0x376>
 8005fa0:	4bbb      	ldr	r3, [pc, #748]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	e013      	b.n	8005fce <HAL_RCC_OscConfig+0x39e>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fac:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005fb0:	fa93 f3a3 	rbit	r3, r3
 8005fb4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005fb8:	2302      	movs	r3, #2
 8005fba:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005fbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005fc2:	fa93 f3a3 	rbit	r3, r3
 8005fc6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005fca:	4bb1      	ldr	r3, [pc, #708]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8005fd4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005fd8:	fa92 f2a2 	rbit	r2, r2
 8005fdc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8005fe0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005fe4:	fab2 f282 	clz	r2, r2
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	f042 0220 	orr.w	r2, r2, #32
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	f002 021f 	and.w	r2, r2, #31
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <HAL_RCC_OscConfig+0x3e6>
 8006000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006004:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d002      	beq.n	8006016 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f000 be14 	b.w	8006c3e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006016:	4b9e      	ldr	r3, [pc, #632]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800601e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006022:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	21f8      	movs	r1, #248	@ 0xf8
 800602c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006030:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8006034:	fa91 f1a1 	rbit	r1, r1
 8006038:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800603c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8006040:	fab1 f181 	clz	r1, r1
 8006044:	b2c9      	uxtb	r1, r1
 8006046:	408b      	lsls	r3, r1
 8006048:	4991      	ldr	r1, [pc, #580]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 800604a:	4313      	orrs	r3, r2
 800604c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800604e:	e0f1      	b.n	8006234 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006054:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8083 	beq.w	8006168 <HAL_RCC_OscConfig+0x538>
 8006062:	2301      	movs	r3, #1
 8006064:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006068:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800606c:	fa93 f3a3 	rbit	r3, r3
 8006070:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8006074:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006078:	fab3 f383 	clz	r3, r3
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006082:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	461a      	mov	r2, r3
 800608a:	2301      	movs	r3, #1
 800608c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608e:	f7fb fe77 	bl	8001d80 <HAL_GetTick>
 8006092:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006096:	e00a      	b.n	80060ae <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006098:	f7fb fe72 	bl	8001d80 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d902      	bls.n	80060ae <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	f000 bdc8 	b.w	8006c3e <HAL_RCC_OscConfig+0x100e>
 80060ae:	2302      	movs	r3, #2
 80060b0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80060b8:	fa93 f3a3 	rbit	r3, r3
 80060bc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80060c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c4:	fab3 f383 	clz	r3, r3
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80060cc:	d802      	bhi.n	80060d4 <HAL_RCC_OscConfig+0x4a4>
 80060ce:	4b70      	ldr	r3, [pc, #448]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	e013      	b.n	80060fc <HAL_RCC_OscConfig+0x4cc>
 80060d4:	2302      	movs	r3, #2
 80060d6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060da:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80060de:	fa93 f3a3 	rbit	r3, r3
 80060e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80060e6:	2302      	movs	r3, #2
 80060e8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80060ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80060f0:	fa93 f3a3 	rbit	r3, r3
 80060f4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80060f8:	4b65      	ldr	r3, [pc, #404]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 80060fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fc:	2202      	movs	r2, #2
 80060fe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8006102:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8006106:	fa92 f2a2 	rbit	r2, r2
 800610a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800610e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8006112:	fab2 f282 	clz	r2, r2
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	f042 0220 	orr.w	r2, r2, #32
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	f002 021f 	and.w	r2, r2, #31
 8006122:	2101      	movs	r1, #1
 8006124:	fa01 f202 	lsl.w	r2, r1, r2
 8006128:	4013      	ands	r3, r2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0b4      	beq.n	8006098 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612e:	4b58      	ldr	r3, [pc, #352]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800613a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	21f8      	movs	r1, #248	@ 0xf8
 8006144:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006148:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800614c:	fa91 f1a1 	rbit	r1, r1
 8006150:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8006154:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8006158:	fab1 f181 	clz	r1, r1
 800615c:	b2c9      	uxtb	r1, r1
 800615e:	408b      	lsls	r3, r1
 8006160:	494b      	ldr	r1, [pc, #300]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 8006162:	4313      	orrs	r3, r2
 8006164:	600b      	str	r3, [r1, #0]
 8006166:	e065      	b.n	8006234 <HAL_RCC_OscConfig+0x604>
 8006168:	2301      	movs	r3, #1
 800616a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006172:	fa93 f3a3 	rbit	r3, r3
 8006176:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800617a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800617e:	fab3 f383 	clz	r3, r3
 8006182:	b2db      	uxtb	r3, r3
 8006184:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006188:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	461a      	mov	r2, r3
 8006190:	2300      	movs	r3, #0
 8006192:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006194:	f7fb fdf4 	bl	8001d80 <HAL_GetTick>
 8006198:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800619c:	e00a      	b.n	80061b4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800619e:	f7fb fdef 	bl	8001d80 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d902      	bls.n	80061b4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	f000 bd45 	b.w	8006c3e <HAL_RCC_OscConfig+0x100e>
 80061b4:	2302      	movs	r3, #2
 80061b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061be:	fa93 f3a3 	rbit	r3, r3
 80061c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80061c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ca:	fab3 f383 	clz	r3, r3
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80061d2:	d802      	bhi.n	80061da <HAL_RCC_OscConfig+0x5aa>
 80061d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	e013      	b.n	8006202 <HAL_RCC_OscConfig+0x5d2>
 80061da:	2302      	movs	r3, #2
 80061dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061e4:	fa93 f3a3 	rbit	r3, r3
 80061e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80061ec:	2302      	movs	r3, #2
 80061ee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80061f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061f6:	fa93 f3a3 	rbit	r3, r3
 80061fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80061fe:	4b24      	ldr	r3, [pc, #144]	@ (8006290 <HAL_RCC_OscConfig+0x660>)
 8006200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006202:	2202      	movs	r2, #2
 8006204:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8006208:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800620c:	fa92 f2a2 	rbit	r2, r2
 8006210:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8006214:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8006218:	fab2 f282 	clz	r2, r2
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	f042 0220 	orr.w	r2, r2, #32
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	f002 021f 	and.w	r2, r2, #31
 8006228:	2101      	movs	r1, #1
 800622a:	fa01 f202 	lsl.w	r2, r1, r2
 800622e:	4013      	ands	r3, r2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1b4      	bne.n	800619e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006238:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8115 	beq.w	8006474 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800624a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800624e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d07e      	beq.n	8006358 <HAL_RCC_OscConfig+0x728>
 800625a:	2301      	movs	r3, #1
 800625c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006260:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006264:	fa93 f3a3 	rbit	r3, r3
 8006268:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800626c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006270:	fab3 f383 	clz	r3, r3
 8006274:	b2db      	uxtb	r3, r3
 8006276:	461a      	mov	r2, r3
 8006278:	4b06      	ldr	r3, [pc, #24]	@ (8006294 <HAL_RCC_OscConfig+0x664>)
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	461a      	mov	r2, r3
 8006280:	2301      	movs	r3, #1
 8006282:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006284:	f7fb fd7c 	bl	8001d80 <HAL_GetTick>
 8006288:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800628c:	e00f      	b.n	80062ae <HAL_RCC_OscConfig+0x67e>
 800628e:	bf00      	nop
 8006290:	40021000 	.word	0x40021000
 8006294:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006298:	f7fb fd72 	bl	8001d80 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d902      	bls.n	80062ae <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	f000 bcc8 	b.w	8006c3e <HAL_RCC_OscConfig+0x100e>
 80062ae:	2302      	movs	r3, #2
 80062b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80062b8:	fa93 f3a3 	rbit	r3, r3
 80062bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80062c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80062c8:	2202      	movs	r2, #2
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	fa93 f2a3 	rbit	r2, r3
 80062da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ec:	2202      	movs	r2, #2
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	fa93 f2a3 	rbit	r2, r3
 80062fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006302:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006306:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006308:	4bb0      	ldr	r3, [pc, #704]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 800630a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800630c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006310:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006314:	2102      	movs	r1, #2
 8006316:	6019      	str	r1, [r3, #0]
 8006318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800631c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	fa93 f1a3 	rbit	r1, r3
 8006326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800632a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800632e:	6019      	str	r1, [r3, #0]
  return result;
 8006330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006334:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	fab3 f383 	clz	r3, r3
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006344:	b2db      	uxtb	r3, r3
 8006346:	f003 031f 	and.w	r3, r3, #31
 800634a:	2101      	movs	r1, #1
 800634c:	fa01 f303 	lsl.w	r3, r1, r3
 8006350:	4013      	ands	r3, r2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0a0      	beq.n	8006298 <HAL_RCC_OscConfig+0x668>
 8006356:	e08d      	b.n	8006474 <HAL_RCC_OscConfig+0x844>
 8006358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800635c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006360:	2201      	movs	r2, #1
 8006362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006368:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	fa93 f2a3 	rbit	r2, r3
 8006372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006376:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800637a:	601a      	str	r2, [r3, #0]
  return result;
 800637c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006380:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006384:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006386:	fab3 f383 	clz	r3, r3
 800638a:	b2db      	uxtb	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	4b90      	ldr	r3, [pc, #576]	@ (80065d0 <HAL_RCC_OscConfig+0x9a0>)
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	461a      	mov	r2, r3
 8006396:	2300      	movs	r3, #0
 8006398:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800639a:	f7fb fcf1 	bl	8001d80 <HAL_GetTick>
 800639e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063a2:	e00a      	b.n	80063ba <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063a4:	f7fb fcec 	bl	8001d80 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d902      	bls.n	80063ba <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	f000 bc42 	b.w	8006c3e <HAL_RCC_OscConfig+0x100e>
 80063ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80063c2:	2202      	movs	r2, #2
 80063c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	fa93 f2a3 	rbit	r2, r3
 80063d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80063e6:	2202      	movs	r2, #2
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	fa93 f2a3 	rbit	r2, r3
 80063f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006406:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800640a:	2202      	movs	r2, #2
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006412:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	fa93 f2a3 	rbit	r2, r3
 800641c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006420:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006424:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006426:	4b69      	ldr	r3, [pc, #420]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 8006428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800642a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800642e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006432:	2102      	movs	r1, #2
 8006434:	6019      	str	r1, [r3, #0]
 8006436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800643a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	fa93 f1a3 	rbit	r1, r3
 8006444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006448:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800644c:	6019      	str	r1, [r3, #0]
  return result;
 800644e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006452:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	fab3 f383 	clz	r3, r3
 800645c:	b2db      	uxtb	r3, r3
 800645e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006462:	b2db      	uxtb	r3, r3
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	2101      	movs	r1, #1
 800646a:	fa01 f303 	lsl.w	r3, r1, r3
 800646e:	4013      	ands	r3, r2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d197      	bne.n	80063a4 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006478:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 819e 	beq.w	80067c6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800648a:	2300      	movs	r3, #0
 800648c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006490:	4b4e      	ldr	r3, [pc, #312]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d116      	bne.n	80064ca <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800649c:	4b4b      	ldr	r3, [pc, #300]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	4a4a      	ldr	r2, [pc, #296]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 80064a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064a6:	61d3      	str	r3, [r2, #28]
 80064a8:	4b48      	ldr	r3, [pc, #288]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80064b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064b4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064be:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80064c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80064c4:	2301      	movs	r3, #1
 80064c6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ca:	4b42      	ldr	r3, [pc, #264]	@ (80065d4 <HAL_RCC_OscConfig+0x9a4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d11a      	bne.n	800650c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064d6:	4b3f      	ldr	r3, [pc, #252]	@ (80065d4 <HAL_RCC_OscConfig+0x9a4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a3e      	ldr	r2, [pc, #248]	@ (80065d4 <HAL_RCC_OscConfig+0x9a4>)
 80064dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064e2:	f7fb fc4d 	bl	8001d80 <HAL_GetTick>
 80064e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ea:	e009      	b.n	8006500 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ec:	f7fb fc48 	bl	8001d80 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b64      	cmp	r3, #100	@ 0x64
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e39e      	b.n	8006c3e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006500:	4b34      	ldr	r3, [pc, #208]	@ (80065d4 <HAL_RCC_OscConfig+0x9a4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0ef      	beq.n	80064ec <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800650c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006510:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d106      	bne.n	800652a <HAL_RCC_OscConfig+0x8fa>
 800651c:	4b2b      	ldr	r3, [pc, #172]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	4a2a      	ldr	r2, [pc, #168]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	6213      	str	r3, [r2, #32]
 8006528:	e035      	b.n	8006596 <HAL_RCC_OscConfig+0x966>
 800652a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800652e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10c      	bne.n	8006554 <HAL_RCC_OscConfig+0x924>
 800653a:	4b24      	ldr	r3, [pc, #144]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	4a23      	ldr	r2, [pc, #140]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 8006540:	f023 0301 	bic.w	r3, r3, #1
 8006544:	6213      	str	r3, [r2, #32]
 8006546:	4b21      	ldr	r3, [pc, #132]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	4a20      	ldr	r2, [pc, #128]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 800654c:	f023 0304 	bic.w	r3, r3, #4
 8006550:	6213      	str	r3, [r2, #32]
 8006552:	e020      	b.n	8006596 <HAL_RCC_OscConfig+0x966>
 8006554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006558:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	2b05      	cmp	r3, #5
 8006562:	d10c      	bne.n	800657e <HAL_RCC_OscConfig+0x94e>
 8006564:	4b19      	ldr	r3, [pc, #100]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	4a18      	ldr	r2, [pc, #96]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 800656a:	f043 0304 	orr.w	r3, r3, #4
 800656e:	6213      	str	r3, [r2, #32]
 8006570:	4b16      	ldr	r3, [pc, #88]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	4a15      	ldr	r2, [pc, #84]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	6213      	str	r3, [r2, #32]
 800657c:	e00b      	b.n	8006596 <HAL_RCC_OscConfig+0x966>
 800657e:	4b13      	ldr	r3, [pc, #76]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	4a12      	ldr	r2, [pc, #72]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 8006584:	f023 0301 	bic.w	r3, r3, #1
 8006588:	6213      	str	r3, [r2, #32]
 800658a:	4b10      	ldr	r3, [pc, #64]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	4a0f      	ldr	r2, [pc, #60]	@ (80065cc <HAL_RCC_OscConfig+0x99c>)
 8006590:	f023 0304 	bic.w	r3, r3, #4
 8006594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800659a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 8087 	beq.w	80066b6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065a8:	f7fb fbea 	bl	8001d80 <HAL_GetTick>
 80065ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b0:	e012      	b.n	80065d8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065b2:	f7fb fbe5 	bl	8001d80 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d908      	bls.n	80065d8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e339      	b.n	8006c3e <HAL_RCC_OscConfig+0x100e>
 80065ca:	bf00      	nop
 80065cc:	40021000 	.word	0x40021000
 80065d0:	10908120 	.word	0x10908120
 80065d4:	40007000 	.word	0x40007000
 80065d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80065e0:	2202      	movs	r2, #2
 80065e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	fa93 f2a3 	rbit	r2, r3
 80065f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006600:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006604:	2202      	movs	r2, #2
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800660c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	fa93 f2a3 	rbit	r2, r3
 8006616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800661a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800661e:	601a      	str	r2, [r3, #0]
  return result;
 8006620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006624:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006628:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800662a:	fab3 f383 	clz	r3, r3
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d102      	bne.n	8006640 <HAL_RCC_OscConfig+0xa10>
 800663a:	4b98      	ldr	r3, [pc, #608]	@ (800689c <HAL_RCC_OscConfig+0xc6c>)
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	e013      	b.n	8006668 <HAL_RCC_OscConfig+0xa38>
 8006640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006644:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006648:	2202      	movs	r2, #2
 800664a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800664c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006650:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	fa93 f2a3 	rbit	r2, r3
 800665a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800665e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	4b8d      	ldr	r3, [pc, #564]	@ (800689c <HAL_RCC_OscConfig+0xc6c>)
 8006666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006668:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800666c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006670:	2102      	movs	r1, #2
 8006672:	6011      	str	r1, [r2, #0]
 8006674:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006678:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800667c:	6812      	ldr	r2, [r2, #0]
 800667e:	fa92 f1a2 	rbit	r1, r2
 8006682:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006686:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800668a:	6011      	str	r1, [r2, #0]
  return result;
 800668c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006690:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8006694:	6812      	ldr	r2, [r2, #0]
 8006696:	fab2 f282 	clz	r2, r2
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	f002 021f 	and.w	r2, r2, #31
 80066a6:	2101      	movs	r1, #1
 80066a8:	fa01 f202 	lsl.w	r2, r1, r2
 80066ac:	4013      	ands	r3, r2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f43f af7f 	beq.w	80065b2 <HAL_RCC_OscConfig+0x982>
 80066b4:	e07d      	b.n	80067b2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066b6:	f7fb fb63 	bl	8001d80 <HAL_GetTick>
 80066ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066be:	e00b      	b.n	80066d8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066c0:	f7fb fb5e 	bl	8001d80 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e2b2      	b.n	8006c3e <HAL_RCC_OscConfig+0x100e>
 80066d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066dc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80066e0:	2202      	movs	r2, #2
 80066e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066e8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	fa93 f2a3 	rbit	r2, r3
 80066f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066f6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006700:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006704:	2202      	movs	r2, #2
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800670c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	fa93 f2a3 	rbit	r2, r3
 8006716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800671a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800671e:	601a      	str	r2, [r3, #0]
  return result;
 8006720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006724:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006728:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800672a:	fab3 f383 	clz	r3, r3
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <HAL_RCC_OscConfig+0xb10>
 800673a:	4b58      	ldr	r3, [pc, #352]	@ (800689c <HAL_RCC_OscConfig+0xc6c>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	e013      	b.n	8006768 <HAL_RCC_OscConfig+0xb38>
 8006740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006744:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006748:	2202      	movs	r2, #2
 800674a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006750:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	fa93 f2a3 	rbit	r2, r3
 800675a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800675e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	4b4d      	ldr	r3, [pc, #308]	@ (800689c <HAL_RCC_OscConfig+0xc6c>)
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800676c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006770:	2102      	movs	r1, #2
 8006772:	6011      	str	r1, [r2, #0]
 8006774:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006778:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	fa92 f1a2 	rbit	r1, r2
 8006782:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006786:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800678a:	6011      	str	r1, [r2, #0]
  return result;
 800678c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006790:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	fab2 f282 	clz	r2, r2
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	f002 021f 	and.w	r2, r2, #31
 80067a6:	2101      	movs	r1, #1
 80067a8:	fa01 f202 	lsl.w	r2, r1, r2
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d186      	bne.n	80066c0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80067b2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d105      	bne.n	80067c6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ba:	4b38      	ldr	r3, [pc, #224]	@ (800689c <HAL_RCC_OscConfig+0xc6c>)
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	4a37      	ldr	r2, [pc, #220]	@ (800689c <HAL_RCC_OscConfig+0xc6c>)
 80067c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067c4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 8232 	beq.w	8006c3c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067d8:	4b30      	ldr	r3, [pc, #192]	@ (800689c <HAL_RCC_OscConfig+0xc6c>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f003 030c 	and.w	r3, r3, #12
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	f000 8201 	beq.w	8006be8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	f040 8157 	bne.w	8006aa6 <HAL_RCC_OscConfig+0xe76>
 80067f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067fc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006800:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800680a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	fa93 f2a3 	rbit	r2, r3
 8006814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006818:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800681c:	601a      	str	r2, [r3, #0]
  return result;
 800681e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006822:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006826:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006828:	fab3 f383 	clz	r3, r3
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006832:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	461a      	mov	r2, r3
 800683a:	2300      	movs	r3, #0
 800683c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800683e:	f7fb fa9f 	bl	8001d80 <HAL_GetTick>
 8006842:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006846:	e009      	b.n	800685c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006848:	f7fb fa9a 	bl	8001d80 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e1f0      	b.n	8006c3e <HAL_RCC_OscConfig+0x100e>
 800685c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006860:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006864:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800686a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800686e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	fa93 f2a3 	rbit	r2, r3
 8006878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800687c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8006880:	601a      	str	r2, [r3, #0]
  return result;
 8006882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006886:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800688a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800688c:	fab3 f383 	clz	r3, r3
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b3f      	cmp	r3, #63	@ 0x3f
 8006894:	d804      	bhi.n	80068a0 <HAL_RCC_OscConfig+0xc70>
 8006896:	4b01      	ldr	r3, [pc, #4]	@ (800689c <HAL_RCC_OscConfig+0xc6c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	e029      	b.n	80068f0 <HAL_RCC_OscConfig+0xcc0>
 800689c:	40021000 	.word	0x40021000
 80068a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80068a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	fa93 f2a3 	rbit	r2, r3
 80068bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068c0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80068ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068d8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	fa93 f2a3 	rbit	r2, r3
 80068e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068e6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	4bc3      	ldr	r3, [pc, #780]	@ (8006bfc <HAL_RCC_OscConfig+0xfcc>)
 80068ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80068f4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80068f8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80068fc:	6011      	str	r1, [r2, #0]
 80068fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006902:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	fa92 f1a2 	rbit	r1, r2
 800690c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006910:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006914:	6011      	str	r1, [r2, #0]
  return result;
 8006916:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800691a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800691e:	6812      	ldr	r2, [r2, #0]
 8006920:	fab2 f282 	clz	r2, r2
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	f042 0220 	orr.w	r2, r2, #32
 800692a:	b2d2      	uxtb	r2, r2
 800692c:	f002 021f 	and.w	r2, r2, #31
 8006930:	2101      	movs	r1, #1
 8006932:	fa01 f202 	lsl.w	r2, r1, r2
 8006936:	4013      	ands	r3, r2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d185      	bne.n	8006848 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800693c:	4baf      	ldr	r3, [pc, #700]	@ (8006bfc <HAL_RCC_OscConfig+0xfcc>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006948:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006954:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	430b      	orrs	r3, r1
 800695e:	49a7      	ldr	r1, [pc, #668]	@ (8006bfc <HAL_RCC_OscConfig+0xfcc>)
 8006960:	4313      	orrs	r3, r2
 8006962:	604b      	str	r3, [r1, #4]
 8006964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006968:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800696c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006976:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	fa93 f2a3 	rbit	r2, r3
 8006980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006984:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006988:	601a      	str	r2, [r3, #0]
  return result;
 800698a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800698e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006992:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006994:	fab3 f383 	clz	r3, r3
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800699e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	461a      	mov	r2, r3
 80069a6:	2301      	movs	r3, #1
 80069a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069aa:	f7fb f9e9 	bl	8001d80 <HAL_GetTick>
 80069ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069b2:	e009      	b.n	80069c8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069b4:	f7fb f9e4 	bl	8001d80 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e13a      	b.n	8006c3e <HAL_RCC_OscConfig+0x100e>
 80069c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069cc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80069d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80069d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069da:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	fa93 f2a3 	rbit	r2, r3
 80069e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069e8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80069ec:	601a      	str	r2, [r3, #0]
  return result;
 80069ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069f2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80069f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069f8:	fab3 f383 	clz	r3, r3
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a00:	d802      	bhi.n	8006a08 <HAL_RCC_OscConfig+0xdd8>
 8006a02:	4b7e      	ldr	r3, [pc, #504]	@ (8006bfc <HAL_RCC_OscConfig+0xfcc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	e027      	b.n	8006a58 <HAL_RCC_OscConfig+0xe28>
 8006a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a0c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006a10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a1a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	fa93 f2a3 	rbit	r2, r3
 8006a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a32:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006a36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a40:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	fa93 f2a3 	rbit	r2, r3
 8006a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a4e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	4b69      	ldr	r3, [pc, #420]	@ (8006bfc <HAL_RCC_OscConfig+0xfcc>)
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a5c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006a60:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006a64:	6011      	str	r1, [r2, #0]
 8006a66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a6a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	fa92 f1a2 	rbit	r1, r2
 8006a74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a78:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006a7c:	6011      	str	r1, [r2, #0]
  return result;
 8006a7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a82:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006a86:	6812      	ldr	r2, [r2, #0]
 8006a88:	fab2 f282 	clz	r2, r2
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	f042 0220 	orr.w	r2, r2, #32
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	f002 021f 	and.w	r2, r2, #31
 8006a98:	2101      	movs	r1, #1
 8006a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d087      	beq.n	80069b4 <HAL_RCC_OscConfig+0xd84>
 8006aa4:	e0ca      	b.n	8006c3c <HAL_RCC_OscConfig+0x100c>
 8006aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006aaa:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006aae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ab8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	fa93 f2a3 	rbit	r2, r3
 8006ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ac6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006aca:	601a      	str	r2, [r3, #0]
  return result;
 8006acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ad0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006ad4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ad6:	fab3 f383 	clz	r3, r3
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006ae0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	2300      	movs	r3, #0
 8006aea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aec:	f7fb f948 	bl	8001d80 <HAL_GetTick>
 8006af0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006af4:	e009      	b.n	8006b0a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006af6:	f7fb f943 	bl	8001d80 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e099      	b.n	8006c3e <HAL_RCC_OscConfig+0x100e>
 8006b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b0e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006b12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b1c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	fa93 f2a3 	rbit	r2, r3
 8006b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b2a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006b2e:	601a      	str	r2, [r3, #0]
  return result;
 8006b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b34:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006b38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b3a:	fab3 f383 	clz	r3, r3
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b3f      	cmp	r3, #63	@ 0x3f
 8006b42:	d802      	bhi.n	8006b4a <HAL_RCC_OscConfig+0xf1a>
 8006b44:	4b2d      	ldr	r3, [pc, #180]	@ (8006bfc <HAL_RCC_OscConfig+0xfcc>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	e027      	b.n	8006b9a <HAL_RCC_OscConfig+0xf6a>
 8006b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b4e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006b52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b5c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	fa93 f2a3 	rbit	r2, r3
 8006b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b6a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b74:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006b78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b82:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	fa93 f2a3 	rbit	r2, r3
 8006b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b90:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	4b19      	ldr	r3, [pc, #100]	@ (8006bfc <HAL_RCC_OscConfig+0xfcc>)
 8006b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006b9e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006ba2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006ba6:	6011      	str	r1, [r2, #0]
 8006ba8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006bac:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006bb0:	6812      	ldr	r2, [r2, #0]
 8006bb2:	fa92 f1a2 	rbit	r1, r2
 8006bb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006bba:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006bbe:	6011      	str	r1, [r2, #0]
  return result;
 8006bc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006bc4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006bc8:	6812      	ldr	r2, [r2, #0]
 8006bca:	fab2 f282 	clz	r2, r2
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	f042 0220 	orr.w	r2, r2, #32
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	f002 021f 	and.w	r2, r2, #31
 8006bda:	2101      	movs	r1, #1
 8006bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8006be0:	4013      	ands	r3, r2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d187      	bne.n	8006af6 <HAL_RCC_OscConfig+0xec6>
 8006be6:	e029      	b.n	8006c3c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d103      	bne.n	8006c00 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e020      	b.n	8006c3e <HAL_RCC_OscConfig+0x100e>
 8006bfc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c00:	4b11      	ldr	r3, [pc, #68]	@ (8006c48 <HAL_RCC_OscConfig+0x1018>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006c08:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006c0c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d10b      	bne.n	8006c38 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006c20:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006c24:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d001      	beq.n	8006c3c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40021000 	.word	0x40021000

08006c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b09e      	sub	sp, #120	@ 0x78
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e154      	b.n	8006f0e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c64:	4b89      	ldr	r3, [pc, #548]	@ (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d910      	bls.n	8006c94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c72:	4b86      	ldr	r3, [pc, #536]	@ (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f023 0207 	bic.w	r2, r3, #7
 8006c7a:	4984      	ldr	r1, [pc, #528]	@ (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c82:	4b82      	ldr	r3, [pc, #520]	@ (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d001      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e13c      	b.n	8006f0e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	4978      	ldr	r1, [pc, #480]	@ (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 80cd 	beq.w	8006e5a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d137      	bne.n	8006d38 <HAL_RCC_ClockConfig+0xec>
 8006cc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ccc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cd0:	fa93 f3a3 	rbit	r3, r3
 8006cd4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006cd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cd8:	fab3 f383 	clz	r3, r3
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ce0:	d802      	bhi.n	8006ce8 <HAL_RCC_ClockConfig+0x9c>
 8006ce2:	4b6b      	ldr	r3, [pc, #428]	@ (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	e00f      	b.n	8006d08 <HAL_RCC_ClockConfig+0xbc>
 8006ce8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006cec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cf0:	fa93 f3a3 	rbit	r3, r3
 8006cf4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cf6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006cfa:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cfe:	fa93 f3a3 	rbit	r3, r3
 8006d02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d04:	4b62      	ldr	r3, [pc, #392]	@ (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006d0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d10:	fa92 f2a2 	rbit	r2, r2
 8006d14:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006d16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d18:	fab2 f282 	clz	r2, r2
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	f042 0220 	orr.w	r2, r2, #32
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	f002 021f 	and.w	r2, r2, #31
 8006d28:	2101      	movs	r1, #1
 8006d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8006d2e:	4013      	ands	r3, r2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d171      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e0ea      	b.n	8006f0e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d137      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x164>
 8006d40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d44:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d48:	fa93 f3a3 	rbit	r3, r3
 8006d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006d4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d50:	fab3 f383 	clz	r3, r3
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b3f      	cmp	r3, #63	@ 0x3f
 8006d58:	d802      	bhi.n	8006d60 <HAL_RCC_ClockConfig+0x114>
 8006d5a:	4b4d      	ldr	r3, [pc, #308]	@ (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	e00f      	b.n	8006d80 <HAL_RCC_ClockConfig+0x134>
 8006d60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d64:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d68:	fa93 f3a3 	rbit	r3, r3
 8006d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d72:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d76:	fa93 f3a3 	rbit	r3, r3
 8006d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d7c:	4b44      	ldr	r3, [pc, #272]	@ (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d84:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006d86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d88:	fa92 f2a2 	rbit	r2, r2
 8006d8c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006d8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d90:	fab2 f282 	clz	r2, r2
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	f042 0220 	orr.w	r2, r2, #32
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	f002 021f 	and.w	r2, r2, #31
 8006da0:	2101      	movs	r1, #1
 8006da2:	fa01 f202 	lsl.w	r2, r1, r2
 8006da6:	4013      	ands	r3, r2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d135      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e0ae      	b.n	8006f0e <HAL_RCC_ClockConfig+0x2c2>
 8006db0:	2302      	movs	r3, #2
 8006db2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	fa93 f3a3 	rbit	r3, r3
 8006dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dbe:	fab3 f383 	clz	r3, r3
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8006dc6:	d802      	bhi.n	8006dce <HAL_RCC_ClockConfig+0x182>
 8006dc8:	4b31      	ldr	r3, [pc, #196]	@ (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	e00d      	b.n	8006dea <HAL_RCC_ClockConfig+0x19e>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd4:	fa93 f3a3 	rbit	r3, r3
 8006dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dda:	2302      	movs	r3, #2
 8006ddc:	623b      	str	r3, [r7, #32]
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	fa93 f3a3 	rbit	r3, r3
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	4b2a      	ldr	r3, [pc, #168]	@ (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	2202      	movs	r2, #2
 8006dec:	61ba      	str	r2, [r7, #24]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	fa92 f2a2 	rbit	r2, r2
 8006df4:	617a      	str	r2, [r7, #20]
  return result;
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	fab2 f282 	clz	r2, r2
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	f042 0220 	orr.w	r2, r2, #32
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	f002 021f 	and.w	r2, r2, #31
 8006e08:	2101      	movs	r1, #1
 8006e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e0e:	4013      	ands	r3, r2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e07a      	b.n	8006f0e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e18:	4b1d      	ldr	r3, [pc, #116]	@ (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f023 0203 	bic.w	r2, r3, #3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	491a      	ldr	r1, [pc, #104]	@ (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e2a:	f7fa ffa9 	bl	8001d80 <HAL_GetTick>
 8006e2e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e30:	e00a      	b.n	8006e48 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e32:	f7fa ffa5 	bl	8001d80 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d901      	bls.n	8006e48 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e062      	b.n	8006f0e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e48:	4b11      	ldr	r3, [pc, #68]	@ (8006e90 <HAL_RCC_ClockConfig+0x244>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f003 020c 	and.w	r2, r3, #12
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d1eb      	bne.n	8006e32 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d215      	bcs.n	8006e94 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e68:	4b08      	ldr	r3, [pc, #32]	@ (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f023 0207 	bic.w	r2, r3, #7
 8006e70:	4906      	ldr	r1, [pc, #24]	@ (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e78:	4b04      	ldr	r3, [pc, #16]	@ (8006e8c <HAL_RCC_ClockConfig+0x240>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d006      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e041      	b.n	8006f0e <HAL_RCC_ClockConfig+0x2c2>
 8006e8a:	bf00      	nop
 8006e8c:	40022000 	.word	0x40022000
 8006e90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f18 <HAL_RCC_ClockConfig+0x2cc>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	491a      	ldr	r1, [pc, #104]	@ (8006f18 <HAL_RCC_ClockConfig+0x2cc>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0308 	and.w	r3, r3, #8
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ebe:	4b16      	ldr	r3, [pc, #88]	@ (8006f18 <HAL_RCC_ClockConfig+0x2cc>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	4912      	ldr	r1, [pc, #72]	@ (8006f18 <HAL_RCC_ClockConfig+0x2cc>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006ed2:	f000 f829 	bl	8006f28 <HAL_RCC_GetSysClockFreq>
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8006f18 <HAL_RCC_ClockConfig+0x2cc>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ee0:	22f0      	movs	r2, #240	@ 0xf0
 8006ee2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	fa92 f2a2 	rbit	r2, r2
 8006eea:	60fa      	str	r2, [r7, #12]
  return result;
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	fab2 f282 	clz	r2, r2
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	40d3      	lsrs	r3, r2
 8006ef6:	4a09      	ldr	r2, [pc, #36]	@ (8006f1c <HAL_RCC_ClockConfig+0x2d0>)
 8006ef8:	5cd3      	ldrb	r3, [r2, r3]
 8006efa:	fa21 f303 	lsr.w	r3, r1, r3
 8006efe:	4a08      	ldr	r2, [pc, #32]	@ (8006f20 <HAL_RCC_ClockConfig+0x2d4>)
 8006f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006f02:	4b08      	ldr	r3, [pc, #32]	@ (8006f24 <HAL_RCC_ClockConfig+0x2d8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fa fbb2 	bl	8001670 <HAL_InitTick>
  
  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3778      	adds	r7, #120	@ 0x78
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	40021000 	.word	0x40021000
 8006f1c:	0800dde4 	.word	0x0800dde4
 8006f20:	2000000c 	.word	0x2000000c
 8006f24:	20000010 	.word	0x20000010

08006f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	2300      	movs	r3, #0
 8006f34:	60bb      	str	r3, [r7, #8]
 8006f36:	2300      	movs	r3, #0
 8006f38:	617b      	str	r3, [r7, #20]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006f42:	4b1e      	ldr	r3, [pc, #120]	@ (8006fbc <HAL_RCC_GetSysClockFreq+0x94>)
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f003 030c 	and.w	r3, r3, #12
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d002      	beq.n	8006f58 <HAL_RCC_GetSysClockFreq+0x30>
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d003      	beq.n	8006f5e <HAL_RCC_GetSysClockFreq+0x36>
 8006f56:	e026      	b.n	8006fa6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f58:	4b19      	ldr	r3, [pc, #100]	@ (8006fc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006f5a:	613b      	str	r3, [r7, #16]
      break;
 8006f5c:	e026      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	0c9b      	lsrs	r3, r3, #18
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	4a17      	ldr	r2, [pc, #92]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006f68:	5cd3      	ldrb	r3, [r2, r3]
 8006f6a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006f6c:	4b13      	ldr	r3, [pc, #76]	@ (8006fbc <HAL_RCC_GetSysClockFreq+0x94>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f70:	f003 030f 	and.w	r3, r3, #15
 8006f74:	4a14      	ldr	r2, [pc, #80]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006f76:	5cd3      	ldrb	r3, [r2, r3]
 8006f78:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d008      	beq.n	8006f96 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006f84:	4a0e      	ldr	r2, [pc, #56]	@ (8006fc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	fb02 f303 	mul.w	r3, r2, r3
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e004      	b.n	8006fa0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a0c      	ldr	r2, [pc, #48]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8006f9a:	fb02 f303 	mul.w	r3, r2, r3
 8006f9e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	613b      	str	r3, [r7, #16]
      break;
 8006fa4:	e002      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006fa8:	613b      	str	r3, [r7, #16]
      break;
 8006faa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fac:	693b      	ldr	r3, [r7, #16]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40021000 	.word	0x40021000
 8006fc0:	00f42400 	.word	0x00f42400
 8006fc4:	0800e3f8 	.word	0x0800e3f8
 8006fc8:	0800e408 	.word	0x0800e408
 8006fcc:	003d0900 	.word	0x003d0900
 8006fd0:	007a1200 	.word	0x007a1200

08006fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fd8:	4b03      	ldr	r3, [pc, #12]	@ (8006fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fda:	681b      	ldr	r3, [r3, #0]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	2000000c 	.word	0x2000000c

08006fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006ff2:	f7ff ffef 	bl	8006fd4 <HAL_RCC_GetHCLKFreq>
 8006ff6:	4601      	mov	r1, r0
 8006ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8007028 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8007000:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8007004:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	fa92 f2a2 	rbit	r2, r2
 800700c:	603a      	str	r2, [r7, #0]
  return result;
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	fab2 f282 	clz	r2, r2
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	40d3      	lsrs	r3, r2
 8007018:	4a04      	ldr	r2, [pc, #16]	@ (800702c <HAL_RCC_GetPCLK2Freq+0x40>)
 800701a:	5cd3      	ldrb	r3, [r2, r3]
 800701c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40021000 	.word	0x40021000
 800702c:	0800ddf4 	.word	0x0800ddf4

08007030 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	220f      	movs	r2, #15
 800703e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007040:	4b12      	ldr	r3, [pc, #72]	@ (800708c <HAL_RCC_GetClockConfig+0x5c>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f003 0203 	and.w	r2, r3, #3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800704c:	4b0f      	ldr	r3, [pc, #60]	@ (800708c <HAL_RCC_GetClockConfig+0x5c>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8007058:	4b0c      	ldr	r3, [pc, #48]	@ (800708c <HAL_RCC_GetClockConfig+0x5c>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007064:	4b09      	ldr	r3, [pc, #36]	@ (800708c <HAL_RCC_GetClockConfig+0x5c>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	08db      	lsrs	r3, r3, #3
 800706a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8007072:	4b07      	ldr	r3, [pc, #28]	@ (8007090 <HAL_RCC_GetClockConfig+0x60>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0207 	and.w	r2, r3, #7
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	601a      	str	r2, [r3, #0]
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40021000 	.word	0x40021000
 8007090:	40022000 	.word	0x40022000

08007094 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b092      	sub	sp, #72	@ 0x48
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80070a4:	2300      	movs	r3, #0
 80070a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 80d2 	beq.w	800725c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070b8:	4b4d      	ldr	r3, [pc, #308]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10e      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070c4:	4b4a      	ldr	r3, [pc, #296]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	4a49      	ldr	r2, [pc, #292]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80070ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070ce:	61d3      	str	r3, [r2, #28]
 80070d0:	4b47      	ldr	r3, [pc, #284]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070d8:	60bb      	str	r3, [r7, #8]
 80070da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e2:	4b44      	ldr	r3, [pc, #272]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d118      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070ee:	4b41      	ldr	r3, [pc, #260]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a40      	ldr	r2, [pc, #256]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070fa:	f7fa fe41 	bl	8001d80 <HAL_GetTick>
 80070fe:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007100:	e008      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007102:	f7fa fe3d 	bl	8001d80 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b64      	cmp	r3, #100	@ 0x64
 800710e:	d901      	bls.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e167      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007114:	4b37      	ldr	r3, [pc, #220]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f0      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007120:	4b33      	ldr	r3, [pc, #204]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007128:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800712a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 8082 	beq.w	8007236 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800713a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800713c:	429a      	cmp	r2, r3
 800713e:	d07a      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007140:	4b2b      	ldr	r3, [pc, #172]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800714a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800714e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	fa93 f3a3 	rbit	r3, r3
 8007156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8007158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800715a:	fab3 f383 	clz	r3, r3
 800715e:	b2db      	uxtb	r3, r3
 8007160:	461a      	mov	r2, r3
 8007162:	4b25      	ldr	r3, [pc, #148]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	461a      	mov	r2, r3
 800716a:	2301      	movs	r3, #1
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007172:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007176:	fa93 f3a3 	rbit	r3, r3
 800717a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800717c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800717e:	fab3 f383 	clz	r3, r3
 8007182:	b2db      	uxtb	r3, r3
 8007184:	461a      	mov	r2, r3
 8007186:	4b1c      	ldr	r3, [pc, #112]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	461a      	mov	r2, r3
 800718e:	2300      	movs	r3, #0
 8007190:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007192:	4a17      	ldr	r2, [pc, #92]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007196:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d049      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a2:	f7fa fded 	bl	8001d80 <HAL_GetTick>
 80071a6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071a8:	e00a      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071aa:	f7fa fde9 	bl	8001d80 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d901      	bls.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e111      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80071c0:	2302      	movs	r3, #2
 80071c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c6:	fa93 f3a3 	rbit	r3, r3
 80071ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80071cc:	2302      	movs	r3, #2
 80071ce:	623b      	str	r3, [r7, #32]
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	fa93 f3a3 	rbit	r3, r3
 80071d6:	61fb      	str	r3, [r7, #28]
  return result;
 80071d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071da:	fab3 f383 	clz	r3, r3
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d108      	bne.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80071ea:	4b01      	ldr	r3, [pc, #4]	@ (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	e00d      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x178>
 80071f0:	40021000 	.word	0x40021000
 80071f4:	40007000 	.word	0x40007000
 80071f8:	10908100 	.word	0x10908100
 80071fc:	2302      	movs	r3, #2
 80071fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	fa93 f3a3 	rbit	r3, r3
 8007206:	617b      	str	r3, [r7, #20]
 8007208:	4b78      	ldr	r3, [pc, #480]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800720a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720c:	2202      	movs	r2, #2
 800720e:	613a      	str	r2, [r7, #16]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	fa92 f2a2 	rbit	r2, r2
 8007216:	60fa      	str	r2, [r7, #12]
  return result;
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	fab2 f282 	clz	r2, r2
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007224:	b2d2      	uxtb	r2, r2
 8007226:	f002 021f 	and.w	r2, r2, #31
 800722a:	2101      	movs	r1, #1
 800722c:	fa01 f202 	lsl.w	r2, r1, r2
 8007230:	4013      	ands	r3, r2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0b9      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007236:	4b6d      	ldr	r3, [pc, #436]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	496a      	ldr	r1, [pc, #424]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007244:	4313      	orrs	r3, r2
 8007246:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007248:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800724c:	2b01      	cmp	r3, #1
 800724e:	d105      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007250:	4b66      	ldr	r3, [pc, #408]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	4a65      	ldr	r2, [pc, #404]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800725a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d008      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007268:	4b60      	ldr	r3, [pc, #384]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800726a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726c:	f023 0203 	bic.w	r2, r3, #3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	495d      	ldr	r1, [pc, #372]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007276:	4313      	orrs	r3, r2
 8007278:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d008      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007286:	4b59      	ldr	r3, [pc, #356]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	4956      	ldr	r1, [pc, #344]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007294:	4313      	orrs	r3, r2
 8007296:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d008      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072a4:	4b51      	ldr	r3, [pc, #324]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	494e      	ldr	r1, [pc, #312]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d008      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072c2:	4b4a      	ldr	r3, [pc, #296]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c6:	f023 0210 	bic.w	r2, r3, #16
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	4947      	ldr	r1, [pc, #284]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80072e0:	4b42      	ldr	r3, [pc, #264]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ec:	493f      	ldr	r1, [pc, #252]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d008      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072fe:	4b3b      	ldr	r3, [pc, #236]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007302:	f023 0220 	bic.w	r2, r3, #32
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	4938      	ldr	r1, [pc, #224]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800730c:	4313      	orrs	r3, r2
 800730e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0308 	and.w	r3, r3, #8
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800731c:	4b33      	ldr	r3, [pc, #204]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800731e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007320:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	4930      	ldr	r1, [pc, #192]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800732a:	4313      	orrs	r3, r2
 800732c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0310 	and.w	r3, r3, #16
 8007336:	2b00      	cmp	r3, #0
 8007338:	d008      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800733a:	4b2c      	ldr	r3, [pc, #176]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800733c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800733e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	4929      	ldr	r1, [pc, #164]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007348:	4313      	orrs	r3, r2
 800734a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007354:	2b00      	cmp	r3, #0
 8007356:	d008      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007358:	4b24      	ldr	r3, [pc, #144]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007364:	4921      	ldr	r1, [pc, #132]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007366:	4313      	orrs	r3, r2
 8007368:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007372:	2b00      	cmp	r3, #0
 8007374:	d008      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007376:	4b1d      	ldr	r3, [pc, #116]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007382:	491a      	ldr	r1, [pc, #104]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007384:	4313      	orrs	r3, r2
 8007386:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007390:	2b00      	cmp	r3, #0
 8007392:	d008      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007394:	4b15      	ldr	r3, [pc, #84]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007398:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a0:	4912      	ldr	r1, [pc, #72]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d008      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80073b2:	4b0e      	ldr	r3, [pc, #56]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073be:	490b      	ldr	r1, [pc, #44]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d008      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80073d0:	4b06      	ldr	r3, [pc, #24]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073dc:	4903      	ldr	r1, [pc, #12]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3748      	adds	r7, #72	@ 0x48
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	40021000 	.word	0x40021000

080073f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e09d      	b.n	800753e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	d108      	bne.n	800741c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007412:	d009      	beq.n	8007428 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	61da      	str	r2, [r3, #28]
 800741a:	e005      	b.n	8007428 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fa f89e 	bl	8001584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800745e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007468:	d902      	bls.n	8007470 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	e002      	b.n	8007476 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007470:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007474:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800747e:	d007      	beq.n	8007490 <HAL_SPI_Init+0xa0>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007488:	d002      	beq.n	8007490 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074d2:	ea42 0103 	orr.w	r1, r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	0c1b      	lsrs	r3, r3, #16
 80074ec:	f003 0204 	and.w	r2, r3, #4
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f4:	f003 0310 	and.w	r3, r3, #16
 80074f8:	431a      	orrs	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800750c:	ea42 0103 	orr.w	r1, r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69da      	ldr	r2, [r3, #28]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800752c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b088      	sub	sp, #32
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	603b      	str	r3, [r7, #0]
 8007552:	4613      	mov	r3, r2
 8007554:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_SPI_Transmit+0x22>
 8007564:	2302      	movs	r3, #2
 8007566:	e15f      	b.n	8007828 <HAL_SPI_Transmit+0x2e2>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007570:	f7fa fc06 	bl	8001d80 <HAL_GetTick>
 8007574:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007576:	88fb      	ldrh	r3, [r7, #6]
 8007578:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	d002      	beq.n	800758c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007586:	2302      	movs	r3, #2
 8007588:	77fb      	strb	r3, [r7, #31]
    goto error;
 800758a:	e148      	b.n	800781e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <HAL_SPI_Transmit+0x52>
 8007592:	88fb      	ldrh	r3, [r7, #6]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800759c:	e13f      	b.n	800781e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2203      	movs	r2, #3
 80075a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	88fa      	ldrh	r2, [r7, #6]
 80075b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	88fa      	ldrh	r2, [r7, #6]
 80075bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075e8:	d10f      	bne.n	800760a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007608:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007614:	2b40      	cmp	r3, #64	@ 0x40
 8007616:	d007      	beq.n	8007628 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007626:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007630:	d94f      	bls.n	80076d2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <HAL_SPI_Transmit+0xfa>
 800763a:	8afb      	ldrh	r3, [r7, #22]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d142      	bne.n	80076c6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007644:	881a      	ldrh	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007650:	1c9a      	adds	r2, r3, #2
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007664:	e02f      	b.n	80076c6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b02      	cmp	r3, #2
 8007672:	d112      	bne.n	800769a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007678:	881a      	ldrh	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007684:	1c9a      	adds	r2, r3, #2
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800768e:	b29b      	uxth	r3, r3
 8007690:	3b01      	subs	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007698:	e015      	b.n	80076c6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800769a:	f7fa fb71 	bl	8001d80 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d803      	bhi.n	80076b2 <HAL_SPI_Transmit+0x16c>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076b0:	d102      	bne.n	80076b8 <HAL_SPI_Transmit+0x172>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d106      	bne.n	80076c6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80076c4:	e0ab      	b.n	800781e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1ca      	bne.n	8007666 <HAL_SPI_Transmit+0x120>
 80076d0:	e080      	b.n	80077d4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <HAL_SPI_Transmit+0x19a>
 80076da:	8afb      	ldrh	r3, [r7, #22]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d174      	bne.n	80077ca <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d912      	bls.n	8007710 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ee:	881a      	ldrh	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fa:	1c9a      	adds	r2, r3, #2
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007704:	b29b      	uxth	r3, r3
 8007706:	3b02      	subs	r3, #2
 8007708:	b29a      	uxth	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800770e:	e05c      	b.n	80077ca <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	7812      	ldrb	r2, [r2, #0]
 800771c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007736:	e048      	b.n	80077ca <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b02      	cmp	r3, #2
 8007744:	d12b      	bne.n	800779e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800774a:	b29b      	uxth	r3, r3
 800774c:	2b01      	cmp	r3, #1
 800774e:	d912      	bls.n	8007776 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007754:	881a      	ldrh	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007760:	1c9a      	adds	r2, r3, #2
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800776a:	b29b      	uxth	r3, r3
 800776c:	3b02      	subs	r3, #2
 800776e:	b29a      	uxth	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007774:	e029      	b.n	80077ca <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	330c      	adds	r3, #12
 8007780:	7812      	ldrb	r2, [r2, #0]
 8007782:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800779c:	e015      	b.n	80077ca <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800779e:	f7fa faef 	bl	8001d80 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d803      	bhi.n	80077b6 <HAL_SPI_Transmit+0x270>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077b4:	d102      	bne.n	80077bc <HAL_SPI_Transmit+0x276>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d106      	bne.n	80077ca <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80077c8:	e029      	b.n	800781e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1b1      	bne.n	8007738 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f947 	bl	8007a6c <SPI_EndRxTxTransaction>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2220      	movs	r2, #32
 80077e8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077f2:	2300      	movs	r3, #0
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	613b      	str	r3, [r7, #16]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	613b      	str	r3, [r7, #16]
 8007806:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	77fb      	strb	r3, [r7, #31]
 8007814:	e003      	b.n	800781e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007826:	7ffb      	ldrb	r3, [r7, #31]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3720      	adds	r7, #32
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	4613      	mov	r3, r2
 800783e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007840:	f7fa fa9e 	bl	8001d80 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	4413      	add	r3, r2
 800784e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007850:	f7fa fa96 	bl	8001d80 <HAL_GetTick>
 8007854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007856:	4b39      	ldr	r3, [pc, #228]	@ (800793c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	015b      	lsls	r3, r3, #5
 800785c:	0d1b      	lsrs	r3, r3, #20
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	fb02 f303 	mul.w	r3, r2, r3
 8007864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007866:	e054      	b.n	8007912 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800786e:	d050      	beq.n	8007912 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007870:	f7fa fa86 	bl	8001d80 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	69fa      	ldr	r2, [r7, #28]
 800787c:	429a      	cmp	r2, r3
 800787e:	d902      	bls.n	8007886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d13d      	bne.n	8007902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800789e:	d111      	bne.n	80078c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078a8:	d004      	beq.n	80078b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078b2:	d107      	bne.n	80078c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078cc:	d10f      	bne.n	80078ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e017      	b.n	8007932 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	3b01      	subs	r3, #1
 8007910:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4013      	ands	r3, r2
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	429a      	cmp	r2, r3
 8007920:	bf0c      	ite	eq
 8007922:	2301      	moveq	r3, #1
 8007924:	2300      	movne	r3, #0
 8007926:	b2db      	uxtb	r3, r3
 8007928:	461a      	mov	r2, r3
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	429a      	cmp	r2, r3
 800792e:	d19b      	bne.n	8007868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3720      	adds	r7, #32
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	2000000c 	.word	0x2000000c

08007940 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08a      	sub	sp, #40	@ 0x28
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007952:	f7fa fa15 	bl	8001d80 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795a:	1a9b      	subs	r3, r3, r2
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	4413      	add	r3, r2
 8007960:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007962:	f7fa fa0d 	bl	8001d80 <HAL_GetTick>
 8007966:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	330c      	adds	r3, #12
 800796e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007970:	4b3d      	ldr	r3, [pc, #244]	@ (8007a68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	00da      	lsls	r2, r3, #3
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	0d1b      	lsrs	r3, r3, #20
 8007980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007982:	fb02 f303 	mul.w	r3, r2, r3
 8007986:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007988:	e060      	b.n	8007a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007990:	d107      	bne.n	80079a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d104      	bne.n	80079a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	b2db      	uxtb	r3, r3
 800799e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079a8:	d050      	beq.n	8007a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079aa:	f7fa f9e9 	bl	8001d80 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d902      	bls.n	80079c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d13d      	bne.n	8007a3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80079ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079d8:	d111      	bne.n	80079fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079e2:	d004      	beq.n	80079ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ec:	d107      	bne.n	80079fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a06:	d10f      	bne.n	8007a28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e010      	b.n	8007a5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	4013      	ands	r3, r2
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d196      	bne.n	800798a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3728      	adds	r7, #40	@ 0x28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	2000000c 	.word	0x2000000c

08007a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af02      	add	r7, sp, #8
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f7ff ff5b 	bl	8007940 <SPI_WaitFifoStateUntilTimeout>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a94:	f043 0220 	orr.w	r2, r3, #32
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e027      	b.n	8007af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2180      	movs	r1, #128	@ 0x80
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f7ff fec0 	bl	8007830 <SPI_WaitFlagStateUntilTimeout>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d007      	beq.n	8007ac6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007aba:	f043 0220 	orr.w	r2, r3, #32
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e014      	b.n	8007af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7ff ff34 	bl	8007940 <SPI_WaitFifoStateUntilTimeout>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d007      	beq.n	8007aee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ae2:	f043 0220 	orr.w	r2, r3, #32
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e000      	b.n	8007af0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e049      	b.n	8007b9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d106      	bne.n	8007b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f841 	bl	8007ba6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3304      	adds	r3, #4
 8007b34:	4619      	mov	r1, r3
 8007b36:	4610      	mov	r0, r2
 8007b38:	f000 f9d4 	bl	8007ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
	...

08007bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d001      	beq.n	8007bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e04a      	b.n	8007c6a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f042 0201 	orr.w	r2, r2, #1
 8007bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a21      	ldr	r2, [pc, #132]	@ (8007c78 <HAL_TIM_Base_Start_IT+0xbc>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d018      	beq.n	8007c28 <HAL_TIM_Base_Start_IT+0x6c>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bfe:	d013      	beq.n	8007c28 <HAL_TIM_Base_Start_IT+0x6c>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a1d      	ldr	r2, [pc, #116]	@ (8007c7c <HAL_TIM_Base_Start_IT+0xc0>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00e      	beq.n	8007c28 <HAL_TIM_Base_Start_IT+0x6c>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8007c80 <HAL_TIM_Base_Start_IT+0xc4>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d009      	beq.n	8007c28 <HAL_TIM_Base_Start_IT+0x6c>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a1a      	ldr	r2, [pc, #104]	@ (8007c84 <HAL_TIM_Base_Start_IT+0xc8>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d004      	beq.n	8007c28 <HAL_TIM_Base_Start_IT+0x6c>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a19      	ldr	r2, [pc, #100]	@ (8007c88 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d115      	bne.n	8007c54 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689a      	ldr	r2, [r3, #8]
 8007c2e:	4b17      	ldr	r3, [pc, #92]	@ (8007c8c <HAL_TIM_Base_Start_IT+0xd0>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b06      	cmp	r3, #6
 8007c38:	d015      	beq.n	8007c66 <HAL_TIM_Base_Start_IT+0xaa>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c40:	d011      	beq.n	8007c66 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0201 	orr.w	r2, r2, #1
 8007c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c52:	e008      	b.n	8007c66 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f042 0201 	orr.w	r2, r2, #1
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	e000      	b.n	8007c68 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40012c00 	.word	0x40012c00
 8007c7c:	40000400 	.word	0x40000400
 8007c80:	40000800 	.word	0x40000800
 8007c84:	40013400 	.word	0x40013400
 8007c88:	40014000 	.word	0x40014000
 8007c8c:	00010007 	.word	0x00010007

08007c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d020      	beq.n	8007cf4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d01b      	beq.n	8007cf4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f06f 0202 	mvn.w	r2, #2
 8007cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f8e4 	bl	8007ea8 <HAL_TIM_IC_CaptureCallback>
 8007ce0:	e005      	b.n	8007cee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f8d6 	bl	8007e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f8e7 	bl	8007ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f003 0304 	and.w	r3, r3, #4
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d020      	beq.n	8007d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01b      	beq.n	8007d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0204 	mvn.w	r2, #4
 8007d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2202      	movs	r2, #2
 8007d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f8be 	bl	8007ea8 <HAL_TIM_IC_CaptureCallback>
 8007d2c:	e005      	b.n	8007d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f8b0 	bl	8007e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f8c1 	bl	8007ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d020      	beq.n	8007d8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01b      	beq.n	8007d8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f06f 0208 	mvn.w	r2, #8
 8007d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2204      	movs	r2, #4
 8007d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f898 	bl	8007ea8 <HAL_TIM_IC_CaptureCallback>
 8007d78:	e005      	b.n	8007d86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f88a 	bl	8007e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f89b 	bl	8007ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f003 0310 	and.w	r3, r3, #16
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d020      	beq.n	8007dd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f003 0310 	and.w	r3, r3, #16
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01b      	beq.n	8007dd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f06f 0210 	mvn.w	r2, #16
 8007da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2208      	movs	r2, #8
 8007dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f872 	bl	8007ea8 <HAL_TIM_IC_CaptureCallback>
 8007dc4:	e005      	b.n	8007dd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f864 	bl	8007e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f875 	bl	8007ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00c      	beq.n	8007dfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d007      	beq.n	8007dfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f06f 0201 	mvn.w	r2, #1
 8007df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7f9 f8b0 	bl	8000f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00c      	beq.n	8007e20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d007      	beq.n	8007e20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f908 	bl	8008030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00c      	beq.n	8007e44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d007      	beq.n	8007e44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f900 	bl	8008044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00c      	beq.n	8007e68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d007      	beq.n	8007e68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f834 	bl	8007ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00c      	beq.n	8007e8c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f003 0320 	and.w	r3, r3, #32
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d007      	beq.n	8007e8c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f06f 0220 	mvn.w	r2, #32
 8007e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f8c8 	bl	800801c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a42      	ldr	r2, [pc, #264]	@ (8008000 <TIM_Base_SetConfig+0x11c>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00f      	beq.n	8007f1c <TIM_Base_SetConfig+0x38>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f02:	d00b      	beq.n	8007f1c <TIM_Base_SetConfig+0x38>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a3f      	ldr	r2, [pc, #252]	@ (8008004 <TIM_Base_SetConfig+0x120>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d007      	beq.n	8007f1c <TIM_Base_SetConfig+0x38>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a3e      	ldr	r2, [pc, #248]	@ (8008008 <TIM_Base_SetConfig+0x124>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d003      	beq.n	8007f1c <TIM_Base_SetConfig+0x38>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a3d      	ldr	r2, [pc, #244]	@ (800800c <TIM_Base_SetConfig+0x128>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d108      	bne.n	8007f2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a33      	ldr	r2, [pc, #204]	@ (8008000 <TIM_Base_SetConfig+0x11c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d01b      	beq.n	8007f6e <TIM_Base_SetConfig+0x8a>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f3c:	d017      	beq.n	8007f6e <TIM_Base_SetConfig+0x8a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a30      	ldr	r2, [pc, #192]	@ (8008004 <TIM_Base_SetConfig+0x120>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d013      	beq.n	8007f6e <TIM_Base_SetConfig+0x8a>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a2f      	ldr	r2, [pc, #188]	@ (8008008 <TIM_Base_SetConfig+0x124>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d00f      	beq.n	8007f6e <TIM_Base_SetConfig+0x8a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a2e      	ldr	r2, [pc, #184]	@ (800800c <TIM_Base_SetConfig+0x128>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d00b      	beq.n	8007f6e <TIM_Base_SetConfig+0x8a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a2d      	ldr	r2, [pc, #180]	@ (8008010 <TIM_Base_SetConfig+0x12c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d007      	beq.n	8007f6e <TIM_Base_SetConfig+0x8a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2c      	ldr	r2, [pc, #176]	@ (8008014 <TIM_Base_SetConfig+0x130>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d003      	beq.n	8007f6e <TIM_Base_SetConfig+0x8a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2b      	ldr	r2, [pc, #172]	@ (8008018 <TIM_Base_SetConfig+0x134>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d108      	bne.n	8007f80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a16      	ldr	r2, [pc, #88]	@ (8008000 <TIM_Base_SetConfig+0x11c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00f      	beq.n	8007fcc <TIM_Base_SetConfig+0xe8>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a17      	ldr	r2, [pc, #92]	@ (800800c <TIM_Base_SetConfig+0x128>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00b      	beq.n	8007fcc <TIM_Base_SetConfig+0xe8>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a16      	ldr	r2, [pc, #88]	@ (8008010 <TIM_Base_SetConfig+0x12c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d007      	beq.n	8007fcc <TIM_Base_SetConfig+0xe8>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a15      	ldr	r2, [pc, #84]	@ (8008014 <TIM_Base_SetConfig+0x130>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d003      	beq.n	8007fcc <TIM_Base_SetConfig+0xe8>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a14      	ldr	r2, [pc, #80]	@ (8008018 <TIM_Base_SetConfig+0x134>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d103      	bne.n	8007fd4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	691a      	ldr	r2, [r3, #16]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d105      	bne.n	8007ff2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	f023 0201 	bic.w	r2, r3, #1
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	611a      	str	r2, [r3, #16]
  }
}
 8007ff2:	bf00      	nop
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	40012c00 	.word	0x40012c00
 8008004:	40000400 	.word	0x40000400
 8008008:	40000800 	.word	0x40000800
 800800c:	40013400 	.word	0x40013400
 8008010:	40014000 	.word	0x40014000
 8008014:	40014400 	.word	0x40014400
 8008018:	40014800 	.word	0x40014800

0800801c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008068:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800806c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	b29a      	uxth	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008086:	b480      	push	{r7}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800808e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8008092:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800809a:	b29a      	uxth	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	43db      	mvns	r3, r3
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	4013      	ands	r3, r2
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	1d3b      	adds	r3, r7, #4
 80080c6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b09d      	sub	sp, #116	@ 0x74
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800811a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	78db      	ldrb	r3, [r3, #3]
 8008126:	2b03      	cmp	r3, #3
 8008128:	d81f      	bhi.n	800816a <USB_ActivateEndpoint+0x72>
 800812a:	a201      	add	r2, pc, #4	@ (adr r2, 8008130 <USB_ActivateEndpoint+0x38>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	08008141 	.word	0x08008141
 8008134:	0800815d 	.word	0x0800815d
 8008138:	08008173 	.word	0x08008173
 800813c:	0800814f 	.word	0x0800814f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008140:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008144:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008148:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800814c:	e012      	b.n	8008174 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800814e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008152:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008156:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800815a:	e00b      	b.n	8008174 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800815c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008160:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008164:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008168:	e004      	b.n	8008174 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008170:	e000      	b.n	8008174 <USB_ActivateEndpoint+0x7c>
      break;
 8008172:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	441a      	add	r2, r3
 800817e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008182:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008186:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800818a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800818e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008192:	b29b      	uxth	r3, r3
 8008194:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	b21b      	sxth	r3, r3
 80081a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ae:	b21a      	sxth	r2, r3
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	b21b      	sxth	r3, r3
 80081b6:	4313      	orrs	r3, r2
 80081b8:	b21b      	sxth	r3, r3
 80081ba:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	441a      	add	r2, r3
 80081c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80081cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081dc:	b29b      	uxth	r3, r3
 80081de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	7b1b      	ldrb	r3, [r3, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f040 8178 	bne.w	80084da <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	785b      	ldrb	r3, [r3, #1]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 8084 	beq.w	80082fc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	61bb      	str	r3, [r7, #24]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081fe:	b29b      	uxth	r3, r3
 8008200:	461a      	mov	r2, r3
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	4413      	add	r3, r2
 8008206:	61bb      	str	r3, [r7, #24]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	011a      	lsls	r2, r3, #4
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	4413      	add	r3, r2
 8008212:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	88db      	ldrh	r3, [r3, #6]
 800821c:	085b      	lsrs	r3, r3, #1
 800821e:	b29b      	uxth	r3, r3
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	b29a      	uxth	r2, r3
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	827b      	strh	r3, [r7, #18]
 8008236:	8a7b      	ldrh	r3, [r7, #18]
 8008238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01b      	beq.n	8008278 <USB_ActivateEndpoint+0x180>
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	b29b      	uxth	r3, r3
 800824e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008256:	823b      	strh	r3, [r7, #16]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	441a      	add	r2, r3
 8008262:	8a3b      	ldrh	r3, [r7, #16]
 8008264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800826c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008270:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008274:	b29b      	uxth	r3, r3
 8008276:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	78db      	ldrb	r3, [r3, #3]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d020      	beq.n	80082c2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008296:	81bb      	strh	r3, [r7, #12]
 8008298:	89bb      	ldrh	r3, [r7, #12]
 800829a:	f083 0320 	eor.w	r3, r3, #32
 800829e:	81bb      	strh	r3, [r7, #12]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	441a      	add	r2, r3
 80082aa:	89bb      	ldrh	r3, [r7, #12]
 80082ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082bc:	b29b      	uxth	r3, r3
 80082be:	8013      	strh	r3, [r2, #0]
 80082c0:	e2d5      	b.n	800886e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082d8:	81fb      	strh	r3, [r7, #14]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	441a      	add	r2, r3
 80082e4:	89fb      	ldrh	r3, [r7, #14]
 80082e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	8013      	strh	r3, [r2, #0]
 80082fa:	e2b8      	b.n	800886e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008306:	b29b      	uxth	r3, r3
 8008308:	461a      	mov	r2, r3
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	4413      	add	r3, r2
 800830e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	011a      	lsls	r2, r3, #4
 8008316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008318:	4413      	add	r3, r2
 800831a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800831e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	88db      	ldrh	r3, [r3, #6]
 8008324:	085b      	lsrs	r3, r3, #1
 8008326:	b29b      	uxth	r3, r3
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	b29a      	uxth	r2, r3
 800832c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800833a:	b29b      	uxth	r3, r3
 800833c:	461a      	mov	r2, r3
 800833e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008340:	4413      	add	r3, r2
 8008342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	011a      	lsls	r2, r3, #4
 800834a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834c:	4413      	add	r3, r2
 800834e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008352:	627b      	str	r3, [r7, #36]	@ 0x24
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b29b      	uxth	r3, r3
 800835a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800835e:	b29a      	uxth	r2, r3
 8008360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008362:	801a      	strh	r2, [r3, #0]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10a      	bne.n	8008382 <USB_ActivateEndpoint+0x28a>
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	b29b      	uxth	r3, r3
 8008372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800837a:	b29a      	uxth	r2, r3
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	801a      	strh	r2, [r3, #0]
 8008380:	e039      	b.n	80083f6 <USB_ActivateEndpoint+0x2fe>
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	2b3e      	cmp	r3, #62	@ 0x3e
 8008388:	d818      	bhi.n	80083bc <USB_ActivateEndpoint+0x2c4>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <USB_ActivateEndpoint+0x2ac>
 800839e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083a0:	3301      	adds	r3, #1
 80083a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	029b      	lsls	r3, r3, #10
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	4313      	orrs	r3, r2
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	e01c      	b.n	80083f6 <USB_ActivateEndpoint+0x2fe>
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	f003 031f 	and.w	r3, r3, #31
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d102      	bne.n	80083d6 <USB_ActivateEndpoint+0x2de>
 80083d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083d2:	3b01      	subs	r3, #1
 80083d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	b29a      	uxth	r2, r3
 80083dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083de:	b29b      	uxth	r3, r3
 80083e0:	029b      	lsls	r3, r3, #10
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	4313      	orrs	r3, r2
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008404:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d01b      	beq.n	8008446 <USB_ActivateEndpoint+0x34e>
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	b29b      	uxth	r3, r3
 800841c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008424:	843b      	strh	r3, [r7, #32]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	441a      	add	r2, r3
 8008430:	8c3b      	ldrh	r3, [r7, #32]
 8008432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800843a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800843e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008442:	b29b      	uxth	r3, r3
 8008444:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d124      	bne.n	8008498 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	b29b      	uxth	r3, r3
 800845c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008464:	83bb      	strh	r3, [r7, #28]
 8008466:	8bbb      	ldrh	r3, [r7, #28]
 8008468:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800846c:	83bb      	strh	r3, [r7, #28]
 800846e:	8bbb      	ldrh	r3, [r7, #28]
 8008470:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008474:	83bb      	strh	r3, [r7, #28]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	441a      	add	r2, r3
 8008480:	8bbb      	ldrh	r3, [r7, #28]
 8008482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800848a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800848e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008492:	b29b      	uxth	r3, r3
 8008494:	8013      	strh	r3, [r2, #0]
 8008496:	e1ea      	b.n	800886e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ae:	83fb      	strh	r3, [r7, #30]
 80084b0:	8bfb      	ldrh	r3, [r7, #30]
 80084b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084b6:	83fb      	strh	r3, [r7, #30]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	441a      	add	r2, r3
 80084c2:	8bfb      	ldrh	r3, [r7, #30]
 80084c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	8013      	strh	r3, [r2, #0]
 80084d8:	e1c9      	b.n	800886e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	78db      	ldrb	r3, [r3, #3]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d11e      	bne.n	8008520 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084f8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	441a      	add	r2, r3
 8008506:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800850a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800850e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008512:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800851a:	b29b      	uxth	r3, r3
 800851c:	8013      	strh	r3, [r2, #0]
 800851e:	e01d      	b.n	800855c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	b29b      	uxth	r3, r3
 800852e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008536:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	441a      	add	r2, r3
 8008544:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800854c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008558:	b29b      	uxth	r3, r3
 800855a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008566:	b29b      	uxth	r3, r3
 8008568:	461a      	mov	r2, r3
 800856a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800856c:	4413      	add	r3, r2
 800856e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	011a      	lsls	r2, r3, #4
 8008576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008578:	4413      	add	r3, r2
 800857a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800857e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	891b      	ldrh	r3, [r3, #8]
 8008584:	085b      	lsrs	r3, r3, #1
 8008586:	b29b      	uxth	r3, r3
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	b29a      	uxth	r2, r3
 800858c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800858e:	801a      	strh	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	657b      	str	r3, [r7, #84]	@ 0x54
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800859a:	b29b      	uxth	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085a0:	4413      	add	r3, r2
 80085a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	011a      	lsls	r2, r3, #4
 80085aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80085b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	895b      	ldrh	r3, [r3, #10]
 80085b8:	085b      	lsrs	r3, r3, #1
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	b29a      	uxth	r2, r3
 80085c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f040 8093 	bne.w	80086f4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	881b      	ldrh	r3, [r3, #0]
 80085da:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80085de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80085e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d01b      	beq.n	8008622 <USB_ActivateEndpoint+0x52a>
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008600:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	441a      	add	r2, r3
 800860c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800860e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008612:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800861a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800861e:	b29b      	uxth	r3, r3
 8008620:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008630:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d01b      	beq.n	8008672 <USB_ActivateEndpoint+0x57a>
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	b29b      	uxth	r3, r3
 8008648:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800864c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008650:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	441a      	add	r2, r3
 800865c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800865e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800866a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800866e:	b29b      	uxth	r3, r3
 8008670:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008688:	873b      	strh	r3, [r7, #56]	@ 0x38
 800868a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800868c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008690:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008692:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008694:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008698:	873b      	strh	r3, [r7, #56]	@ 0x38
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	441a      	add	r2, r3
 80086a4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80086a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	4413      	add	r3, r2
 80086c4:	881b      	ldrh	r3, [r3, #0]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	441a      	add	r2, r3
 80086dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	8013      	strh	r3, [r2, #0]
 80086f2:	e0bc      	b.n	800886e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d01d      	beq.n	800874c <USB_ActivateEndpoint+0x654>
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	b29b      	uxth	r3, r3
 800871e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008726:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	441a      	add	r2, r3
 8008734:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800873c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008740:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008748:	b29b      	uxth	r3, r3
 800874a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800875c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008764:	2b00      	cmp	r3, #0
 8008766:	d01d      	beq.n	80087a4 <USB_ActivateEndpoint+0x6ac>
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	881b      	ldrh	r3, [r3, #0]
 8008774:	b29b      	uxth	r3, r3
 8008776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800877a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800877e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	441a      	add	r2, r3
 800878c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008798:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800879c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	78db      	ldrb	r3, [r3, #3]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d024      	beq.n	80087f6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087c2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80087c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80087ca:	f083 0320 	eor.w	r3, r3, #32
 80087ce:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	441a      	add	r2, r3
 80087dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80087e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	8013      	strh	r3, [r2, #0]
 80087f4:	e01d      	b.n	8008832 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	b29b      	uxth	r3, r3
 8008804:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800880c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	441a      	add	r2, r3
 800881a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800881e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008822:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800882a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800882e:	b29b      	uxth	r3, r3
 8008830:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	b29b      	uxth	r3, r3
 8008840:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008848:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	441a      	add	r2, r3
 8008856:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800885a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800885e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800886a:	b29b      	uxth	r3, r3
 800886c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800886e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008872:	4618      	mov	r0, r3
 8008874:	3774      	adds	r7, #116	@ 0x74
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop

08008880 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008880:	b480      	push	{r7}
 8008882:	b08d      	sub	sp, #52	@ 0x34
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	7b1b      	ldrb	r3, [r3, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f040 808e 	bne.w	80089b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d044      	beq.n	8008926 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	81bb      	strh	r3, [r7, #12]
 80088aa:	89bb      	ldrh	r3, [r7, #12]
 80088ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d01b      	beq.n	80088ec <USB_DeactivateEndpoint+0x6c>
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ca:	817b      	strh	r3, [r7, #10]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	441a      	add	r2, r3
 80088d6:	897b      	ldrh	r3, [r7, #10]
 80088d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008902:	813b      	strh	r3, [r7, #8]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	441a      	add	r2, r3
 800890e:	893b      	ldrh	r3, [r7, #8]
 8008910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800891c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008920:	b29b      	uxth	r3, r3
 8008922:	8013      	strh	r3, [r2, #0]
 8008924:	e192      	b.n	8008c4c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	827b      	strh	r3, [r7, #18]
 8008934:	8a7b      	ldrh	r3, [r7, #18]
 8008936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01b      	beq.n	8008976 <USB_DeactivateEndpoint+0xf6>
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008954:	823b      	strh	r3, [r7, #16]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	441a      	add	r2, r3
 8008960:	8a3b      	ldrh	r3, [r7, #16]
 8008962:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008966:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800896a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800896e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008972:	b29b      	uxth	r3, r3
 8008974:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800898c:	81fb      	strh	r3, [r7, #14]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	441a      	add	r2, r3
 8008998:	89fb      	ldrh	r3, [r7, #14]
 800899a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800899e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	8013      	strh	r3, [r2, #0]
 80089ae:	e14d      	b.n	8008c4c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	785b      	ldrb	r3, [r3, #1]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f040 80a5 	bne.w	8008b04 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	881b      	ldrh	r3, [r3, #0]
 80089c6:	843b      	strh	r3, [r7, #32]
 80089c8:	8c3b      	ldrh	r3, [r7, #32]
 80089ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d01b      	beq.n	8008a0a <USB_DeactivateEndpoint+0x18a>
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089e8:	83fb      	strh	r3, [r7, #30]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	441a      	add	r2, r3
 80089f4:	8bfb      	ldrh	r3, [r7, #30]
 80089f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	881b      	ldrh	r3, [r3, #0]
 8008a16:	83bb      	strh	r3, [r7, #28]
 8008a18:	8bbb      	ldrh	r3, [r7, #28]
 8008a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01b      	beq.n	8008a5a <USB_DeactivateEndpoint+0x1da>
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a38:	837b      	strh	r3, [r7, #26]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	441a      	add	r2, r3
 8008a44:	8b7b      	ldrh	r3, [r7, #26]
 8008a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a70:	833b      	strh	r3, [r7, #24]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	441a      	add	r2, r3
 8008a7c:	8b3b      	ldrh	r3, [r7, #24]
 8008a7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa8:	82fb      	strh	r3, [r7, #22]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	441a      	add	r2, r3
 8008ab4:	8afb      	ldrh	r3, [r7, #22]
 8008ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ae0:	82bb      	strh	r3, [r7, #20]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	441a      	add	r2, r3
 8008aec:	8abb      	ldrh	r3, [r7, #20]
 8008aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	8013      	strh	r3, [r2, #0]
 8008b02:	e0a3      	b.n	8008c4c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008b12:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01b      	beq.n	8008b54 <USB_DeactivateEndpoint+0x2d4>
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b32:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	441a      	add	r2, r3
 8008b3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008b40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008b62:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d01b      	beq.n	8008ba4 <USB_DeactivateEndpoint+0x324>
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b82:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	441a      	add	r2, r3
 8008b8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	441a      	add	r2, r3
 8008bc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008bc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bf2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	441a      	add	r2, r3
 8008bfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c2a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	441a      	add	r2, r3
 8008c36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3734      	adds	r7, #52	@ 0x34
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b0c2      	sub	sp, #264	@ 0x108
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c68:	6018      	str	r0, [r3, #0]
 8008c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c72:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	785b      	ldrb	r3, [r3, #1]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	f040 86b7 	bne.w	80099f4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	699a      	ldr	r2, [r3, #24]
 8008c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d908      	bls.n	8008cb4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008cb2:	e007      	b.n	8008cc4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	7b1b      	ldrb	r3, [r3, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d13a      	bne.n	8008d4a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	6959      	ldr	r1, [r3, #20]
 8008ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	88da      	ldrh	r2, [r3, #6]
 8008cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008cf6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008cfa:	6800      	ldr	r0, [r0, #0]
 8008cfc:	f001 fc8d 	bl	800a61a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	613b      	str	r3, [r7, #16]
 8008d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	4413      	add	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]
 8008d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	011a      	lsls	r2, r3, #4
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	4413      	add	r3, r2
 8008d36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	801a      	strh	r2, [r3, #0]
 8008d46:	f000 be1f 	b.w	8009988 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	78db      	ldrb	r3, [r3, #3]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	f040 8462 	bne.w	8009620 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6a1a      	ldr	r2, [r3, #32]
 8008d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	f240 83df 	bls.w	8009538 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008da0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008da8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	441a      	add	r2, r3
 8008dbe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6a1a      	ldr	r2, [r3, #32]
 8008de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de6:	1ad2      	subs	r2, r2, r3
 8008de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	881b      	ldrh	r3, [r3, #0]
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 81c7 	beq.w	80091aa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	785b      	ldrb	r3, [r3, #1]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d177      	bne.n	8008f28 <USB_EPStartXfer+0x2ce>
 8008e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	461a      	mov	r2, r3
 8008e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e58:	4413      	add	r3, r2
 8008e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	011a      	lsls	r2, r3, #4
 8008e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e82:	801a      	strh	r2, [r3, #0]
 8008e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10a      	bne.n	8008ea2 <USB_EPStartXfer+0x248>
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9e:	801a      	strh	r2, [r3, #0]
 8008ea0:	e067      	b.n	8008f72 <USB_EPStartXfer+0x318>
 8008ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea6:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ea8:	d81c      	bhi.n	8008ee4 <USB_EPStartXfer+0x28a>
 8008eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eae:	085b      	lsrs	r3, r3, #1
 8008eb0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d004      	beq.n	8008eca <USB_EPStartXfer+0x270>
 8008ec0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	029b      	lsls	r3, r3, #10
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	4313      	orrs	r3, r2
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee0:	801a      	strh	r2, [r3, #0]
 8008ee2:	e046      	b.n	8008f72 <USB_EPStartXfer+0x318>
 8008ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee8:	095b      	lsrs	r3, r3, #5
 8008eea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ef2:	f003 031f 	and.w	r3, r3, #31
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d104      	bne.n	8008f04 <USB_EPStartXfer+0x2aa>
 8008efa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008efe:	3b01      	subs	r3, #1
 8008f00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	029b      	lsls	r3, r3, #10
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	4313      	orrs	r3, r2
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	801a      	strh	r2, [r3, #0]
 8008f26:	e024      	b.n	8008f72 <USB_EPStartXfer+0x318>
 8008f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	785b      	ldrb	r3, [r3, #1]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d11c      	bne.n	8008f72 <USB_EPStartXfer+0x318>
 8008f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4c:	4413      	add	r3, r2
 8008f4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	011a      	lsls	r2, r3, #4
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f60:	4413      	add	r3, r2
 8008f62:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	895b      	ldrh	r3, [r3, #10]
 8008f7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6959      	ldr	r1, [r3, #20]
 8008f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008fa0:	6800      	ldr	r0, [r0, #0]
 8008fa2:	f001 fb3a 	bl	800a61a <USB_WritePMA>
            ep->xfer_buff += len;
 8008fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	695a      	ldr	r2, [r3, #20]
 8008fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb6:	441a      	add	r2, r3
 8008fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6a1a      	ldr	r2, [r3, #32]
 8008fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d90f      	bls.n	8009000 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6a1a      	ldr	r2, [r3, #32]
 8008fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff0:	1ad2      	subs	r2, r2, r3
 8008ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	621a      	str	r2, [r3, #32]
 8008ffe:	e00e      	b.n	800901e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2200      	movs	r2, #0
 800901c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800901e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	785b      	ldrb	r3, [r3, #1]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d177      	bne.n	800911e <USB_EPStartXfer+0x4c4>
 800902e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800903e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009048:	b29b      	uxth	r3, r3
 800904a:	461a      	mov	r2, r3
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	4413      	add	r3, r2
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	011a      	lsls	r2, r3, #4
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	4413      	add	r3, r2
 8009064:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009068:	617b      	str	r3, [r7, #20]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009074:	b29a      	uxth	r2, r3
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	801a      	strh	r2, [r3, #0]
 800907a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10a      	bne.n	8009098 <USB_EPStartXfer+0x43e>
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	b29b      	uxth	r3, r3
 8009088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800908c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009090:	b29a      	uxth	r2, r3
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	801a      	strh	r2, [r3, #0]
 8009096:	e06d      	b.n	8009174 <USB_EPStartXfer+0x51a>
 8009098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800909c:	2b3e      	cmp	r3, #62	@ 0x3e
 800909e:	d81c      	bhi.n	80090da <USB_EPStartXfer+0x480>
 80090a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a4:	085b      	lsrs	r3, r3, #1
 80090a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80090aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d004      	beq.n	80090c0 <USB_EPStartXfer+0x466>
 80090b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090ba:	3301      	adds	r3, #1
 80090bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	029b      	lsls	r3, r3, #10
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	4313      	orrs	r3, r2
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	801a      	strh	r2, [r3, #0]
 80090d8:	e04c      	b.n	8009174 <USB_EPStartXfer+0x51a>
 80090da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090de:	095b      	lsrs	r3, r3, #5
 80090e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80090e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e8:	f003 031f 	and.w	r3, r3, #31
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d104      	bne.n	80090fa <USB_EPStartXfer+0x4a0>
 80090f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090f4:	3b01      	subs	r3, #1
 80090f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	b29a      	uxth	r2, r3
 8009100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009104:	b29b      	uxth	r3, r3
 8009106:	029b      	lsls	r3, r3, #10
 8009108:	b29b      	uxth	r3, r3
 800910a:	4313      	orrs	r3, r2
 800910c:	b29b      	uxth	r3, r3
 800910e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009116:	b29a      	uxth	r2, r3
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	801a      	strh	r2, [r3, #0]
 800911c:	e02a      	b.n	8009174 <USB_EPStartXfer+0x51a>
 800911e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	785b      	ldrb	r3, [r3, #1]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d122      	bne.n	8009174 <USB_EPStartXfer+0x51a>
 800912e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	623b      	str	r3, [r7, #32]
 800913a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800913e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009148:	b29b      	uxth	r3, r3
 800914a:	461a      	mov	r2, r3
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	4413      	add	r3, r2
 8009150:	623b      	str	r3, [r7, #32]
 8009152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	011a      	lsls	r2, r3, #4
 8009160:	6a3b      	ldr	r3, [r7, #32]
 8009162:	4413      	add	r3, r2
 8009164:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009168:	61fb      	str	r3, [r7, #28]
 800916a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800916e:	b29a      	uxth	r2, r3
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	891b      	ldrh	r3, [r3, #8]
 8009180:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6959      	ldr	r1, [r3, #20]
 8009190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009194:	b29b      	uxth	r3, r3
 8009196:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800919a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800919e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80091a2:	6800      	ldr	r0, [r0, #0]
 80091a4:	f001 fa39 	bl	800a61a <USB_WritePMA>
 80091a8:	e3ee      	b.n	8009988 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	785b      	ldrb	r3, [r3, #1]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d177      	bne.n	80092aa <USB_EPStartXfer+0x650>
 80091ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	461a      	mov	r2, r3
 80091d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091da:	4413      	add	r3, r2
 80091dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	011a      	lsls	r2, r3, #4
 80091ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091ee:	4413      	add	r3, r2
 80091f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80091f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80091f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009200:	b29a      	uxth	r2, r3
 8009202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009204:	801a      	strh	r2, [r3, #0]
 8009206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10a      	bne.n	8009224 <USB_EPStartXfer+0x5ca>
 800920e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	b29b      	uxth	r3, r3
 8009214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800921c:	b29a      	uxth	r2, r3
 800921e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009220:	801a      	strh	r2, [r3, #0]
 8009222:	e06d      	b.n	8009300 <USB_EPStartXfer+0x6a6>
 8009224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009228:	2b3e      	cmp	r3, #62	@ 0x3e
 800922a:	d81c      	bhi.n	8009266 <USB_EPStartXfer+0x60c>
 800922c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009230:	085b      	lsrs	r3, r3, #1
 8009232:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	d004      	beq.n	800924c <USB_EPStartXfer+0x5f2>
 8009242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009246:	3301      	adds	r3, #1
 8009248:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800924c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	b29a      	uxth	r2, r3
 8009252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009256:	b29b      	uxth	r3, r3
 8009258:	029b      	lsls	r3, r3, #10
 800925a:	b29b      	uxth	r3, r3
 800925c:	4313      	orrs	r3, r2
 800925e:	b29a      	uxth	r2, r3
 8009260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009262:	801a      	strh	r2, [r3, #0]
 8009264:	e04c      	b.n	8009300 <USB_EPStartXfer+0x6a6>
 8009266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800926a:	095b      	lsrs	r3, r3, #5
 800926c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009274:	f003 031f 	and.w	r3, r3, #31
 8009278:	2b00      	cmp	r3, #0
 800927a:	d104      	bne.n	8009286 <USB_EPStartXfer+0x62c>
 800927c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009280:	3b01      	subs	r3, #1
 8009282:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	b29a      	uxth	r2, r3
 800928c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009290:	b29b      	uxth	r3, r3
 8009292:	029b      	lsls	r3, r3, #10
 8009294:	b29b      	uxth	r3, r3
 8009296:	4313      	orrs	r3, r2
 8009298:	b29b      	uxth	r3, r3
 800929a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800929e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092a6:	801a      	strh	r2, [r3, #0]
 80092a8:	e02a      	b.n	8009300 <USB_EPStartXfer+0x6a6>
 80092aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	785b      	ldrb	r3, [r3, #1]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d122      	bne.n	8009300 <USB_EPStartXfer+0x6a6>
 80092ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80092c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	461a      	mov	r2, r3
 80092d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092da:	4413      	add	r3, r2
 80092dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80092de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	011a      	lsls	r2, r3, #4
 80092ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092ee:	4413      	add	r3, r2
 80092f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80092f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	891b      	ldrh	r3, [r3, #8]
 800930c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6959      	ldr	r1, [r3, #20]
 800931c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009320:	b29b      	uxth	r3, r3
 8009322:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009326:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800932a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800932e:	6800      	ldr	r0, [r0, #0]
 8009330:	f001 f973 	bl	800a61a <USB_WritePMA>
            ep->xfer_buff += len;
 8009334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	695a      	ldr	r2, [r3, #20]
 8009340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009344:	441a      	add	r2, r3
 8009346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800934a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6a1a      	ldr	r2, [r3, #32]
 800935e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	429a      	cmp	r2, r3
 800936c:	d90f      	bls.n	800938e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800936e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6a1a      	ldr	r2, [r3, #32]
 800937a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800937e:	1ad2      	subs	r2, r2, r3
 8009380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	621a      	str	r2, [r3, #32]
 800938c:	e00e      	b.n	80093ac <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800938e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800939e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2200      	movs	r2, #0
 80093aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80093ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80093b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	785b      	ldrb	r3, [r3, #1]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d177      	bne.n	80094b8 <USB_EPStartXfer+0x85e>
 80093c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	461a      	mov	r2, r3
 80093e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e8:	4413      	add	r3, r2
 80093ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	011a      	lsls	r2, r3, #4
 80093fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fc:	4413      	add	r3, r2
 80093fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009402:	637b      	str	r3, [r7, #52]	@ 0x34
 8009404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	b29b      	uxth	r3, r3
 800940a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800940e:	b29a      	uxth	r2, r3
 8009410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009412:	801a      	strh	r2, [r3, #0]
 8009414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10a      	bne.n	8009432 <USB_EPStartXfer+0x7d8>
 800941c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800941e:	881b      	ldrh	r3, [r3, #0]
 8009420:	b29b      	uxth	r3, r3
 8009422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800942a:	b29a      	uxth	r2, r3
 800942c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800942e:	801a      	strh	r2, [r3, #0]
 8009430:	e067      	b.n	8009502 <USB_EPStartXfer+0x8a8>
 8009432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009436:	2b3e      	cmp	r3, #62	@ 0x3e
 8009438:	d81c      	bhi.n	8009474 <USB_EPStartXfer+0x81a>
 800943a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800943e:	085b      	lsrs	r3, r3, #1
 8009440:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	d004      	beq.n	800945a <USB_EPStartXfer+0x800>
 8009450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009454:	3301      	adds	r3, #1
 8009456:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800945a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	b29a      	uxth	r2, r3
 8009460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009464:	b29b      	uxth	r3, r3
 8009466:	029b      	lsls	r3, r3, #10
 8009468:	b29b      	uxth	r3, r3
 800946a:	4313      	orrs	r3, r2
 800946c:	b29a      	uxth	r2, r3
 800946e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009470:	801a      	strh	r2, [r3, #0]
 8009472:	e046      	b.n	8009502 <USB_EPStartXfer+0x8a8>
 8009474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009478:	095b      	lsrs	r3, r3, #5
 800947a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800947e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009482:	f003 031f 	and.w	r3, r3, #31
 8009486:	2b00      	cmp	r3, #0
 8009488:	d104      	bne.n	8009494 <USB_EPStartXfer+0x83a>
 800948a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800948e:	3b01      	subs	r3, #1
 8009490:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	b29a      	uxth	r2, r3
 800949a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800949e:	b29b      	uxth	r3, r3
 80094a0:	029b      	lsls	r3, r3, #10
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	4313      	orrs	r3, r2
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b4:	801a      	strh	r2, [r3, #0]
 80094b6:	e024      	b.n	8009502 <USB_EPStartXfer+0x8a8>
 80094b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d11c      	bne.n	8009502 <USB_EPStartXfer+0x8a8>
 80094c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	461a      	mov	r2, r3
 80094da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094dc:	4413      	add	r3, r2
 80094de:	643b      	str	r3, [r7, #64]	@ 0x40
 80094e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	011a      	lsls	r2, r3, #4
 80094ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094f0:	4413      	add	r3, r2
 80094f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009500:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	895b      	ldrh	r3, [r3, #10]
 800950e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6959      	ldr	r1, [r3, #20]
 800951e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009522:	b29b      	uxth	r3, r3
 8009524:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009528:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800952c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009530:	6800      	ldr	r0, [r0, #0]
 8009532:	f001 f872 	bl	800a61a <USB_WritePMA>
 8009536:	e227      	b.n	8009988 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800953c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	6a1b      	ldr	r3, [r3, #32]
 8009544:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800954c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	b29b      	uxth	r3, r3
 8009566:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800956a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800956e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009576:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	441a      	add	r2, r3
 800958c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009590:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009594:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800959c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80095a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095be:	b29b      	uxth	r3, r3
 80095c0:	461a      	mov	r2, r3
 80095c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095c4:	4413      	add	r3, r2
 80095c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	011a      	lsls	r2, r3, #4
 80095d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095d8:	4413      	add	r3, r2
 80095da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80095de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80095ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	891b      	ldrh	r3, [r3, #8]
 80095f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6959      	ldr	r1, [r3, #20]
 8009606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800960a:	b29b      	uxth	r3, r3
 800960c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009610:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009614:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009618:	6800      	ldr	r0, [r0, #0]
 800961a:	f000 fffe 	bl	800a61a <USB_WritePMA>
 800961e:	e1b3      	b.n	8009988 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	6a1a      	ldr	r2, [r3, #32]
 800962c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009630:	1ad2      	subs	r2, r2, r3
 8009632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800963e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	b29b      	uxth	r3, r3
 800965c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 80c6 	beq.w	80097f2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800966a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	673b      	str	r3, [r7, #112]	@ 0x70
 8009672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d177      	bne.n	8009772 <USB_EPStartXfer+0xb18>
 8009682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009686:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800968e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800969c:	b29b      	uxth	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096a2:	4413      	add	r3, r2
 80096a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	011a      	lsls	r2, r3, #4
 80096b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096b6:	4413      	add	r3, r2
 80096b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80096bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80096be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096cc:	801a      	strh	r2, [r3, #0]
 80096ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10a      	bne.n	80096ec <USB_EPStartXfer+0xa92>
 80096d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096e8:	801a      	strh	r2, [r3, #0]
 80096ea:	e067      	b.n	80097bc <USB_EPStartXfer+0xb62>
 80096ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80096f2:	d81c      	bhi.n	800972e <USB_EPStartXfer+0xad4>
 80096f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f8:	085b      	lsrs	r3, r3, #1
 80096fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80096fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	d004      	beq.n	8009714 <USB_EPStartXfer+0xaba>
 800970a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800970e:	3301      	adds	r3, #1
 8009710:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009716:	881b      	ldrh	r3, [r3, #0]
 8009718:	b29a      	uxth	r2, r3
 800971a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800971e:	b29b      	uxth	r3, r3
 8009720:	029b      	lsls	r3, r3, #10
 8009722:	b29b      	uxth	r3, r3
 8009724:	4313      	orrs	r3, r2
 8009726:	b29a      	uxth	r2, r3
 8009728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800972a:	801a      	strh	r2, [r3, #0]
 800972c:	e046      	b.n	80097bc <USB_EPStartXfer+0xb62>
 800972e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009732:	095b      	lsrs	r3, r3, #5
 8009734:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800973c:	f003 031f 	and.w	r3, r3, #31
 8009740:	2b00      	cmp	r3, #0
 8009742:	d104      	bne.n	800974e <USB_EPStartXfer+0xaf4>
 8009744:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009748:	3b01      	subs	r3, #1
 800974a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800974e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	b29a      	uxth	r2, r3
 8009754:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009758:	b29b      	uxth	r3, r3
 800975a:	029b      	lsls	r3, r3, #10
 800975c:	b29b      	uxth	r3, r3
 800975e:	4313      	orrs	r3, r2
 8009760:	b29b      	uxth	r3, r3
 8009762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800976a:	b29a      	uxth	r2, r3
 800976c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800976e:	801a      	strh	r2, [r3, #0]
 8009770:	e024      	b.n	80097bc <USB_EPStartXfer+0xb62>
 8009772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	785b      	ldrb	r3, [r3, #1]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d11c      	bne.n	80097bc <USB_EPStartXfer+0xb62>
 8009782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009790:	b29b      	uxth	r3, r3
 8009792:	461a      	mov	r2, r3
 8009794:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009796:	4413      	add	r3, r2
 8009798:	673b      	str	r3, [r7, #112]	@ 0x70
 800979a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800979e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	011a      	lsls	r2, r3, #4
 80097a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097aa:	4413      	add	r3, r2
 80097ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80097b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80097b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80097bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	895b      	ldrh	r3, [r3, #10]
 80097c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6959      	ldr	r1, [r3, #20]
 80097d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097dc:	b29b      	uxth	r3, r3
 80097de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80097e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80097e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80097ea:	6800      	ldr	r0, [r0, #0]
 80097ec:	f000 ff15 	bl	800a61a <USB_WritePMA>
 80097f0:	e0ca      	b.n	8009988 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	785b      	ldrb	r3, [r3, #1]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d177      	bne.n	80098f2 <USB_EPStartXfer+0xc98>
 8009802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009806:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800980e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009812:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800981c:	b29b      	uxth	r3, r3
 800981e:	461a      	mov	r2, r3
 8009820:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009822:	4413      	add	r3, r2
 8009824:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800982a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	011a      	lsls	r2, r3, #4
 8009834:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009836:	4413      	add	r3, r2
 8009838:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800983c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800983e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	b29b      	uxth	r3, r3
 8009844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009848:	b29a      	uxth	r2, r3
 800984a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800984c:	801a      	strh	r2, [r3, #0]
 800984e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10a      	bne.n	800986c <USB_EPStartXfer+0xc12>
 8009856:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009858:	881b      	ldrh	r3, [r3, #0]
 800985a:	b29b      	uxth	r3, r3
 800985c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009864:	b29a      	uxth	r2, r3
 8009866:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009868:	801a      	strh	r2, [r3, #0]
 800986a:	e073      	b.n	8009954 <USB_EPStartXfer+0xcfa>
 800986c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009870:	2b3e      	cmp	r3, #62	@ 0x3e
 8009872:	d81c      	bhi.n	80098ae <USB_EPStartXfer+0xc54>
 8009874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009878:	085b      	lsrs	r3, r3, #1
 800987a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800987e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d004      	beq.n	8009894 <USB_EPStartXfer+0xc3a>
 800988a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800988e:	3301      	adds	r3, #1
 8009890:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009894:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	b29a      	uxth	r2, r3
 800989a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800989e:	b29b      	uxth	r3, r3
 80098a0:	029b      	lsls	r3, r3, #10
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	4313      	orrs	r3, r2
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098aa:	801a      	strh	r2, [r3, #0]
 80098ac:	e052      	b.n	8009954 <USB_EPStartXfer+0xcfa>
 80098ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b2:	095b      	lsrs	r3, r3, #5
 80098b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80098b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098bc:	f003 031f 	and.w	r3, r3, #31
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d104      	bne.n	80098ce <USB_EPStartXfer+0xc74>
 80098c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80098c8:	3b01      	subs	r3, #1
 80098ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80098ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80098d8:	b29b      	uxth	r3, r3
 80098da:	029b      	lsls	r3, r3, #10
 80098dc:	b29b      	uxth	r3, r3
 80098de:	4313      	orrs	r3, r2
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098ee:	801a      	strh	r2, [r3, #0]
 80098f0:	e030      	b.n	8009954 <USB_EPStartXfer+0xcfa>
 80098f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	785b      	ldrb	r3, [r3, #1]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d128      	bne.n	8009954 <USB_EPStartXfer+0xcfa>
 8009902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009914:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800991e:	b29b      	uxth	r3, r3
 8009920:	461a      	mov	r2, r3
 8009922:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009926:	4413      	add	r3, r2
 8009928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800992c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	011a      	lsls	r2, r3, #4
 800993a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800993e:	4413      	add	r3, r2
 8009940:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009944:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800994c:	b29a      	uxth	r2, r3
 800994e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009952:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	891b      	ldrh	r3, [r3, #8]
 8009960:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	6959      	ldr	r1, [r3, #20]
 8009970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009974:	b29b      	uxth	r3, r3
 8009976:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800997a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800997e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009982:	6800      	ldr	r0, [r0, #0]
 8009984:	f000 fe49 	bl	800a61a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800998c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099ae:	817b      	strh	r3, [r7, #10]
 80099b0:	897b      	ldrh	r3, [r7, #10]
 80099b2:	f083 0310 	eor.w	r3, r3, #16
 80099b6:	817b      	strh	r3, [r7, #10]
 80099b8:	897b      	ldrh	r3, [r7, #10]
 80099ba:	f083 0320 	eor.w	r3, r3, #32
 80099be:	817b      	strh	r3, [r7, #10]
 80099c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	441a      	add	r2, r3
 80099da:	897b      	ldrh	r3, [r7, #10]
 80099dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	8013      	strh	r3, [r2, #0]
 80099f0:	f000 bcdf 	b.w	800a3b2 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80099f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	7b1b      	ldrb	r3, [r3, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f040 80bc 	bne.w	8009b7e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	699a      	ldr	r2, [r3, #24]
 8009a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d917      	bls.n	8009a52 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	699a      	ldr	r2, [r3, #24]
 8009a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a42:	1ad2      	subs	r2, r2, r3
 8009a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	619a      	str	r2, [r3, #24]
 8009a50:	e00e      	b.n	8009a70 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a94:	4413      	add	r3, r2
 8009a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	011a      	lsls	r2, r3, #4
 8009aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009aac:	4413      	add	r3, r2
 8009aae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009ab2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ac8:	801a      	strh	r2, [r3, #0]
 8009aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10d      	bne.n	8009aee <USB_EPStartXfer+0xe94>
 8009ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ae8:	801a      	strh	r2, [r3, #0]
 8009aea:	f000 bc28 	b.w	800a33e <USB_EPStartXfer+0x16e4>
 8009aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009af4:	d81f      	bhi.n	8009b36 <USB_EPStartXfer+0xedc>
 8009af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afa:	085b      	lsrs	r3, r3, #1
 8009afc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d004      	beq.n	8009b16 <USB_EPStartXfer+0xebc>
 8009b0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009b10:	3301      	adds	r3, #1
 8009b12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	029b      	lsls	r3, r3, #10
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b30:	801a      	strh	r2, [r3, #0]
 8009b32:	f000 bc04 	b.w	800a33e <USB_EPStartXfer+0x16e4>
 8009b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b3a:	095b      	lsrs	r3, r3, #5
 8009b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b44:	f003 031f 	and.w	r3, r3, #31
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <USB_EPStartXfer+0xefc>
 8009b4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009b50:	3b01      	subs	r3, #1
 8009b52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	029b      	lsls	r3, r3, #10
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b7a:	801a      	strh	r2, [r3, #0]
 8009b7c:	e3df      	b.n	800a33e <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	78db      	ldrb	r3, [r3, #3]
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	f040 8218 	bne.w	8009fc0 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	785b      	ldrb	r3, [r3, #1]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f040 809d 	bne.w	8009cdc <USB_EPStartXfer+0x1082>
 8009ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	011a      	lsls	r2, r3, #4
 8009bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bde:	4413      	add	r3, r2
 8009be0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009be8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bec:	881b      	ldrh	r3, [r3, #0]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bfa:	801a      	strh	r2, [r3, #0]
 8009bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10c      	bne.n	8009c26 <USB_EPStartXfer+0xfcc>
 8009c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c22:	801a      	strh	r2, [r3, #0]
 8009c24:	e08f      	b.n	8009d46 <USB_EPStartXfer+0x10ec>
 8009c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c34:	d826      	bhi.n	8009c84 <USB_EPStartXfer+0x102a>
 8009c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d004      	beq.n	8009c66 <USB_EPStartXfer+0x100c>
 8009c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c60:	3301      	adds	r3, #1
 8009c62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	029b      	lsls	r3, r3, #10
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c80:	801a      	strh	r2, [r3, #0]
 8009c82:	e060      	b.n	8009d46 <USB_EPStartXfer+0x10ec>
 8009c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	095b      	lsrs	r3, r3, #5
 8009c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	f003 031f 	and.w	r3, r3, #31
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d104      	bne.n	8009cb4 <USB_EPStartXfer+0x105a>
 8009caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009cb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	029b      	lsls	r3, r3, #10
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009cd8:	801a      	strh	r2, [r3, #0]
 8009cda:	e034      	b.n	8009d46 <USB_EPStartXfer+0x10ec>
 8009cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	785b      	ldrb	r3, [r3, #1]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d12c      	bne.n	8009d46 <USB_EPStartXfer+0x10ec>
 8009cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d10:	4413      	add	r3, r2
 8009d12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	011a      	lsls	r2, r3, #4
 8009d24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d28:	4413      	add	r3, r2
 8009d2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009d44:	801a      	strh	r2, [r3, #0]
 8009d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	785b      	ldrb	r3, [r3, #1]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f040 809d 	bne.w	8009ea0 <USB_EPStartXfer+0x1246>
 8009d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	461a      	mov	r2, r3
 8009d86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	011a      	lsls	r2, r3, #4
 8009d9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009da2:	4413      	add	r3, r2
 8009da4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009da8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009dbe:	801a      	strh	r2, [r3, #0]
 8009dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10c      	bne.n	8009dea <USB_EPStartXfer+0x1190>
 8009dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009de6:	801a      	strh	r2, [r3, #0]
 8009de8:	e088      	b.n	8009efc <USB_EPStartXfer+0x12a2>
 8009dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	2b3e      	cmp	r3, #62	@ 0x3e
 8009df8:	d826      	bhi.n	8009e48 <USB_EPStartXfer+0x11ee>
 8009dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	085b      	lsrs	r3, r3, #1
 8009e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	f003 0301 	and.w	r3, r3, #1
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d004      	beq.n	8009e2a <USB_EPStartXfer+0x11d0>
 8009e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e24:	3301      	adds	r3, #1
 8009e26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009e2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	029b      	lsls	r3, r3, #10
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e44:	801a      	strh	r2, [r3, #0]
 8009e46:	e059      	b.n	8009efc <USB_EPStartXfer+0x12a2>
 8009e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	095b      	lsrs	r3, r3, #5
 8009e56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	f003 031f 	and.w	r3, r3, #31
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d104      	bne.n	8009e78 <USB_EPStartXfer+0x121e>
 8009e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e72:	3b01      	subs	r3, #1
 8009e74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	029b      	lsls	r3, r3, #10
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e9c:	801a      	strh	r2, [r3, #0]
 8009e9e:	e02d      	b.n	8009efc <USB_EPStartXfer+0x12a2>
 8009ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	785b      	ldrb	r3, [r3, #1]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d125      	bne.n	8009efc <USB_EPStartXfer+0x12a2>
 8009eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	011a      	lsls	r2, r3, #4
 8009eda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009ede:	4413      	add	r3, r2
 8009ee0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009ee4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009efa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	69db      	ldr	r3, [r3, #28]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 8218 	beq.w	800a33e <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009f2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d005      	beq.n	8009f46 <USB_EPStartXfer+0x12ec>
 8009f3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10d      	bne.n	8009f62 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009f46:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f040 81f5 	bne.w	800a33e <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009f54:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f040 81ee 	bne.w	800a33e <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	881b      	ldrh	r3, [r3, #0]
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f88:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	441a      	add	r2, r3
 8009fa6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	8013      	strh	r3, [r2, #0]
 8009fbe:	e1be      	b.n	800a33e <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	78db      	ldrb	r3, [r3, #3]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	f040 81b4 	bne.w	800a33a <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	699a      	ldr	r2, [r3, #24]
 8009fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d917      	bls.n	800a01e <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8009fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	699a      	ldr	r2, [r3, #24]
 800a00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00e:	1ad2      	subs	r2, r2, r3
 800a010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	619a      	str	r2, [r3, #24]
 800a01c:	e00e      	b.n	800a03c <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800a01e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a02e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2200      	movs	r2, #0
 800a03a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a03c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	785b      	ldrb	r3, [r3, #1]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f040 8085 	bne.w	800a158 <USB_EPStartXfer+0x14fe>
 800a04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a05c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a060:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	461a      	mov	r2, r3
 800a06e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a072:	4413      	add	r3, r2
 800a074:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a07c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	011a      	lsls	r2, r3, #4
 800a086:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a08a:	4413      	add	r3, r2
 800a08c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a090:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a094:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a0a6:	801a      	strh	r2, [r3, #0]
 800a0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10c      	bne.n	800a0ca <USB_EPStartXfer+0x1470>
 800a0b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a0b4:	881b      	ldrh	r3, [r3, #0]
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a0c6:	801a      	strh	r2, [r3, #0]
 800a0c8:	e077      	b.n	800a1ba <USB_EPStartXfer+0x1560>
 800a0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0d0:	d81e      	bhi.n	800a110 <USB_EPStartXfer+0x14b6>
 800a0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0d6:	085b      	lsrs	r3, r3, #1
 800a0d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e0:	f003 0301 	and.w	r3, r3, #1
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d004      	beq.n	800a0f2 <USB_EPStartXfer+0x1498>
 800a0e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a0f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a0f6:	881b      	ldrh	r3, [r3, #0]
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	029b      	lsls	r3, r3, #10
 800a102:	b29b      	uxth	r3, r3
 800a104:	4313      	orrs	r3, r2
 800a106:	b29a      	uxth	r2, r3
 800a108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a10c:	801a      	strh	r2, [r3, #0]
 800a10e:	e054      	b.n	800a1ba <USB_EPStartXfer+0x1560>
 800a110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a114:	095b      	lsrs	r3, r3, #5
 800a116:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11e:	f003 031f 	and.w	r3, r3, #31
 800a122:	2b00      	cmp	r3, #0
 800a124:	d104      	bne.n	800a130 <USB_EPStartXfer+0x14d6>
 800a126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a12a:	3b01      	subs	r3, #1
 800a12c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	b29a      	uxth	r2, r3
 800a138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	029b      	lsls	r3, r3, #10
 800a140:	b29b      	uxth	r3, r3
 800a142:	4313      	orrs	r3, r2
 800a144:	b29b      	uxth	r3, r3
 800a146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a14a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a14e:	b29a      	uxth	r2, r3
 800a150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a154:	801a      	strh	r2, [r3, #0]
 800a156:	e030      	b.n	800a1ba <USB_EPStartXfer+0x1560>
 800a158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a15c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	785b      	ldrb	r3, [r3, #1]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d128      	bne.n	800a1ba <USB_EPStartXfer+0x1560>
 800a168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a16c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a17a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a184:	b29b      	uxth	r3, r3
 800a186:	461a      	mov	r2, r3
 800a188:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a18c:	4413      	add	r3, r2
 800a18e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	011a      	lsls	r2, r3, #4
 800a1a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a1a4:	4413      	add	r3, r2
 800a1a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a1aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a1b8:	801a      	strh	r2, [r3, #0]
 800a1ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a1c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	785b      	ldrb	r3, [r3, #1]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f040 8085 	bne.w	800a2e4 <USB_EPStartXfer+0x168a>
 800a1da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a1e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a1fe:	4413      	add	r3, r2
 800a200:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	011a      	lsls	r2, r3, #4
 800a212:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a216:	4413      	add	r3, r2
 800a218:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a21c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a220:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	b29b      	uxth	r3, r3
 800a228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a232:	801a      	strh	r2, [r3, #0]
 800a234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10c      	bne.n	800a256 <USB_EPStartXfer+0x15fc>
 800a23c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a240:	881b      	ldrh	r3, [r3, #0]
 800a242:	b29b      	uxth	r3, r3
 800a244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a252:	801a      	strh	r2, [r3, #0]
 800a254:	e073      	b.n	800a33e <USB_EPStartXfer+0x16e4>
 800a256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a25a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a25c:	d81e      	bhi.n	800a29c <USB_EPStartXfer+0x1642>
 800a25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a262:	085b      	lsrs	r3, r3, #1
 800a264:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a26c:	f003 0301 	and.w	r3, r3, #1
 800a270:	2b00      	cmp	r3, #0
 800a272:	d004      	beq.n	800a27e <USB_EPStartXfer+0x1624>
 800a274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a278:	3301      	adds	r3, #1
 800a27a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a27e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	b29a      	uxth	r2, r3
 800a286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	029b      	lsls	r3, r3, #10
 800a28e:	b29b      	uxth	r3, r3
 800a290:	4313      	orrs	r3, r2
 800a292:	b29a      	uxth	r2, r3
 800a294:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a298:	801a      	strh	r2, [r3, #0]
 800a29a:	e050      	b.n	800a33e <USB_EPStartXfer+0x16e4>
 800a29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a0:	095b      	lsrs	r3, r3, #5
 800a2a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2aa:	f003 031f 	and.w	r3, r3, #31
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d104      	bne.n	800a2bc <USB_EPStartXfer+0x1662>
 800a2b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	029b      	lsls	r3, r3, #10
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a2e0:	801a      	strh	r2, [r3, #0]
 800a2e2:	e02c      	b.n	800a33e <USB_EPStartXfer+0x16e4>
 800a2e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	785b      	ldrb	r3, [r3, #1]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d124      	bne.n	800a33e <USB_EPStartXfer+0x16e4>
 800a2f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a302:	b29b      	uxth	r3, r3
 800a304:	461a      	mov	r2, r3
 800a306:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a30a:	4413      	add	r3, r2
 800a30c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	011a      	lsls	r2, r3, #4
 800a31e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a322:	4413      	add	r3, r2
 800a324:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a328:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a330:	b29a      	uxth	r2, r3
 800a332:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a336:	801a      	strh	r2, [r3, #0]
 800a338:	e001      	b.n	800a33e <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e03a      	b.n	800a3b4 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a33e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a34c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4413      	add	r3, r2
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a364:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a368:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a36c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a370:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a374:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a378:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a37c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a38e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	441a      	add	r2, r3
 800a39a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a39e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b085      	sub	sp, #20
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
 800a3c6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	785b      	ldrb	r3, [r3, #1]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d020      	beq.n	800a412 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	4413      	add	r3, r2
 800a3da:	881b      	ldrh	r3, [r3, #0]
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3e6:	81bb      	strh	r3, [r7, #12]
 800a3e8:	89bb      	ldrh	r3, [r7, #12]
 800a3ea:	f083 0310 	eor.w	r3, r3, #16
 800a3ee:	81bb      	strh	r3, [r7, #12]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	441a      	add	r2, r3
 800a3fa:	89bb      	ldrh	r3, [r7, #12]
 800a3fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	8013      	strh	r3, [r2, #0]
 800a410:	e01f      	b.n	800a452 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4413      	add	r3, r2
 800a41c:	881b      	ldrh	r3, [r3, #0]
 800a41e:	b29b      	uxth	r3, r3
 800a420:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a428:	81fb      	strh	r3, [r7, #14]
 800a42a:	89fb      	ldrh	r3, [r7, #14]
 800a42c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a430:	81fb      	strh	r3, [r7, #14]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	441a      	add	r2, r3
 800a43c:	89fb      	ldrh	r3, [r7, #14]
 800a43e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a44a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a44e:	b29b      	uxth	r3, r3
 800a450:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	7b1b      	ldrb	r3, [r3, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	f040 809d 	bne.w	800a5ae <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	785b      	ldrb	r3, [r3, #1]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d04c      	beq.n	800a516 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4413      	add	r3, r2
 800a486:	881b      	ldrh	r3, [r3, #0]
 800a488:	823b      	strh	r3, [r7, #16]
 800a48a:	8a3b      	ldrh	r3, [r7, #16]
 800a48c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01b      	beq.n	800a4cc <USB_EPClearStall+0x6c>
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4413      	add	r3, r2
 800a49e:	881b      	ldrh	r3, [r3, #0]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4aa:	81fb      	strh	r3, [r7, #14]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	441a      	add	r2, r3
 800a4b6:	89fb      	ldrh	r3, [r7, #14]
 800a4b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	78db      	ldrb	r3, [r3, #3]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d06c      	beq.n	800a5ae <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4ea:	81bb      	strh	r3, [r7, #12]
 800a4ec:	89bb      	ldrh	r3, [r7, #12]
 800a4ee:	f083 0320 	eor.w	r3, r3, #32
 800a4f2:	81bb      	strh	r3, [r7, #12]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	441a      	add	r2, r3
 800a4fe:	89bb      	ldrh	r3, [r7, #12]
 800a500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a50c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a510:	b29b      	uxth	r3, r3
 800a512:	8013      	strh	r3, [r2, #0]
 800a514:	e04b      	b.n	800a5ae <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	881b      	ldrh	r3, [r3, #0]
 800a522:	82fb      	strh	r3, [r7, #22]
 800a524:	8afb      	ldrh	r3, [r7, #22]
 800a526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d01b      	beq.n	800a566 <USB_EPClearStall+0x106>
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	881b      	ldrh	r3, [r3, #0]
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a544:	82bb      	strh	r3, [r7, #20]
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	441a      	add	r2, r3
 800a550:	8abb      	ldrh	r3, [r7, #20]
 800a552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a55a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a55e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a562:	b29b      	uxth	r3, r3
 800a564:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4413      	add	r3, r2
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	b29b      	uxth	r3, r3
 800a574:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a57c:	827b      	strh	r3, [r7, #18]
 800a57e:	8a7b      	ldrh	r3, [r7, #18]
 800a580:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a584:	827b      	strh	r3, [r7, #18]
 800a586:	8a7b      	ldrh	r3, [r7, #18]
 800a588:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a58c:	827b      	strh	r3, [r7, #18]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	441a      	add	r2, r3
 800a598:	8a7b      	ldrh	r3, [r7, #18]
 800a59a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a59e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	371c      	adds	r7, #28
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a5c8:	78fb      	ldrb	r3, [r7, #3]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d103      	bne.n	800a5d6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2280      	movs	r2, #128	@ 0x80
 800a5d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	370c      	adds	r7, #12
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a5fa:	b480      	push	{r7}
 800a5fc:	b085      	sub	sp, #20
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a608:	b29b      	uxth	r3, r3
 800a60a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a60c:	68fb      	ldr	r3, [r7, #12]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b08b      	sub	sp, #44	@ 0x2c
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	4611      	mov	r1, r2
 800a626:	461a      	mov	r2, r3
 800a628:	460b      	mov	r3, r1
 800a62a:	80fb      	strh	r3, [r7, #6]
 800a62c:	4613      	mov	r3, r2
 800a62e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a630:	88bb      	ldrh	r3, [r7, #4]
 800a632:	3301      	adds	r3, #1
 800a634:	085b      	lsrs	r3, r3, #1
 800a636:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a640:	88fb      	ldrh	r3, [r7, #6]
 800a642:	005a      	lsls	r2, r3, #1
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a64c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	627b      	str	r3, [r7, #36]	@ 0x24
 800a652:	e01f      	b.n	800a694 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	3301      	adds	r3, #1
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	b21b      	sxth	r3, r3
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	b21a      	sxth	r2, r3
 800a666:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	b21b      	sxth	r3, r3
 800a66e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a670:	6a3b      	ldr	r3, [r7, #32]
 800a672:	8a7a      	ldrh	r2, [r7, #18]
 800a674:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	3302      	adds	r3, #2
 800a67a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	3302      	adds	r3, #2
 800a680:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	3301      	adds	r3, #1
 800a686:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	3301      	adds	r3, #1
 800a68c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a690:	3b01      	subs	r3, #1
 800a692:	627b      	str	r3, [r7, #36]	@ 0x24
 800a694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1dc      	bne.n	800a654 <USB_WritePMA+0x3a>
  }
}
 800a69a:	bf00      	nop
 800a69c:	bf00      	nop
 800a69e:	372c      	adds	r7, #44	@ 0x2c
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b08b      	sub	sp, #44	@ 0x2c
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	80fb      	strh	r3, [r7, #6]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a6be:	88bb      	ldrh	r3, [r7, #4]
 800a6c0:	085b      	lsrs	r3, r3, #1
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a6ce:	88fb      	ldrh	r3, [r7, #6]
 800a6d0:	005a      	lsls	r2, r3, #1
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a6da:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6e0:	e01b      	b.n	800a71a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a6e2:	6a3b      	ldr	r3, [r7, #32]
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	3302      	adds	r3, #2
 800a6ee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	0a1b      	lsrs	r3, r3, #8
 800a702:	b2da      	uxtb	r2, r3
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	3301      	adds	r3, #1
 800a70c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	3302      	adds	r3, #2
 800a712:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a716:	3b01      	subs	r3, #1
 800a718:	627b      	str	r3, [r7, #36]	@ 0x24
 800a71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1e0      	bne.n	800a6e2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a720:	88bb      	ldrh	r3, [r7, #4]
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	b29b      	uxth	r3, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d007      	beq.n	800a73c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	881b      	ldrh	r3, [r3, #0]
 800a730:	b29b      	uxth	r3, r3
 800a732:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	b2da      	uxtb	r2, r3
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	701a      	strb	r2, [r3, #0]
  }
}
 800a73c:	bf00      	nop
 800a73e:	372c      	adds	r7, #44	@ 0x2c
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a754:	2300      	movs	r3, #0
 800a756:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	7c1b      	ldrb	r3, [r3, #16]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d115      	bne.n	800a78c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a760:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a764:	2202      	movs	r2, #2
 800a766:	2181      	movs	r1, #129	@ 0x81
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f003 f906 	bl	800d97a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a774:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a778:	2202      	movs	r2, #2
 800a77a:	2101      	movs	r1, #1
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f003 f8fc 	bl	800d97a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2201      	movs	r2, #1
 800a786:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800a78a:	e012      	b.n	800a7b2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a78c:	2340      	movs	r3, #64	@ 0x40
 800a78e:	2202      	movs	r2, #2
 800a790:	2181      	movs	r1, #129	@ 0x81
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f003 f8f1 	bl	800d97a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a79e:	2340      	movs	r3, #64	@ 0x40
 800a7a0:	2202      	movs	r2, #2
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f003 f8e8 	bl	800d97a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a7b2:	2308      	movs	r3, #8
 800a7b4:	2203      	movs	r2, #3
 800a7b6:	2182      	movs	r1, #130	@ 0x82
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f003 f8de 	bl	800d97a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a7c4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a7c8:	f003 f9fe 	bl	800dbc8 <USBD_static_malloc>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d102      	bne.n	800a7e4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	73fb      	strb	r3, [r7, #15]
 800a7e2:	e026      	b.n	800a832 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7ea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2200      	movs	r2, #0
 800a802:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	7c1b      	ldrb	r3, [r3, #16]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d109      	bne.n	800a822 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a814:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a818:	2101      	movs	r1, #1
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f003 f99e 	bl	800db5c <USBD_LL_PrepareReceive>
 800a820:	e007      	b.n	800a832 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a828:	2340      	movs	r3, #64	@ 0x40
 800a82a:	2101      	movs	r1, #1
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f003 f995 	bl	800db5c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a832:	7bfb      	ldrb	r3, [r7, #15]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a84c:	2181      	movs	r1, #129	@ 0x81
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f003 f8b9 	bl	800d9c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a85a:	2101      	movs	r1, #1
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f003 f8b2 	bl	800d9c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a86a:	2182      	movs	r1, #130	@ 0x82
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f003 f8aa 	bl	800d9c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00e      	beq.n	800a8a0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a892:	4618      	mov	r0, r3
 800a894:	f003 f9a6 	bl	800dbe4 <USBD_static_free>
    pdev->pClassData = NULL;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b086      	sub	sp, #24
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
 800a8b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8ba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d039      	beq.n	800a948 <USBD_CDC_Setup+0x9e>
 800a8d4:	2b20      	cmp	r3, #32
 800a8d6:	d17f      	bne.n	800a9d8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	88db      	ldrh	r3, [r3, #6]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d029      	beq.n	800a934 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	b25b      	sxtb	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	da11      	bge.n	800a90e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a8f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8f8:	683a      	ldr	r2, [r7, #0]
 800a8fa:	88d2      	ldrh	r2, [r2, #6]
 800a8fc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a8fe:	6939      	ldr	r1, [r7, #16]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	88db      	ldrh	r3, [r3, #6]
 800a904:	461a      	mov	r2, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 fa10 	bl	800bd2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a90c:	e06b      	b.n	800a9e6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	785a      	ldrb	r2, [r3, #1]
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	88db      	ldrh	r3, [r3, #6]
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a924:	6939      	ldr	r1, [r7, #16]
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	88db      	ldrh	r3, [r3, #6]
 800a92a:	461a      	mov	r2, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f001 fa2b 	bl	800bd88 <USBD_CtlPrepareRx>
      break;
 800a932:	e058      	b.n	800a9e6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	7850      	ldrb	r0, [r2, #1]
 800a940:	2200      	movs	r2, #0
 800a942:	6839      	ldr	r1, [r7, #0]
 800a944:	4798      	blx	r3
      break;
 800a946:	e04e      	b.n	800a9e6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	785b      	ldrb	r3, [r3, #1]
 800a94c:	2b0b      	cmp	r3, #11
 800a94e:	d02e      	beq.n	800a9ae <USBD_CDC_Setup+0x104>
 800a950:	2b0b      	cmp	r3, #11
 800a952:	dc38      	bgt.n	800a9c6 <USBD_CDC_Setup+0x11c>
 800a954:	2b00      	cmp	r3, #0
 800a956:	d002      	beq.n	800a95e <USBD_CDC_Setup+0xb4>
 800a958:	2b0a      	cmp	r3, #10
 800a95a:	d014      	beq.n	800a986 <USBD_CDC_Setup+0xdc>
 800a95c:	e033      	b.n	800a9c6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a964:	2b03      	cmp	r3, #3
 800a966:	d107      	bne.n	800a978 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a968:	f107 030c 	add.w	r3, r7, #12
 800a96c:	2202      	movs	r2, #2
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 f9db 	bl	800bd2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a976:	e02e      	b.n	800a9d6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f001 f96b 	bl	800bc56 <USBD_CtlError>
            ret = USBD_FAIL;
 800a980:	2302      	movs	r3, #2
 800a982:	75fb      	strb	r3, [r7, #23]
          break;
 800a984:	e027      	b.n	800a9d6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d107      	bne.n	800a9a0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a990:	f107 030f 	add.w	r3, r7, #15
 800a994:	2201      	movs	r2, #1
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f001 f9c7 	bl	800bd2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a99e:	e01a      	b.n	800a9d6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f001 f957 	bl	800bc56 <USBD_CtlError>
            ret = USBD_FAIL;
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	75fb      	strb	r3, [r7, #23]
          break;
 800a9ac:	e013      	b.n	800a9d6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9b4:	2b03      	cmp	r3, #3
 800a9b6:	d00d      	beq.n	800a9d4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f001 f94b 	bl	800bc56 <USBD_CtlError>
            ret = USBD_FAIL;
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a9c4:	e006      	b.n	800a9d4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f001 f944 	bl	800bc56 <USBD_CtlError>
          ret = USBD_FAIL;
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	75fb      	strb	r3, [r7, #23]
          break;
 800a9d2:	e000      	b.n	800a9d6 <USBD_CDC_Setup+0x12c>
          break;
 800a9d4:	bf00      	nop
      }
      break;
 800a9d6:	e006      	b.n	800a9e6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f001 f93b 	bl	800bc56 <USBD_CtlError>
      ret = USBD_FAIL;
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a9e4:	bf00      	nop
  }

  return ret;
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3718      	adds	r7, #24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa02:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa0a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d03a      	beq.n	800aa8c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aa16:	78fa      	ldrb	r2, [r7, #3]
 800aa18:	6879      	ldr	r1, [r7, #4]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	440b      	add	r3, r1
 800aa24:	331c      	adds	r3, #28
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d029      	beq.n	800aa80 <USBD_CDC_DataIn+0x90>
 800aa2c:	78fa      	ldrb	r2, [r7, #3]
 800aa2e:	6879      	ldr	r1, [r7, #4]
 800aa30:	4613      	mov	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	440b      	add	r3, r1
 800aa3a:	331c      	adds	r3, #28
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	78f9      	ldrb	r1, [r7, #3]
 800aa40:	68b8      	ldr	r0, [r7, #8]
 800aa42:	460b      	mov	r3, r1
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	440b      	add	r3, r1
 800aa48:	00db      	lsls	r3, r3, #3
 800aa4a:	4403      	add	r3, r0
 800aa4c:	3320      	adds	r3, #32
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa54:	fb01 f303 	mul.w	r3, r1, r3
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d110      	bne.n	800aa80 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800aa5e:	78fa      	ldrb	r2, [r7, #3]
 800aa60:	6879      	ldr	r1, [r7, #4]
 800aa62:	4613      	mov	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	440b      	add	r3, r1
 800aa6c:	331c      	adds	r3, #28
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa72:	78f9      	ldrb	r1, [r7, #3]
 800aa74:	2300      	movs	r3, #0
 800aa76:	2200      	movs	r2, #0
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f003 f84c 	bl	800db16 <USBD_LL_Transmit>
 800aa7e:	e003      	b.n	800aa88 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	e000      	b.n	800aa8e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800aa8c:	2302      	movs	r3, #2
  }
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b084      	sub	sp, #16
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaa8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aaaa:	78fb      	ldrb	r3, [r7, #3]
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f003 f877 	bl	800dba2 <USBD_LL_GetRxDataSize>
 800aab4:	4602      	mov	r2, r0
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00d      	beq.n	800aae2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800aada:	4611      	mov	r1, r2
 800aadc:	4798      	blx	r3

    return USBD_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	e000      	b.n	800aae4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800aae2:	2302      	movs	r3, #2
  }
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aafa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d014      	beq.n	800ab30 <USBD_CDC_EP0_RxReady+0x44>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ab0c:	2bff      	cmp	r3, #255	@ 0xff
 800ab0e:	d00f      	beq.n	800ab30 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ab1e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	22ff      	movs	r2, #255	@ 0xff
 800ab2c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
	...

0800ab3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2243      	movs	r2, #67	@ 0x43
 800ab48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ab4a:	4b03      	ldr	r3, [pc, #12]	@ (800ab58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	200000a0 	.word	0x200000a0

0800ab5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2243      	movs	r2, #67	@ 0x43
 800ab68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ab6a:	4b03      	ldr	r3, [pc, #12]	@ (800ab78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr
 800ab78:	2000005c 	.word	0x2000005c

0800ab7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2243      	movs	r2, #67	@ 0x43
 800ab88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ab8a:	4b03      	ldr	r3, [pc, #12]	@ (800ab98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	200000e4 	.word	0x200000e4

0800ab9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	220a      	movs	r2, #10
 800aba8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800abaa:	4b03      	ldr	r3, [pc, #12]	@ (800abb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	20000018 	.word	0x20000018

0800abbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800abc6:	2302      	movs	r3, #2
 800abc8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d005      	beq.n	800abdc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3714      	adds	r7, #20
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800abea:	b480      	push	{r7}
 800abec:	b087      	sub	sp, #28
 800abee:	af00      	add	r7, sp, #0
 800abf0:	60f8      	str	r0, [r7, #12]
 800abf2:	60b9      	str	r1, [r7, #8]
 800abf4:	4613      	mov	r3, r2
 800abf6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abfe:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ac08:	88fa      	ldrh	r2, [r7, #6]
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	371c      	adds	r7, #28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b085      	sub	sp, #20
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac2e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b084      	sub	sp, #16
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d01c      	beq.n	800ac9a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d115      	bne.n	800ac96 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	2181      	movs	r1, #129	@ 0x81
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f002 ff42 	bl	800db16 <USBD_LL_Transmit>

      return USBD_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	e002      	b.n	800ac9c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e000      	b.n	800ac9c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ac9a:	2302      	movs	r3, #2
  }
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d017      	beq.n	800acee <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	7c1b      	ldrb	r3, [r3, #16]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d109      	bne.n	800acda <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800accc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acd0:	2101      	movs	r1, #1
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f002 ff42 	bl	800db5c <USBD_LL_PrepareReceive>
 800acd8:	e007      	b.n	800acea <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ace0:	2340      	movs	r3, #64	@ 0x40
 800ace2:	2101      	movs	r1, #1
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f002 ff39 	bl	800db5c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	e000      	b.n	800acf0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800acee:	2302      	movs	r3, #2
  }
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	4613      	mov	r3, r2
 800ad04:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d101      	bne.n	800ad10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	e01a      	b.n	800ad46 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d003      	beq.n	800ad22 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d003      	beq.n	800ad30 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	79fa      	ldrb	r2, [r7, #7]
 800ad3c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f002 fda6 	bl	800d890 <USBD_LL_Init>

  return USBD_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b085      	sub	sp, #20
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d006      	beq.n	800ad70 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	683a      	ldr	r2, [r7, #0]
 800ad66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	73fb      	strb	r3, [r7, #15]
 800ad6e:	e001      	b.n	800ad74 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ad70:	2302      	movs	r3, #2
 800ad72:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b082      	sub	sp, #8
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f002 fdda 	bl	800d944 <USBD_LL_Start>

  return USBD_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b083      	sub	sp, #12
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800adbc:	2302      	movs	r3, #2
 800adbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00c      	beq.n	800ade4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	78fa      	ldrb	r2, [r7, #3]
 800add4:	4611      	mov	r1, r2
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	4798      	blx	r3
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b082      	sub	sp, #8
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	460b      	mov	r3, r1
 800adf8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	78fa      	ldrb	r2, [r7, #3]
 800ae04:	4611      	mov	r1, r2
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	4798      	blx	r3

  return USBD_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f000 fedb 	bl	800bbe2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800ae48:	f003 031f 	and.w	r3, r3, #31
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d016      	beq.n	800ae7e <USBD_LL_SetupStage+0x6a>
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d81c      	bhi.n	800ae8e <USBD_LL_SetupStage+0x7a>
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d002      	beq.n	800ae5e <USBD_LL_SetupStage+0x4a>
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d008      	beq.n	800ae6e <USBD_LL_SetupStage+0x5a>
 800ae5c:	e017      	b.n	800ae8e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ae64:	4619      	mov	r1, r3
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f9ce 	bl	800b208 <USBD_StdDevReq>
      break;
 800ae6c:	e01a      	b.n	800aea4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ae74:	4619      	mov	r1, r3
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fa30 	bl	800b2dc <USBD_StdItfReq>
      break;
 800ae7c:	e012      	b.n	800aea4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ae84:	4619      	mov	r1, r3
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fa70 	bl	800b36c <USBD_StdEPReq>
      break;
 800ae8c:	e00a      	b.n	800aea4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800ae94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f002 fdb1 	bl	800da04 <USBD_LL_StallEP>
      break;
 800aea2:	bf00      	nop
  }

  return USBD_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b086      	sub	sp, #24
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	60f8      	str	r0, [r7, #12]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	607a      	str	r2, [r7, #4]
 800aeba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aebc:	7afb      	ldrb	r3, [r7, #11]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d14b      	bne.n	800af5a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800aec8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	d134      	bne.n	800af3e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	68da      	ldr	r2, [r3, #12]
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d919      	bls.n	800af14 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	68da      	ldr	r2, [r3, #12]
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	1ad2      	subs	r2, r2, r3
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	68da      	ldr	r2, [r3, #12]
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d203      	bcs.n	800af02 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800aefe:	b29b      	uxth	r3, r3
 800af00:	e002      	b.n	800af08 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af06:	b29b      	uxth	r3, r3
 800af08:	461a      	mov	r2, r3
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f000 ff59 	bl	800bdc4 <USBD_CtlContinueRx>
 800af12:	e038      	b.n	800af86 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00a      	beq.n	800af36 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af26:	2b03      	cmp	r3, #3
 800af28:	d105      	bne.n	800af36 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f000 ff56 	bl	800bde8 <USBD_CtlSendStatus>
 800af3c:	e023      	b.n	800af86 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af44:	2b05      	cmp	r3, #5
 800af46:	d11e      	bne.n	800af86 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800af50:	2100      	movs	r1, #0
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f002 fd56 	bl	800da04 <USBD_LL_StallEP>
 800af58:	e015      	b.n	800af86 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00d      	beq.n	800af82 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	d108      	bne.n	800af82 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	7afa      	ldrb	r2, [r7, #11]
 800af7a:	4611      	mov	r1, r2
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	4798      	blx	r3
 800af80:	e001      	b.n	800af86 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800af82:	2302      	movs	r3, #2
 800af84:	e000      	b.n	800af88 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	460b      	mov	r3, r1
 800af9a:	607a      	str	r2, [r7, #4]
 800af9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af9e:	7afb      	ldrb	r3, [r7, #11]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d17f      	bne.n	800b0a4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3314      	adds	r3, #20
 800afa8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d15c      	bne.n	800b06e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	68da      	ldr	r2, [r3, #12]
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d915      	bls.n	800afec <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	68da      	ldr	r2, [r3, #12]
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	1ad2      	subs	r2, r2, r3
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	461a      	mov	r2, r3
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f000 fec3 	bl	800bd64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afde:	2300      	movs	r3, #0
 800afe0:	2200      	movs	r2, #0
 800afe2:	2100      	movs	r1, #0
 800afe4:	68f8      	ldr	r0, [r7, #12]
 800afe6:	f002 fdb9 	bl	800db5c <USBD_LL_PrepareReceive>
 800afea:	e04e      	b.n	800b08a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	6912      	ldr	r2, [r2, #16]
 800aff4:	fbb3 f1f2 	udiv	r1, r3, r2
 800aff8:	fb01 f202 	mul.w	r2, r1, r2
 800affc:	1a9b      	subs	r3, r3, r2
 800affe:	2b00      	cmp	r3, #0
 800b000:	d11c      	bne.n	800b03c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	689a      	ldr	r2, [r3, #8]
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d316      	bcc.n	800b03c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	689a      	ldr	r2, [r3, #8]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b018:	429a      	cmp	r2, r3
 800b01a:	d20f      	bcs.n	800b03c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b01c:	2200      	movs	r2, #0
 800b01e:	2100      	movs	r1, #0
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f000 fe9f 	bl	800bd64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b02e:	2300      	movs	r3, #0
 800b030:	2200      	movs	r2, #0
 800b032:	2100      	movs	r1, #0
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f002 fd91 	bl	800db5c <USBD_LL_PrepareReceive>
 800b03a:	e026      	b.n	800b08a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00a      	beq.n	800b05e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d105      	bne.n	800b05e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b05e:	2180      	movs	r1, #128	@ 0x80
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f002 fccf 	bl	800da04 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f000 fed1 	bl	800be0e <USBD_CtlReceiveStatus>
 800b06c:	e00d      	b.n	800b08a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b074:	2b04      	cmp	r3, #4
 800b076:	d004      	beq.n	800b082 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d103      	bne.n	800b08a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b082:	2180      	movs	r1, #128	@ 0x80
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f002 fcbd 	bl	800da04 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b090:	2b01      	cmp	r3, #1
 800b092:	d11d      	bne.n	800b0d0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f7ff fe80 	bl	800ad9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b0a2:	e015      	b.n	800b0d0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0aa:	695b      	ldr	r3, [r3, #20]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00d      	beq.n	800b0cc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	d108      	bne.n	800b0cc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0c0:	695b      	ldr	r3, [r3, #20]
 800b0c2:	7afa      	ldrb	r2, [r7, #11]
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	4798      	blx	r3
 800b0ca:	e001      	b.n	800b0d0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	e000      	b.n	800b0d2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b082      	sub	sp, #8
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b0e2:	2340      	movs	r3, #64	@ 0x40
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f002 fc46 	bl	800d97a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2240      	movs	r2, #64	@ 0x40
 800b0fa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b0fe:	2340      	movs	r3, #64	@ 0x40
 800b100:	2200      	movs	r2, #0
 800b102:	2180      	movs	r1, #128	@ 0x80
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f002 fc38 	bl	800d97a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2201      	movs	r2, #1
 800b10e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2240      	movs	r2, #64	@ 0x40
 800b114:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d009      	beq.n	800b152 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	6852      	ldr	r2, [r2, #4]
 800b14a:	b2d2      	uxtb	r2, r2
 800b14c:	4611      	mov	r1, r2
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	4798      	blx	r3
  }

  return USBD_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	460b      	mov	r3, r1
 800b166:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	78fa      	ldrb	r2, [r7, #3]
 800b16c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	370c      	adds	r7, #12
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2204      	movs	r2, #4
 800b194:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b083      	sub	sp, #12
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1b4:	2b04      	cmp	r3, #4
 800b1b6:	d105      	bne.n	800b1c4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b082      	sub	sp, #8
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1e0:	2b03      	cmp	r3, #3
 800b1e2:	d10b      	bne.n	800b1fc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ea:	69db      	ldr	r3, [r3, #28]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d005      	beq.n	800b1fc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
	...

0800b208 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b21e:	2b40      	cmp	r3, #64	@ 0x40
 800b220:	d005      	beq.n	800b22e <USBD_StdDevReq+0x26>
 800b222:	2b40      	cmp	r3, #64	@ 0x40
 800b224:	d84f      	bhi.n	800b2c6 <USBD_StdDevReq+0xbe>
 800b226:	2b00      	cmp	r3, #0
 800b228:	d009      	beq.n	800b23e <USBD_StdDevReq+0x36>
 800b22a:	2b20      	cmp	r3, #32
 800b22c:	d14b      	bne.n	800b2c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	4798      	blx	r3
      break;
 800b23c:	e048      	b.n	800b2d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	785b      	ldrb	r3, [r3, #1]
 800b242:	2b09      	cmp	r3, #9
 800b244:	d839      	bhi.n	800b2ba <USBD_StdDevReq+0xb2>
 800b246:	a201      	add	r2, pc, #4	@ (adr r2, 800b24c <USBD_StdDevReq+0x44>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b29d 	.word	0x0800b29d
 800b250:	0800b2b1 	.word	0x0800b2b1
 800b254:	0800b2bb 	.word	0x0800b2bb
 800b258:	0800b2a7 	.word	0x0800b2a7
 800b25c:	0800b2bb 	.word	0x0800b2bb
 800b260:	0800b27f 	.word	0x0800b27f
 800b264:	0800b275 	.word	0x0800b275
 800b268:	0800b2bb 	.word	0x0800b2bb
 800b26c:	0800b293 	.word	0x0800b293
 800b270:	0800b289 	.word	0x0800b289
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f9dc 	bl	800b634 <USBD_GetDescriptor>
          break;
 800b27c:	e022      	b.n	800b2c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 fb3f 	bl	800b904 <USBD_SetAddress>
          break;
 800b286:	e01d      	b.n	800b2c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fb7e 	bl	800b98c <USBD_SetConfig>
          break;
 800b290:	e018      	b.n	800b2c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b292:	6839      	ldr	r1, [r7, #0]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fc07 	bl	800baa8 <USBD_GetConfig>
          break;
 800b29a:	e013      	b.n	800b2c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fc37 	bl	800bb12 <USBD_GetStatus>
          break;
 800b2a4:	e00e      	b.n	800b2c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fc65 	bl	800bb78 <USBD_SetFeature>
          break;
 800b2ae:	e009      	b.n	800b2c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fc74 	bl	800bba0 <USBD_ClrFeature>
          break;
 800b2b8:	e004      	b.n	800b2c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b2ba:	6839      	ldr	r1, [r7, #0]
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 fcca 	bl	800bc56 <USBD_CtlError>
          break;
 800b2c2:	bf00      	nop
      }
      break;
 800b2c4:	e004      	b.n	800b2d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b2c6:	6839      	ldr	r1, [r7, #0]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fcc4 	bl	800bc56 <USBD_CtlError>
      break;
 800b2ce:	bf00      	nop
  }

  return ret;
 800b2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop

0800b2dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b2f2:	2b40      	cmp	r3, #64	@ 0x40
 800b2f4:	d005      	beq.n	800b302 <USBD_StdItfReq+0x26>
 800b2f6:	2b40      	cmp	r3, #64	@ 0x40
 800b2f8:	d82e      	bhi.n	800b358 <USBD_StdItfReq+0x7c>
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <USBD_StdItfReq+0x26>
 800b2fe:	2b20      	cmp	r3, #32
 800b300:	d12a      	bne.n	800b358 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b308:	3b01      	subs	r3, #1
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d81d      	bhi.n	800b34a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	889b      	ldrh	r3, [r3, #4]
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b01      	cmp	r3, #1
 800b316:	d813      	bhi.n	800b340 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	4798      	blx	r3
 800b326:	4603      	mov	r3, r0
 800b328:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	88db      	ldrh	r3, [r3, #6]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d110      	bne.n	800b354 <USBD_StdItfReq+0x78>
 800b332:	7bfb      	ldrb	r3, [r7, #15]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d10d      	bne.n	800b354 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fd55 	bl	800bde8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b33e:	e009      	b.n	800b354 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fc87 	bl	800bc56 <USBD_CtlError>
          break;
 800b348:	e004      	b.n	800b354 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fc82 	bl	800bc56 <USBD_CtlError>
          break;
 800b352:	e000      	b.n	800b356 <USBD_StdItfReq+0x7a>
          break;
 800b354:	bf00      	nop
      }
      break;
 800b356:	e004      	b.n	800b362 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b358:	6839      	ldr	r1, [r7, #0]
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 fc7b 	bl	800bc56 <USBD_CtlError>
      break;
 800b360:	bf00      	nop
  }

  return USBD_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	889b      	ldrh	r3, [r3, #4]
 800b37e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b388:	2b40      	cmp	r3, #64	@ 0x40
 800b38a:	d007      	beq.n	800b39c <USBD_StdEPReq+0x30>
 800b38c:	2b40      	cmp	r3, #64	@ 0x40
 800b38e:	f200 8146 	bhi.w	800b61e <USBD_StdEPReq+0x2b2>
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00a      	beq.n	800b3ac <USBD_StdEPReq+0x40>
 800b396:	2b20      	cmp	r3, #32
 800b398:	f040 8141 	bne.w	800b61e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	4798      	blx	r3
      break;
 800b3aa:	e13d      	b.n	800b628 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b3b4:	2b20      	cmp	r3, #32
 800b3b6:	d10a      	bne.n	800b3ce <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	6839      	ldr	r1, [r7, #0]
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	4798      	blx	r3
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	e12d      	b.n	800b62a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	785b      	ldrb	r3, [r3, #1]
 800b3d2:	2b03      	cmp	r3, #3
 800b3d4:	d007      	beq.n	800b3e6 <USBD_StdEPReq+0x7a>
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	f300 811b 	bgt.w	800b612 <USBD_StdEPReq+0x2a6>
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d072      	beq.n	800b4c6 <USBD_StdEPReq+0x15a>
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d03a      	beq.n	800b45a <USBD_StdEPReq+0xee>
 800b3e4:	e115      	b.n	800b612 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d002      	beq.n	800b3f6 <USBD_StdEPReq+0x8a>
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d015      	beq.n	800b420 <USBD_StdEPReq+0xb4>
 800b3f4:	e02b      	b.n	800b44e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3f6:	7bbb      	ldrb	r3, [r7, #14]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00c      	beq.n	800b416 <USBD_StdEPReq+0xaa>
 800b3fc:	7bbb      	ldrb	r3, [r7, #14]
 800b3fe:	2b80      	cmp	r3, #128	@ 0x80
 800b400:	d009      	beq.n	800b416 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b402:	7bbb      	ldrb	r3, [r7, #14]
 800b404:	4619      	mov	r1, r3
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f002 fafc 	bl	800da04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b40c:	2180      	movs	r1, #128	@ 0x80
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f002 faf8 	bl	800da04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b414:	e020      	b.n	800b458 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b416:	6839      	ldr	r1, [r7, #0]
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fc1c 	bl	800bc56 <USBD_CtlError>
              break;
 800b41e:	e01b      	b.n	800b458 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	885b      	ldrh	r3, [r3, #2]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10e      	bne.n	800b446 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b428:	7bbb      	ldrb	r3, [r7, #14]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00b      	beq.n	800b446 <USBD_StdEPReq+0xda>
 800b42e:	7bbb      	ldrb	r3, [r7, #14]
 800b430:	2b80      	cmp	r3, #128	@ 0x80
 800b432:	d008      	beq.n	800b446 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	88db      	ldrh	r3, [r3, #6]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d104      	bne.n	800b446 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b43c:	7bbb      	ldrb	r3, [r7, #14]
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f002 fadf 	bl	800da04 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fcce 	bl	800bde8 <USBD_CtlSendStatus>

              break;
 800b44c:	e004      	b.n	800b458 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b44e:	6839      	ldr	r1, [r7, #0]
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fc00 	bl	800bc56 <USBD_CtlError>
              break;
 800b456:	bf00      	nop
          }
          break;
 800b458:	e0e0      	b.n	800b61c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b460:	2b02      	cmp	r3, #2
 800b462:	d002      	beq.n	800b46a <USBD_StdEPReq+0xfe>
 800b464:	2b03      	cmp	r3, #3
 800b466:	d015      	beq.n	800b494 <USBD_StdEPReq+0x128>
 800b468:	e026      	b.n	800b4b8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b46a:	7bbb      	ldrb	r3, [r7, #14]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00c      	beq.n	800b48a <USBD_StdEPReq+0x11e>
 800b470:	7bbb      	ldrb	r3, [r7, #14]
 800b472:	2b80      	cmp	r3, #128	@ 0x80
 800b474:	d009      	beq.n	800b48a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b476:	7bbb      	ldrb	r3, [r7, #14]
 800b478:	4619      	mov	r1, r3
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f002 fac2 	bl	800da04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b480:	2180      	movs	r1, #128	@ 0x80
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f002 fabe 	bl	800da04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b488:	e01c      	b.n	800b4c4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b48a:	6839      	ldr	r1, [r7, #0]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 fbe2 	bl	800bc56 <USBD_CtlError>
              break;
 800b492:	e017      	b.n	800b4c4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	885b      	ldrh	r3, [r3, #2]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d112      	bne.n	800b4c2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b49c:	7bbb      	ldrb	r3, [r7, #14]
 800b49e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d004      	beq.n	800b4b0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f002 fac9 	bl	800da42 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fc99 	bl	800bde8 <USBD_CtlSendStatus>
              }
              break;
 800b4b6:	e004      	b.n	800b4c2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fbcb 	bl	800bc56 <USBD_CtlError>
              break;
 800b4c0:	e000      	b.n	800b4c4 <USBD_StdEPReq+0x158>
              break;
 800b4c2:	bf00      	nop
          }
          break;
 800b4c4:	e0aa      	b.n	800b61c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	d002      	beq.n	800b4d6 <USBD_StdEPReq+0x16a>
 800b4d0:	2b03      	cmp	r3, #3
 800b4d2:	d032      	beq.n	800b53a <USBD_StdEPReq+0x1ce>
 800b4d4:	e097      	b.n	800b606 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4d6:	7bbb      	ldrb	r3, [r7, #14]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d007      	beq.n	800b4ec <USBD_StdEPReq+0x180>
 800b4dc:	7bbb      	ldrb	r3, [r7, #14]
 800b4de:	2b80      	cmp	r3, #128	@ 0x80
 800b4e0:	d004      	beq.n	800b4ec <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fbb6 	bl	800bc56 <USBD_CtlError>
                break;
 800b4ea:	e091      	b.n	800b610 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	da0b      	bge.n	800b50c <USBD_StdEPReq+0x1a0>
 800b4f4:	7bbb      	ldrb	r3, [r7, #14]
 800b4f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4413      	add	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	3310      	adds	r3, #16
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	4413      	add	r3, r2
 800b508:	3304      	adds	r3, #4
 800b50a:	e00b      	b.n	800b524 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b50c:	7bbb      	ldrb	r3, [r7, #14]
 800b50e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b512:	4613      	mov	r3, r2
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	4413      	add	r3, r2
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	4413      	add	r3, r2
 800b522:	3304      	adds	r3, #4
 800b524:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2200      	movs	r2, #0
 800b52a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	2202      	movs	r2, #2
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fbfa 	bl	800bd2c <USBD_CtlSendData>
              break;
 800b538:	e06a      	b.n	800b610 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b53a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	da11      	bge.n	800b566 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b542:	7bbb      	ldrb	r3, [r7, #14]
 800b544:	f003 020f 	and.w	r2, r3, #15
 800b548:	6879      	ldr	r1, [r7, #4]
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	3318      	adds	r3, #24
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d117      	bne.n	800b58c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b55c:	6839      	ldr	r1, [r7, #0]
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 fb79 	bl	800bc56 <USBD_CtlError>
                  break;
 800b564:	e054      	b.n	800b610 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b566:	7bbb      	ldrb	r3, [r7, #14]
 800b568:	f003 020f 	and.w	r2, r3, #15
 800b56c:	6879      	ldr	r1, [r7, #4]
 800b56e:	4613      	mov	r3, r2
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4413      	add	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	440b      	add	r3, r1
 800b578:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d104      	bne.n	800b58c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fb66 	bl	800bc56 <USBD_CtlError>
                  break;
 800b58a:	e041      	b.n	800b610 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b58c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b590:	2b00      	cmp	r3, #0
 800b592:	da0b      	bge.n	800b5ac <USBD_StdEPReq+0x240>
 800b594:	7bbb      	ldrb	r3, [r7, #14]
 800b596:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b59a:	4613      	mov	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	3310      	adds	r3, #16
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	3304      	adds	r3, #4
 800b5aa:	e00b      	b.n	800b5c4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5ac:	7bbb      	ldrb	r3, [r7, #14]
 800b5ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d002      	beq.n	800b5d2 <USBD_StdEPReq+0x266>
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
 800b5ce:	2b80      	cmp	r3, #128	@ 0x80
 800b5d0:	d103      	bne.n	800b5da <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	601a      	str	r2, [r3, #0]
 800b5d8:	e00e      	b.n	800b5f8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b5da:	7bbb      	ldrb	r3, [r7, #14]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f002 fa4e 	bl	800da80 <USBD_LL_IsStallEP>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d003      	beq.n	800b5f2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	601a      	str	r2, [r3, #0]
 800b5f0:	e002      	b.n	800b5f8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fb94 	bl	800bd2c <USBD_CtlSendData>
              break;
 800b604:	e004      	b.n	800b610 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b606:	6839      	ldr	r1, [r7, #0]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 fb24 	bl	800bc56 <USBD_CtlError>
              break;
 800b60e:	bf00      	nop
          }
          break;
 800b610:	e004      	b.n	800b61c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fb1e 	bl	800bc56 <USBD_CtlError>
          break;
 800b61a:	bf00      	nop
      }
      break;
 800b61c:	e004      	b.n	800b628 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fb18 	bl	800bc56 <USBD_CtlError>
      break;
 800b626:	bf00      	nop
  }

  return ret;
 800b628:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
	...

0800b634 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b63e:	2300      	movs	r3, #0
 800b640:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b642:	2300      	movs	r3, #0
 800b644:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b646:	2300      	movs	r3, #0
 800b648:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	885b      	ldrh	r3, [r3, #2]
 800b64e:	0a1b      	lsrs	r3, r3, #8
 800b650:	b29b      	uxth	r3, r3
 800b652:	3b01      	subs	r3, #1
 800b654:	2b06      	cmp	r3, #6
 800b656:	f200 8128 	bhi.w	800b8aa <USBD_GetDescriptor+0x276>
 800b65a:	a201      	add	r2, pc, #4	@ (adr r2, 800b660 <USBD_GetDescriptor+0x2c>)
 800b65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b660:	0800b67d 	.word	0x0800b67d
 800b664:	0800b695 	.word	0x0800b695
 800b668:	0800b6d5 	.word	0x0800b6d5
 800b66c:	0800b8ab 	.word	0x0800b8ab
 800b670:	0800b8ab 	.word	0x0800b8ab
 800b674:	0800b84b 	.word	0x0800b84b
 800b678:	0800b877 	.word	0x0800b877
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	7c12      	ldrb	r2, [r2, #16]
 800b688:	f107 0108 	add.w	r1, r7, #8
 800b68c:	4610      	mov	r0, r2
 800b68e:	4798      	blx	r3
 800b690:	60f8      	str	r0, [r7, #12]
      break;
 800b692:	e112      	b.n	800b8ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	7c1b      	ldrb	r3, [r3, #16]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d10d      	bne.n	800b6b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a4:	f107 0208 	add.w	r2, r7, #8
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	4798      	blx	r3
 800b6ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	2202      	movs	r2, #2
 800b6b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b6b6:	e100      	b.n	800b8ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c0:	f107 0208 	add.w	r2, r7, #8
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	4798      	blx	r3
 800b6c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	2202      	movs	r2, #2
 800b6d0:	701a      	strb	r2, [r3, #0]
      break;
 800b6d2:	e0f2      	b.n	800b8ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	885b      	ldrh	r3, [r3, #2]
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b05      	cmp	r3, #5
 800b6dc:	f200 80ac 	bhi.w	800b838 <USBD_GetDescriptor+0x204>
 800b6e0:	a201      	add	r2, pc, #4	@ (adr r2, 800b6e8 <USBD_GetDescriptor+0xb4>)
 800b6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e6:	bf00      	nop
 800b6e8:	0800b701 	.word	0x0800b701
 800b6ec:	0800b735 	.word	0x0800b735
 800b6f0:	0800b769 	.word	0x0800b769
 800b6f4:	0800b79d 	.word	0x0800b79d
 800b6f8:	0800b7d1 	.word	0x0800b7d1
 800b6fc:	0800b805 	.word	0x0800b805
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00b      	beq.n	800b724 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	7c12      	ldrb	r2, [r2, #16]
 800b718:	f107 0108 	add.w	r1, r7, #8
 800b71c:	4610      	mov	r0, r2
 800b71e:	4798      	blx	r3
 800b720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b722:	e091      	b.n	800b848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b724:	6839      	ldr	r1, [r7, #0]
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 fa95 	bl	800bc56 <USBD_CtlError>
            err++;
 800b72c:	7afb      	ldrb	r3, [r7, #11]
 800b72e:	3301      	adds	r3, #1
 800b730:	72fb      	strb	r3, [r7, #11]
          break;
 800b732:	e089      	b.n	800b848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00b      	beq.n	800b758 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	7c12      	ldrb	r2, [r2, #16]
 800b74c:	f107 0108 	add.w	r1, r7, #8
 800b750:	4610      	mov	r0, r2
 800b752:	4798      	blx	r3
 800b754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b756:	e077      	b.n	800b848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fa7b 	bl	800bc56 <USBD_CtlError>
            err++;
 800b760:	7afb      	ldrb	r3, [r7, #11]
 800b762:	3301      	adds	r3, #1
 800b764:	72fb      	strb	r3, [r7, #11]
          break;
 800b766:	e06f      	b.n	800b848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00b      	beq.n	800b78c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	7c12      	ldrb	r2, [r2, #16]
 800b780:	f107 0108 	add.w	r1, r7, #8
 800b784:	4610      	mov	r0, r2
 800b786:	4798      	blx	r3
 800b788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b78a:	e05d      	b.n	800b848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b78c:	6839      	ldr	r1, [r7, #0]
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 fa61 	bl	800bc56 <USBD_CtlError>
            err++;
 800b794:	7afb      	ldrb	r3, [r7, #11]
 800b796:	3301      	adds	r3, #1
 800b798:	72fb      	strb	r3, [r7, #11]
          break;
 800b79a:	e055      	b.n	800b848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7a2:	691b      	ldr	r3, [r3, #16]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00b      	beq.n	800b7c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	7c12      	ldrb	r2, [r2, #16]
 800b7b4:	f107 0108 	add.w	r1, r7, #8
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	4798      	blx	r3
 800b7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7be:	e043      	b.n	800b848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7c0:	6839      	ldr	r1, [r7, #0]
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 fa47 	bl	800bc56 <USBD_CtlError>
            err++;
 800b7c8:	7afb      	ldrb	r3, [r7, #11]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ce:	e03b      	b.n	800b848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7d6:	695b      	ldr	r3, [r3, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00b      	beq.n	800b7f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7e2:	695b      	ldr	r3, [r3, #20]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	7c12      	ldrb	r2, [r2, #16]
 800b7e8:	f107 0108 	add.w	r1, r7, #8
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	4798      	blx	r3
 800b7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7f2:	e029      	b.n	800b848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7f4:	6839      	ldr	r1, [r7, #0]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fa2d 	bl	800bc56 <USBD_CtlError>
            err++;
 800b7fc:	7afb      	ldrb	r3, [r7, #11]
 800b7fe:	3301      	adds	r3, #1
 800b800:	72fb      	strb	r3, [r7, #11]
          break;
 800b802:	e021      	b.n	800b848 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00b      	beq.n	800b828 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	7c12      	ldrb	r2, [r2, #16]
 800b81c:	f107 0108 	add.w	r1, r7, #8
 800b820:	4610      	mov	r0, r2
 800b822:	4798      	blx	r3
 800b824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b826:	e00f      	b.n	800b848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fa13 	bl	800bc56 <USBD_CtlError>
            err++;
 800b830:	7afb      	ldrb	r3, [r7, #11]
 800b832:	3301      	adds	r3, #1
 800b834:	72fb      	strb	r3, [r7, #11]
          break;
 800b836:	e007      	b.n	800b848 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 fa0b 	bl	800bc56 <USBD_CtlError>
          err++;
 800b840:	7afb      	ldrb	r3, [r7, #11]
 800b842:	3301      	adds	r3, #1
 800b844:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b846:	e038      	b.n	800b8ba <USBD_GetDescriptor+0x286>
 800b848:	e037      	b.n	800b8ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	7c1b      	ldrb	r3, [r3, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d109      	bne.n	800b866 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b85a:	f107 0208 	add.w	r2, r7, #8
 800b85e:	4610      	mov	r0, r2
 800b860:	4798      	blx	r3
 800b862:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b864:	e029      	b.n	800b8ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b866:	6839      	ldr	r1, [r7, #0]
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 f9f4 	bl	800bc56 <USBD_CtlError>
        err++;
 800b86e:	7afb      	ldrb	r3, [r7, #11]
 800b870:	3301      	adds	r3, #1
 800b872:	72fb      	strb	r3, [r7, #11]
      break;
 800b874:	e021      	b.n	800b8ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	7c1b      	ldrb	r3, [r3, #16]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10d      	bne.n	800b89a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b886:	f107 0208 	add.w	r2, r7, #8
 800b88a:	4610      	mov	r0, r2
 800b88c:	4798      	blx	r3
 800b88e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	3301      	adds	r3, #1
 800b894:	2207      	movs	r2, #7
 800b896:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b898:	e00f      	b.n	800b8ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f9da 	bl	800bc56 <USBD_CtlError>
        err++;
 800b8a2:	7afb      	ldrb	r3, [r7, #11]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	72fb      	strb	r3, [r7, #11]
      break;
 800b8a8:	e007      	b.n	800b8ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f9d2 	bl	800bc56 <USBD_CtlError>
      err++;
 800b8b2:	7afb      	ldrb	r3, [r7, #11]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	72fb      	strb	r3, [r7, #11]
      break;
 800b8b8:	bf00      	nop
  }

  if (err != 0U)
 800b8ba:	7afb      	ldrb	r3, [r7, #11]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d11c      	bne.n	800b8fa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b8c0:	893b      	ldrh	r3, [r7, #8]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d011      	beq.n	800b8ea <USBD_GetDescriptor+0x2b6>
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	88db      	ldrh	r3, [r3, #6]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00d      	beq.n	800b8ea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	88da      	ldrh	r2, [r3, #6]
 800b8d2:	893b      	ldrh	r3, [r7, #8]
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	bf28      	it	cs
 800b8d8:	4613      	movcs	r3, r2
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b8de:	893b      	ldrh	r3, [r7, #8]
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	68f9      	ldr	r1, [r7, #12]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fa21 	bl	800bd2c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	88db      	ldrh	r3, [r3, #6]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d104      	bne.n	800b8fc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fa78 	bl	800bde8 <USBD_CtlSendStatus>
 800b8f8:	e000      	b.n	800b8fc <USBD_GetDescriptor+0x2c8>
    return;
 800b8fa:	bf00      	nop
    }
  }
}
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop

0800b904 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	889b      	ldrh	r3, [r3, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d130      	bne.n	800b978 <USBD_SetAddress+0x74>
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	88db      	ldrh	r3, [r3, #6]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d12c      	bne.n	800b978 <USBD_SetAddress+0x74>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	885b      	ldrh	r3, [r3, #2]
 800b922:	2b7f      	cmp	r3, #127	@ 0x7f
 800b924:	d828      	bhi.n	800b978 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	885b      	ldrh	r3, [r3, #2]
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b930:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b938:	2b03      	cmp	r3, #3
 800b93a:	d104      	bne.n	800b946 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b93c:	6839      	ldr	r1, [r7, #0]
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 f989 	bl	800bc56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b944:	e01d      	b.n	800b982 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	7bfa      	ldrb	r2, [r7, #15]
 800b94a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b94e:	7bfb      	ldrb	r3, [r7, #15]
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f002 f8c0 	bl	800dad8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fa45 	bl	800bde8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d004      	beq.n	800b96e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2202      	movs	r2, #2
 800b968:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b96c:	e009      	b.n	800b982 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b976:	e004      	b.n	800b982 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b978:	6839      	ldr	r1, [r7, #0]
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 f96b 	bl	800bc56 <USBD_CtlError>
  }
}
 800b980:	bf00      	nop
 800b982:	bf00      	nop
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
	...

0800b98c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	885b      	ldrh	r3, [r3, #2]
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	4b41      	ldr	r3, [pc, #260]	@ (800baa4 <USBD_SetConfig+0x118>)
 800b99e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b9a0:	4b40      	ldr	r3, [pc, #256]	@ (800baa4 <USBD_SetConfig+0x118>)
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d904      	bls.n	800b9b2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f953 	bl	800bc56 <USBD_CtlError>
 800b9b0:	e075      	b.n	800ba9e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d002      	beq.n	800b9c2 <USBD_SetConfig+0x36>
 800b9bc:	2b03      	cmp	r3, #3
 800b9be:	d023      	beq.n	800ba08 <USBD_SetConfig+0x7c>
 800b9c0:	e062      	b.n	800ba88 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b9c2:	4b38      	ldr	r3, [pc, #224]	@ (800baa4 <USBD_SetConfig+0x118>)
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d01a      	beq.n	800ba00 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b9ca:	4b36      	ldr	r3, [pc, #216]	@ (800baa4 <USBD_SetConfig+0x118>)
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2203      	movs	r2, #3
 800b9d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b9dc:	4b31      	ldr	r3, [pc, #196]	@ (800baa4 <USBD_SetConfig+0x118>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7ff f9e4 	bl	800adb0 <USBD_SetClassConfig>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d104      	bne.n	800b9f8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f930 	bl	800bc56 <USBD_CtlError>
            return;
 800b9f6:	e052      	b.n	800ba9e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 f9f5 	bl	800bde8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b9fe:	e04e      	b.n	800ba9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f9f1 	bl	800bde8 <USBD_CtlSendStatus>
        break;
 800ba06:	e04a      	b.n	800ba9e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ba08:	4b26      	ldr	r3, [pc, #152]	@ (800baa4 <USBD_SetConfig+0x118>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d112      	bne.n	800ba36 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2202      	movs	r2, #2
 800ba14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800ba18:	4b22      	ldr	r3, [pc, #136]	@ (800baa4 <USBD_SetConfig+0x118>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ba22:	4b20      	ldr	r3, [pc, #128]	@ (800baa4 <USBD_SetConfig+0x118>)
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff f9e0 	bl	800adee <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f9da 	bl	800bde8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba34:	e033      	b.n	800ba9e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ba36:	4b1b      	ldr	r3, [pc, #108]	@ (800baa4 <USBD_SetConfig+0x118>)
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d01d      	beq.n	800ba80 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f7ff f9ce 	bl	800adee <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ba52:	4b14      	ldr	r3, [pc, #80]	@ (800baa4 <USBD_SetConfig+0x118>)
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ba5c:	4b11      	ldr	r3, [pc, #68]	@ (800baa4 <USBD_SetConfig+0x118>)
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	4619      	mov	r1, r3
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f7ff f9a4 	bl	800adb0 <USBD_SetClassConfig>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d104      	bne.n	800ba78 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ba6e:	6839      	ldr	r1, [r7, #0]
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f8f0 	bl	800bc56 <USBD_CtlError>
            return;
 800ba76:	e012      	b.n	800ba9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 f9b5 	bl	800bde8 <USBD_CtlSendStatus>
        break;
 800ba7e:	e00e      	b.n	800ba9e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 f9b1 	bl	800bde8 <USBD_CtlSendStatus>
        break;
 800ba86:	e00a      	b.n	800ba9e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ba88:	6839      	ldr	r1, [r7, #0]
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 f8e3 	bl	800bc56 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ba90:	4b04      	ldr	r3, [pc, #16]	@ (800baa4 <USBD_SetConfig+0x118>)
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	4619      	mov	r1, r3
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7ff f9a9 	bl	800adee <USBD_ClrClassConfig>
        break;
 800ba9c:	bf00      	nop
    }
  }
}
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	20000cb4 	.word	0x20000cb4

0800baa8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	88db      	ldrh	r3, [r3, #6]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d004      	beq.n	800bac4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800baba:	6839      	ldr	r1, [r7, #0]
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f8ca 	bl	800bc56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bac2:	e022      	b.n	800bb0a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baca:	2b02      	cmp	r3, #2
 800bacc:	dc02      	bgt.n	800bad4 <USBD_GetConfig+0x2c>
 800bace:	2b00      	cmp	r3, #0
 800bad0:	dc03      	bgt.n	800bada <USBD_GetConfig+0x32>
 800bad2:	e015      	b.n	800bb00 <USBD_GetConfig+0x58>
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d00b      	beq.n	800baf0 <USBD_GetConfig+0x48>
 800bad8:	e012      	b.n	800bb00 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	3308      	adds	r3, #8
 800bae4:	2201      	movs	r2, #1
 800bae6:	4619      	mov	r1, r3
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 f91f 	bl	800bd2c <USBD_CtlSendData>
        break;
 800baee:	e00c      	b.n	800bb0a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	3304      	adds	r3, #4
 800baf4:	2201      	movs	r2, #1
 800baf6:	4619      	mov	r1, r3
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 f917 	bl	800bd2c <USBD_CtlSendData>
        break;
 800bafe:	e004      	b.n	800bb0a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f8a7 	bl	800bc56 <USBD_CtlError>
        break;
 800bb08:	bf00      	nop
}
 800bb0a:	bf00      	nop
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb22:	3b01      	subs	r3, #1
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d81e      	bhi.n	800bb66 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	88db      	ldrh	r3, [r3, #6]
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d004      	beq.n	800bb3a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bb30:	6839      	ldr	r1, [r7, #0]
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f88f 	bl	800bc56 <USBD_CtlError>
        break;
 800bb38:	e01a      	b.n	800bb70 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d005      	beq.n	800bb56 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	f043 0202 	orr.w	r2, r3, #2
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	330c      	adds	r3, #12
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f8e4 	bl	800bd2c <USBD_CtlSendData>
      break;
 800bb64:	e004      	b.n	800bb70 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bb66:	6839      	ldr	r1, [r7, #0]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f874 	bl	800bc56 <USBD_CtlError>
      break;
 800bb6e:	bf00      	nop
  }
}
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	885b      	ldrh	r3, [r3, #2]
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d106      	bne.n	800bb98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f928 	bl	800bde8 <USBD_CtlSendStatus>
  }
}
 800bb98:	bf00      	nop
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d80b      	bhi.n	800bbce <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	885b      	ldrh	r3, [r3, #2]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d10c      	bne.n	800bbd8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f90e 	bl	800bde8 <USBD_CtlSendStatus>
      }
      break;
 800bbcc:	e004      	b.n	800bbd8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f840 	bl	800bc56 <USBD_CtlError>
      break;
 800bbd6:	e000      	b.n	800bbda <USBD_ClrFeature+0x3a>
      break;
 800bbd8:	bf00      	nop
  }
}
 800bbda:	bf00      	nop
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b083      	sub	sp, #12
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	781a      	ldrb	r2, [r3, #0]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	785a      	ldrb	r2, [r3, #1]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	3302      	adds	r3, #2
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	3303      	adds	r3, #3
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	021b      	lsls	r3, r3, #8
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	4413      	add	r3, r2
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	3304      	adds	r3, #4
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	3305      	adds	r3, #5
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	021b      	lsls	r3, r3, #8
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	4413      	add	r3, r2
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	3306      	adds	r3, #6
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	461a      	mov	r2, r3
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	3307      	adds	r3, #7
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	021b      	lsls	r3, r3, #8
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	4413      	add	r3, r2
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	80da      	strh	r2, [r3, #6]

}
 800bc4a:	bf00      	nop
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b082      	sub	sp, #8
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bc60:	2180      	movs	r1, #128	@ 0x80
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f001 fece 	bl	800da04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bc68:	2100      	movs	r1, #0
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f001 feca 	bl	800da04 <USBD_LL_StallEP>
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b086      	sub	sp, #24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bc84:	2300      	movs	r3, #0
 800bc86:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d032      	beq.n	800bcf4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f000 f834 	bl	800bcfc <USBD_GetLen>
 800bc94:	4603      	mov	r3, r0
 800bc96:	3301      	adds	r3, #1
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bca2:	7dfb      	ldrb	r3, [r7, #23]
 800bca4:	1c5a      	adds	r2, r3, #1
 800bca6:	75fa      	strb	r2, [r7, #23]
 800bca8:	461a      	mov	r2, r3
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	4413      	add	r3, r2
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	7812      	ldrb	r2, [r2, #0]
 800bcb2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
 800bcb6:	1c5a      	adds	r2, r3, #1
 800bcb8:	75fa      	strb	r2, [r7, #23]
 800bcba:	461a      	mov	r2, r3
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	2203      	movs	r2, #3
 800bcc2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bcc4:	e012      	b.n	800bcec <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	1c5a      	adds	r2, r3, #1
 800bcca:	60fa      	str	r2, [r7, #12]
 800bccc:	7dfa      	ldrb	r2, [r7, #23]
 800bcce:	1c51      	adds	r1, r2, #1
 800bcd0:	75f9      	strb	r1, [r7, #23]
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	440a      	add	r2, r1
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bcdc:	7dfb      	ldrb	r3, [r7, #23]
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	75fa      	strb	r2, [r7, #23]
 800bce2:	461a      	mov	r2, r3
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	4413      	add	r3, r2
 800bce8:	2200      	movs	r2, #0
 800bcea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1e8      	bne.n	800bcc6 <USBD_GetString+0x4e>
    }
  }
}
 800bcf4:	bf00      	nop
 800bcf6:	3718      	adds	r7, #24
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd04:	2300      	movs	r3, #0
 800bd06:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bd08:	e005      	b.n	800bd16 <USBD_GetLen+0x1a>
  {
    len++;
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	3301      	adds	r3, #1
 800bd14:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1f5      	bne.n	800bd0a <USBD_GetLen+0xe>
  }

  return len;
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3714      	adds	r7, #20
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	4613      	mov	r3, r2
 800bd38:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2202      	movs	r2, #2
 800bd3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bd42:	88fa      	ldrh	r2, [r7, #6]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bd48:	88fa      	ldrh	r2, [r7, #6]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd4e:	88fb      	ldrh	r3, [r7, #6]
 800bd50:	68ba      	ldr	r2, [r7, #8]
 800bd52:	2100      	movs	r1, #0
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f001 fede 	bl	800db16 <USBD_LL_Transmit>

  return USBD_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd72:	88fb      	ldrh	r3, [r7, #6]
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	2100      	movs	r1, #0
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f001 fecc 	bl	800db16 <USBD_LL_Transmit>

  return USBD_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	4613      	mov	r3, r2
 800bd94:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2203      	movs	r2, #3
 800bd9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bd9e:	88fa      	ldrh	r2, [r7, #6]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bda6:	88fa      	ldrh	r2, [r7, #6]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bdae:	88fb      	ldrh	r3, [r7, #6]
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f001 fed1 	bl	800db5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bdd2:	88fb      	ldrh	r3, [r7, #6]
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	68f8      	ldr	r0, [r7, #12]
 800bdda:	f001 febf 	bl	800db5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2204      	movs	r2, #4
 800bdf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 fe89 	bl	800db16 <USBD_LL_Transmit>

  return USBD_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b082      	sub	sp, #8
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2205      	movs	r2, #5
 800be1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be1e:	2300      	movs	r3, #0
 800be20:	2200      	movs	r2, #0
 800be22:	2100      	movs	r1, #0
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f001 fe99 	bl	800db5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	4603      	mov	r3, r0
 800be3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800be3e:	2300      	movs	r3, #0
 800be40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800be42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be46:	2b84      	cmp	r3, #132	@ 0x84
 800be48:	d005      	beq.n	800be56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800be4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	4413      	add	r3, r2
 800be52:	3303      	adds	r3, #3
 800be54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800be56:	68fb      	ldr	r3, [r7, #12]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800be68:	f000 fadc 	bl	800c424 <vTaskStartScheduler>
  
  return osOK;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	bd80      	pop	{r7, pc}

0800be72 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800be72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be74:	b089      	sub	sp, #36	@ 0x24
 800be76:	af04      	add	r7, sp, #16
 800be78:	6078      	str	r0, [r7, #4]
 800be7a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	695b      	ldr	r3, [r3, #20]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d020      	beq.n	800bec6 <osThreadCreate+0x54>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	699b      	ldr	r3, [r3, #24]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d01c      	beq.n	800bec6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685c      	ldr	r4, [r3, #4]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	691e      	ldr	r6, [r3, #16]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7ff ffc8 	bl	800be34 <makeFreeRtosPriority>
 800bea4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800beae:	9202      	str	r2, [sp, #8]
 800beb0:	9301      	str	r3, [sp, #4]
 800beb2:	9100      	str	r1, [sp, #0]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	4632      	mov	r2, r6
 800beb8:	4629      	mov	r1, r5
 800beba:	4620      	mov	r0, r4
 800bebc:	f000 f8ed 	bl	800c09a <xTaskCreateStatic>
 800bec0:	4603      	mov	r3, r0
 800bec2:	60fb      	str	r3, [r7, #12]
 800bec4:	e01c      	b.n	800bf00 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	685c      	ldr	r4, [r3, #4]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bed2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff ffaa 	bl	800be34 <makeFreeRtosPriority>
 800bee0:	4602      	mov	r2, r0
 800bee2:	f107 030c 	add.w	r3, r7, #12
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	9200      	str	r2, [sp, #0]
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	4632      	mov	r2, r6
 800beee:	4629      	mov	r1, r5
 800bef0:	4620      	mov	r0, r4
 800bef2:	f000 f931 	bl	800c158 <xTaskCreate>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d001      	beq.n	800bf00 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800befc:	2300      	movs	r3, #0
 800befe:	e000      	b.n	800bf02 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bf00:	68fb      	ldr	r3, [r7, #12]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3714      	adds	r7, #20
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf0a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b084      	sub	sp, #16
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <osDelay+0x16>
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	e000      	b.n	800bf22 <osDelay+0x18>
 800bf20:	2301      	movs	r3, #1
 800bf22:	4618      	mov	r0, r3
 800bf24:	f000 fa48 	bl	800c3b8 <vTaskDelay>
  
  return osOK;
 800bf28:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf32:	b480      	push	{r7}
 800bf34:	b083      	sub	sp, #12
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f103 0208 	add.w	r2, r3, #8
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf4a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f103 0208 	add.w	r2, r3, #8
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f103 0208 	add.w	r2, r3, #8
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf66:	bf00      	nop
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf72:	b480      	push	{r7}
 800bf74:	b083      	sub	sp, #12
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	683a      	ldr	r2, [r7, #0]
 800bfb6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	601a      	str	r2, [r3, #0]
}
 800bfc8:	bf00      	nop
 800bfca:	3714      	adds	r7, #20
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfea:	d103      	bne.n	800bff4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	60fb      	str	r3, [r7, #12]
 800bff2:	e00c      	b.n	800c00e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	3308      	adds	r3, #8
 800bff8:	60fb      	str	r3, [r7, #12]
 800bffa:	e002      	b.n	800c002 <vListInsert+0x2e>
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	60fb      	str	r3, [r7, #12]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d2f6      	bcs.n	800bffc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	685a      	ldr	r2, [r3, #4]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	683a      	ldr	r2, [r7, #0]
 800c028:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	1c5a      	adds	r2, r3, #1
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	601a      	str	r2, [r3, #0]
}
 800c03a:	bf00      	nop
 800c03c:	3714      	adds	r7, #20
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c046:	b480      	push	{r7}
 800c048:	b085      	sub	sp, #20
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	6892      	ldr	r2, [r2, #8]
 800c05c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	6852      	ldr	r2, [r2, #4]
 800c066:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d103      	bne.n	800c07a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	689a      	ldr	r2, [r3, #8]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	1e5a      	subs	r2, r3, #1
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b08e      	sub	sp, #56	@ 0x38
 800c09e:	af04      	add	r7, sp, #16
 800c0a0:	60f8      	str	r0, [r7, #12]
 800c0a2:	60b9      	str	r1, [r7, #8]
 800c0a4:	607a      	str	r2, [r7, #4]
 800c0a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10b      	bne.n	800c0c6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	e7fd      	b.n	800c0c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10b      	bne.n	800c0e4 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	61fb      	str	r3, [r7, #28]
}
 800c0de:	bf00      	nop
 800c0e0:	bf00      	nop
 800c0e2:	e7fd      	b.n	800c0e0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c0e4:	2354      	movs	r3, #84	@ 0x54
 800c0e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	2b54      	cmp	r3, #84	@ 0x54
 800c0ec:	d00b      	beq.n	800c106 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	61bb      	str	r3, [r7, #24]
}
 800c100:	bf00      	nop
 800c102:	bf00      	nop
 800c104:	e7fd      	b.n	800c102 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d01e      	beq.n	800c14a <xTaskCreateStatic+0xb0>
 800c10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d01b      	beq.n	800c14a <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c114:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c118:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c11a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11e:	2202      	movs	r2, #2
 800c120:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c124:	2300      	movs	r3, #0
 800c126:	9303      	str	r3, [sp, #12]
 800c128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12a:	9302      	str	r3, [sp, #8]
 800c12c:	f107 0314 	add.w	r3, r7, #20
 800c130:	9301      	str	r3, [sp, #4]
 800c132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	68b9      	ldr	r1, [r7, #8]
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f000 f850 	bl	800c1e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c142:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c144:	f000 f8ce 	bl	800c2e4 <prvAddNewTaskToReadyList>
 800c148:	e001      	b.n	800c14e <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800c14a:	2300      	movs	r3, #0
 800c14c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c14e:	697b      	ldr	r3, [r7, #20]
	}
 800c150:	4618      	mov	r0, r3
 800c152:	3728      	adds	r7, #40	@ 0x28
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b08c      	sub	sp, #48	@ 0x30
 800c15c:	af04      	add	r7, sp, #16
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	603b      	str	r3, [r7, #0]
 800c164:	4613      	mov	r3, r2
 800c166:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c168:	88fb      	ldrh	r3, [r7, #6]
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4618      	mov	r0, r3
 800c16e:	f000 fed3 	bl	800cf18 <pvPortMalloc>
 800c172:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00e      	beq.n	800c198 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c17a:	2054      	movs	r0, #84	@ 0x54
 800c17c:	f000 fecc 	bl	800cf18 <pvPortMalloc>
 800c180:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d003      	beq.n	800c190 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c18e:	e005      	b.n	800c19c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c190:	6978      	ldr	r0, [r7, #20]
 800c192:	f000 ff89 	bl	800d0a8 <vPortFree>
 800c196:	e001      	b.n	800c19c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c198:	2300      	movs	r3, #0
 800c19a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d017      	beq.n	800c1d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c1aa:	88fa      	ldrh	r2, [r7, #6]
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	9303      	str	r3, [sp, #12]
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	9302      	str	r3, [sp, #8]
 800c1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1b6:	9301      	str	r3, [sp, #4]
 800c1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	68f8      	ldr	r0, [r7, #12]
 800c1c2:	f000 f80e 	bl	800c1e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1c6:	69f8      	ldr	r0, [r7, #28]
 800c1c8:	f000 f88c 	bl	800c2e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	61bb      	str	r3, [r7, #24]
 800c1d0:	e002      	b.n	800c1d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c1d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c1d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c1d8:	69bb      	ldr	r3, [r7, #24]
	}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3720      	adds	r7, #32
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b088      	sub	sp, #32
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	60f8      	str	r0, [r7, #12]
 800c1ea:	60b9      	str	r1, [r7, #8]
 800c1ec:	607a      	str	r2, [r7, #4]
 800c1ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	4413      	add	r3, r2
 800c200:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	f023 0307 	bic.w	r3, r3, #7
 800c208:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	f003 0307 	and.w	r3, r3, #7
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00b      	beq.n	800c22c <prvInitialiseNewTask+0x4a>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	617b      	str	r3, [r7, #20]
}
 800c226:	bf00      	nop
 800c228:	bf00      	nop
 800c22a:	e7fd      	b.n	800c228 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c22c:	2300      	movs	r3, #0
 800c22e:	61fb      	str	r3, [r7, #28]
 800c230:	e012      	b.n	800c258 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	4413      	add	r3, r2
 800c238:	7819      	ldrb	r1, [r3, #0]
 800c23a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	4413      	add	r3, r2
 800c240:	3334      	adds	r3, #52	@ 0x34
 800c242:	460a      	mov	r2, r1
 800c244:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	4413      	add	r3, r2
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d006      	beq.n	800c260 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	3301      	adds	r3, #1
 800c256:	61fb      	str	r3, [r7, #28]
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	2b0f      	cmp	r3, #15
 800c25c:	d9e9      	bls.n	800c232 <prvInitialiseNewTask+0x50>
 800c25e:	e000      	b.n	800c262 <prvInitialiseNewTask+0x80>
		{
			break;
 800c260:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c26c:	2b06      	cmp	r3, #6
 800c26e:	d901      	bls.n	800c274 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c270:	2306      	movs	r3, #6
 800c272:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c278:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c27c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c27e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c282:	2200      	movs	r2, #0
 800c284:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c288:	3304      	adds	r3, #4
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7ff fe71 	bl	800bf72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c292:	3318      	adds	r3, #24
 800c294:	4618      	mov	r0, r3
 800c296:	f7ff fe6c 	bl	800bf72 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c29c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c29e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a2:	f1c3 0207 	rsb	r2, r3, #7
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2ae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	68f9      	ldr	r1, [r7, #12]
 800c2c2:	69b8      	ldr	r0, [r7, #24]
 800c2c4:	f000 fc18 	bl	800caf8 <pxPortInitialiseStack>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2cc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2da:	bf00      	nop
 800c2dc:	3720      	adds	r7, #32
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
	...

0800c2e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c2ec:	f000 fd34 	bl	800cd58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c2f0:	4b2a      	ldr	r3, [pc, #168]	@ (800c39c <prvAddNewTaskToReadyList+0xb8>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	4a29      	ldr	r2, [pc, #164]	@ (800c39c <prvAddNewTaskToReadyList+0xb8>)
 800c2f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c2fa:	4b29      	ldr	r3, [pc, #164]	@ (800c3a0 <prvAddNewTaskToReadyList+0xbc>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d109      	bne.n	800c316 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c302:	4a27      	ldr	r2, [pc, #156]	@ (800c3a0 <prvAddNewTaskToReadyList+0xbc>)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c308:	4b24      	ldr	r3, [pc, #144]	@ (800c39c <prvAddNewTaskToReadyList+0xb8>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d110      	bne.n	800c332 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c310:	f000 fac8 	bl	800c8a4 <prvInitialiseTaskLists>
 800c314:	e00d      	b.n	800c332 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c316:	4b23      	ldr	r3, [pc, #140]	@ (800c3a4 <prvAddNewTaskToReadyList+0xc0>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d109      	bne.n	800c332 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c31e:	4b20      	ldr	r3, [pc, #128]	@ (800c3a0 <prvAddNewTaskToReadyList+0xbc>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c328:	429a      	cmp	r2, r3
 800c32a:	d802      	bhi.n	800c332 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c32c:	4a1c      	ldr	r2, [pc, #112]	@ (800c3a0 <prvAddNewTaskToReadyList+0xbc>)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c332:	4b1d      	ldr	r3, [pc, #116]	@ (800c3a8 <prvAddNewTaskToReadyList+0xc4>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3301      	adds	r3, #1
 800c338:	4a1b      	ldr	r2, [pc, #108]	@ (800c3a8 <prvAddNewTaskToReadyList+0xc4>)
 800c33a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c340:	2201      	movs	r2, #1
 800c342:	409a      	lsls	r2, r3
 800c344:	4b19      	ldr	r3, [pc, #100]	@ (800c3ac <prvAddNewTaskToReadyList+0xc8>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4313      	orrs	r3, r2
 800c34a:	4a18      	ldr	r2, [pc, #96]	@ (800c3ac <prvAddNewTaskToReadyList+0xc8>)
 800c34c:	6013      	str	r3, [r2, #0]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4a15      	ldr	r2, [pc, #84]	@ (800c3b0 <prvAddNewTaskToReadyList+0xcc>)
 800c35c:	441a      	add	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	3304      	adds	r3, #4
 800c362:	4619      	mov	r1, r3
 800c364:	4610      	mov	r0, r2
 800c366:	f7ff fe11 	bl	800bf8c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c36a:	f000 fd27 	bl	800cdbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c36e:	4b0d      	ldr	r3, [pc, #52]	@ (800c3a4 <prvAddNewTaskToReadyList+0xc0>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00e      	beq.n	800c394 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c376:	4b0a      	ldr	r3, [pc, #40]	@ (800c3a0 <prvAddNewTaskToReadyList+0xbc>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c380:	429a      	cmp	r2, r3
 800c382:	d207      	bcs.n	800c394 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c384:	4b0b      	ldr	r3, [pc, #44]	@ (800c3b4 <prvAddNewTaskToReadyList+0xd0>)
 800c386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c38a:	601a      	str	r2, [r3, #0]
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c394:	bf00      	nop
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	20000db8 	.word	0x20000db8
 800c3a0:	20000cb8 	.word	0x20000cb8
 800c3a4:	20000dc4 	.word	0x20000dc4
 800c3a8:	20000dd4 	.word	0x20000dd4
 800c3ac:	20000dc0 	.word	0x20000dc0
 800c3b0:	20000cbc 	.word	0x20000cbc
 800c3b4:	e000ed04 	.word	0xe000ed04

0800c3b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d018      	beq.n	800c3fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c3ca:	4b14      	ldr	r3, [pc, #80]	@ (800c41c <vTaskDelay+0x64>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00b      	beq.n	800c3ea <vTaskDelay+0x32>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	60bb      	str	r3, [r7, #8]
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop
 800c3e8:	e7fd      	b.n	800c3e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c3ea:	f000 f87d 	bl	800c4e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 fb1b 	bl	800ca2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c3f6:	f000 f885 	bl	800c504 <xTaskResumeAll>
 800c3fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d107      	bne.n	800c412 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c402:	4b07      	ldr	r3, [pc, #28]	@ (800c420 <vTaskDelay+0x68>)
 800c404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c408:	601a      	str	r2, [r3, #0]
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c412:	bf00      	nop
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	20000de0 	.word	0x20000de0
 800c420:	e000ed04 	.word	0xe000ed04

0800c424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b08a      	sub	sp, #40	@ 0x28
 800c428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c42e:	2300      	movs	r3, #0
 800c430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c432:	463a      	mov	r2, r7
 800c434:	1d39      	adds	r1, r7, #4
 800c436:	f107 0308 	add.w	r3, r7, #8
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7f3 fed0 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c440:	6839      	ldr	r1, [r7, #0]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	68ba      	ldr	r2, [r7, #8]
 800c446:	9202      	str	r2, [sp, #8]
 800c448:	9301      	str	r3, [sp, #4]
 800c44a:	2300      	movs	r3, #0
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	2300      	movs	r3, #0
 800c450:	460a      	mov	r2, r1
 800c452:	491f      	ldr	r1, [pc, #124]	@ (800c4d0 <vTaskStartScheduler+0xac>)
 800c454:	481f      	ldr	r0, [pc, #124]	@ (800c4d4 <vTaskStartScheduler+0xb0>)
 800c456:	f7ff fe20 	bl	800c09a <xTaskCreateStatic>
 800c45a:	4603      	mov	r3, r0
 800c45c:	4a1e      	ldr	r2, [pc, #120]	@ (800c4d8 <vTaskStartScheduler+0xb4>)
 800c45e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c460:	4b1d      	ldr	r3, [pc, #116]	@ (800c4d8 <vTaskStartScheduler+0xb4>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c468:	2301      	movs	r3, #1
 800c46a:	617b      	str	r3, [r7, #20]
 800c46c:	e001      	b.n	800c472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c46e:	2300      	movs	r3, #0
 800c470:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d116      	bne.n	800c4a6 <vTaskStartScheduler+0x82>
	__asm volatile
 800c478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	613b      	str	r3, [r7, #16]
}
 800c48a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c48c:	4b13      	ldr	r3, [pc, #76]	@ (800c4dc <vTaskStartScheduler+0xb8>)
 800c48e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c492:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c494:	4b12      	ldr	r3, [pc, #72]	@ (800c4e0 <vTaskStartScheduler+0xbc>)
 800c496:	2201      	movs	r2, #1
 800c498:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c49a:	4b12      	ldr	r3, [pc, #72]	@ (800c4e4 <vTaskStartScheduler+0xc0>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c4a0:	f000 fbb6 	bl	800cc10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c4a4:	e00f      	b.n	800c4c6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c4ac:	d10b      	bne.n	800c4c6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	60fb      	str	r3, [r7, #12]
}
 800c4c0:	bf00      	nop
 800c4c2:	bf00      	nop
 800c4c4:	e7fd      	b.n	800c4c2 <vTaskStartScheduler+0x9e>
}
 800c4c6:	bf00      	nop
 800c4c8:	3718      	adds	r7, #24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	0800dd94 	.word	0x0800dd94
 800c4d4:	0800c875 	.word	0x0800c875
 800c4d8:	20000ddc 	.word	0x20000ddc
 800c4dc:	20000dd8 	.word	0x20000dd8
 800c4e0:	20000dc4 	.word	0x20000dc4
 800c4e4:	20000dbc 	.word	0x20000dbc

0800c4e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c4ec:	4b04      	ldr	r3, [pc, #16]	@ (800c500 <vTaskSuspendAll+0x18>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	4a03      	ldr	r2, [pc, #12]	@ (800c500 <vTaskSuspendAll+0x18>)
 800c4f4:	6013      	str	r3, [r2, #0]
}
 800c4f6:	bf00      	nop
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr
 800c500:	20000de0 	.word	0x20000de0

0800c504 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c50a:	2300      	movs	r3, #0
 800c50c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c50e:	2300      	movs	r3, #0
 800c510:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c512:	4b42      	ldr	r3, [pc, #264]	@ (800c61c <xTaskResumeAll+0x118>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10b      	bne.n	800c532 <xTaskResumeAll+0x2e>
	__asm volatile
 800c51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51e:	f383 8811 	msr	BASEPRI, r3
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	603b      	str	r3, [r7, #0]
}
 800c52c:	bf00      	nop
 800c52e:	bf00      	nop
 800c530:	e7fd      	b.n	800c52e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c532:	f000 fc11 	bl	800cd58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c536:	4b39      	ldr	r3, [pc, #228]	@ (800c61c <xTaskResumeAll+0x118>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	3b01      	subs	r3, #1
 800c53c:	4a37      	ldr	r2, [pc, #220]	@ (800c61c <xTaskResumeAll+0x118>)
 800c53e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c540:	4b36      	ldr	r3, [pc, #216]	@ (800c61c <xTaskResumeAll+0x118>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d161      	bne.n	800c60c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c548:	4b35      	ldr	r3, [pc, #212]	@ (800c620 <xTaskResumeAll+0x11c>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d05d      	beq.n	800c60c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c550:	e02e      	b.n	800c5b0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c552:	4b34      	ldr	r3, [pc, #208]	@ (800c624 <xTaskResumeAll+0x120>)
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	3318      	adds	r3, #24
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff fd71 	bl	800c046 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3304      	adds	r3, #4
 800c568:	4618      	mov	r0, r3
 800c56a:	f7ff fd6c 	bl	800c046 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c572:	2201      	movs	r2, #1
 800c574:	409a      	lsls	r2, r3
 800c576:	4b2c      	ldr	r3, [pc, #176]	@ (800c628 <xTaskResumeAll+0x124>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	4a2a      	ldr	r2, [pc, #168]	@ (800c628 <xTaskResumeAll+0x124>)
 800c57e:	6013      	str	r3, [r2, #0]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c584:	4613      	mov	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	4a27      	ldr	r2, [pc, #156]	@ (800c62c <xTaskResumeAll+0x128>)
 800c58e:	441a      	add	r2, r3
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3304      	adds	r3, #4
 800c594:	4619      	mov	r1, r3
 800c596:	4610      	mov	r0, r2
 800c598:	f7ff fcf8 	bl	800bf8c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5a0:	4b23      	ldr	r3, [pc, #140]	@ (800c630 <xTaskResumeAll+0x12c>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d302      	bcc.n	800c5b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c5aa:	4b22      	ldr	r3, [pc, #136]	@ (800c634 <xTaskResumeAll+0x130>)
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5b0:	4b1c      	ldr	r3, [pc, #112]	@ (800c624 <xTaskResumeAll+0x120>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1cc      	bne.n	800c552 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d001      	beq.n	800c5c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c5be:	f000 fa0f 	bl	800c9e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c5c2:	4b1d      	ldr	r3, [pc, #116]	@ (800c638 <xTaskResumeAll+0x134>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d010      	beq.n	800c5f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c5ce:	f000 f837 	bl	800c640 <xTaskIncrementTick>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d002      	beq.n	800c5de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c5d8:	4b16      	ldr	r3, [pc, #88]	@ (800c634 <xTaskResumeAll+0x130>)
 800c5da:	2201      	movs	r2, #1
 800c5dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3b01      	subs	r3, #1
 800c5e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1f1      	bne.n	800c5ce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800c5ea:	4b13      	ldr	r3, [pc, #76]	@ (800c638 <xTaskResumeAll+0x134>)
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c5f0:	4b10      	ldr	r3, [pc, #64]	@ (800c634 <xTaskResumeAll+0x130>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d009      	beq.n	800c60c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c5fc:	4b0f      	ldr	r3, [pc, #60]	@ (800c63c <xTaskResumeAll+0x138>)
 800c5fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c60c:	f000 fbd6 	bl	800cdbc <vPortExitCritical>

	return xAlreadyYielded;
 800c610:	68bb      	ldr	r3, [r7, #8]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	20000de0 	.word	0x20000de0
 800c620:	20000db8 	.word	0x20000db8
 800c624:	20000d78 	.word	0x20000d78
 800c628:	20000dc0 	.word	0x20000dc0
 800c62c:	20000cbc 	.word	0x20000cbc
 800c630:	20000cb8 	.word	0x20000cb8
 800c634:	20000dcc 	.word	0x20000dcc
 800c638:	20000dc8 	.word	0x20000dc8
 800c63c:	e000ed04 	.word	0xe000ed04

0800c640 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c646:	2300      	movs	r3, #0
 800c648:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c64a:	4b51      	ldr	r3, [pc, #324]	@ (800c790 <xTaskIncrementTick+0x150>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f040 808e 	bne.w	800c770 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c654:	4b4f      	ldr	r3, [pc, #316]	@ (800c794 <xTaskIncrementTick+0x154>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	3301      	adds	r3, #1
 800c65a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c65c:	4a4d      	ldr	r2, [pc, #308]	@ (800c794 <xTaskIncrementTick+0x154>)
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d121      	bne.n	800c6ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c668:	4b4b      	ldr	r3, [pc, #300]	@ (800c798 <xTaskIncrementTick+0x158>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00b      	beq.n	800c68a <xTaskIncrementTick+0x4a>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	603b      	str	r3, [r7, #0]
}
 800c684:	bf00      	nop
 800c686:	bf00      	nop
 800c688:	e7fd      	b.n	800c686 <xTaskIncrementTick+0x46>
 800c68a:	4b43      	ldr	r3, [pc, #268]	@ (800c798 <xTaskIncrementTick+0x158>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	4b42      	ldr	r3, [pc, #264]	@ (800c79c <xTaskIncrementTick+0x15c>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a40      	ldr	r2, [pc, #256]	@ (800c798 <xTaskIncrementTick+0x158>)
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	4a40      	ldr	r2, [pc, #256]	@ (800c79c <xTaskIncrementTick+0x15c>)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6013      	str	r3, [r2, #0]
 800c69e:	4b40      	ldr	r3, [pc, #256]	@ (800c7a0 <xTaskIncrementTick+0x160>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	4a3e      	ldr	r2, [pc, #248]	@ (800c7a0 <xTaskIncrementTick+0x160>)
 800c6a6:	6013      	str	r3, [r2, #0]
 800c6a8:	f000 f99a 	bl	800c9e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c6ac:	4b3d      	ldr	r3, [pc, #244]	@ (800c7a4 <xTaskIncrementTick+0x164>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	693a      	ldr	r2, [r7, #16]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d34d      	bcc.n	800c752 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6b6:	4b38      	ldr	r3, [pc, #224]	@ (800c798 <xTaskIncrementTick+0x158>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <xTaskIncrementTick+0x84>
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e000      	b.n	800c6c6 <xTaskIncrementTick+0x86>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d004      	beq.n	800c6d4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6ca:	4b36      	ldr	r3, [pc, #216]	@ (800c7a4 <xTaskIncrementTick+0x164>)
 800c6cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c6d0:	601a      	str	r2, [r3, #0]
					break;
 800c6d2:	e03e      	b.n	800c752 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c6d4:	4b30      	ldr	r3, [pc, #192]	@ (800c798 <xTaskIncrementTick+0x158>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c6e4:	693a      	ldr	r2, [r7, #16]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d203      	bcs.n	800c6f4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c6ec:	4a2d      	ldr	r2, [pc, #180]	@ (800c7a4 <xTaskIncrementTick+0x164>)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6013      	str	r3, [r2, #0]
						break;
 800c6f2:	e02e      	b.n	800c752 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff fca4 	bl	800c046 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c702:	2b00      	cmp	r3, #0
 800c704:	d004      	beq.n	800c710 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	3318      	adds	r3, #24
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7ff fc9b 	bl	800c046 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c714:	2201      	movs	r2, #1
 800c716:	409a      	lsls	r2, r3
 800c718:	4b23      	ldr	r3, [pc, #140]	@ (800c7a8 <xTaskIncrementTick+0x168>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	4a22      	ldr	r2, [pc, #136]	@ (800c7a8 <xTaskIncrementTick+0x168>)
 800c720:	6013      	str	r3, [r2, #0]
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c726:	4613      	mov	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4413      	add	r3, r2
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	4a1f      	ldr	r2, [pc, #124]	@ (800c7ac <xTaskIncrementTick+0x16c>)
 800c730:	441a      	add	r2, r3
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	3304      	adds	r3, #4
 800c736:	4619      	mov	r1, r3
 800c738:	4610      	mov	r0, r2
 800c73a:	f7ff fc27 	bl	800bf8c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c742:	4b1b      	ldr	r3, [pc, #108]	@ (800c7b0 <xTaskIncrementTick+0x170>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c748:	429a      	cmp	r2, r3
 800c74a:	d3b4      	bcc.n	800c6b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c74c:	2301      	movs	r3, #1
 800c74e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c750:	e7b1      	b.n	800c6b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c752:	4b17      	ldr	r3, [pc, #92]	@ (800c7b0 <xTaskIncrementTick+0x170>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c758:	4914      	ldr	r1, [pc, #80]	@ (800c7ac <xTaskIncrementTick+0x16c>)
 800c75a:	4613      	mov	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	4413      	add	r3, r2
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	440b      	add	r3, r1
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b01      	cmp	r3, #1
 800c768:	d907      	bls.n	800c77a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c76a:	2301      	movs	r3, #1
 800c76c:	617b      	str	r3, [r7, #20]
 800c76e:	e004      	b.n	800c77a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c770:	4b10      	ldr	r3, [pc, #64]	@ (800c7b4 <xTaskIncrementTick+0x174>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3301      	adds	r3, #1
 800c776:	4a0f      	ldr	r2, [pc, #60]	@ (800c7b4 <xTaskIncrementTick+0x174>)
 800c778:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c77a:	4b0f      	ldr	r3, [pc, #60]	@ (800c7b8 <xTaskIncrementTick+0x178>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800c782:	2301      	movs	r3, #1
 800c784:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c786:	697b      	ldr	r3, [r7, #20]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	20000de0 	.word	0x20000de0
 800c794:	20000dbc 	.word	0x20000dbc
 800c798:	20000d70 	.word	0x20000d70
 800c79c:	20000d74 	.word	0x20000d74
 800c7a0:	20000dd0 	.word	0x20000dd0
 800c7a4:	20000dd8 	.word	0x20000dd8
 800c7a8:	20000dc0 	.word	0x20000dc0
 800c7ac:	20000cbc 	.word	0x20000cbc
 800c7b0:	20000cb8 	.word	0x20000cb8
 800c7b4:	20000dc8 	.word	0x20000dc8
 800c7b8:	20000dcc 	.word	0x20000dcc

0800c7bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b087      	sub	sp, #28
 800c7c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c7c2:	4b27      	ldr	r3, [pc, #156]	@ (800c860 <vTaskSwitchContext+0xa4>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d003      	beq.n	800c7d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c7ca:	4b26      	ldr	r3, [pc, #152]	@ (800c864 <vTaskSwitchContext+0xa8>)
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c7d0:	e040      	b.n	800c854 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c7d2:	4b24      	ldr	r3, [pc, #144]	@ (800c864 <vTaskSwitchContext+0xa8>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c7d8:	4b23      	ldr	r3, [pc, #140]	@ (800c868 <vTaskSwitchContext+0xac>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	fab3 f383 	clz	r3, r3
 800c7e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c7e6:	7afb      	ldrb	r3, [r7, #11]
 800c7e8:	f1c3 031f 	rsb	r3, r3, #31
 800c7ec:	617b      	str	r3, [r7, #20]
 800c7ee:	491f      	ldr	r1, [pc, #124]	@ (800c86c <vTaskSwitchContext+0xb0>)
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	4413      	add	r3, r2
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	440b      	add	r3, r1
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10b      	bne.n	800c81a <vTaskSwitchContext+0x5e>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c806:	f383 8811 	msr	BASEPRI, r3
 800c80a:	f3bf 8f6f 	isb	sy
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	607b      	str	r3, [r7, #4]
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop
 800c818:	e7fd      	b.n	800c816 <vTaskSwitchContext+0x5a>
 800c81a:	697a      	ldr	r2, [r7, #20]
 800c81c:	4613      	mov	r3, r2
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	4413      	add	r3, r2
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	4a11      	ldr	r2, [pc, #68]	@ (800c86c <vTaskSwitchContext+0xb0>)
 800c826:	4413      	add	r3, r2
 800c828:	613b      	str	r3, [r7, #16]
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	605a      	str	r2, [r3, #4]
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	685a      	ldr	r2, [r3, #4]
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	3308      	adds	r3, #8
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d104      	bne.n	800c84a <vTaskSwitchContext+0x8e>
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	685a      	ldr	r2, [r3, #4]
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	605a      	str	r2, [r3, #4]
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	4a07      	ldr	r2, [pc, #28]	@ (800c870 <vTaskSwitchContext+0xb4>)
 800c852:	6013      	str	r3, [r2, #0]
}
 800c854:	bf00      	nop
 800c856:	371c      	adds	r7, #28
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	20000de0 	.word	0x20000de0
 800c864:	20000dcc 	.word	0x20000dcc
 800c868:	20000dc0 	.word	0x20000dc0
 800c86c:	20000cbc 	.word	0x20000cbc
 800c870:	20000cb8 	.word	0x20000cb8

0800c874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c87c:	f000 f852 	bl	800c924 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c880:	4b06      	ldr	r3, [pc, #24]	@ (800c89c <prvIdleTask+0x28>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d9f9      	bls.n	800c87c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c888:	4b05      	ldr	r3, [pc, #20]	@ (800c8a0 <prvIdleTask+0x2c>)
 800c88a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c88e:	601a      	str	r2, [r3, #0]
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c898:	e7f0      	b.n	800c87c <prvIdleTask+0x8>
 800c89a:	bf00      	nop
 800c89c:	20000cbc 	.word	0x20000cbc
 800c8a0:	e000ed04 	.word	0xe000ed04

0800c8a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	607b      	str	r3, [r7, #4]
 800c8ae:	e00c      	b.n	800c8ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	4413      	add	r3, r2
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4a12      	ldr	r2, [pc, #72]	@ (800c904 <prvInitialiseTaskLists+0x60>)
 800c8bc:	4413      	add	r3, r2
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7ff fb37 	bl	800bf32 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	607b      	str	r3, [r7, #4]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b06      	cmp	r3, #6
 800c8ce:	d9ef      	bls.n	800c8b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8d0:	480d      	ldr	r0, [pc, #52]	@ (800c908 <prvInitialiseTaskLists+0x64>)
 800c8d2:	f7ff fb2e 	bl	800bf32 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8d6:	480d      	ldr	r0, [pc, #52]	@ (800c90c <prvInitialiseTaskLists+0x68>)
 800c8d8:	f7ff fb2b 	bl	800bf32 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8dc:	480c      	ldr	r0, [pc, #48]	@ (800c910 <prvInitialiseTaskLists+0x6c>)
 800c8de:	f7ff fb28 	bl	800bf32 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8e2:	480c      	ldr	r0, [pc, #48]	@ (800c914 <prvInitialiseTaskLists+0x70>)
 800c8e4:	f7ff fb25 	bl	800bf32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8e8:	480b      	ldr	r0, [pc, #44]	@ (800c918 <prvInitialiseTaskLists+0x74>)
 800c8ea:	f7ff fb22 	bl	800bf32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c91c <prvInitialiseTaskLists+0x78>)
 800c8f0:	4a05      	ldr	r2, [pc, #20]	@ (800c908 <prvInitialiseTaskLists+0x64>)
 800c8f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c8f4:	4b0a      	ldr	r3, [pc, #40]	@ (800c920 <prvInitialiseTaskLists+0x7c>)
 800c8f6:	4a05      	ldr	r2, [pc, #20]	@ (800c90c <prvInitialiseTaskLists+0x68>)
 800c8f8:	601a      	str	r2, [r3, #0]
}
 800c8fa:	bf00      	nop
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	20000cbc 	.word	0x20000cbc
 800c908:	20000d48 	.word	0x20000d48
 800c90c:	20000d5c 	.word	0x20000d5c
 800c910:	20000d78 	.word	0x20000d78
 800c914:	20000d8c 	.word	0x20000d8c
 800c918:	20000da4 	.word	0x20000da4
 800c91c:	20000d70 	.word	0x20000d70
 800c920:	20000d74 	.word	0x20000d74

0800c924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c92a:	e019      	b.n	800c960 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c92c:	f000 fa14 	bl	800cd58 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c930:	4b10      	ldr	r3, [pc, #64]	@ (800c974 <prvCheckTasksWaitingTermination+0x50>)
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	3304      	adds	r3, #4
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7ff fb82 	bl	800c046 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c942:	4b0d      	ldr	r3, [pc, #52]	@ (800c978 <prvCheckTasksWaitingTermination+0x54>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3b01      	subs	r3, #1
 800c948:	4a0b      	ldr	r2, [pc, #44]	@ (800c978 <prvCheckTasksWaitingTermination+0x54>)
 800c94a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c94c:	4b0b      	ldr	r3, [pc, #44]	@ (800c97c <prvCheckTasksWaitingTermination+0x58>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	3b01      	subs	r3, #1
 800c952:	4a0a      	ldr	r2, [pc, #40]	@ (800c97c <prvCheckTasksWaitingTermination+0x58>)
 800c954:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c956:	f000 fa31 	bl	800cdbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 f810 	bl	800c980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c960:	4b06      	ldr	r3, [pc, #24]	@ (800c97c <prvCheckTasksWaitingTermination+0x58>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1e1      	bne.n	800c92c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c968:	bf00      	nop
 800c96a:	bf00      	nop
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	20000d8c 	.word	0x20000d8c
 800c978:	20000db8 	.word	0x20000db8
 800c97c:	20000da0 	.word	0x20000da0

0800c980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d108      	bne.n	800c9a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c996:	4618      	mov	r0, r3
 800c998:	f000 fb86 	bl	800d0a8 <vPortFree>
				vPortFree( pxTCB );
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 fb83 	bl	800d0a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c9a2:	e019      	b.n	800c9d8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d103      	bne.n	800c9b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fb7a 	bl	800d0a8 <vPortFree>
	}
 800c9b4:	e010      	b.n	800c9d8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d00b      	beq.n	800c9d8 <prvDeleteTCB+0x58>
	__asm volatile
 800c9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c4:	f383 8811 	msr	BASEPRI, r3
 800c9c8:	f3bf 8f6f 	isb	sy
 800c9cc:	f3bf 8f4f 	dsb	sy
 800c9d0:	60fb      	str	r3, [r7, #12]
}
 800c9d2:	bf00      	nop
 800c9d4:	bf00      	nop
 800c9d6:	e7fd      	b.n	800c9d4 <prvDeleteTCB+0x54>
	}
 800c9d8:	bf00      	nop
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9e6:	4b0f      	ldr	r3, [pc, #60]	@ (800ca24 <prvResetNextTaskUnblockTime+0x44>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d101      	bne.n	800c9f4 <prvResetNextTaskUnblockTime+0x14>
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e000      	b.n	800c9f6 <prvResetNextTaskUnblockTime+0x16>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d004      	beq.n	800ca04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9fa:	4b0b      	ldr	r3, [pc, #44]	@ (800ca28 <prvResetNextTaskUnblockTime+0x48>)
 800c9fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca02:	e008      	b.n	800ca16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ca04:	4b07      	ldr	r3, [pc, #28]	@ (800ca24 <prvResetNextTaskUnblockTime+0x44>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	4a05      	ldr	r2, [pc, #20]	@ (800ca28 <prvResetNextTaskUnblockTime+0x48>)
 800ca14:	6013      	str	r3, [r2, #0]
}
 800ca16:	bf00      	nop
 800ca18:	370c      	adds	r7, #12
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	20000d70 	.word	0x20000d70
 800ca28:	20000dd8 	.word	0x20000dd8

0800ca2c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca36:	4b29      	ldr	r3, [pc, #164]	@ (800cadc <prvAddCurrentTaskToDelayedList+0xb0>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca3c:	4b28      	ldr	r3, [pc, #160]	@ (800cae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	3304      	adds	r3, #4
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7ff faff 	bl	800c046 <uxListRemove>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d10b      	bne.n	800ca66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ca4e:	4b24      	ldr	r3, [pc, #144]	@ (800cae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca54:	2201      	movs	r2, #1
 800ca56:	fa02 f303 	lsl.w	r3, r2, r3
 800ca5a:	43da      	mvns	r2, r3
 800ca5c:	4b21      	ldr	r3, [pc, #132]	@ (800cae4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4013      	ands	r3, r2
 800ca62:	4a20      	ldr	r2, [pc, #128]	@ (800cae4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca6c:	d10a      	bne.n	800ca84 <prvAddCurrentTaskToDelayedList+0x58>
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d007      	beq.n	800ca84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca74:	4b1a      	ldr	r3, [pc, #104]	@ (800cae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	3304      	adds	r3, #4
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	481a      	ldr	r0, [pc, #104]	@ (800cae8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ca7e:	f7ff fa85 	bl	800bf8c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca82:	e026      	b.n	800cad2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca84:	68fa      	ldr	r2, [r7, #12]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	4413      	add	r3, r2
 800ca8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca8c:	4b14      	ldr	r3, [pc, #80]	@ (800cae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca94:	68ba      	ldr	r2, [r7, #8]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d209      	bcs.n	800cab0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca9c:	4b13      	ldr	r3, [pc, #76]	@ (800caec <prvAddCurrentTaskToDelayedList+0xc0>)
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	4b0f      	ldr	r3, [pc, #60]	@ (800cae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	3304      	adds	r3, #4
 800caa6:	4619      	mov	r1, r3
 800caa8:	4610      	mov	r0, r2
 800caaa:	f7ff fa93 	bl	800bfd4 <vListInsert>
}
 800caae:	e010      	b.n	800cad2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cab0:	4b0f      	ldr	r3, [pc, #60]	@ (800caf0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	4b0a      	ldr	r3, [pc, #40]	@ (800cae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3304      	adds	r3, #4
 800caba:	4619      	mov	r1, r3
 800cabc:	4610      	mov	r0, r2
 800cabe:	f7ff fa89 	bl	800bfd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cac2:	4b0c      	ldr	r3, [pc, #48]	@ (800caf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d202      	bcs.n	800cad2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cacc:	4a09      	ldr	r2, [pc, #36]	@ (800caf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	6013      	str	r3, [r2, #0]
}
 800cad2:	bf00      	nop
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	20000dbc 	.word	0x20000dbc
 800cae0:	20000cb8 	.word	0x20000cb8
 800cae4:	20000dc0 	.word	0x20000dc0
 800cae8:	20000da4 	.word	0x20000da4
 800caec:	20000d74 	.word	0x20000d74
 800caf0:	20000d70 	.word	0x20000d70
 800caf4:	20000dd8 	.word	0x20000dd8

0800caf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	3b04      	subs	r3, #4
 800cb08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cb10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	3b04      	subs	r3, #4
 800cb16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	f023 0201 	bic.w	r2, r3, #1
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3b04      	subs	r3, #4
 800cb26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb28:	4a0c      	ldr	r2, [pc, #48]	@ (800cb5c <pxPortInitialiseStack+0x64>)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3b14      	subs	r3, #20
 800cb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3b04      	subs	r3, #4
 800cb3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f06f 0202 	mvn.w	r2, #2
 800cb46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	3b20      	subs	r3, #32
 800cb4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3714      	adds	r7, #20
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr
 800cb5c:	0800cb61 	.word	0x0800cb61

0800cb60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb6a:	4b13      	ldr	r3, [pc, #76]	@ (800cbb8 <prvTaskExitError+0x58>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb72:	d00b      	beq.n	800cb8c <prvTaskExitError+0x2c>
	__asm volatile
 800cb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	60fb      	str	r3, [r7, #12]
}
 800cb86:	bf00      	nop
 800cb88:	bf00      	nop
 800cb8a:	e7fd      	b.n	800cb88 <prvTaskExitError+0x28>
	__asm volatile
 800cb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	60bb      	str	r3, [r7, #8]
}
 800cb9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cba0:	bf00      	nop
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d0fc      	beq.n	800cba2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cba8:	bf00      	nop
 800cbaa:	bf00      	nop
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	20000128 	.word	0x20000128
 800cbbc:	00000000 	.word	0x00000000

0800cbc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbc0:	4b07      	ldr	r3, [pc, #28]	@ (800cbe0 <pxCurrentTCBConst2>)
 800cbc2:	6819      	ldr	r1, [r3, #0]
 800cbc4:	6808      	ldr	r0, [r1, #0]
 800cbc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbca:	f380 8809 	msr	PSP, r0
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f04f 0000 	mov.w	r0, #0
 800cbd6:	f380 8811 	msr	BASEPRI, r0
 800cbda:	4770      	bx	lr
 800cbdc:	f3af 8000 	nop.w

0800cbe0 <pxCurrentTCBConst2>:
 800cbe0:	20000cb8 	.word	0x20000cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop

0800cbe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbe8:	4808      	ldr	r0, [pc, #32]	@ (800cc0c <prvPortStartFirstTask+0x24>)
 800cbea:	6800      	ldr	r0, [r0, #0]
 800cbec:	6800      	ldr	r0, [r0, #0]
 800cbee:	f380 8808 	msr	MSP, r0
 800cbf2:	f04f 0000 	mov.w	r0, #0
 800cbf6:	f380 8814 	msr	CONTROL, r0
 800cbfa:	b662      	cpsie	i
 800cbfc:	b661      	cpsie	f
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	df00      	svc	0
 800cc08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc0a:	bf00      	nop
 800cc0c:	e000ed08 	.word	0xe000ed08

0800cc10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc16:	4b47      	ldr	r3, [pc, #284]	@ (800cd34 <xPortStartScheduler+0x124>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a47      	ldr	r2, [pc, #284]	@ (800cd38 <xPortStartScheduler+0x128>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d10b      	bne.n	800cc38 <xPortStartScheduler+0x28>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	60fb      	str	r3, [r7, #12]
}
 800cc32:	bf00      	nop
 800cc34:	bf00      	nop
 800cc36:	e7fd      	b.n	800cc34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc38:	4b3e      	ldr	r3, [pc, #248]	@ (800cd34 <xPortStartScheduler+0x124>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a3f      	ldr	r2, [pc, #252]	@ (800cd3c <xPortStartScheduler+0x12c>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d10b      	bne.n	800cc5a <xPortStartScheduler+0x4a>
	__asm volatile
 800cc42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc46:	f383 8811 	msr	BASEPRI, r3
 800cc4a:	f3bf 8f6f 	isb	sy
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	613b      	str	r3, [r7, #16]
}
 800cc54:	bf00      	nop
 800cc56:	bf00      	nop
 800cc58:	e7fd      	b.n	800cc56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc5a:	4b39      	ldr	r3, [pc, #228]	@ (800cd40 <xPortStartScheduler+0x130>)
 800cc5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	22ff      	movs	r2, #255	@ 0xff
 800cc6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc74:	78fb      	ldrb	r3, [r7, #3]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cc7c:	b2da      	uxtb	r2, r3
 800cc7e:	4b31      	ldr	r3, [pc, #196]	@ (800cd44 <xPortStartScheduler+0x134>)
 800cc80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc82:	4b31      	ldr	r3, [pc, #196]	@ (800cd48 <xPortStartScheduler+0x138>)
 800cc84:	2207      	movs	r2, #7
 800cc86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc88:	e009      	b.n	800cc9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cc8a:	4b2f      	ldr	r3, [pc, #188]	@ (800cd48 <xPortStartScheduler+0x138>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	4a2d      	ldr	r2, [pc, #180]	@ (800cd48 <xPortStartScheduler+0x138>)
 800cc92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc94:	78fb      	ldrb	r3, [r7, #3]
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	005b      	lsls	r3, r3, #1
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc9e:	78fb      	ldrb	r3, [r7, #3]
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cca6:	2b80      	cmp	r3, #128	@ 0x80
 800cca8:	d0ef      	beq.n	800cc8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ccaa:	4b27      	ldr	r3, [pc, #156]	@ (800cd48 <xPortStartScheduler+0x138>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f1c3 0307 	rsb	r3, r3, #7
 800ccb2:	2b04      	cmp	r3, #4
 800ccb4:	d00b      	beq.n	800ccce <xPortStartScheduler+0xbe>
	__asm volatile
 800ccb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccba:	f383 8811 	msr	BASEPRI, r3
 800ccbe:	f3bf 8f6f 	isb	sy
 800ccc2:	f3bf 8f4f 	dsb	sy
 800ccc6:	60bb      	str	r3, [r7, #8]
}
 800ccc8:	bf00      	nop
 800ccca:	bf00      	nop
 800cccc:	e7fd      	b.n	800ccca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccce:	4b1e      	ldr	r3, [pc, #120]	@ (800cd48 <xPortStartScheduler+0x138>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	021b      	lsls	r3, r3, #8
 800ccd4:	4a1c      	ldr	r2, [pc, #112]	@ (800cd48 <xPortStartScheduler+0x138>)
 800ccd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccd8:	4b1b      	ldr	r3, [pc, #108]	@ (800cd48 <xPortStartScheduler+0x138>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cce0:	4a19      	ldr	r2, [pc, #100]	@ (800cd48 <xPortStartScheduler+0x138>)
 800cce2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccec:	4b17      	ldr	r3, [pc, #92]	@ (800cd4c <xPortStartScheduler+0x13c>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a16      	ldr	r2, [pc, #88]	@ (800cd4c <xPortStartScheduler+0x13c>)
 800ccf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ccf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ccf8:	4b14      	ldr	r3, [pc, #80]	@ (800cd4c <xPortStartScheduler+0x13c>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a13      	ldr	r2, [pc, #76]	@ (800cd4c <xPortStartScheduler+0x13c>)
 800ccfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cd02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd04:	f000 f8da 	bl	800cebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd08:	4b11      	ldr	r3, [pc, #68]	@ (800cd50 <xPortStartScheduler+0x140>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd0e:	f000 f8f9 	bl	800cf04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd12:	4b10      	ldr	r3, [pc, #64]	@ (800cd54 <xPortStartScheduler+0x144>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a0f      	ldr	r2, [pc, #60]	@ (800cd54 <xPortStartScheduler+0x144>)
 800cd18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cd1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd1e:	f7ff ff63 	bl	800cbe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd22:	f7ff fd4b 	bl	800c7bc <vTaskSwitchContext>
	prvTaskExitError();
 800cd26:	f7ff ff1b 	bl	800cb60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3718      	adds	r7, #24
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	e000ed00 	.word	0xe000ed00
 800cd38:	410fc271 	.word	0x410fc271
 800cd3c:	410fc270 	.word	0x410fc270
 800cd40:	e000e400 	.word	0xe000e400
 800cd44:	20000de4 	.word	0x20000de4
 800cd48:	20000de8 	.word	0x20000de8
 800cd4c:	e000ed20 	.word	0xe000ed20
 800cd50:	20000128 	.word	0x20000128
 800cd54:	e000ef34 	.word	0xe000ef34

0800cd58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	607b      	str	r3, [r7, #4]
}
 800cd70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd72:	4b10      	ldr	r3, [pc, #64]	@ (800cdb4 <vPortEnterCritical+0x5c>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3301      	adds	r3, #1
 800cd78:	4a0e      	ldr	r2, [pc, #56]	@ (800cdb4 <vPortEnterCritical+0x5c>)
 800cd7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd7c:	4b0d      	ldr	r3, [pc, #52]	@ (800cdb4 <vPortEnterCritical+0x5c>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d110      	bne.n	800cda6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd84:	4b0c      	ldr	r3, [pc, #48]	@ (800cdb8 <vPortEnterCritical+0x60>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00b      	beq.n	800cda6 <vPortEnterCritical+0x4e>
	__asm volatile
 800cd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd92:	f383 8811 	msr	BASEPRI, r3
 800cd96:	f3bf 8f6f 	isb	sy
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	603b      	str	r3, [r7, #0]
}
 800cda0:	bf00      	nop
 800cda2:	bf00      	nop
 800cda4:	e7fd      	b.n	800cda2 <vPortEnterCritical+0x4a>
	}
}
 800cda6:	bf00      	nop
 800cda8:	370c      	adds	r7, #12
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	20000128 	.word	0x20000128
 800cdb8:	e000ed04 	.word	0xe000ed04

0800cdbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdc2:	4b12      	ldr	r3, [pc, #72]	@ (800ce0c <vPortExitCritical+0x50>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d10b      	bne.n	800cde2 <vPortExitCritical+0x26>
	__asm volatile
 800cdca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	607b      	str	r3, [r7, #4]
}
 800cddc:	bf00      	nop
 800cdde:	bf00      	nop
 800cde0:	e7fd      	b.n	800cdde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cde2:	4b0a      	ldr	r3, [pc, #40]	@ (800ce0c <vPortExitCritical+0x50>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	3b01      	subs	r3, #1
 800cde8:	4a08      	ldr	r2, [pc, #32]	@ (800ce0c <vPortExitCritical+0x50>)
 800cdea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdec:	4b07      	ldr	r3, [pc, #28]	@ (800ce0c <vPortExitCritical+0x50>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d105      	bne.n	800ce00 <vPortExitCritical+0x44>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cdfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr
 800ce0c:	20000128 	.word	0x20000128

0800ce10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce10:	f3ef 8009 	mrs	r0, PSP
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	4b15      	ldr	r3, [pc, #84]	@ (800ce70 <pxCurrentTCBConst>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	f01e 0f10 	tst.w	lr, #16
 800ce20:	bf08      	it	eq
 800ce22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2a:	6010      	str	r0, [r2, #0]
 800ce2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ce34:	f380 8811 	msr	BASEPRI, r0
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f7ff fcbc 	bl	800c7bc <vTaskSwitchContext>
 800ce44:	f04f 0000 	mov.w	r0, #0
 800ce48:	f380 8811 	msr	BASEPRI, r0
 800ce4c:	bc09      	pop	{r0, r3}
 800ce4e:	6819      	ldr	r1, [r3, #0]
 800ce50:	6808      	ldr	r0, [r1, #0]
 800ce52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce56:	f01e 0f10 	tst.w	lr, #16
 800ce5a:	bf08      	it	eq
 800ce5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce60:	f380 8809 	msr	PSP, r0
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	f3af 8000 	nop.w

0800ce70 <pxCurrentTCBConst>:
 800ce70:	20000cb8 	.word	0x20000cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce74:	bf00      	nop
 800ce76:	bf00      	nop

0800ce78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	607b      	str	r3, [r7, #4]
}
 800ce90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce92:	f7ff fbd5 	bl	800c640 <xTaskIncrementTick>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d003      	beq.n	800cea4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce9c:	4b06      	ldr	r3, [pc, #24]	@ (800ceb8 <SysTick_Handler+0x40>)
 800ce9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	2300      	movs	r3, #0
 800cea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	f383 8811 	msr	BASEPRI, r3
}
 800ceae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ceb0:	bf00      	nop
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	e000ed04 	.word	0xe000ed04

0800cebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cebc:	b480      	push	{r7}
 800cebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cec0:	4b0b      	ldr	r3, [pc, #44]	@ (800cef0 <vPortSetupTimerInterrupt+0x34>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cec6:	4b0b      	ldr	r3, [pc, #44]	@ (800cef4 <vPortSetupTimerInterrupt+0x38>)
 800cec8:	2200      	movs	r2, #0
 800ceca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cecc:	4b0a      	ldr	r3, [pc, #40]	@ (800cef8 <vPortSetupTimerInterrupt+0x3c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a0a      	ldr	r2, [pc, #40]	@ (800cefc <vPortSetupTimerInterrupt+0x40>)
 800ced2:	fba2 2303 	umull	r2, r3, r2, r3
 800ced6:	099b      	lsrs	r3, r3, #6
 800ced8:	4a09      	ldr	r2, [pc, #36]	@ (800cf00 <vPortSetupTimerInterrupt+0x44>)
 800ceda:	3b01      	subs	r3, #1
 800cedc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cede:	4b04      	ldr	r3, [pc, #16]	@ (800cef0 <vPortSetupTimerInterrupt+0x34>)
 800cee0:	2207      	movs	r2, #7
 800cee2:	601a      	str	r2, [r3, #0]
}
 800cee4:	bf00      	nop
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	e000e010 	.word	0xe000e010
 800cef4:	e000e018 	.word	0xe000e018
 800cef8:	2000000c 	.word	0x2000000c
 800cefc:	10624dd3 	.word	0x10624dd3
 800cf00:	e000e014 	.word	0xe000e014

0800cf04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cf14 <vPortEnableVFP+0x10>
 800cf08:	6801      	ldr	r1, [r0, #0]
 800cf0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cf0e:	6001      	str	r1, [r0, #0]
 800cf10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf12:	bf00      	nop
 800cf14:	e000ed88 	.word	0xe000ed88

0800cf18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b08a      	sub	sp, #40	@ 0x28
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf20:	2300      	movs	r3, #0
 800cf22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf24:	f7ff fae0 	bl	800c4e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf28:	4b5a      	ldr	r3, [pc, #360]	@ (800d094 <pvPortMalloc+0x17c>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf30:	f000 f916 	bl	800d160 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf34:	4b58      	ldr	r3, [pc, #352]	@ (800d098 <pvPortMalloc+0x180>)
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4013      	ands	r3, r2
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f040 8090 	bne.w	800d062 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d01e      	beq.n	800cf86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cf48:	2208      	movs	r2, #8
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f003 0307 	and.w	r3, r3, #7
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d015      	beq.n	800cf86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f023 0307 	bic.w	r3, r3, #7
 800cf60:	3308      	adds	r3, #8
 800cf62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f003 0307 	and.w	r3, r3, #7
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00b      	beq.n	800cf86 <pvPortMalloc+0x6e>
	__asm volatile
 800cf6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	617b      	str	r3, [r7, #20]
}
 800cf80:	bf00      	nop
 800cf82:	bf00      	nop
 800cf84:	e7fd      	b.n	800cf82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d06a      	beq.n	800d062 <pvPortMalloc+0x14a>
 800cf8c:	4b43      	ldr	r3, [pc, #268]	@ (800d09c <pvPortMalloc+0x184>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d865      	bhi.n	800d062 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf96:	4b42      	ldr	r3, [pc, #264]	@ (800d0a0 <pvPortMalloc+0x188>)
 800cf98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf9a:	4b41      	ldr	r3, [pc, #260]	@ (800d0a0 <pvPortMalloc+0x188>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfa0:	e004      	b.n	800cfac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d903      	bls.n	800cfbe <pvPortMalloc+0xa6>
 800cfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1f1      	bne.n	800cfa2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cfbe:	4b35      	ldr	r3, [pc, #212]	@ (800d094 <pvPortMalloc+0x17c>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d04c      	beq.n	800d062 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cfc8:	6a3b      	ldr	r3, [r7, #32]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2208      	movs	r2, #8
 800cfce:	4413      	add	r3, r2
 800cfd0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	6a3b      	ldr	r3, [r7, #32]
 800cfd8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfdc:	685a      	ldr	r2, [r3, #4]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	1ad2      	subs	r2, r2, r3
 800cfe2:	2308      	movs	r3, #8
 800cfe4:	005b      	lsls	r3, r3, #1
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d920      	bls.n	800d02c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cfea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	4413      	add	r3, r2
 800cff0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	f003 0307 	and.w	r3, r3, #7
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00b      	beq.n	800d014 <pvPortMalloc+0xfc>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	613b      	str	r3, [r7, #16]
}
 800d00e:	bf00      	nop
 800d010:	bf00      	nop
 800d012:	e7fd      	b.n	800d010 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d016:	685a      	ldr	r2, [r3, #4]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	1ad2      	subs	r2, r2, r3
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d026:	69b8      	ldr	r0, [r7, #24]
 800d028:	f000 f8fc 	bl	800d224 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d02c:	4b1b      	ldr	r3, [pc, #108]	@ (800d09c <pvPortMalloc+0x184>)
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	1ad3      	subs	r3, r2, r3
 800d036:	4a19      	ldr	r2, [pc, #100]	@ (800d09c <pvPortMalloc+0x184>)
 800d038:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d03a:	4b18      	ldr	r3, [pc, #96]	@ (800d09c <pvPortMalloc+0x184>)
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	4b19      	ldr	r3, [pc, #100]	@ (800d0a4 <pvPortMalloc+0x18c>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	429a      	cmp	r2, r3
 800d044:	d203      	bcs.n	800d04e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d046:	4b15      	ldr	r3, [pc, #84]	@ (800d09c <pvPortMalloc+0x184>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4a16      	ldr	r2, [pc, #88]	@ (800d0a4 <pvPortMalloc+0x18c>)
 800d04c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d050:	685a      	ldr	r2, [r3, #4]
 800d052:	4b11      	ldr	r3, [pc, #68]	@ (800d098 <pvPortMalloc+0x180>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	431a      	orrs	r2, r3
 800d058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05e:	2200      	movs	r2, #0
 800d060:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d062:	f7ff fa4f 	bl	800c504 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d066:	69fb      	ldr	r3, [r7, #28]
 800d068:	f003 0307 	and.w	r3, r3, #7
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00b      	beq.n	800d088 <pvPortMalloc+0x170>
	__asm volatile
 800d070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	60fb      	str	r3, [r7, #12]
}
 800d082:	bf00      	nop
 800d084:	bf00      	nop
 800d086:	e7fd      	b.n	800d084 <pvPortMalloc+0x16c>
	return pvReturn;
 800d088:	69fb      	ldr	r3, [r7, #28]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3728      	adds	r7, #40	@ 0x28
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	200019f4 	.word	0x200019f4
 800d098:	20001a00 	.word	0x20001a00
 800d09c:	200019f8 	.word	0x200019f8
 800d0a0:	200019ec 	.word	0x200019ec
 800d0a4:	200019fc 	.word	0x200019fc

0800d0a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b086      	sub	sp, #24
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d04a      	beq.n	800d150 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d0ba:	2308      	movs	r3, #8
 800d0bc:	425b      	negs	r3, r3
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	685a      	ldr	r2, [r3, #4]
 800d0cc:	4b22      	ldr	r3, [pc, #136]	@ (800d158 <vPortFree+0xb0>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d10b      	bne.n	800d0ee <vPortFree+0x46>
	__asm volatile
 800d0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0da:	f383 8811 	msr	BASEPRI, r3
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f3bf 8f4f 	dsb	sy
 800d0e6:	60fb      	str	r3, [r7, #12]
}
 800d0e8:	bf00      	nop
 800d0ea:	bf00      	nop
 800d0ec:	e7fd      	b.n	800d0ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00b      	beq.n	800d10e <vPortFree+0x66>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	60bb      	str	r3, [r7, #8]
}
 800d108:	bf00      	nop
 800d10a:	bf00      	nop
 800d10c:	e7fd      	b.n	800d10a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	685a      	ldr	r2, [r3, #4]
 800d112:	4b11      	ldr	r3, [pc, #68]	@ (800d158 <vPortFree+0xb0>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4013      	ands	r3, r2
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d019      	beq.n	800d150 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d115      	bne.n	800d150 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	685a      	ldr	r2, [r3, #4]
 800d128:	4b0b      	ldr	r3, [pc, #44]	@ (800d158 <vPortFree+0xb0>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	43db      	mvns	r3, r3
 800d12e:	401a      	ands	r2, r3
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d134:	f7ff f9d8 	bl	800c4e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	685a      	ldr	r2, [r3, #4]
 800d13c:	4b07      	ldr	r3, [pc, #28]	@ (800d15c <vPortFree+0xb4>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4413      	add	r3, r2
 800d142:	4a06      	ldr	r2, [pc, #24]	@ (800d15c <vPortFree+0xb4>)
 800d144:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d146:	6938      	ldr	r0, [r7, #16]
 800d148:	f000 f86c 	bl	800d224 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d14c:	f7ff f9da 	bl	800c504 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d150:	bf00      	nop
 800d152:	3718      	adds	r7, #24
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	20001a00 	.word	0x20001a00
 800d15c:	200019f8 	.word	0x200019f8

0800d160 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d166:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800d16a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d16c:	4b27      	ldr	r3, [pc, #156]	@ (800d20c <prvHeapInit+0xac>)
 800d16e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f003 0307 	and.w	r3, r3, #7
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00c      	beq.n	800d194 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	3307      	adds	r3, #7
 800d17e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f023 0307 	bic.w	r3, r3, #7
 800d186:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	4a1f      	ldr	r2, [pc, #124]	@ (800d20c <prvHeapInit+0xac>)
 800d190:	4413      	add	r3, r2
 800d192:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d198:	4a1d      	ldr	r2, [pc, #116]	@ (800d210 <prvHeapInit+0xb0>)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d19e:	4b1c      	ldr	r3, [pc, #112]	@ (800d210 <prvHeapInit+0xb0>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d1ac:	2208      	movs	r2, #8
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	1a9b      	subs	r3, r3, r2
 800d1b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f023 0307 	bic.w	r3, r3, #7
 800d1ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	4a15      	ldr	r2, [pc, #84]	@ (800d214 <prvHeapInit+0xb4>)
 800d1c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d1c2:	4b14      	ldr	r3, [pc, #80]	@ (800d214 <prvHeapInit+0xb4>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d1ca:	4b12      	ldr	r3, [pc, #72]	@ (800d214 <prvHeapInit+0xb4>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	1ad2      	subs	r2, r2, r3
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d1e0:	4b0c      	ldr	r3, [pc, #48]	@ (800d214 <prvHeapInit+0xb4>)
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	4a0a      	ldr	r2, [pc, #40]	@ (800d218 <prvHeapInit+0xb8>)
 800d1ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	4a09      	ldr	r2, [pc, #36]	@ (800d21c <prvHeapInit+0xbc>)
 800d1f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d1f8:	4b09      	ldr	r3, [pc, #36]	@ (800d220 <prvHeapInit+0xc0>)
 800d1fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d1fe:	601a      	str	r2, [r3, #0]
}
 800d200:	bf00      	nop
 800d202:	3714      	adds	r7, #20
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr
 800d20c:	20000dec 	.word	0x20000dec
 800d210:	200019ec 	.word	0x200019ec
 800d214:	200019f4 	.word	0x200019f4
 800d218:	200019fc 	.word	0x200019fc
 800d21c:	200019f8 	.word	0x200019f8
 800d220:	20001a00 	.word	0x20001a00

0800d224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d22c:	4b28      	ldr	r3, [pc, #160]	@ (800d2d0 <prvInsertBlockIntoFreeList+0xac>)
 800d22e:	60fb      	str	r3, [r7, #12]
 800d230:	e002      	b.n	800d238 <prvInsertBlockIntoFreeList+0x14>
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d8f7      	bhi.n	800d232 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	4413      	add	r3, r2
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	429a      	cmp	r2, r3
 800d252:	d108      	bne.n	800d266 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	685a      	ldr	r2, [r3, #4]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	441a      	add	r2, r3
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	68ba      	ldr	r2, [r7, #8]
 800d270:	441a      	add	r2, r3
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	429a      	cmp	r2, r3
 800d278:	d118      	bne.n	800d2ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	4b15      	ldr	r3, [pc, #84]	@ (800d2d4 <prvInsertBlockIntoFreeList+0xb0>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	429a      	cmp	r2, r3
 800d284:	d00d      	beq.n	800d2a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	685a      	ldr	r2, [r3, #4]
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	441a      	add	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	601a      	str	r2, [r3, #0]
 800d2a0:	e008      	b.n	800d2b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d2a2:	4b0c      	ldr	r3, [pc, #48]	@ (800d2d4 <prvInsertBlockIntoFreeList+0xb0>)
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	601a      	str	r2, [r3, #0]
 800d2aa:	e003      	b.n	800d2b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d002      	beq.n	800d2c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2c2:	bf00      	nop
 800d2c4:	3714      	adds	r7, #20
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	200019ec 	.word	0x200019ec
 800d2d4:	200019f4 	.word	0x200019f4

0800d2d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d2dc:	2200      	movs	r2, #0
 800d2de:	4912      	ldr	r1, [pc, #72]	@ (800d328 <MX_USB_DEVICE_Init+0x50>)
 800d2e0:	4812      	ldr	r0, [pc, #72]	@ (800d32c <MX_USB_DEVICE_Init+0x54>)
 800d2e2:	f7fd fd09 	bl	800acf8 <USBD_Init>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d001      	beq.n	800d2f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d2ec:	f7f3 fe48 	bl	8000f80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d2f0:	490f      	ldr	r1, [pc, #60]	@ (800d330 <MX_USB_DEVICE_Init+0x58>)
 800d2f2:	480e      	ldr	r0, [pc, #56]	@ (800d32c <MX_USB_DEVICE_Init+0x54>)
 800d2f4:	f7fd fd2b 	bl	800ad4e <USBD_RegisterClass>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d001      	beq.n	800d302 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d2fe:	f7f3 fe3f 	bl	8000f80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d302:	490c      	ldr	r1, [pc, #48]	@ (800d334 <MX_USB_DEVICE_Init+0x5c>)
 800d304:	4809      	ldr	r0, [pc, #36]	@ (800d32c <MX_USB_DEVICE_Init+0x54>)
 800d306:	f7fd fc59 	bl	800abbc <USBD_CDC_RegisterInterface>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d001      	beq.n	800d314 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d310:	f7f3 fe36 	bl	8000f80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d314:	4805      	ldr	r0, [pc, #20]	@ (800d32c <MX_USB_DEVICE_Init+0x54>)
 800d316:	f7fd fd34 	bl	800ad82 <USBD_Start>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d001      	beq.n	800d324 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d320:	f7f3 fe2e 	bl	8000f80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d324:	bf00      	nop
 800d326:	bd80      	pop	{r7, pc}
 800d328:	2000013c 	.word	0x2000013c
 800d32c:	20001a04 	.word	0x20001a04
 800d330:	20000024 	.word	0x20000024
 800d334:	2000012c 	.word	0x2000012c

0800d338 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d33c:	2200      	movs	r2, #0
 800d33e:	4905      	ldr	r1, [pc, #20]	@ (800d354 <CDC_Init_FS+0x1c>)
 800d340:	4805      	ldr	r0, [pc, #20]	@ (800d358 <CDC_Init_FS+0x20>)
 800d342:	f7fd fc52 	bl	800abea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d346:	4905      	ldr	r1, [pc, #20]	@ (800d35c <CDC_Init_FS+0x24>)
 800d348:	4803      	ldr	r0, [pc, #12]	@ (800d358 <CDC_Init_FS+0x20>)
 800d34a:	f7fd fc68 	bl	800ac1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d34e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d350:	4618      	mov	r0, r3
 800d352:	bd80      	pop	{r7, pc}
 800d354:	200020c8 	.word	0x200020c8
 800d358:	20001a04 	.word	0x20001a04
 800d35c:	20001cc8 	.word	0x20001cc8

0800d360 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d360:	b480      	push	{r7}
 800d362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d364:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d366:	4618      	mov	r0, r3
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	4603      	mov	r3, r0
 800d378:	6039      	str	r1, [r7, #0]
 800d37a:	71fb      	strb	r3, [r7, #7]
 800d37c:	4613      	mov	r3, r2
 800d37e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d380:	79fb      	ldrb	r3, [r7, #7]
 800d382:	2b23      	cmp	r3, #35	@ 0x23
 800d384:	d84a      	bhi.n	800d41c <CDC_Control_FS+0xac>
 800d386:	a201      	add	r2, pc, #4	@ (adr r2, 800d38c <CDC_Control_FS+0x1c>)
 800d388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38c:	0800d41d 	.word	0x0800d41d
 800d390:	0800d41d 	.word	0x0800d41d
 800d394:	0800d41d 	.word	0x0800d41d
 800d398:	0800d41d 	.word	0x0800d41d
 800d39c:	0800d41d 	.word	0x0800d41d
 800d3a0:	0800d41d 	.word	0x0800d41d
 800d3a4:	0800d41d 	.word	0x0800d41d
 800d3a8:	0800d41d 	.word	0x0800d41d
 800d3ac:	0800d41d 	.word	0x0800d41d
 800d3b0:	0800d41d 	.word	0x0800d41d
 800d3b4:	0800d41d 	.word	0x0800d41d
 800d3b8:	0800d41d 	.word	0x0800d41d
 800d3bc:	0800d41d 	.word	0x0800d41d
 800d3c0:	0800d41d 	.word	0x0800d41d
 800d3c4:	0800d41d 	.word	0x0800d41d
 800d3c8:	0800d41d 	.word	0x0800d41d
 800d3cc:	0800d41d 	.word	0x0800d41d
 800d3d0:	0800d41d 	.word	0x0800d41d
 800d3d4:	0800d41d 	.word	0x0800d41d
 800d3d8:	0800d41d 	.word	0x0800d41d
 800d3dc:	0800d41d 	.word	0x0800d41d
 800d3e0:	0800d41d 	.word	0x0800d41d
 800d3e4:	0800d41d 	.word	0x0800d41d
 800d3e8:	0800d41d 	.word	0x0800d41d
 800d3ec:	0800d41d 	.word	0x0800d41d
 800d3f0:	0800d41d 	.word	0x0800d41d
 800d3f4:	0800d41d 	.word	0x0800d41d
 800d3f8:	0800d41d 	.word	0x0800d41d
 800d3fc:	0800d41d 	.word	0x0800d41d
 800d400:	0800d41d 	.word	0x0800d41d
 800d404:	0800d41d 	.word	0x0800d41d
 800d408:	0800d41d 	.word	0x0800d41d
 800d40c:	0800d41d 	.word	0x0800d41d
 800d410:	0800d41d 	.word	0x0800d41d
 800d414:	0800d41d 	.word	0x0800d41d
 800d418:	0800d41d 	.word	0x0800d41d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d41c:	bf00      	nop
  }

  return (USBD_OK);
 800d41e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d420:	4618      	mov	r0, r3
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d436:	6879      	ldr	r1, [r7, #4]
 800d438:	4805      	ldr	r0, [pc, #20]	@ (800d450 <CDC_Receive_FS+0x24>)
 800d43a:	f7fd fbf0 	bl	800ac1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d43e:	4804      	ldr	r0, [pc, #16]	@ (800d450 <CDC_Receive_FS+0x24>)
 800d440:	f7fd fc30 	bl	800aca4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d444:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d446:	4618      	mov	r0, r3
 800d448:	3708      	adds	r7, #8
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	20001a04 	.word	0x20001a04

0800d454 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	460b      	mov	r3, r1
 800d45e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d464:	4b0d      	ldr	r3, [pc, #52]	@ (800d49c <CDC_Transmit_FS+0x48>)
 800d466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d46a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d472:	2b00      	cmp	r3, #0
 800d474:	d001      	beq.n	800d47a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d476:	2301      	movs	r3, #1
 800d478:	e00b      	b.n	800d492 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d47a:	887b      	ldrh	r3, [r7, #2]
 800d47c:	461a      	mov	r2, r3
 800d47e:	6879      	ldr	r1, [r7, #4]
 800d480:	4806      	ldr	r0, [pc, #24]	@ (800d49c <CDC_Transmit_FS+0x48>)
 800d482:	f7fd fbb2 	bl	800abea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d486:	4805      	ldr	r0, [pc, #20]	@ (800d49c <CDC_Transmit_FS+0x48>)
 800d488:	f7fd fbdd 	bl	800ac46 <USBD_CDC_TransmitPacket>
 800d48c:	4603      	mov	r3, r0
 800d48e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d490:	7bfb      	ldrb	r3, [r7, #15]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	20001a04 	.word	0x20001a04

0800d4a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	6039      	str	r1, [r7, #0]
 800d4aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	2212      	movs	r2, #18
 800d4b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d4b2:	4b03      	ldr	r3, [pc, #12]	@ (800d4c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr
 800d4c0:	20000158 	.word	0x20000158

0800d4c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	6039      	str	r1, [r7, #0]
 800d4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	2204      	movs	r2, #4
 800d4d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d4d6:	4b03      	ldr	r3, [pc, #12]	@ (800d4e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr
 800d4e4:	2000016c 	.word	0x2000016c

0800d4e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	6039      	str	r1, [r7, #0]
 800d4f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d4f4:	79fb      	ldrb	r3, [r7, #7]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d105      	bne.n	800d506 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	4907      	ldr	r1, [pc, #28]	@ (800d51c <USBD_FS_ProductStrDescriptor+0x34>)
 800d4fe:	4808      	ldr	r0, [pc, #32]	@ (800d520 <USBD_FS_ProductStrDescriptor+0x38>)
 800d500:	f7fe fbba 	bl	800bc78 <USBD_GetString>
 800d504:	e004      	b.n	800d510 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	4904      	ldr	r1, [pc, #16]	@ (800d51c <USBD_FS_ProductStrDescriptor+0x34>)
 800d50a:	4805      	ldr	r0, [pc, #20]	@ (800d520 <USBD_FS_ProductStrDescriptor+0x38>)
 800d50c:	f7fe fbb4 	bl	800bc78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d510:	4b02      	ldr	r3, [pc, #8]	@ (800d51c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d512:	4618      	mov	r0, r3
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	200024c8 	.word	0x200024c8
 800d520:	0800dd9c 	.word	0x0800dd9c

0800d524 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4603      	mov	r3, r0
 800d52c:	6039      	str	r1, [r7, #0]
 800d52e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d530:	683a      	ldr	r2, [r7, #0]
 800d532:	4904      	ldr	r1, [pc, #16]	@ (800d544 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d534:	4804      	ldr	r0, [pc, #16]	@ (800d548 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d536:	f7fe fb9f 	bl	800bc78 <USBD_GetString>
  return USBD_StrDesc;
 800d53a:	4b02      	ldr	r3, [pc, #8]	@ (800d544 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	200024c8 	.word	0x200024c8
 800d548:	0800ddb4 	.word	0x0800ddb4

0800d54c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	4603      	mov	r3, r0
 800d554:	6039      	str	r1, [r7, #0]
 800d556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	221a      	movs	r2, #26
 800d55c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d55e:	f000 f843 	bl	800d5e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d562:	4b02      	ldr	r3, [pc, #8]	@ (800d56c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d564:	4618      	mov	r0, r3
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	20000170 	.word	0x20000170

0800d570 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	4603      	mov	r3, r0
 800d578:	6039      	str	r1, [r7, #0]
 800d57a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d57c:	79fb      	ldrb	r3, [r7, #7]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d105      	bne.n	800d58e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d582:	683a      	ldr	r2, [r7, #0]
 800d584:	4907      	ldr	r1, [pc, #28]	@ (800d5a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d586:	4808      	ldr	r0, [pc, #32]	@ (800d5a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d588:	f7fe fb76 	bl	800bc78 <USBD_GetString>
 800d58c:	e004      	b.n	800d598 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	4904      	ldr	r1, [pc, #16]	@ (800d5a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d592:	4805      	ldr	r0, [pc, #20]	@ (800d5a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d594:	f7fe fb70 	bl	800bc78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d598:	4b02      	ldr	r3, [pc, #8]	@ (800d5a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	200024c8 	.word	0x200024c8
 800d5a8:	0800ddc8 	.word	0x0800ddc8

0800d5ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	6039      	str	r1, [r7, #0]
 800d5b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5b8:	79fb      	ldrb	r3, [r7, #7]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d105      	bne.n	800d5ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	4907      	ldr	r1, [pc, #28]	@ (800d5e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5c2:	4808      	ldr	r0, [pc, #32]	@ (800d5e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5c4:	f7fe fb58 	bl	800bc78 <USBD_GetString>
 800d5c8:	e004      	b.n	800d5d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	4904      	ldr	r1, [pc, #16]	@ (800d5e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5ce:	4805      	ldr	r0, [pc, #20]	@ (800d5e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5d0:	f7fe fb52 	bl	800bc78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5d4:	4b02      	ldr	r3, [pc, #8]	@ (800d5e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3708      	adds	r7, #8
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	200024c8 	.word	0x200024c8
 800d5e4:	0800ddd4 	.word	0x0800ddd4

0800d5e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d5ee:	4b0f      	ldr	r3, [pc, #60]	@ (800d62c <Get_SerialNum+0x44>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d5f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d630 <Get_SerialNum+0x48>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d5fa:	4b0e      	ldr	r3, [pc, #56]	@ (800d634 <Get_SerialNum+0x4c>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4413      	add	r3, r2
 800d606:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d009      	beq.n	800d622 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d60e:	2208      	movs	r2, #8
 800d610:	4909      	ldr	r1, [pc, #36]	@ (800d638 <Get_SerialNum+0x50>)
 800d612:	68f8      	ldr	r0, [r7, #12]
 800d614:	f000 f814 	bl	800d640 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d618:	2204      	movs	r2, #4
 800d61a:	4908      	ldr	r1, [pc, #32]	@ (800d63c <Get_SerialNum+0x54>)
 800d61c:	68b8      	ldr	r0, [r7, #8]
 800d61e:	f000 f80f 	bl	800d640 <IntToUnicode>
  }
}
 800d622:	bf00      	nop
 800d624:	3710      	adds	r7, #16
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	1ffff7ac 	.word	0x1ffff7ac
 800d630:	1ffff7b0 	.word	0x1ffff7b0
 800d634:	1ffff7b4 	.word	0x1ffff7b4
 800d638:	20000172 	.word	0x20000172
 800d63c:	20000182 	.word	0x20000182

0800d640 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d640:	b480      	push	{r7}
 800d642:	b087      	sub	sp, #28
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	4613      	mov	r3, r2
 800d64c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d64e:	2300      	movs	r3, #0
 800d650:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d652:	2300      	movs	r3, #0
 800d654:	75fb      	strb	r3, [r7, #23]
 800d656:	e027      	b.n	800d6a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	0f1b      	lsrs	r3, r3, #28
 800d65c:	2b09      	cmp	r3, #9
 800d65e:	d80b      	bhi.n	800d678 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	0f1b      	lsrs	r3, r3, #28
 800d664:	b2da      	uxtb	r2, r3
 800d666:	7dfb      	ldrb	r3, [r7, #23]
 800d668:	005b      	lsls	r3, r3, #1
 800d66a:	4619      	mov	r1, r3
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	440b      	add	r3, r1
 800d670:	3230      	adds	r2, #48	@ 0x30
 800d672:	b2d2      	uxtb	r2, r2
 800d674:	701a      	strb	r2, [r3, #0]
 800d676:	e00a      	b.n	800d68e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	0f1b      	lsrs	r3, r3, #28
 800d67c:	b2da      	uxtb	r2, r3
 800d67e:	7dfb      	ldrb	r3, [r7, #23]
 800d680:	005b      	lsls	r3, r3, #1
 800d682:	4619      	mov	r1, r3
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	440b      	add	r3, r1
 800d688:	3237      	adds	r2, #55	@ 0x37
 800d68a:	b2d2      	uxtb	r2, r2
 800d68c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	011b      	lsls	r3, r3, #4
 800d692:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d694:	7dfb      	ldrb	r3, [r7, #23]
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	3301      	adds	r3, #1
 800d69a:	68ba      	ldr	r2, [r7, #8]
 800d69c:	4413      	add	r3, r2
 800d69e:	2200      	movs	r2, #0
 800d6a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d6a2:	7dfb      	ldrb	r3, [r7, #23]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	75fb      	strb	r3, [r7, #23]
 800d6a8:	7dfa      	ldrb	r2, [r7, #23]
 800d6aa:	79fb      	ldrb	r3, [r7, #7]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d3d3      	bcc.n	800d658 <IntToUnicode+0x18>
  }
}
 800d6b0:	bf00      	nop
 800d6b2:	bf00      	nop
 800d6b4:	371c      	adds	r7, #28
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr
	...

0800d6c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b08a      	sub	sp, #40	@ 0x28
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6c8:	f107 0314 	add.w	r3, r7, #20
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	601a      	str	r2, [r3, #0]
 800d6d0:	605a      	str	r2, [r3, #4]
 800d6d2:	609a      	str	r2, [r3, #8]
 800d6d4:	60da      	str	r2, [r3, #12]
 800d6d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a1c      	ldr	r2, [pc, #112]	@ (800d750 <HAL_PCD_MspInit+0x90>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d131      	bne.n	800d746 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d6e2:	4b1c      	ldr	r3, [pc, #112]	@ (800d754 <HAL_PCD_MspInit+0x94>)
 800d6e4:	695b      	ldr	r3, [r3, #20]
 800d6e6:	4a1b      	ldr	r2, [pc, #108]	@ (800d754 <HAL_PCD_MspInit+0x94>)
 800d6e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d6ec:	6153      	str	r3, [r2, #20]
 800d6ee:	4b19      	ldr	r3, [pc, #100]	@ (800d754 <HAL_PCD_MspInit+0x94>)
 800d6f0:	695b      	ldr	r3, [r3, #20]
 800d6f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6f6:	613b      	str	r3, [r7, #16]
 800d6f8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d6fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d6fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d700:	2302      	movs	r3, #2
 800d702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d704:	2300      	movs	r3, #0
 800d706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d708:	2303      	movs	r3, #3
 800d70a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800d70c:	230e      	movs	r3, #14
 800d70e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d710:	f107 0314 	add.w	r3, r7, #20
 800d714:	4619      	mov	r1, r3
 800d716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d71a:	f7f5 ff61 	bl	80035e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d71e:	4b0d      	ldr	r3, [pc, #52]	@ (800d754 <HAL_PCD_MspInit+0x94>)
 800d720:	69db      	ldr	r3, [r3, #28]
 800d722:	4a0c      	ldr	r2, [pc, #48]	@ (800d754 <HAL_PCD_MspInit+0x94>)
 800d724:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d728:	61d3      	str	r3, [r2, #28]
 800d72a:	4b0a      	ldr	r3, [pc, #40]	@ (800d754 <HAL_PCD_MspInit+0x94>)
 800d72c:	69db      	ldr	r3, [r3, #28]
 800d72e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d732:	60fb      	str	r3, [r7, #12]
 800d734:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800d736:	2200      	movs	r2, #0
 800d738:	2105      	movs	r1, #5
 800d73a:	2014      	movs	r0, #20
 800d73c:	f7f5 fe00 	bl	8003340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800d740:	2014      	movs	r0, #20
 800d742:	f7f5 fe19 	bl	8003378 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d746:	bf00      	nop
 800d748:	3728      	adds	r7, #40	@ 0x28
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	40005c00 	.word	0x40005c00
 800d754:	40021000 	.word	0x40021000

0800d758 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d76c:	4619      	mov	r1, r3
 800d76e:	4610      	mov	r0, r2
 800d770:	f7fd fb50 	bl	800ae14 <USBD_LL_SetupStage>
}
 800d774:	bf00      	nop
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	460b      	mov	r3, r1
 800d786:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800d78e:	78fa      	ldrb	r2, [r7, #3]
 800d790:	6879      	ldr	r1, [r7, #4]
 800d792:	4613      	mov	r3, r2
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	4413      	add	r3, r2
 800d798:	00db      	lsls	r3, r3, #3
 800d79a:	440b      	add	r3, r1
 800d79c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	78fb      	ldrb	r3, [r7, #3]
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	f7fd fb82 	bl	800aeae <USBD_LL_DataOutStage>
}
 800d7aa:	bf00      	nop
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b082      	sub	sp, #8
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800d7c4:	78fa      	ldrb	r2, [r7, #3]
 800d7c6:	6879      	ldr	r1, [r7, #4]
 800d7c8:	4613      	mov	r3, r2
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	4413      	add	r3, r2
 800d7ce:	00db      	lsls	r3, r3, #3
 800d7d0:	440b      	add	r3, r1
 800d7d2:	3324      	adds	r3, #36	@ 0x24
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	78fb      	ldrb	r3, [r7, #3]
 800d7d8:	4619      	mov	r1, r3
 800d7da:	f7fd fbd9 	bl	800af90 <USBD_LL_DataInStage>
}
 800d7de:	bf00      	nop
 800d7e0:	3708      	adds	r7, #8
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b082      	sub	sp, #8
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7fd fcec 	bl	800b1d2 <USBD_LL_SOF>
}
 800d7fa:	bf00      	nop
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b084      	sub	sp, #16
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d80a:	2301      	movs	r3, #1
 800d80c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	795b      	ldrb	r3, [r3, #5]
 800d812:	2b02      	cmp	r3, #2
 800d814:	d001      	beq.n	800d81a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d816:	f7f3 fbb3 	bl	8000f80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d820:	7bfa      	ldrb	r2, [r7, #15]
 800d822:	4611      	mov	r1, r2
 800d824:	4618      	mov	r0, r3
 800d826:	f7fd fc99 	bl	800b15c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d830:	4618      	mov	r0, r3
 800d832:	f7fd fc52 	bl	800b0da <USBD_LL_Reset>
}
 800d836:	bf00      	nop
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
	...

0800d840 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fd fc94 	bl	800b17c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	7a5b      	ldrb	r3, [r3, #9]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d005      	beq.n	800d868 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d85c:	4b04      	ldr	r3, [pc, #16]	@ (800d870 <HAL_PCD_SuspendCallback+0x30>)
 800d85e:	691b      	ldr	r3, [r3, #16]
 800d860:	4a03      	ldr	r2, [pc, #12]	@ (800d870 <HAL_PCD_SuspendCallback+0x30>)
 800d862:	f043 0306 	orr.w	r3, r3, #6
 800d866:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d868:	bf00      	nop
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	e000ed00 	.word	0xe000ed00

0800d874 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d882:	4618      	mov	r0, r3
 800d884:	f7fd fc8f 	bl	800b1a6 <USBD_LL_Resume>
}
 800d888:	bf00      	nop
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d898:	4a28      	ldr	r2, [pc, #160]	@ (800d93c <USBD_LL_Init+0xac>)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	4a26      	ldr	r2, [pc, #152]	@ (800d93c <USBD_LL_Init+0xac>)
 800d8a4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d8a8:	4b24      	ldr	r3, [pc, #144]	@ (800d93c <USBD_LL_Init+0xac>)
 800d8aa:	4a25      	ldr	r2, [pc, #148]	@ (800d940 <USBD_LL_Init+0xb0>)
 800d8ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d8ae:	4b23      	ldr	r3, [pc, #140]	@ (800d93c <USBD_LL_Init+0xac>)
 800d8b0:	2208      	movs	r2, #8
 800d8b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d8b4:	4b21      	ldr	r3, [pc, #132]	@ (800d93c <USBD_LL_Init+0xac>)
 800d8b6:	2202      	movs	r2, #2
 800d8b8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d8ba:	4b20      	ldr	r3, [pc, #128]	@ (800d93c <USBD_LL_Init+0xac>)
 800d8bc:	2202      	movs	r2, #2
 800d8be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d8c0:	4b1e      	ldr	r3, [pc, #120]	@ (800d93c <USBD_LL_Init+0xac>)
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d8c6:	4b1d      	ldr	r3, [pc, #116]	@ (800d93c <USBD_LL_Init+0xac>)
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d8cc:	481b      	ldr	r0, [pc, #108]	@ (800d93c <USBD_LL_Init+0xac>)
 800d8ce:	f7f6 fce6 	bl	800429e <HAL_PCD_Init>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d001      	beq.n	800d8dc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d8d8:	f7f3 fb52 	bl	8000f80 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d8e2:	2318      	movs	r3, #24
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	f7f8 f95f 	bl	8005baa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d8f2:	2358      	movs	r3, #88	@ 0x58
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	2180      	movs	r1, #128	@ 0x80
 800d8f8:	f7f8 f957 	bl	8005baa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d902:	23c0      	movs	r3, #192	@ 0xc0
 800d904:	2200      	movs	r2, #0
 800d906:	2181      	movs	r1, #129	@ 0x81
 800d908:	f7f8 f94f 	bl	8005baa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d912:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d916:	2200      	movs	r2, #0
 800d918:	2101      	movs	r1, #1
 800d91a:	f7f8 f946 	bl	8005baa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d924:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d928:	2200      	movs	r2, #0
 800d92a:	2182      	movs	r1, #130	@ 0x82
 800d92c:	f7f8 f93d 	bl	8005baa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3708      	adds	r7, #8
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	200026c8 	.word	0x200026c8
 800d940:	40005c00 	.word	0x40005c00

0800d944 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d94c:	2300      	movs	r3, #0
 800d94e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d950:	2300      	movs	r3, #0
 800d952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7f6 fd66 	bl	800442c <HAL_PCD_Start>
 800d960:	4603      	mov	r3, r0
 800d962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d964:	7bfb      	ldrb	r3, [r7, #15]
 800d966:	4618      	mov	r0, r3
 800d968:	f000 f952 	bl	800dc10 <USBD_Get_USB_Status>
 800d96c:	4603      	mov	r3, r0
 800d96e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d970:	7bbb      	ldrb	r3, [r7, #14]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b084      	sub	sp, #16
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
 800d982:	4608      	mov	r0, r1
 800d984:	4611      	mov	r1, r2
 800d986:	461a      	mov	r2, r3
 800d988:	4603      	mov	r3, r0
 800d98a:	70fb      	strb	r3, [r7, #3]
 800d98c:	460b      	mov	r3, r1
 800d98e:	70bb      	strb	r3, [r7, #2]
 800d990:	4613      	mov	r3, r2
 800d992:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d994:	2300      	movs	r3, #0
 800d996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d9a2:	78bb      	ldrb	r3, [r7, #2]
 800d9a4:	883a      	ldrh	r2, [r7, #0]
 800d9a6:	78f9      	ldrb	r1, [r7, #3]
 800d9a8:	f7f6 fe5e 	bl	8004668 <HAL_PCD_EP_Open>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9b0:	7bfb      	ldrb	r3, [r7, #15]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f000 f92c 	bl	800dc10 <USBD_Get_USB_Status>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b084      	sub	sp, #16
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d9e0:	78fa      	ldrb	r2, [r7, #3]
 800d9e2:	4611      	mov	r1, r2
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7f6 fe9c 	bl	8004722 <HAL_PCD_EP_Close>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9ee:	7bfb      	ldrb	r3, [r7, #15]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f000 f90d 	bl	800dc10 <USBD_Get_USB_Status>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3710      	adds	r7, #16
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	460b      	mov	r3, r1
 800da0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da14:	2300      	movs	r3, #0
 800da16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800da1e:	78fa      	ldrb	r2, [r7, #3]
 800da20:	4611      	mov	r1, r2
 800da22:	4618      	mov	r0, r3
 800da24:	f7f6 ff45 	bl	80048b2 <HAL_PCD_EP_SetStall>
 800da28:	4603      	mov	r3, r0
 800da2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da2c:	7bfb      	ldrb	r3, [r7, #15]
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 f8ee 	bl	800dc10 <USBD_Get_USB_Status>
 800da34:	4603      	mov	r3, r0
 800da36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da38:	7bbb      	ldrb	r3, [r7, #14]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b084      	sub	sp, #16
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	460b      	mov	r3, r1
 800da4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da4e:	2300      	movs	r3, #0
 800da50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da52:	2300      	movs	r3, #0
 800da54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800da5c:	78fa      	ldrb	r2, [r7, #3]
 800da5e:	4611      	mov	r1, r2
 800da60:	4618      	mov	r0, r3
 800da62:	f7f6 ff78 	bl	8004956 <HAL_PCD_EP_ClrStall>
 800da66:	4603      	mov	r3, r0
 800da68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da6a:	7bfb      	ldrb	r3, [r7, #15]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f000 f8cf 	bl	800dc10 <USBD_Get_USB_Status>
 800da72:	4603      	mov	r3, r0
 800da74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da76:	7bbb      	ldrb	r3, [r7, #14]
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da80:	b480      	push	{r7}
 800da82:	b085      	sub	sp, #20
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	460b      	mov	r3, r1
 800da8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800da92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800da94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	da0b      	bge.n	800dab4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800da9c:	78fb      	ldrb	r3, [r7, #3]
 800da9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800daa2:	68f9      	ldr	r1, [r7, #12]
 800daa4:	4613      	mov	r3, r2
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	4413      	add	r3, r2
 800daaa:	00db      	lsls	r3, r3, #3
 800daac:	440b      	add	r3, r1
 800daae:	3312      	adds	r3, #18
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	e00b      	b.n	800dacc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dab4:	78fb      	ldrb	r3, [r7, #3]
 800dab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800daba:	68f9      	ldr	r1, [r7, #12]
 800dabc:	4613      	mov	r3, r2
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	00db      	lsls	r3, r3, #3
 800dac4:	440b      	add	r3, r1
 800dac6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800daca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	460b      	mov	r3, r1
 800dae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae8:	2300      	movs	r3, #0
 800daea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800daf2:	78fa      	ldrb	r2, [r7, #3]
 800daf4:	4611      	mov	r1, r2
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7f6 fd92 	bl	8004620 <HAL_PCD_SetAddress>
 800dafc:	4603      	mov	r3, r0
 800dafe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db00:	7bfb      	ldrb	r3, [r7, #15]
 800db02:	4618      	mov	r0, r3
 800db04:	f000 f884 	bl	800dc10 <USBD_Get_USB_Status>
 800db08:	4603      	mov	r3, r0
 800db0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b086      	sub	sp, #24
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	60f8      	str	r0, [r7, #12]
 800db1e:	607a      	str	r2, [r7, #4]
 800db20:	461a      	mov	r2, r3
 800db22:	460b      	mov	r3, r1
 800db24:	72fb      	strb	r3, [r7, #11]
 800db26:	4613      	mov	r3, r2
 800db28:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db2a:	2300      	movs	r3, #0
 800db2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800db38:	893b      	ldrh	r3, [r7, #8]
 800db3a:	7af9      	ldrb	r1, [r7, #11]
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	f7f6 fe81 	bl	8004844 <HAL_PCD_EP_Transmit>
 800db42:	4603      	mov	r3, r0
 800db44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db46:	7dfb      	ldrb	r3, [r7, #23]
 800db48:	4618      	mov	r0, r3
 800db4a:	f000 f861 	bl	800dc10 <USBD_Get_USB_Status>
 800db4e:	4603      	mov	r3, r0
 800db50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800db52:	7dbb      	ldrb	r3, [r7, #22]
}
 800db54:	4618      	mov	r0, r3
 800db56:	3718      	adds	r7, #24
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	607a      	str	r2, [r7, #4]
 800db66:	461a      	mov	r2, r3
 800db68:	460b      	mov	r3, r1
 800db6a:	72fb      	strb	r3, [r7, #11]
 800db6c:	4613      	mov	r3, r2
 800db6e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db70:	2300      	movs	r3, #0
 800db72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db74:	2300      	movs	r3, #0
 800db76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800db7e:	893b      	ldrh	r3, [r7, #8]
 800db80:	7af9      	ldrb	r1, [r7, #11]
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	f7f6 fe15 	bl	80047b2 <HAL_PCD_EP_Receive>
 800db88:	4603      	mov	r3, r0
 800db8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db8c:	7dfb      	ldrb	r3, [r7, #23]
 800db8e:	4618      	mov	r0, r3
 800db90:	f000 f83e 	bl	800dc10 <USBD_Get_USB_Status>
 800db94:	4603      	mov	r3, r0
 800db96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800db98:	7dbb      	ldrb	r3, [r7, #22]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3718      	adds	r7, #24
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b082      	sub	sp, #8
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
 800dbaa:	460b      	mov	r3, r1
 800dbac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dbb4:	78fa      	ldrb	r2, [r7, #3]
 800dbb6:	4611      	mov	r1, r2
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7f6 fe2b 	bl	8004814 <HAL_PCD_EP_GetRxCount>
 800dbbe:	4603      	mov	r3, r0
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dbd0:	4b03      	ldr	r3, [pc, #12]	@ (800dbe0 <USBD_static_malloc+0x18>)
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	370c      	adds	r7, #12
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	2000299c 	.word	0x2000299c

0800dbe4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]

}
 800dbec:	bf00      	nop
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	460b      	mov	r3, r1
 800dc02:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800dc04:	bf00      	nop
 800dc06:	370c      	adds	r7, #12
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b085      	sub	sp, #20
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc1e:	79fb      	ldrb	r3, [r7, #7]
 800dc20:	2b03      	cmp	r3, #3
 800dc22:	d817      	bhi.n	800dc54 <USBD_Get_USB_Status+0x44>
 800dc24:	a201      	add	r2, pc, #4	@ (adr r2, 800dc2c <USBD_Get_USB_Status+0x1c>)
 800dc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc2a:	bf00      	nop
 800dc2c:	0800dc3d 	.word	0x0800dc3d
 800dc30:	0800dc43 	.word	0x0800dc43
 800dc34:	0800dc49 	.word	0x0800dc49
 800dc38:	0800dc4f 	.word	0x0800dc4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc40:	e00b      	b.n	800dc5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc42:	2302      	movs	r3, #2
 800dc44:	73fb      	strb	r3, [r7, #15]
    break;
 800dc46:	e008      	b.n	800dc5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc4c:	e005      	b.n	800dc5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc4e:	2302      	movs	r3, #2
 800dc50:	73fb      	strb	r3, [r7, #15]
    break;
 800dc52:	e002      	b.n	800dc5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dc54:	2302      	movs	r3, #2
 800dc56:	73fb      	strb	r3, [r7, #15]
    break;
 800dc58:	bf00      	nop
  }
  return usb_status;
 800dc5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3714      	adds	r7, #20
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <memset>:
 800dc68:	4402      	add	r2, r0
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d100      	bne.n	800dc72 <memset+0xa>
 800dc70:	4770      	bx	lr
 800dc72:	f803 1b01 	strb.w	r1, [r3], #1
 800dc76:	e7f9      	b.n	800dc6c <memset+0x4>

0800dc78 <__libc_init_array>:
 800dc78:	b570      	push	{r4, r5, r6, lr}
 800dc7a:	4d0d      	ldr	r5, [pc, #52]	@ (800dcb0 <__libc_init_array+0x38>)
 800dc7c:	4c0d      	ldr	r4, [pc, #52]	@ (800dcb4 <__libc_init_array+0x3c>)
 800dc7e:	1b64      	subs	r4, r4, r5
 800dc80:	10a4      	asrs	r4, r4, #2
 800dc82:	2600      	movs	r6, #0
 800dc84:	42a6      	cmp	r6, r4
 800dc86:	d109      	bne.n	800dc9c <__libc_init_array+0x24>
 800dc88:	4d0b      	ldr	r5, [pc, #44]	@ (800dcb8 <__libc_init_array+0x40>)
 800dc8a:	4c0c      	ldr	r4, [pc, #48]	@ (800dcbc <__libc_init_array+0x44>)
 800dc8c:	f000 f818 	bl	800dcc0 <_init>
 800dc90:	1b64      	subs	r4, r4, r5
 800dc92:	10a4      	asrs	r4, r4, #2
 800dc94:	2600      	movs	r6, #0
 800dc96:	42a6      	cmp	r6, r4
 800dc98:	d105      	bne.n	800dca6 <__libc_init_array+0x2e>
 800dc9a:	bd70      	pop	{r4, r5, r6, pc}
 800dc9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dca0:	4798      	blx	r3
 800dca2:	3601      	adds	r6, #1
 800dca4:	e7ee      	b.n	800dc84 <__libc_init_array+0xc>
 800dca6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcaa:	4798      	blx	r3
 800dcac:	3601      	adds	r6, #1
 800dcae:	e7f2      	b.n	800dc96 <__libc_init_array+0x1e>
 800dcb0:	0800e420 	.word	0x0800e420
 800dcb4:	0800e420 	.word	0x0800e420
 800dcb8:	0800e420 	.word	0x0800e420
 800dcbc:	0800e424 	.word	0x0800e424

0800dcc0 <_init>:
 800dcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc2:	bf00      	nop
 800dcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcc6:	bc08      	pop	{r3}
 800dcc8:	469e      	mov	lr, r3
 800dcca:	4770      	bx	lr

0800dccc <_fini>:
 800dccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcce:	bf00      	nop
 800dcd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcd2:	bc08      	pop	{r3}
 800dcd4:	469e      	mov	lr, r3
 800dcd6:	4770      	bx	lr
