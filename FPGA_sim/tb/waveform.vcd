$version Generated by VerilatedVcd $end
$date Sun Jun  8 17:29:14 2025 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 F clk $end
  $var wire  1 Q eol_in $end
  $var wire  1 V eol_out $end
  $var wire 16 H in_data[0] [15:0] $end
  $var wire 16 I in_data[1] [15:0] $end
  $var wire 16 J in_data[2] [15:0] $end
  $var wire 16 K in_data[3] [15:0] $end
  $var wire 16 L in_data[4] [15:0] $end
  $var wire 16 M in_data[5] [15:0] $end
  $var wire 16 N in_data[6] [15:0] $end
  $var wire 16 O in_data[7] [15:0] $end
  $var wire  1 T in_ready $end
  $var wire  4 P num_valid_inputs [3:0] $end
  $var wire  1 Y out_ready $end
  $var wire  1 G resetn $end
  $var wire  1 R sof_in $end
  $var wire  1 W sof_out $end
  $var wire 16 U sum_out [15:0] $end
  $var wire  1 S valid_in $end
  $var wire  1 X valid_out $end
  $scope module adder_tree $end
   $var wire 32 Z DATA_WIDTH [31:0] $end
   $var wire 32 \ MAX_LEVELS [31:0] $end
   $var wire 32 [ NUM_INPUTS [31:0] $end
   $var wire  1 F clk $end
   $var wire 16 # data_sum[0][0] [15:0] $end
   $var wire 16 $ data_sum[0][1] [15:0] $end
   $var wire 16 % data_sum[0][2] [15:0] $end
   $var wire 16 & data_sum[0][3] [15:0] $end
   $var wire 16 ' data_sum[0][4] [15:0] $end
   $var wire 16 ( data_sum[0][5] [15:0] $end
   $var wire 16 ) data_sum[0][6] [15:0] $end
   $var wire 16 * data_sum[0][7] [15:0] $end
   $var wire 16 + data_sum[1][0] [15:0] $end
   $var wire 16 , data_sum[1][1] [15:0] $end
   $var wire 16 - data_sum[1][2] [15:0] $end
   $var wire 16 . data_sum[1][3] [15:0] $end
   $var wire 16 / data_sum[1][4] [15:0] $end
   $var wire 16 0 data_sum[1][5] [15:0] $end
   $var wire 16 1 data_sum[1][6] [15:0] $end
   $var wire 16 2 data_sum[1][7] [15:0] $end
   $var wire 16 3 data_sum[2][0] [15:0] $end
   $var wire 16 4 data_sum[2][1] [15:0] $end
   $var wire 16 5 data_sum[2][2] [15:0] $end
   $var wire 16 6 data_sum[2][3] [15:0] $end
   $var wire 16 7 data_sum[2][4] [15:0] $end
   $var wire 16 8 data_sum[2][5] [15:0] $end
   $var wire 16 9 data_sum[2][6] [15:0] $end
   $var wire 16 : data_sum[2][7] [15:0] $end
   $var wire 16 ; data_sum[3][0] [15:0] $end
   $var wire 16 < data_sum[3][1] [15:0] $end
   $var wire 16 = data_sum[3][2] [15:0] $end
   $var wire 16 > data_sum[3][3] [15:0] $end
   $var wire 16 ? data_sum[3][4] [15:0] $end
   $var wire 16 @ data_sum[3][5] [15:0] $end
   $var wire 16 A data_sum[3][6] [15:0] $end
   $var wire 16 B data_sum[3][7] [15:0] $end
   $var wire  1 Q eol_in $end
   $var wire  1 V eol_out $end
   $var wire  4 C eol_shift_reg [3:0] $end
   $var wire 16 H in_data[0] [15:0] $end
   $var wire 16 I in_data[1] [15:0] $end
   $var wire 16 J in_data[2] [15:0] $end
   $var wire 16 K in_data[3] [15:0] $end
   $var wire 16 L in_data[4] [15:0] $end
   $var wire 16 M in_data[5] [15:0] $end
   $var wire 16 N in_data[6] [15:0] $end
   $var wire 16 O in_data[7] [15:0] $end
   $var wire  1 T in_ready $end
   $var wire  4 P num_valid_inputs [3:0] $end
   $var wire  1 Y out_ready $end
   $var wire  1 G resetn $end
   $var wire  1 R sof_in $end
   $var wire  1 W sof_out $end
   $var wire  4 D sof_shift_reg [3:0] $end
   $var wire 16 U sum_out [15:0] $end
   $var wire  1 S valid_in $end
   $var wire  1 X valid_out $end
   $var wire  4 E valid_shift_reg [3:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000 #
b0000000000000000 $
b0000000000000000 %
b0000000000000000 &
b0000000000000000 '
b0000000000000000 (
b0000000000000000 )
b0000000000000000 *
b0000000000000000 +
b0000000000000000 ,
b0000000000000000 -
b0000000000000000 .
b0000000000000000 /
b0000000000000000 0
b0000000000000000 1
b0000000000000000 2
b0000000000000000 3
b0000000000000000 4
b0000000000000000 5
b0000000000000000 6
b0000000000000000 7
b0000000000000000 8
b0000000000000000 9
b0000000000000000 :
b0000000000000000 ;
b0000000000000000 <
b0000000000000000 =
b0000000000000000 >
b0000000000000000 ?
b0000000000000000 @
b0000000000000000 A
b0000000000000000 B
b0000 C
b0000 D
b0000 E
1F
1G
b0000000000000000 H
b0000000000000000 I
b0000000000000000 J
b0000000000000000 K
b0000000000000000 L
b0000000000000000 M
b0000000000000000 N
b0000000000000000 O
b0000 P
0Q
0R
0S
0T
b0000000000000000 U
0V
0W
0X
0Y
b00000000000000000000000000010000 Z
b00000000000000000000000000001000 [
b00000000000000000000000000000011 \
#1
0F
#2
b0000010000000000 #
b0000010000000000 $
b0000010000000000 %
b0000010000000000 &
b0000010000000000 '
b0000010000000000 (
b0000010000000000 )
b0000010000000000 *
b0001 E
1F
b0000010000000000 H
b0000010000000000 I
b0000010000000000 J
b0000010000000000 K
b0000010000000000 L
b0000010000000000 M
b0000010000000000 N
b0000010000000000 O
b1000 P
1S
#3
0F
#4
b0000000000000000 #
b0000000000000000 $
b0000000000000000 %
b0000000000000000 &
b0000000000000000 '
b0000000000000000 (
b0000000000000000 )
b0000000000000000 *
b0000100000000000 +
b0000100000000000 ,
b0000100000000000 -
b0000100000000000 .
b0010 E
1F
b0000000000000000 H
b0000000000000000 I
b0000000000000000 J
b0000000000000000 K
b0000000000000000 L
b0000000000000000 M
b0000000000000000 N
b0000000000000000 O
b0000 P
0S
#5
0F
#6
b0000000000000000 +
b0000000000000000 ,
b0000000000000000 -
b0000000000000000 .
b0001000000000000 3
b0001000000000000 4
b0100 E
1F
#7
0F
#8
b0000000000000000 3
b0000000000000000 4
b0010000000000000 ;
b1000 E
1F
b0010000000000000 U
1X
#9
0F
#10
b0000000000000000 ;
b0000 E
1F
b0000000000000000 U
0X
#11
0F
#12
1F
#13
0F
