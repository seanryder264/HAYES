
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  0800d488  0800d488  0000e488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dba0  0800dba0  0000f188  2**0
                  CONTENTS
  4 .ARM          00000008  0800dba0  0800dba0  0000eba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dba8  0800dba8  0000f188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dba8  0800dba8  0000eba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbac  0800dbac  0000ebac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  0800dbb0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f188  2**0
                  CONTENTS
 10 .bss          00002a0c  20000188  20000188  0000f188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002b94  20002b94  0000f188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f188  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021de9  00000000  00000000  0000f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000542f  00000000  00000000  00030fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e80  00000000  00000000  000363d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001768  00000000  00000000  00038250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025270  00000000  00000000  000399b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029818  00000000  00000000  0005ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3207  00000000  00000000  00088440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015b647  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f00  00000000  00000000  0015b68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0016358c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000188 	.word	0x20000188
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d470 	.word	0x0800d470

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	0800d470 	.word	0x0800d470

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	@ (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	@ (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	@ 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	200001a4 	.word	0x200001a4
 8000210:	200001f8 	.word	0x200001f8

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b090      	sub	sp, #64	@ 0x40
 8000218:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f001 fc11 	bl	8001a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f863 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 fc15 	bl	8000a50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000226:	f000 fbd1 	bl	80009cc <MX_DMA_Init>
  MX_ADC3_Init();
 800022a:	f000 f98b 	bl	8000544 <MX_ADC3_Init>
  MX_COMP3_Init();
 800022e:	f000 fa59 	bl	80006e4 <MX_COMP3_Init>
  MX_COMP4_Init();
 8000232:	f000 fa85 	bl	8000740 <MX_COMP4_Init>
  MX_COMP5_Init();
 8000236:	f000 fab1 	bl	800079c <MX_COMP5_Init>
  MX_COMP6_Init();
 800023a:	f000 fadd 	bl	80007f8 <MX_COMP6_Init>
  MX_ADC1_Init();
 800023e:	f000 f8b3 	bl	80003a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000242:	f000 f921 	bl	8000488 <MX_ADC2_Init>
  MX_ADC4_Init();
 8000246:	f000 f9ef 	bl	8000628 <MX_ADC4_Init>
  MX_I2C2_Init();
 800024a:	f000 fb03 	bl	8000854 <MX_I2C2_Init>
  MX_SPI1_Init();
 800024e:	f000 fb41 	bl	80008d4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000252:	f000 fb7d 	bl	8000950 <MX_SPI3_Init>





  ssd1306_Init();
 8000256:	f001 f9f3 	bl	8001640 <ssd1306_Init>
  ssd1306_Fill(White);
 800025a:	2001      	movs	r0, #1
 800025c:	f001 fa5a 	bl	8001714 <ssd1306_Fill>
  ssd1306_SetCursor(6, 20);
 8000260:	2114      	movs	r1, #20
 8000262:	2006      	movs	r0, #6
 8000264:	f001 fba2 	bl	80019ac <ssd1306_SetCursor>
  ssd1306_WriteString(startupmessage, Font_6x8, Black);
 8000268:	4b19      	ldr	r3, [pc, #100]	@ (80002d0 <main+0xbc>)
 800026a:	6818      	ldr	r0, [r3, #0]
 800026c:	4b19      	ldr	r3, [pc, #100]	@ (80002d4 <main+0xc0>)
 800026e:	2200      	movs	r2, #0
 8000270:	9200      	str	r2, [sp, #0]
 8000272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000274:	f001 fb74 	bl	8001960 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000278:	f001 fa64 	bl	8001744 <ssd1306_UpdateScreen>

  MX_USB_DEVICE_Init();
 800027c:	f00c fc04 	bl	800ca88 <MX_USB_DEVICE_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of USB_Transmit */
  osThreadDef(USB_Transmit, StartUSB_Transmit, osPriorityNormal, 0, 128);
 8000280:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <main+0xc4>)
 8000282:	f107 041c 	add.w	r4, r7, #28
 8000286:	461d      	mov	r5, r3
 8000288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_TransmitHandle = osThreadCreate(osThread(USB_Transmit), NULL);
 8000294:	f107 031c 	add.w	r3, r7, #28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f00b f9bf 	bl	800b61e <osThreadCreate>
 80002a0:	4603      	mov	r3, r0
 80002a2:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <main+0xc8>)
 80002a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityLow, 0, 128);
 80002a6:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <main+0xcc>)
 80002a8:	463c      	mov	r4, r7
 80002aa:	461d      	mov	r5, r3
 80002ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80002b8:	463b      	mov	r3, r7
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f00b f9ae 	bl	800b61e <osThreadCreate>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a07      	ldr	r2, [pc, #28]	@ (80002e4 <main+0xd0>)
 80002c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002c8:	f00b f9a2 	bl	800b610 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <main+0xb8>
 80002d0:	20000004 	.word	0x20000004
 80002d4:	0800db74 	.word	0x0800db74
 80002d8:	0800d4b4 	.word	0x0800d4b4
 80002dc:	20000824 	.word	0x20000824
 80002e0:	0800d4dc 	.word	0x0800d4dc
 80002e4:	20000828 	.word	0x20000828

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b09e      	sub	sp, #120	@ 0x78
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002f2:	2228      	movs	r2, #40	@ 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f00d f88e 	bl	800d418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800030c:	463b      	mov	r3, r7
 800030e:	223c      	movs	r2, #60	@ 0x3c
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f00d f880 	bl	800d418 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000318:	2303      	movs	r3, #3
 800031a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800031c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000320:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000322:	2301      	movs	r3, #1
 8000324:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000326:	2301      	movs	r3, #1
 8000328:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032a:	2310      	movs	r3, #16
 800032c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	2302      	movs	r3, #2
 8000330:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000332:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000336:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000338:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800033c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000342:	4618      	mov	r0, r3
 8000344:	f005 fae6 	bl	8005914 <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800034e:	f000 fca1 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2302      	movs	r3, #2
 8000358:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000362:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000368:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f006 fb0e 	bl	8006990 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800037a:	f000 fc8b 	bl	8000c94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C2;
 800037e:	4b09      	ldr	r3, [pc, #36]	@ (80003a4 <SystemClock_Config+0xbc>)
 8000380:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000382:	2300      	movs	r3, #0
 8000384:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000386:	2300      	movs	r3, #0
 8000388:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	463b      	mov	r3, r7
 800038c:	4618      	mov	r0, r3
 800038e:	f006 fd31 	bl	8006df4 <HAL_RCCEx_PeriphCLKConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000398:	f000 fc7c 	bl	8000c94 <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3778      	adds	r7, #120	@ 0x78
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	00020040 	.word	0x00020040

080003a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	@ 0x28
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003ae:	f107 031c 	add.w	r3, r7, #28
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
 80003c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80003d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80003d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003da:	4b2a      	ldr	r3, [pc, #168]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e0:	4b28      	ldr	r3, [pc, #160]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003e6:	4b27      	ldr	r3, [pc, #156]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ec:	4b25      	ldr	r3, [pc, #148]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f4:	4b23      	ldr	r3, [pc, #140]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003fa:	4b22      	ldr	r3, [pc, #136]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000400:	4b20      	ldr	r3, [pc, #128]	@ (8000484 <MX_ADC1_Init+0xdc>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000406:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <MX_ADC1_Init+0xdc>)
 8000408:	2201      	movs	r2, #1
 800040a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800040c:	4b1d      	ldr	r3, [pc, #116]	@ (8000484 <MX_ADC1_Init+0xdc>)
 800040e:	2200      	movs	r2, #0
 8000410:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <MX_ADC1_Init+0xdc>)
 8000416:	2204      	movs	r2, #4
 8000418:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800041a:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <MX_ADC1_Init+0xdc>)
 800041c:	2200      	movs	r2, #0
 800041e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <MX_ADC1_Init+0xdc>)
 8000422:	2200      	movs	r2, #0
 8000424:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000426:	4817      	ldr	r0, [pc, #92]	@ (8000484 <MX_ADC1_Init+0xdc>)
 8000428:	f001 fb82 	bl	8001b30 <HAL_ADC_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000432:	f000 fc2f 	bl	8000c94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800043a:	f107 031c 	add.w	r3, r7, #28
 800043e:	4619      	mov	r1, r3
 8000440:	4810      	ldr	r0, [pc, #64]	@ (8000484 <MX_ADC1_Init+0xdc>)
 8000442:	f002 fb4d 	bl	8002ae0 <HAL_ADCEx_MultiModeConfigChannel>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800044c:	f000 fc22 	bl	8000c94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000450:	2305      	movs	r3, #5
 8000452:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000458:	2300      	movs	r3, #0
 800045a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	4619      	mov	r1, r3
 800046c:	4805      	ldr	r0, [pc, #20]	@ (8000484 <MX_ADC1_Init+0xdc>)
 800046e:	f002 f84d 	bl	800250c <HAL_ADC_ConfigChannel>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000478:	f000 fc0c 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800047c:	bf00      	nop
 800047e:	3728      	adds	r7, #40	@ 0x28
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200003f8 	.word	0x200003f8

08000488 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800048e:	463b      	mov	r3, r7
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
 800049c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800049e:	4b27      	ldr	r3, [pc, #156]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004a0:	4a27      	ldr	r2, [pc, #156]	@ (8000540 <MX_ADC2_Init+0xb8>)
 80004a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004a4:	4b25      	ldr	r3, [pc, #148]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004ac:	4b23      	ldr	r3, [pc, #140]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004b2:	4b22      	ldr	r3, [pc, #136]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004b8:	4b20      	ldr	r3, [pc, #128]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004be:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004c6:	4b1d      	ldr	r3, [pc, #116]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004cc:	4b1b      	ldr	r3, [pc, #108]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d2:	4b1a      	ldr	r3, [pc, #104]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80004d8:	4b18      	ldr	r3, [pc, #96]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004da:	2201      	movs	r2, #1
 80004dc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80004de:	4b17      	ldr	r3, [pc, #92]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004e8:	2204      	movs	r2, #4
 80004ea:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80004ec:	4b13      	ldr	r3, [pc, #76]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004f2:	4b12      	ldr	r3, [pc, #72]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004f8:	4810      	ldr	r0, [pc, #64]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004fa:	f001 fb19 	bl	8001b30 <HAL_ADC_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000504:	f000 fbc6 	bl	8000c94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000508:	2303      	movs	r3, #3
 800050a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800050c:	2301      	movs	r3, #1
 800050e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000520:	463b      	mov	r3, r7
 8000522:	4619      	mov	r1, r3
 8000524:	4805      	ldr	r0, [pc, #20]	@ (800053c <MX_ADC2_Init+0xb4>)
 8000526:	f001 fff1 	bl	800250c <HAL_ADC_ConfigChannel>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000530:	f000 fbb0 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000448 	.word	0x20000448
 8000540:	50000100 	.word	0x50000100

08000544 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	@ 0x28
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
 8000564:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000566:	4b2e      	ldr	r3, [pc, #184]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000568:	4a2e      	ldr	r2, [pc, #184]	@ (8000624 <MX_ADC3_Init+0xe0>)
 800056a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800056c:	4b2c      	ldr	r3, [pc, #176]	@ (8000620 <MX_ADC3_Init+0xdc>)
 800056e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000572:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000574:	4b2a      	ldr	r3, [pc, #168]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800057a:	4b29      	ldr	r3, [pc, #164]	@ (8000620 <MX_ADC3_Init+0xdc>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000580:	4b27      	ldr	r3, [pc, #156]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000582:	2200      	movs	r2, #0
 8000584:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000586:	4b26      	ldr	r3, [pc, #152]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000588:	2200      	movs	r2, #0
 800058a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800058e:	4b24      	ldr	r3, [pc, #144]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000590:	2200      	movs	r2, #0
 8000592:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000594:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000596:	2201      	movs	r2, #1
 8000598:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800059a:	4b21      	ldr	r3, [pc, #132]	@ (8000620 <MX_ADC3_Init+0xdc>)
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80005a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80005a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005b0:	2204      	movs	r2, #4
 80005b2:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005ba:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005bc:	2200      	movs	r2, #0
 80005be:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005c0:	4817      	ldr	r0, [pc, #92]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005c2:	f001 fab5 	bl	8001b30 <HAL_ADC_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 80005cc:	f000 fb62 	bl	8000c94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	4619      	mov	r1, r3
 80005da:	4811      	ldr	r0, [pc, #68]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005dc:	f002 fa80 	bl	8002ae0 <HAL_ADCEx_MultiModeConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 80005e6:	f000 fb55 	bl	8000c94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4619      	mov	r1, r3
 8000606:	4806      	ldr	r0, [pc, #24]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000608:	f001 ff80 	bl	800250c <HAL_ADC_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000612:	f000 fb3f 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	@ 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000498 	.word	0x20000498
 8000624:	50000400 	.word	0x50000400

08000628 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
 800063c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800063e:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000640:	4a27      	ldr	r2, [pc, #156]	@ (80006e0 <MX_ADC4_Init+0xb8>)
 8000642:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000644:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000646:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800064a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800064c:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <MX_ADC4_Init+0xb4>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000652:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000658:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <MX_ADC4_Init+0xb4>)
 800065a:	2200      	movs	r2, #0
 800065c:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800065e:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000668:	2200      	movs	r2, #0
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066c:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_ADC4_Init+0xb4>)
 800066e:	2201      	movs	r2, #1
 8000670:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000672:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000678:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <MX_ADC4_Init+0xb4>)
 800067a:	2201      	movs	r2, #1
 800067c:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000688:	2204      	movs	r2, #4
 800068a:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800068c:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_ADC4_Init+0xb4>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000694:	2200      	movs	r2, #0
 8000696:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000698:	4810      	ldr	r0, [pc, #64]	@ (80006dc <MX_ADC4_Init+0xb4>)
 800069a:	f001 fa49 	bl	8001b30 <HAL_ADC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 80006a4:	f000 faf6 	bl	8000c94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a8:	2303      	movs	r3, #3
 80006aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_ADC4_Init+0xb4>)
 80006c6:	f001 ff21 	bl	800250c <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 80006d0:	f000 fae0 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200004e8 	.word	0x200004e8
 80006e0:	50000500 	.word	0x50000500

080006e4 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 80006e8:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <MX_COMP3_Init+0x54>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	@ (800073c <MX_COMP3_Init+0x58>)
 80006ec:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_COMP3_Init+0x54>)
 80006f0:	2240      	movs	r2, #64	@ 0x40
 80006f2:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80006f4:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <MX_COMP3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_COMP3_Init+0x54>)
 80006fc:	227f      	movs	r2, #127	@ 0x7f
 80006fe:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000700:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <MX_COMP3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_COMP3_Init+0x54>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <MX_COMP3_Init+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hcomp3.Init.Mode = COMP_MODE_HIGHSPEED;
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_COMP3_Init+0x54>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  hcomp3.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <MX_COMP3_Init+0x54>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_COMP3_Init+0x54>)
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	@ (8000738 <MX_COMP3_Init+0x54>)
 8000726:	f002 fb33 	bl	8002d90 <HAL_COMP_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_COMP3_Init+0x50>
  {
    Error_Handler();
 8000730:	f000 fab0 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000648 	.word	0x20000648
 800073c:	40010024 	.word	0x40010024

08000740 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <MX_COMP4_Init+0x58>)
 8000748:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_COMP4_Init+0x54>)
 800074c:	2270      	movs	r2, #112	@ 0x70
 800074e:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_NONE;
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000758:	227f      	movs	r2, #127	@ 0x7f
 800075a:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800075c:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <MX_COMP4_Init+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <MX_COMP4_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_COMP4_Init+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000782:	f002 fb05 	bl	8002d90 <HAL_COMP_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_COMP4_Init+0x50>
  {
    Error_Handler();
 800078c:	f000 fa82 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000678 	.word	0x20000678
 8000798:	40010028 	.word	0x40010028

0800079c <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007a2:	4a14      	ldr	r2, [pc, #80]	@ (80007f4 <MX_COMP5_Init+0x58>)
 80007a4:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH2;
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007a8:	2250      	movs	r2, #80	@ 0x50
 80007aa:	605a      	str	r2, [r3, #4]
  hcomp5.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	609a      	str	r2, [r3, #8]
  hcomp5.Init.Output = COMP_OUTPUT_NONE;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007b4:	227f      	movs	r2, #127	@ 0x7f
 80007b6:	60da      	str	r2, [r3, #12]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hcomp5.Init.Mode = COMP_MODE_HIGHSPEED;
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hcomp5.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007de:	f002 fad7 	bl	8002d90 <HAL_COMP_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_COMP5_Init+0x50>
  {
    Error_Handler();
 80007e8:	f000 fa54 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200006a8 	.word	0x200006a8
 80007f4:	4001002c 	.word	0x4001002c

080007f8 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 80007fc:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_COMP6_Init+0x54>)
 80007fe:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <MX_COMP6_Init+0x58>)
 8000800:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 8000802:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_COMP6_Init+0x54>)
 8000804:	2270      	movs	r2, #112	@ 0x70
 8000806:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8000808:	4b10      	ldr	r3, [pc, #64]	@ (800084c <MX_COMP6_Init+0x54>)
 800080a:	2280      	movs	r2, #128	@ 0x80
 800080c:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_NONE;
 800080e:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_COMP6_Init+0x54>)
 8000810:	227f      	movs	r2, #127	@ 0x7f
 8000812:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000814:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <MX_COMP6_Init+0x54>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_COMP6_Init+0x54>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <MX_COMP6_Init+0x54>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hcomp6.Init.Mode = COMP_MODE_HIGHSPEED;
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_COMP6_Init+0x54>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hcomp6.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	@ (800084c <MX_COMP6_Init+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_COMP6_Init+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_COMP6_Init+0x54>)
 800083a:	f002 faa9 	bl	8002d90 <HAL_COMP_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_COMP6_Init+0x50>
  {
    Error_Handler();
 8000844:	f000 fa26 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200006d8 	.word	0x200006d8
 8000850:	40010030 	.word	0x40010030

08000854 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000858:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	@ (80008cc <MX_I2C2_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 800085e:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000860:	4a1b      	ldr	r2, [pc, #108]	@ (80008d0 <MX_I2C2_Init+0x7c>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000864:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800088e:	480e      	ldr	r0, [pc, #56]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000890:	f002 fec2 	bl	8003618 <HAL_I2C_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800089a:	f000 f9fb 	bl	8000c94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089e:	2100      	movs	r1, #0
 80008a0:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <MX_I2C2_Init+0x74>)
 80008a2:	f003 fad7 	bl	8003e54 <HAL_I2CEx_ConfigAnalogFilter>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f000 f9f2 	bl	8000c94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_I2C2_Init+0x74>)
 80008b4:	f003 fb19 	bl	8003eea <HAL_I2CEx_ConfigDigitalFilter>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008be:	f000 f9e9 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000708 	.word	0x20000708
 80008cc:	40005800 	.word	0x40005800
 80008d0:	00201d2b 	.word	0x00201d2b

080008d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	@ (800094c <MX_SPI1_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008ee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80008f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000906:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_SPI1_Init+0x74>)
 800090a:	2208      	movs	r2, #8
 800090c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000922:	2207      	movs	r2, #7
 8000924:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_SPI1_Init+0x74>)
 800092e:	2208      	movs	r2, #8
 8000930:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000934:	f006 fc0e 	bl	8007154 <HAL_SPI_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 f9a9 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000075c 	.word	0x2000075c
 800094c:	40013000 	.word	0x40013000

08000950 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000954:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	@ (80009c8 <MX_SPI3_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <MX_SPI3_Init+0x74>)
 800095c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000960:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000968:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <MX_SPI3_Init+0x74>)
 800096a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800096e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000970:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000976:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_SPI3_Init+0x74>)
 800097e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000982:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_SPI3_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_SPI3_Init+0x74>)
 800099e:	2207      	movs	r2, #7
 80009a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_SPI3_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_SPI3_Init+0x74>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_SPI3_Init+0x74>)
 80009b0:	f006 fbd0 	bl	8007154 <HAL_SPI_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009ba:	f000 f96b 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200007c0 	.word	0x200007c0
 80009c8:	40003c00 	.word	0x40003c00

080009cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <MX_DMA_Init+0x80>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a4c <MX_DMA_Init+0x80>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <MX_DMA_Init+0x80>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ea:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <MX_DMA_Init+0x80>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a17      	ldr	r2, [pc, #92]	@ (8000a4c <MX_DMA_Init+0x80>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <MX_DMA_Init+0x80>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2105      	movs	r1, #5
 8000a06:	200b      	movs	r0, #11
 8000a08:	f002 fb24 	bl	8003054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a0c:	200b      	movs	r0, #11
 8000a0e:	f002 fb3d 	bl	800308c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2105      	movs	r1, #5
 8000a16:	2038      	movs	r0, #56	@ 0x38
 8000a18:	f002 fb1c 	bl	8003054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000a1c:	2038      	movs	r0, #56	@ 0x38
 8000a1e:	f002 fb35 	bl	800308c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2105      	movs	r1, #5
 8000a26:	2039      	movs	r0, #57	@ 0x39
 8000a28:	f002 fb14 	bl	8003054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000a2c:	2039      	movs	r0, #57	@ 0x39
 8000a2e:	f002 fb2d 	bl	800308c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2105      	movs	r1, #5
 8000a36:	203c      	movs	r0, #60	@ 0x3c
 8000a38:	f002 fb0c 	bl	8003054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000a3c:	203c      	movs	r0, #60	@ 0x3c
 8000a3e:	f002 fb25 	bl	800308c <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	@ 0x28
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b58      	ldr	r3, [pc, #352]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a57      	ldr	r2, [pc, #348]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b55      	ldr	r3, [pc, #340]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a7e:	4b52      	ldr	r3, [pc, #328]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a51      	ldr	r2, [pc, #324]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a88:	6153      	str	r3, [r2, #20]
 8000a8a:	4b4f      	ldr	r3, [pc, #316]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b4c      	ldr	r3, [pc, #304]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a4b      	ldr	r2, [pc, #300]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b49      	ldr	r3, [pc, #292]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b46      	ldr	r3, [pc, #280]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a45      	ldr	r2, [pc, #276]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ab8:	6153      	str	r3, [r2, #20]
 8000aba:	4b43      	ldr	r3, [pc, #268]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_COM_GPIO_Port, INPUT_COM_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4840      	ldr	r0, [pc, #256]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000acc:	f002 fd8c 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUTPUT_COM_Pin|TP906_Pin|TP907_Pin|MUX_A_Pin
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f640 31f1 	movw	r1, #3057	@ 0xbf1
 8000ad6:	483e      	ldr	r0, [pc, #248]	@ (8000bd0 <MX_GPIO_Init+0x180>)
 8000ad8:	f002 fd86 	bl	80035e8 <HAL_GPIO_WritePin>
                          |MUX_B_Pin|MUX_C_Pin|MUX_INHIBIT_Pin|UI_RCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP908_Pin|TX_SLEEP_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae6:	f002 fd7f 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP909_Pin|PUSH_2_Pin|TX_RCLK_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000af0:	4838      	ldr	r0, [pc, #224]	@ (8000bd4 <MX_GPIO_Init+0x184>)
 8000af2:	f002 fd79 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OFFSET_CENTER_Pin OFFSET_RIGHT_Pin OFFSET_UP_Pin SCALE_B_Pin
                           SCALE_A_Pin SCALE_PUSH_Pin */
  GPIO_InitStruct.Pin = OFFSET_CENTER_Pin|OFFSET_RIGHT_Pin|OFFSET_UP_Pin|SCALE_B_Pin
 8000af6:	f24e 030e 	movw	r3, #57358	@ 0xe00e
 8000afa:	617b      	str	r3, [r7, #20]
                          |SCALE_A_Pin|SCALE_PUSH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4831      	ldr	r0, [pc, #196]	@ (8000bd0 <MX_GPIO_Init+0x180>)
 8000b0c:	f002 fbf2 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_COM_Pin */
  GPIO_InitStruct.Pin = INPUT_COM_Pin;
 8000b10:	2302      	movs	r3, #2
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_COM_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4829      	ldr	r0, [pc, #164]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000b28:	f002 fbe4 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_COM_Pin TP906_Pin TP907_Pin MUX_A_Pin
                           MUX_B_Pin MUX_C_Pin MUX_INHIBIT_Pin UI_RCLK_Pin */
  GPIO_InitStruct.Pin = OUTPUT_COM_Pin|TP906_Pin|TP907_Pin|MUX_A_Pin
 8000b2c:	f640 33f1 	movw	r3, #3057	@ 0xbf1
 8000b30:	617b      	str	r3, [r7, #20]
                          |MUX_B_Pin|MUX_C_Pin|MUX_INHIBIT_Pin|UI_RCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4822      	ldr	r0, [pc, #136]	@ (8000bd0 <MX_GPIO_Init+0x180>)
 8000b46:	f002 fbd5 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP908_Pin TX_SLEEP_Pin */
  GPIO_InitStruct.Pin = TP908_Pin|TX_SLEEP_Pin;
 8000b4a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b66:	f002 fbc5 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP909_Pin PUSH_2_Pin TX_RCLK_Pin */
  GPIO_InitStruct.Pin = TP909_Pin|PUSH_2_Pin|TX_RCLK_Pin;
 8000b6a:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4814      	ldr	r0, [pc, #80]	@ (8000bd4 <MX_GPIO_Init+0x184>)
 8000b84:	f002 fbb6 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_1_Pin */
  GPIO_InitStruct.Pin = PUSH_1_Pin;
 8000b88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_1_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba0:	f002 fba8 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_3_Pin OFFSET_UPB8_Pin OFFSET_DOWN_Pin */
  GPIO_InitStruct.Pin = PUSH_3_Pin|OFFSET_UPB8_Pin|OFFSET_DOWN_Pin;
 8000ba4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <MX_GPIO_Init+0x184>)
 8000bba:	f002 fb9b 	bl	80032f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	@ 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	48001400 	.word	0x48001400
 8000bd0:	48000800 	.word	0x48000800
 8000bd4:	48000400 	.word	0x48000400

08000bd8 <StartUSB_Transmit>:
  * @retval None
  */
/* USER CODE END Header_StartUSB_Transmit */

void StartUSB_Transmit(void const * argument)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  osDelay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f00a fd68 	bl	800b6b6 <osDelay>
  for(;;)
  {
	  osDelay(1);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f00a fd65 	bl	800b6b6 <osDelay>
	  if (CDC_Transmit_FS((uint8_t *) usbdata, strlen(usbdata)) != USBD_OK) {
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <StartUSB_Transmit+0x78>)
 8000bee:	681c      	ldr	r4, [r3, #0]
 8000bf0:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <StartUSB_Transmit+0x78>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff faeb 	bl	80001d0 <strlen>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4620      	mov	r0, r4
 8000c02:	f00b ffff 	bl	800cc04 <CDC_Transmit_FS>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d010      	beq.n	8000c2e <StartUSB_Transmit+0x56>
		  ssd1306_Fill(White);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 fd81 	bl	8001714 <ssd1306_Fill>
	  	  ssd1306_SetCursor(6, 20);
 8000c12:	2114      	movs	r1, #20
 8000c14:	2006      	movs	r0, #6
 8000c16:	f000 fec9 	bl	80019ac <ssd1306_SetCursor>
	  	  ssd1306_WriteString("COM not established", Font_6x8, Black);
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <StartUSB_Transmit+0x7c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	9200      	str	r2, [sp, #0]
 8000c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c22:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <StartUSB_Transmit+0x80>)
 8000c24:	f000 fe9c 	bl	8001960 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8000c28:	f000 fd8c 	bl	8001744 <ssd1306_UpdateScreen>
 8000c2c:	e7db      	b.n	8000be6 <StartUSB_Transmit+0xe>
	  }
	  else {
		  ssd1306_Fill(White);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f000 fd70 	bl	8001714 <ssd1306_Fill>
	  	  ssd1306_SetCursor(6, 20);
 8000c34:	2114      	movs	r1, #20
 8000c36:	2006      	movs	r0, #6
 8000c38:	f000 feb8 	bl	80019ac <ssd1306_SetCursor>
	  	  ssd1306_WriteString("COM established", Font_6x8, Black);
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <StartUSB_Transmit+0x7c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	9200      	str	r2, [sp, #0]
 8000c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c44:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <StartUSB_Transmit+0x84>)
 8000c46:	f000 fe8b 	bl	8001960 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8000c4a:	f000 fd7b 	bl	8001744 <ssd1306_UpdateScreen>
	  osDelay(1);
 8000c4e:	e7ca      	b.n	8000be6 <StartUSB_Transmit+0xe>
 8000c50:	20000000 	.word	0x20000000
 8000c54:	0800db74 	.word	0x0800db74
 8000c58:	0800d4f8 	.word	0x0800d4f8
 8000c5c:	0800d50c 	.word	0x0800d50c

08000c60 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f00a fd24 	bl	800b6b6 <osDelay>
 8000c6e:	e7fb      	b.n	8000c68 <StartTask02+0x8>

08000c70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d101      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c82:	f000 fef3 	bl	8001a6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40012c00 	.word	0x40012c00

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <Error_Handler+0x8>

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <HAL_MspInit+0x4c>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	4a10      	ldr	r2, [pc, #64]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6193      	str	r3, [r2, #24]
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <HAL_MspInit+0x4c>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	61d3      	str	r3, [r2, #28]
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	210f      	movs	r1, #15
 8000cda:	f06f 0001 	mvn.w	r0, #1
 8000cde:	f002 f9b9 	bl	8003054 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b090      	sub	sp, #64	@ 0x40
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d10:	d15e      	bne.n	8000dd0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d12:	4b94      	ldr	r3, [pc, #592]	@ (8000f64 <HAL_ADC_MspInit+0x274>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a92      	ldr	r2, [pc, #584]	@ (8000f64 <HAL_ADC_MspInit+0x274>)
 8000d1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d1c:	4b91      	ldr	r3, [pc, #580]	@ (8000f64 <HAL_ADC_MspInit+0x274>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d10b      	bne.n	8000d3c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d24:	4b90      	ldr	r3, [pc, #576]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	4a8f      	ldr	r2, [pc, #572]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	6153      	str	r3, [r2, #20]
 8000d30:	4b8d      	ldr	r3, [pc, #564]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d3c:	4b8a      	ldr	r3, [pc, #552]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	4a89      	ldr	r2, [pc, #548]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000d42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d46:	6153      	str	r3, [r2, #20]
 8000d48:	4b87      	ldr	r3, [pc, #540]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = RX1_ADC_Pin;
 8000d54:	2310      	movs	r3, #16
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX1_ADC_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	4881      	ldr	r0, [pc, #516]	@ (8000f6c <HAL_ADC_MspInit+0x27c>)
 8000d68:	f002 fac4 	bl	80032f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d6c:	4b80      	ldr	r3, [pc, #512]	@ (8000f70 <HAL_ADC_MspInit+0x280>)
 8000d6e:	4a81      	ldr	r2, [pc, #516]	@ (8000f74 <HAL_ADC_MspInit+0x284>)
 8000d70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d72:	4b7f      	ldr	r3, [pc, #508]	@ (8000f70 <HAL_ADC_MspInit+0x280>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d78:	4b7d      	ldr	r3, [pc, #500]	@ (8000f70 <HAL_ADC_MspInit+0x280>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d7e:	4b7c      	ldr	r3, [pc, #496]	@ (8000f70 <HAL_ADC_MspInit+0x280>)
 8000d80:	2280      	movs	r2, #128	@ 0x80
 8000d82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d84:	4b7a      	ldr	r3, [pc, #488]	@ (8000f70 <HAL_ADC_MspInit+0x280>)
 8000d86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d8c:	4b78      	ldr	r3, [pc, #480]	@ (8000f70 <HAL_ADC_MspInit+0x280>)
 8000d8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d94:	4b76      	ldr	r3, [pc, #472]	@ (8000f70 <HAL_ADC_MspInit+0x280>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d9a:	4b75      	ldr	r3, [pc, #468]	@ (8000f70 <HAL_ADC_MspInit+0x280>)
 8000d9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000da0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000da2:	4873      	ldr	r0, [pc, #460]	@ (8000f70 <HAL_ADC_MspInit+0x280>)
 8000da4:	f002 f980 	bl	80030a8 <HAL_DMA_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000dae:	f7ff ff71 	bl	8000c94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a6e      	ldr	r2, [pc, #440]	@ (8000f70 <HAL_ADC_MspInit+0x280>)
 8000db6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000db8:	4a6d      	ldr	r2, [pc, #436]	@ (8000f70 <HAL_ADC_MspInit+0x280>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2105      	movs	r1, #5
 8000dc2:	2012      	movs	r0, #18
 8000dc4:	f002 f946 	bl	8003054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000dc8:	2012      	movs	r0, #18
 8000dca:	f002 f95f 	bl	800308c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000dce:	e147      	b.n	8001060 <HAL_ADC_MspInit+0x370>
  else if(hadc->Instance==ADC2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a68      	ldr	r2, [pc, #416]	@ (8000f78 <HAL_ADC_MspInit+0x288>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d15f      	bne.n	8000e9a <HAL_ADC_MspInit+0x1aa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000dda:	4b62      	ldr	r3, [pc, #392]	@ (8000f64 <HAL_ADC_MspInit+0x274>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a60      	ldr	r2, [pc, #384]	@ (8000f64 <HAL_ADC_MspInit+0x274>)
 8000de2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000de4:	4b5f      	ldr	r3, [pc, #380]	@ (8000f64 <HAL_ADC_MspInit+0x274>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d10b      	bne.n	8000e04 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000dec:	4b5e      	ldr	r3, [pc, #376]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000dee:	695b      	ldr	r3, [r3, #20]
 8000df0:	4a5d      	ldr	r2, [pc, #372]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df6:	6153      	str	r3, [r2, #20]
 8000df8:	4b5b      	ldr	r3, [pc, #364]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e00:	623b      	str	r3, [r7, #32]
 8000e02:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b58      	ldr	r3, [pc, #352]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	4a57      	ldr	r2, [pc, #348]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e0e:	6153      	str	r3, [r2, #20]
 8000e10:	4b55      	ldr	r3, [pc, #340]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = RX3_ADC_Pin;
 8000e1c:	2340      	movs	r3, #64	@ 0x40
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e20:	2303      	movs	r3, #3
 8000e22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX3_ADC_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e32:	f002 fa5f 	bl	80032f4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8000e36:	4b51      	ldr	r3, [pc, #324]	@ (8000f7c <HAL_ADC_MspInit+0x28c>)
 8000e38:	4a51      	ldr	r2, [pc, #324]	@ (8000f80 <HAL_ADC_MspInit+0x290>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f7c <HAL_ADC_MspInit+0x28c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e42:	4b4e      	ldr	r3, [pc, #312]	@ (8000f7c <HAL_ADC_MspInit+0x28c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e48:	4b4c      	ldr	r3, [pc, #304]	@ (8000f7c <HAL_ADC_MspInit+0x28c>)
 8000e4a:	2280      	movs	r2, #128	@ 0x80
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e4e:	4b4b      	ldr	r3, [pc, #300]	@ (8000f7c <HAL_ADC_MspInit+0x28c>)
 8000e50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e56:	4b49      	ldr	r3, [pc, #292]	@ (8000f7c <HAL_ADC_MspInit+0x28c>)
 8000e58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e5c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000e5e:	4b47      	ldr	r3, [pc, #284]	@ (8000f7c <HAL_ADC_MspInit+0x28c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e64:	4b45      	ldr	r3, [pc, #276]	@ (8000f7c <HAL_ADC_MspInit+0x28c>)
 8000e66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e6c:	4843      	ldr	r0, [pc, #268]	@ (8000f7c <HAL_ADC_MspInit+0x28c>)
 8000e6e:	f002 f91b 	bl	80030a8 <HAL_DMA_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 8000e78:	f7ff ff0c 	bl	8000c94 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f7c <HAL_ADC_MspInit+0x28c>)
 8000e80:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e82:	4a3e      	ldr	r2, [pc, #248]	@ (8000f7c <HAL_ADC_MspInit+0x28c>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	2012      	movs	r0, #18
 8000e8e:	f002 f8e1 	bl	8003054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e92:	2012      	movs	r0, #18
 8000e94:	f002 f8fa 	bl	800308c <HAL_NVIC_EnableIRQ>
}
 8000e98:	e0e2      	b.n	8001060 <HAL_ADC_MspInit+0x370>
  else if(hadc->Instance==ADC3)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a39      	ldr	r2, [pc, #228]	@ (8000f84 <HAL_ADC_MspInit+0x294>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d179      	bne.n	8000f98 <HAL_ADC_MspInit+0x2a8>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000ea4:	4b38      	ldr	r3, [pc, #224]	@ (8000f88 <HAL_ADC_MspInit+0x298>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	4a37      	ldr	r2, [pc, #220]	@ (8000f88 <HAL_ADC_MspInit+0x298>)
 8000eac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000eae:	4b36      	ldr	r3, [pc, #216]	@ (8000f88 <HAL_ADC_MspInit+0x298>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d10b      	bne.n	8000ece <HAL_ADC_MspInit+0x1de>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	4a2b      	ldr	r2, [pc, #172]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000ebc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000ec0:	6153      	str	r3, [r2, #20]
 8000ec2:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000eca:	61bb      	str	r3, [r7, #24]
 8000ecc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a25      	ldr	r2, [pc, #148]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <HAL_ADC_MspInit+0x278>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RX2_ADC_Pin;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eea:	2303      	movs	r3, #3
 8000eec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX2_ADC_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4824      	ldr	r0, [pc, #144]	@ (8000f8c <HAL_ADC_MspInit+0x29c>)
 8000efa:	f002 f9fb 	bl	80032f4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <HAL_ADC_MspInit+0x2a0>)
 8000f00:	4a24      	ldr	r2, [pc, #144]	@ (8000f94 <HAL_ADC_MspInit+0x2a4>)
 8000f02:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f04:	4b22      	ldr	r3, [pc, #136]	@ (8000f90 <HAL_ADC_MspInit+0x2a0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <HAL_ADC_MspInit+0x2a0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <HAL_ADC_MspInit+0x2a0>)
 8000f12:	2280      	movs	r2, #128	@ 0x80
 8000f14:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f16:	4b1e      	ldr	r3, [pc, #120]	@ (8000f90 <HAL_ADC_MspInit+0x2a0>)
 8000f18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f1c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <HAL_ADC_MspInit+0x2a0>)
 8000f20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f24:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <HAL_ADC_MspInit+0x2a0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <HAL_ADC_MspInit+0x2a0>)
 8000f2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000f34:	4816      	ldr	r0, [pc, #88]	@ (8000f90 <HAL_ADC_MspInit+0x2a0>)
 8000f36:	f002 f8b7 	bl	80030a8 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_ADC_MspInit+0x254>
      Error_Handler();
 8000f40:	f7ff fea8 	bl	8000c94 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <HAL_ADC_MspInit+0x2a0>)
 8000f48:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f4a:	4a11      	ldr	r2, [pc, #68]	@ (8000f90 <HAL_ADC_MspInit+0x2a0>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2105      	movs	r1, #5
 8000f54:	202f      	movs	r0, #47	@ 0x2f
 8000f56:	f002 f87d 	bl	8003054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000f5a:	202f      	movs	r0, #47	@ 0x2f
 8000f5c:	f002 f896 	bl	800308c <HAL_NVIC_EnableIRQ>
}
 8000f60:	e07e      	b.n	8001060 <HAL_ADC_MspInit+0x370>
 8000f62:	bf00      	nop
 8000f64:	2000082c 	.word	0x2000082c
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48001400 	.word	0x48001400
 8000f70:	20000538 	.word	0x20000538
 8000f74:	40020008 	.word	0x40020008
 8000f78:	50000100 	.word	0x50000100
 8000f7c:	2000057c 	.word	0x2000057c
 8000f80:	40020408 	.word	0x40020408
 8000f84:	50000400 	.word	0x50000400
 8000f88:	20000830 	.word	0x20000830
 8000f8c:	48000400 	.word	0x48000400
 8000f90:	200005c0 	.word	0x200005c0
 8000f94:	40020458 	.word	0x40020458
  else if(hadc->Instance==ADC4)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a32      	ldr	r2, [pc, #200]	@ (8001068 <HAL_ADC_MspInit+0x378>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d15e      	bne.n	8001060 <HAL_ADC_MspInit+0x370>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000fa2:	4b32      	ldr	r3, [pc, #200]	@ (800106c <HAL_ADC_MspInit+0x37c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a30      	ldr	r2, [pc, #192]	@ (800106c <HAL_ADC_MspInit+0x37c>)
 8000faa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000fac:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <HAL_ADC_MspInit+0x37c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d10b      	bne.n	8000fcc <HAL_ADC_MspInit+0x2dc>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8001070 <HAL_ADC_MspInit+0x380>)
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8001070 <HAL_ADC_MspInit+0x380>)
 8000fba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000fbe:	6153      	str	r3, [r2, #20]
 8000fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001070 <HAL_ADC_MspInit+0x380>)
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <HAL_ADC_MspInit+0x380>)
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	4a27      	ldr	r2, [pc, #156]	@ (8001070 <HAL_ADC_MspInit+0x380>)
 8000fd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fd6:	6153      	str	r3, [r2, #20]
 8000fd8:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <HAL_ADC_MspInit+0x380>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX4_ADC_Pin;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	2303      	movs	r3, #3
 8000fec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX4_ADC_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481e      	ldr	r0, [pc, #120]	@ (8001074 <HAL_ADC_MspInit+0x384>)
 8000ffa:	f002 f97b 	bl	80032f4 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8001078 <HAL_ADC_MspInit+0x388>)
 8001000:	4a1e      	ldr	r2, [pc, #120]	@ (800107c <HAL_ADC_MspInit+0x38c>)
 8001002:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001004:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <HAL_ADC_MspInit+0x388>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800100a:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <HAL_ADC_MspInit+0x388>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001010:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_ADC_MspInit+0x388>)
 8001012:	2280      	movs	r2, #128	@ 0x80
 8001014:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001016:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <HAL_ADC_MspInit+0x388>)
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <HAL_ADC_MspInit+0x388>)
 8001020:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001024:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <HAL_ADC_MspInit+0x388>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_MEDIUM;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_ADC_MspInit+0x388>)
 800102e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001032:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001034:	4810      	ldr	r0, [pc, #64]	@ (8001078 <HAL_ADC_MspInit+0x388>)
 8001036:	f002 f837 	bl	80030a8 <HAL_DMA_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_ADC_MspInit+0x354>
      Error_Handler();
 8001040:	f7ff fe28 	bl	8000c94 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a0c      	ldr	r2, [pc, #48]	@ (8001078 <HAL_ADC_MspInit+0x388>)
 8001048:	639a      	str	r2, [r3, #56]	@ 0x38
 800104a:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <HAL_ADC_MspInit+0x388>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC4_IRQn, 5, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2105      	movs	r1, #5
 8001054:	203d      	movs	r0, #61	@ 0x3d
 8001056:	f001 fffd 	bl	8003054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 800105a:	203d      	movs	r0, #61	@ 0x3d
 800105c:	f002 f816 	bl	800308c <HAL_NVIC_EnableIRQ>
}
 8001060:	bf00      	nop
 8001062:	3740      	adds	r7, #64	@ 0x40
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	50000500 	.word	0x50000500
 800106c:	20000830 	.word	0x20000830
 8001070:	40021000 	.word	0x40021000
 8001074:	48000400 	.word	0x48000400
 8001078:	20000604 	.word	0x20000604
 800107c:	4002041c 	.word	0x4002041c

08001080 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	@ 0x38
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a56      	ldr	r2, [pc, #344]	@ (80011f8 <HAL_COMP_MspInit+0x178>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d132      	bne.n	8001108 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b56      	ldr	r3, [pc, #344]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a55      	ldr	r2, [pc, #340]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b53      	ldr	r3, [pc, #332]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b6:	623b      	str	r3, [r7, #32]
 80010b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b50      	ldr	r3, [pc, #320]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a4f      	ldr	r2, [pc, #316]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b4d      	ldr	r3, [pc, #308]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
    /**COMP3 GPIO Configuration
    PA4     ------> COMP3_INM
    PB14     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = RX1_COMP_Pin;
 80010d2:	2310      	movs	r3, #16
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d6:	2303      	movs	r3, #3
 80010d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RX1_COMP_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e8:	f002 f904 	bl	80032f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VREFB14_Pin;
 80010ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f2:	2303      	movs	r3, #3
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VREFB14_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010fe:	4619      	mov	r1, r3
 8001100:	483f      	ldr	r0, [pc, #252]	@ (8001200 <HAL_COMP_MspInit+0x180>)
 8001102:	f002 f8f7 	bl	80032f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 8001106:	e073      	b.n	80011f0 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP4)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a3d      	ldr	r2, [pc, #244]	@ (8001204 <HAL_COMP_MspInit+0x184>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d118      	bne.n	8001144 <HAL_COMP_MspInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	4b3a      	ldr	r3, [pc, #232]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	4a39      	ldr	r2, [pc, #228]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 8001118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800111c:	6153      	str	r3, [r2, #20]
 800111e:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001126:	61bb      	str	r3, [r7, #24]
 8001128:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RX2_COMP_Pin|VREF_Pin;
 800112a:	2305      	movs	r3, #5
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	4830      	ldr	r0, [pc, #192]	@ (8001200 <HAL_COMP_MspInit+0x180>)
 800113e:	f002 f8d9 	bl	80032f4 <HAL_GPIO_Init>
}
 8001142:	e055      	b.n	80011f0 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP5)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a2f      	ldr	r2, [pc, #188]	@ (8001208 <HAL_COMP_MspInit+0x188>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d132      	bne.n	80011b4 <HAL_COMP_MspInit+0x134>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	4a2a      	ldr	r2, [pc, #168]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 8001154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001158:	6153      	str	r3, [r2, #20]
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a24      	ldr	r2, [pc, #144]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_COMP_Pin;
 800117e:	2320      	movs	r3, #32
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RX3_COMP_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001194:	f002 f8ae 	bl	80032f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VREFB13_Pin;
 8001198:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800119c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119e:	2303      	movs	r3, #3
 80011a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VREFB13_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4814      	ldr	r0, [pc, #80]	@ (8001200 <HAL_COMP_MspInit+0x180>)
 80011ae:	f002 f8a1 	bl	80032f4 <HAL_GPIO_Init>
}
 80011b2:	e01d      	b.n	80011f0 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP6)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a14      	ldr	r2, [pc, #80]	@ (800120c <HAL_COMP_MspInit+0x18c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d118      	bne.n	80011f0 <HAL_COMP_MspInit+0x170>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011c8:	6153      	str	r3, [r2, #20]
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <HAL_COMP_MspInit+0x17c>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX4_COMP_Pin|VREFB15_Pin;
 80011d6:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011dc:	2303      	movs	r3, #3
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <HAL_COMP_MspInit+0x180>)
 80011ec:	f002 f882 	bl	80032f4 <HAL_GPIO_Init>
}
 80011f0:	bf00      	nop
 80011f2:	3738      	adds	r7, #56	@ 0x38
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40010024 	.word	0x40010024
 80011fc:	40021000 	.word	0x40021000
 8001200:	48000400 	.word	0x48000400
 8001204:	40010028 	.word	0x40010028
 8001208:	4001002c 	.word	0x4001002c
 800120c:	40010030 	.word	0x40010030

08001210 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a18      	ldr	r2, [pc, #96]	@ (8001290 <HAL_I2C_MspInit+0x80>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d129      	bne.n	8001286 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_I2C_MspInit+0x84>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <HAL_I2C_MspInit+0x84>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123c:	6153      	str	r3, [r2, #20]
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <HAL_I2C_MspInit+0x84>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 800124a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001250:	2312      	movs	r3, #18
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800125c:	2304      	movs	r3, #4
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126a:	f002 f843 	bl	80032f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_I2C_MspInit+0x84>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <HAL_I2C_MspInit+0x84>)
 8001274:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_I2C_MspInit+0x84>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	@ 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40005800 	.word	0x40005800
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	@ 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001370 <HAL_SPI_MspInit+0xd8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d128      	bne.n	800130c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	4a2d      	ldr	r2, [pc, #180]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 80012c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012c4:	6193      	str	r3, [r2, #24]
 80012c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a27      	ldr	r2, [pc, #156]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012dc:	6153      	str	r3, [r2, #20]
 80012de:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TX_CLK_Pin|TX_MOSI_Pin;
 80012ea:	2328      	movs	r3, #40	@ 0x28
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012fa:	2305      	movs	r3, #5
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	481c      	ldr	r0, [pc, #112]	@ (8001378 <HAL_SPI_MspInit+0xe0>)
 8001306:	f001 fff5 	bl	80032f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800130a:	e02d      	b.n	8001368 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a1a      	ldr	r2, [pc, #104]	@ (800137c <HAL_SPI_MspInit+0xe4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d128      	bne.n	8001368 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001316:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a16      	ldr	r2, [pc, #88]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 800131c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4a10      	ldr	r2, [pc, #64]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 8001334:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001338:	6153      	str	r3, [r2, #20]
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <HAL_SPI_MspInit+0xdc>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UI_SCK_Pin|UI_MOSI_Pin;
 8001346:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001358:	2306      	movs	r3, #6
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4807      	ldr	r0, [pc, #28]	@ (8001380 <HAL_SPI_MspInit+0xe8>)
 8001364:	f001 ffc6 	bl	80032f4 <HAL_GPIO_Init>
}
 8001368:	bf00      	nop
 800136a:	3730      	adds	r7, #48	@ 0x30
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40013000 	.word	0x40013000
 8001374:	40021000 	.word	0x40021000
 8001378:	48000400 	.word	0x48000400
 800137c:	40003c00 	.word	0x40003c00
 8001380:	48000800 	.word	0x48000800

08001384 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	@ 0x30
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001394:	4b2e      	ldr	r3, [pc, #184]	@ (8001450 <HAL_InitTick+0xcc>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a2d      	ldr	r2, [pc, #180]	@ (8001450 <HAL_InitTick+0xcc>)
 800139a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001450 <HAL_InitTick+0xcc>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ac:	f107 020c 	add.w	r2, r7, #12
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f005 fcea 	bl	8006d90 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013bc:	f005 fcc6 	bl	8006d4c <HAL_RCC_GetPCLK2Freq>
 80013c0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c4:	4a23      	ldr	r2, [pc, #140]	@ (8001454 <HAL_InitTick+0xd0>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0c9b      	lsrs	r3, r3, #18
 80013cc:	3b01      	subs	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013d0:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <HAL_InitTick+0xd4>)
 80013d2:	4a22      	ldr	r2, [pc, #136]	@ (800145c <HAL_InitTick+0xd8>)
 80013d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <HAL_InitTick+0xd4>)
 80013d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013de:	4a1e      	ldr	r2, [pc, #120]	@ (8001458 <HAL_InitTick+0xd4>)
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <HAL_InitTick+0xd4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_InitTick+0xd4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <HAL_InitTick+0xd4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80013f6:	4818      	ldr	r0, [pc, #96]	@ (8001458 <HAL_InitTick+0xd4>)
 80013f8:	f005 ff57 	bl	80072aa <HAL_TIM_Base_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001402:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001406:	2b00      	cmp	r3, #0
 8001408:	d11b      	bne.n	8001442 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800140a:	4813      	ldr	r0, [pc, #76]	@ (8001458 <HAL_InitTick+0xd4>)
 800140c:	f005 ffae 	bl	800736c <HAL_TIM_Base_Start_IT>
 8001410:	4603      	mov	r3, r0
 8001412:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001416:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800141a:	2b00      	cmp	r3, #0
 800141c:	d111      	bne.n	8001442 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800141e:	2019      	movs	r0, #25
 8001420:	f001 fe34 	bl	800308c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	d808      	bhi.n	800143c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800142a:	2200      	movs	r2, #0
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	2019      	movs	r0, #25
 8001430:	f001 fe10 	bl	8003054 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001434:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <HAL_InitTick+0xdc>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e002      	b.n	8001442 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001442:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001446:	4618      	mov	r0, r3
 8001448:	3730      	adds	r7, #48	@ 0x30
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	431bde83 	.word	0x431bde83
 8001458:	20000834 	.word	0x20000834
 800145c:	40012c00 	.word	0x40012c00
 8001460:	2000000c 	.word	0x2000000c

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <NMI_Handler+0x4>

0800146c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <MemManage_Handler+0x4>

0800147c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <UsageFault_Handler+0x4>

0800148c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <DMA1_Channel1_IRQHandler+0x10>)
 80014a2:	f001 fe48 	bl	8003136 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000538 	.word	0x20000538

080014b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014b4:	4803      	ldr	r0, [pc, #12]	@ (80014c4 <ADC1_2_IRQHandler+0x14>)
 80014b6:	f000 fd1b 	bl	8001ef0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80014ba:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <ADC1_2_IRQHandler+0x18>)
 80014bc:	f000 fd18 	bl	8001ef0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200003f8 	.word	0x200003f8
 80014c8:	20000448 	.word	0x20000448

080014cc <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80014d2:	f002 fe43 	bl	800415c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200026a0 	.word	0x200026a0

080014e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80014e6:	f005 ffab 	bl	8007440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000834 	.word	0x20000834

080014f4 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <ADC3_IRQHandler+0x10>)
 80014fa:	f000 fcf9 	bl	8001ef0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000498 	.word	0x20000498

08001508 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <DMA2_Channel1_IRQHandler+0x10>)
 800150e:	f001 fe12 	bl	8003136 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000057c 	.word	0x2000057c

0800151c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <DMA2_Channel2_IRQHandler+0x10>)
 8001522:	f001 fe08 	bl	8003136 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000604 	.word	0x20000604

08001530 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <DMA2_Channel5_IRQHandler+0x10>)
 8001536:	f001 fdfe 	bl	8003136 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200005c0 	.word	0x200005c0

08001544 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <ADC4_IRQHandler+0x10>)
 800154a:	f000 fcd1 	bl	8001ef0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200004e8 	.word	0x200004e8

08001558 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001580:	f7ff ffea 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	@ (80015bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <LoopForever+0xe>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	@ (80015c8 <LoopForever+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015aa:	f00b ff3d 	bl	800d428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ae:	f7fe fe31 	bl	8000214 <main>

080015b2 <LoopForever>:

LoopForever:
    b LoopForever
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80015c0:	0800dbb0 	.word	0x0800dbb0
  ldr r2, =_sbss
 80015c4:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80015c8:	20002b94 	.word	0x20002b94

080015cc <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <CAN_RX1_IRQHandler>

080015ce <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af04      	add	r7, sp, #16
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	2301      	movs	r3, #1
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	1dfb      	adds	r3, r7, #7
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2301      	movs	r3, #1
 80015f6:	2200      	movs	r2, #0
 80015f8:	2178      	movs	r1, #120	@ 0x78
 80015fa:	4803      	ldr	r0, [pc, #12]	@ (8001608 <ssd1306_WriteCommand+0x2c>)
 80015fc:	f002 f8a8 	bl	8003750 <HAL_I2C_Mem_Write>
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000708 	.word	0x20000708

0800160c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af04      	add	r7, sp, #16
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	f04f 32ff 	mov.w	r2, #4294967295
 800161e:	9202      	str	r2, [sp, #8]
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2301      	movs	r3, #1
 8001628:	2240      	movs	r2, #64	@ 0x40
 800162a:	2178      	movs	r1, #120	@ 0x78
 800162c:	4803      	ldr	r0, [pc, #12]	@ (800163c <ssd1306_WriteData+0x30>)
 800162e:	f002 f88f 	bl	8003750 <HAL_I2C_Mem_Write>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000708 	.word	0x20000708

08001640 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001644:	f7ff ffc3 	bl	80015ce <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001648:	2064      	movs	r0, #100	@ 0x64
 800164a:	f000 fa2f 	bl	8001aac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f9d8 	bl	8001a04 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001654:	2020      	movs	r0, #32
 8001656:	f7ff ffc1 	bl	80015dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff ffbe 	bl	80015dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001660:	20b0      	movs	r0, #176	@ 0xb0
 8001662:	f7ff ffbb 	bl	80015dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8001666:	20c0      	movs	r0, #192	@ 0xc0
 8001668:	f7ff ffb8 	bl	80015dc <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff ffb5 	bl	80015dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001672:	2010      	movs	r0, #16
 8001674:	f7ff ffb2 	bl	80015dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001678:	2040      	movs	r0, #64	@ 0x40
 800167a:	f7ff ffaf 	bl	80015dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800167e:	20ff      	movs	r0, #255	@ 0xff
 8001680:	f000 f9ac 	bl	80019dc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001684:	20a1      	movs	r0, #161	@ 0xa1
 8001686:	f7ff ffa9 	bl	80015dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800168a:	20a6      	movs	r0, #166	@ 0xa6
 800168c:	f7ff ffa6 	bl	80015dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001690:	20a8      	movs	r0, #168	@ 0xa8
 8001692:	f7ff ffa3 	bl	80015dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001696:	203f      	movs	r0, #63	@ 0x3f
 8001698:	f7ff ffa0 	bl	80015dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800169c:	20a4      	movs	r0, #164	@ 0xa4
 800169e:	f7ff ff9d 	bl	80015dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80016a2:	20d3      	movs	r0, #211	@ 0xd3
 80016a4:	f7ff ff9a 	bl	80015dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff ff97 	bl	80015dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80016ae:	20d5      	movs	r0, #213	@ 0xd5
 80016b0:	f7ff ff94 	bl	80015dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80016b4:	20f0      	movs	r0, #240	@ 0xf0
 80016b6:	f7ff ff91 	bl	80015dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80016ba:	20d9      	movs	r0, #217	@ 0xd9
 80016bc:	f7ff ff8e 	bl	80015dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80016c0:	2022      	movs	r0, #34	@ 0x22
 80016c2:	f7ff ff8b 	bl	80015dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80016c6:	20da      	movs	r0, #218	@ 0xda
 80016c8:	f7ff ff88 	bl	80015dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80016cc:	2012      	movs	r0, #18
 80016ce:	f7ff ff85 	bl	80015dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80016d2:	20db      	movs	r0, #219	@ 0xdb
 80016d4:	f7ff ff82 	bl	80015dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80016d8:	2020      	movs	r0, #32
 80016da:	f7ff ff7f 	bl	80015dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80016de:	208d      	movs	r0, #141	@ 0x8d
 80016e0:	f7ff ff7c 	bl	80015dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80016e4:	2014      	movs	r0, #20
 80016e6:	f7ff ff79 	bl	80015dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80016ea:	2001      	movs	r0, #1
 80016ec:	f000 f98a 	bl	8001a04 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80016f0:	2000      	movs	r0, #0
 80016f2:	f000 f80f 	bl	8001714 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80016f6:	f000 f825 	bl	8001744 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80016fa:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <ssd1306_Init+0xd0>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <ssd1306_Init+0xd0>)
 8001702:	2200      	movs	r2, #0
 8001704:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001706:	4b02      	ldr	r3, [pc, #8]	@ (8001710 <ssd1306_Init+0xd0>)
 8001708:	2201      	movs	r2, #1
 800170a:	711a      	strb	r2, [r3, #4]
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000c80 	.word	0x20000c80

08001714 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <ssd1306_Fill+0x14>
 8001724:	2300      	movs	r3, #0
 8001726:	e000      	b.n	800172a <ssd1306_Fill+0x16>
 8001728:	23ff      	movs	r3, #255	@ 0xff
 800172a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800172e:	4619      	mov	r1, r3
 8001730:	4803      	ldr	r0, [pc, #12]	@ (8001740 <ssd1306_Fill+0x2c>)
 8001732:	f00b fe71 	bl	800d418 <memset>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000880 	.word	0x20000880

08001744 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800174a:	2300      	movs	r3, #0
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	e016      	b.n	800177e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	3b50      	subs	r3, #80	@ 0x50
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff40 	bl	80015dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff ff3d 	bl	80015dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001762:	2010      	movs	r0, #16
 8001764:	f7ff ff3a 	bl	80015dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	01db      	lsls	r3, r3, #7
 800176c:	4a08      	ldr	r2, [pc, #32]	@ (8001790 <ssd1306_UpdateScreen+0x4c>)
 800176e:	4413      	add	r3, r2
 8001770:	2180      	movs	r1, #128	@ 0x80
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff4a 	bl	800160c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	3301      	adds	r3, #1
 800177c:	71fb      	strb	r3, [r7, #7]
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b07      	cmp	r3, #7
 8001782:	d9e5      	bls.n	8001750 <ssd1306_UpdateScreen+0xc>
    }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000880 	.word	0x20000880

08001794 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
 800179e:	460b      	mov	r3, r1
 80017a0:	71bb      	strb	r3, [r7, #6]
 80017a2:	4613      	mov	r3, r2
 80017a4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	db3d      	blt.n	800182a <ssd1306_DrawPixel+0x96>
 80017ae:	79bb      	ldrb	r3, [r7, #6]
 80017b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80017b2:	d83a      	bhi.n	800182a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80017b4:	797b      	ldrb	r3, [r7, #5]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d11a      	bne.n	80017f0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	08db      	lsrs	r3, r3, #3
 80017c0:	b2d8      	uxtb	r0, r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	01db      	lsls	r3, r3, #7
 80017c6:	4413      	add	r3, r2
 80017c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001838 <ssd1306_DrawPixel+0xa4>)
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
 80017cc:	b25a      	sxtb	r2, r3
 80017ce:	79bb      	ldrb	r3, [r7, #6]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	4313      	orrs	r3, r2
 80017de:	b259      	sxtb	r1, r3
 80017e0:	79fa      	ldrb	r2, [r7, #7]
 80017e2:	4603      	mov	r3, r0
 80017e4:	01db      	lsls	r3, r3, #7
 80017e6:	4413      	add	r3, r2
 80017e8:	b2c9      	uxtb	r1, r1
 80017ea:	4a13      	ldr	r2, [pc, #76]	@ (8001838 <ssd1306_DrawPixel+0xa4>)
 80017ec:	54d1      	strb	r1, [r2, r3]
 80017ee:	e01d      	b.n	800182c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	08db      	lsrs	r3, r3, #3
 80017f6:	b2d8      	uxtb	r0, r3
 80017f8:	4603      	mov	r3, r0
 80017fa:	01db      	lsls	r3, r3, #7
 80017fc:	4413      	add	r3, r2
 80017fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001838 <ssd1306_DrawPixel+0xa4>)
 8001800:	5cd3      	ldrb	r3, [r2, r3]
 8001802:	b25a      	sxtb	r2, r3
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	2101      	movs	r1, #1
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	b25b      	sxtb	r3, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	b25b      	sxtb	r3, r3
 8001816:	4013      	ands	r3, r2
 8001818:	b259      	sxtb	r1, r3
 800181a:	79fa      	ldrb	r2, [r7, #7]
 800181c:	4603      	mov	r3, r0
 800181e:	01db      	lsls	r3, r3, #7
 8001820:	4413      	add	r3, r2
 8001822:	b2c9      	uxtb	r1, r1
 8001824:	4a04      	ldr	r2, [pc, #16]	@ (8001838 <ssd1306_DrawPixel+0xa4>)
 8001826:	54d1      	strb	r1, [r2, r3]
 8001828:	e000      	b.n	800182c <ssd1306_DrawPixel+0x98>
        return;
 800182a:	bf00      	nop
    }
}
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000880 	.word	0x20000880

0800183c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b089      	sub	sp, #36	@ 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	4604      	mov	r4, r0
 8001844:	4638      	mov	r0, r7
 8001846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800184a:	4623      	mov	r3, r4
 800184c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	2b1f      	cmp	r3, #31
 8001852:	d902      	bls.n	800185a <ssd1306_WriteChar+0x1e>
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	2b7e      	cmp	r3, #126	@ 0x7e
 8001858:	d901      	bls.n	800185e <ssd1306_WriteChar+0x22>
        return 0;
 800185a:	2300      	movs	r3, #0
 800185c:	e079      	b.n	8001952 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <ssd1306_WriteChar+0x34>
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	3b20      	subs	r3, #32
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	e000      	b.n	8001872 <ssd1306_WriteChar+0x36>
 8001870:	783b      	ldrb	r3, [r7, #0]
 8001872:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001874:	4b39      	ldr	r3, [pc, #228]	@ (800195c <ssd1306_WriteChar+0x120>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	4413      	add	r3, r2
 800187e:	2b80      	cmp	r3, #128	@ 0x80
 8001880:	dc06      	bgt.n	8001890 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001882:	4b36      	ldr	r3, [pc, #216]	@ (800195c <ssd1306_WriteChar+0x120>)
 8001884:	885b      	ldrh	r3, [r3, #2]
 8001886:	461a      	mov	r2, r3
 8001888:	787b      	ldrb	r3, [r7, #1]
 800188a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800188c:	2b40      	cmp	r3, #64	@ 0x40
 800188e:	dd01      	ble.n	8001894 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001890:	2300      	movs	r3, #0
 8001892:	e05e      	b.n	8001952 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	e04d      	b.n	8001936 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	3b20      	subs	r3, #32
 80018a0:	7879      	ldrb	r1, [r7, #1]
 80018a2:	fb01 f303 	mul.w	r3, r1, r3
 80018a6:	4619      	mov	r1, r3
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	440b      	add	r3, r1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80018b4:	2300      	movs	r3, #0
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	e036      	b.n	8001928 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d013      	beq.n	80018f2 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80018ca:	4b24      	ldr	r3, [pc, #144]	@ (800195c <ssd1306_WriteChar+0x120>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	b2d8      	uxtb	r0, r3
 80018d8:	4b20      	ldr	r3, [pc, #128]	@ (800195c <ssd1306_WriteChar+0x120>)
 80018da:	885b      	ldrh	r3, [r3, #2]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff ff52 	bl	8001794 <ssd1306_DrawPixel>
 80018f0:	e017      	b.n	8001922 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <ssd1306_WriteChar+0x120>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	b2d8      	uxtb	r0, r3
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <ssd1306_WriteChar+0x120>)
 8001902:	885b      	ldrh	r3, [r3, #2]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4413      	add	r3, r2
 800190c:	b2d9      	uxtb	r1, r3
 800190e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001912:	2b00      	cmp	r3, #0
 8001914:	bf0c      	ite	eq
 8001916:	2301      	moveq	r3, #1
 8001918:	2300      	movne	r3, #0
 800191a:	b2db      	uxtb	r3, r3
 800191c:	461a      	mov	r2, r3
 800191e:	f7ff ff39 	bl	8001794 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	3301      	adds	r3, #1
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	429a      	cmp	r2, r3
 800192e:	d3c4      	bcc.n	80018ba <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	3301      	adds	r3, #1
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	787b      	ldrb	r3, [r7, #1]
 8001938:	461a      	mov	r2, r3
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	4293      	cmp	r3, r2
 800193e:	d3ac      	bcc.n	800189a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <ssd1306_WriteChar+0x120>)
 8001942:	881a      	ldrh	r2, [r3, #0]
 8001944:	7dfb      	ldrb	r3, [r7, #23]
 8001946:	b29b      	uxth	r3, r3
 8001948:	4413      	add	r3, r2
 800194a:	b29a      	uxth	r2, r3
 800194c:	4b03      	ldr	r3, [pc, #12]	@ (800195c <ssd1306_WriteChar+0x120>)
 800194e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	@ 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	bf00      	nop
 800195c:	20000c80 	.word	0x20000c80

08001960 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af02      	add	r7, sp, #8
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	4638      	mov	r0, r7
 800196a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800196e:	e013      	b.n	8001998 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	7818      	ldrb	r0, [r3, #0]
 8001974:	7e3b      	ldrb	r3, [r7, #24]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	463b      	mov	r3, r7
 800197a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800197c:	f7ff ff5e 	bl	800183c <ssd1306_WriteChar>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d002      	beq.n	8001992 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	e008      	b.n	80019a4 <ssd1306_WriteString+0x44>
        }
        str++;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3301      	adds	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e7      	bne.n	8001970 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	781b      	ldrb	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	460a      	mov	r2, r1
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	4613      	mov	r3, r2
 80019ba:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <ssd1306_SetCursor+0x2c>)
 80019c2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	4b03      	ldr	r3, [pc, #12]	@ (80019d8 <ssd1306_SetCursor+0x2c>)
 80019ca:	805a      	strh	r2, [r3, #2]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	20000c80 	.word	0x20000c80

080019dc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80019e6:	2381      	movs	r3, #129	@ 0x81
 80019e8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fdf5 	bl	80015dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fdf1 	bl	80015dc <ssd1306_WriteCommand>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001a14:	23af      	movs	r3, #175	@ 0xaf
 8001a16:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <ssd1306_SetDisplayOn+0x38>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	715a      	strb	r2, [r3, #5]
 8001a1e:	e004      	b.n	8001a2a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001a20:	23ae      	movs	r3, #174	@ 0xae
 8001a22:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <ssd1306_SetDisplayOn+0x38>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fdd5 	bl	80015dc <ssd1306_WriteCommand>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000c80 	.word	0x20000c80

08001a40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a44:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <HAL_Init+0x28>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a07      	ldr	r2, [pc, #28]	@ (8001a68 <HAL_Init+0x28>)
 8001a4a:	f043 0310 	orr.w	r3, r3, #16
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f001 faf4 	bl	800303e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a56:	200f      	movs	r0, #15
 8001a58:	f7ff fc94 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5c:	f7ff f920 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40022000 	.word	0x40022000

08001a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_IncTick+0x20>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_IncTick+0x24>)
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000010 	.word	0x20000010
 8001a90:	20000c88 	.word	0x20000c88

08001a94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_GetTick+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000c88 	.word	0x20000c88

08001aac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab4:	f7ff ffee 	bl	8001a94 <HAL_GetTick>
 8001ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d005      	beq.n	8001ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <HAL_Delay+0x44>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ad2:	bf00      	nop
 8001ad4:	f7ff ffde 	bl	8001a94 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8f7      	bhi.n	8001ad4 <HAL_Delay+0x28>
  {
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000010 	.word	0x20000010

08001af4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b09a      	sub	sp, #104	@ 0x68
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e1c9      	b.n	8001ee4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d176      	bne.n	8001c50 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d152      	bne.n	8001c10 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff f8b3 	bl	8000cf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d13b      	bne.n	8001c10 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f001 f893 	bl	8002cc4 <ADC_Disable>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d12f      	bne.n	8001c10 <HAL_ADC_Init+0xe0>
 8001bb0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d12b      	bne.n	8001c10 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bc0:	f023 0302 	bic.w	r3, r3, #2
 8001bc4:	f043 0202 	orr.w	r2, r3, #2
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bda:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001bea:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bec:	4b86      	ldr	r3, [pc, #536]	@ (8001e08 <HAL_ADC_Init+0x2d8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a86      	ldr	r2, [pc, #536]	@ (8001e0c <HAL_ADC_Init+0x2dc>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0c9a      	lsrs	r2, r3, #18
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c02:	e002      	b.n	8001c0a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f9      	bne.n	8001c04 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c2c:	d110      	bne.n	8001c50 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f023 0312 	bic.w	r3, r3, #18
 8001c36:	f043 0210 	orr.w	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	f043 0201 	orr.w	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f040 8136 	bne.w	8001eca <HAL_ADC_Init+0x39a>
 8001c5e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 8131 	bne.w	8001eca <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f040 8129 	bne.w	8001eca <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c80:	f043 0202 	orr.w	r2, r3, #2
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c90:	d004      	beq.n	8001c9c <HAL_ADC_Init+0x16c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a5e      	ldr	r2, [pc, #376]	@ (8001e10 <HAL_ADC_Init+0x2e0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_Init+0x170>
 8001c9c:	4b5d      	ldr	r3, [pc, #372]	@ (8001e14 <HAL_ADC_Init+0x2e4>)
 8001c9e:	e000      	b.n	8001ca2 <HAL_ADC_Init+0x172>
 8001ca0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e18 <HAL_ADC_Init+0x2e8>)
 8001ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cac:	d102      	bne.n	8001cb4 <HAL_ADC_Init+0x184>
 8001cae:	4b58      	ldr	r3, [pc, #352]	@ (8001e10 <HAL_ADC_Init+0x2e0>)
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e01a      	b.n	8001cea <HAL_ADC_Init+0x1ba>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a55      	ldr	r2, [pc, #340]	@ (8001e10 <HAL_ADC_Init+0x2e0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d103      	bne.n	8001cc6 <HAL_ADC_Init+0x196>
 8001cbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e011      	b.n	8001cea <HAL_ADC_Init+0x1ba>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a54      	ldr	r2, [pc, #336]	@ (8001e1c <HAL_ADC_Init+0x2ec>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d102      	bne.n	8001cd6 <HAL_ADC_Init+0x1a6>
 8001cd0:	4b53      	ldr	r3, [pc, #332]	@ (8001e20 <HAL_ADC_Init+0x2f0>)
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e009      	b.n	8001cea <HAL_ADC_Init+0x1ba>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a51      	ldr	r2, [pc, #324]	@ (8001e20 <HAL_ADC_Init+0x2f0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d102      	bne.n	8001ce6 <HAL_ADC_Init+0x1b6>
 8001ce0:	4b4e      	ldr	r3, [pc, #312]	@ (8001e1c <HAL_ADC_Init+0x2ec>)
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	e001      	b.n	8001cea <HAL_ADC_Init+0x1ba>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d108      	bne.n	8001d0a <HAL_ADC_Init+0x1da>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_Init+0x1da>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_ADC_Init+0x1dc>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11c      	bne.n	8001d4a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d10:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d107      	bne.n	8001d32 <HAL_ADC_Init+0x202>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_Init+0x202>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_ADC_Init+0x204>
 8001d32:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d108      	bne.n	8001d4a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001d38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d48:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7e5b      	ldrb	r3, [r3, #25]
 8001d4e:	035b      	lsls	r3, r3, #13
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d54:	2a01      	cmp	r2, #1
 8001d56:	d002      	beq.n	8001d5e <HAL_ADC_Init+0x22e>
 8001d58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d5c:	e000      	b.n	8001d60 <HAL_ADC_Init+0x230>
 8001d5e:	2200      	movs	r2, #0
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d70:	4313      	orrs	r3, r2
 8001d72:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d11b      	bne.n	8001db6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7e5b      	ldrb	r3, [r3, #25]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	045a      	lsls	r2, r3, #17
 8001d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d90:	4313      	orrs	r3, r2
 8001d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d96:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d98:	e00d      	b.n	8001db6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001da2:	f043 0220 	orr.w	r2, r3, #32
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	f043 0201 	orr.w	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d03a      	beq.n	8001e34 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a16      	ldr	r2, [pc, #88]	@ (8001e1c <HAL_ADC_Init+0x2ec>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d004      	beq.n	8001dd2 <HAL_ADC_Init+0x2a2>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a14      	ldr	r2, [pc, #80]	@ (8001e20 <HAL_ADC_Init+0x2f0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d128      	bne.n	8001e24 <HAL_ADC_Init+0x2f4>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001dda:	d012      	beq.n	8001e02 <HAL_ADC_Init+0x2d2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001de4:	d00a      	beq.n	8001dfc <HAL_ADC_Init+0x2cc>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dea:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001dee:	d002      	beq.n	8001df6 <HAL_ADC_Init+0x2c6>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	e018      	b.n	8001e28 <HAL_ADC_Init+0x2f8>
 8001df6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dfa:	e015      	b.n	8001e28 <HAL_ADC_Init+0x2f8>
 8001dfc:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001e00:	e012      	b.n	8001e28 <HAL_ADC_Init+0x2f8>
 8001e02:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001e06:	e00f      	b.n	8001e28 <HAL_ADC_Init+0x2f8>
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	431bde83 	.word	0x431bde83
 8001e10:	50000100 	.word	0x50000100
 8001e14:	50000300 	.word	0x50000300
 8001e18:	50000700 	.word	0x50000700
 8001e1c:	50000400 	.word	0x50000400
 8001e20:	50000500 	.word	0x50000500
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e30:	4313      	orrs	r3, r2
 8001e32:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d114      	bne.n	8001e6c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e50:	f023 0302 	bic.w	r3, r3, #2
 8001e54:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7e1b      	ldrb	r3, [r3, #24]
 8001e5a:	039a      	lsls	r2, r3, #14
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4313      	orrs	r3, r2
 8001e66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <HAL_ADC_Init+0x3bc>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10c      	bne.n	8001ea2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	f023 010f 	bic.w	r1, r3, #15
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	1e5a      	subs	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ea0:	e007      	b.n	8001eb2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 020f 	bic.w	r2, r2, #15
 8001eb0:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	f023 0303 	bic.w	r3, r3, #3
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ec8:	e00a      	b.n	8001ee0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f023 0312 	bic.w	r3, r3, #18
 8001ed2:	f043 0210 	orr.w	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001eda:	2301      	movs	r3, #1
 8001edc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001ee0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3768      	adds	r7, #104	@ 0x68
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	fff0c007 	.word	0xfff0c007

08001ef0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <HAL_ADC_IRQHandler+0x38>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10b      	bne.n	8001f40 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80bc 	beq.w	80020ac <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80b6 	beq.w	80020ac <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d105      	bne.n	8001f58 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f60:	d004      	beq.n	8001f6c <HAL_ADC_IRQHandler+0x7c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a90      	ldr	r2, [pc, #576]	@ (80021a8 <HAL_ADC_IRQHandler+0x2b8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d106      	bne.n	8001f7a <HAL_ADC_IRQHandler+0x8a>
 8001f6c:	4b8f      	ldr	r3, [pc, #572]	@ (80021ac <HAL_ADC_IRQHandler+0x2bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d03e      	beq.n	8001ff6 <HAL_ADC_IRQHandler+0x106>
 8001f78:	e005      	b.n	8001f86 <HAL_ADC_IRQHandler+0x96>
 8001f7a:	4b8d      	ldr	r3, [pc, #564]	@ (80021b0 <HAL_ADC_IRQHandler+0x2c0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d037      	beq.n	8001ff6 <HAL_ADC_IRQHandler+0x106>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f8e:	d004      	beq.n	8001f9a <HAL_ADC_IRQHandler+0xaa>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a84      	ldr	r2, [pc, #528]	@ (80021a8 <HAL_ADC_IRQHandler+0x2b8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d106      	bne.n	8001fa8 <HAL_ADC_IRQHandler+0xb8>
 8001f9a:	4b84      	ldr	r3, [pc, #528]	@ (80021ac <HAL_ADC_IRQHandler+0x2bc>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d027      	beq.n	8001ff6 <HAL_ADC_IRQHandler+0x106>
 8001fa6:	e005      	b.n	8001fb4 <HAL_ADC_IRQHandler+0xc4>
 8001fa8:	4b81      	ldr	r3, [pc, #516]	@ (80021b0 <HAL_ADC_IRQHandler+0x2c0>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d020      	beq.n	8001ff6 <HAL_ADC_IRQHandler+0x106>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fbc:	d004      	beq.n	8001fc8 <HAL_ADC_IRQHandler+0xd8>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a79      	ldr	r2, [pc, #484]	@ (80021a8 <HAL_ADC_IRQHandler+0x2b8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d106      	bne.n	8001fd6 <HAL_ADC_IRQHandler+0xe6>
 8001fc8:	4b78      	ldr	r3, [pc, #480]	@ (80021ac <HAL_ADC_IRQHandler+0x2bc>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2b09      	cmp	r3, #9
 8001fd2:	d010      	beq.n	8001ff6 <HAL_ADC_IRQHandler+0x106>
 8001fd4:	e005      	b.n	8001fe2 <HAL_ADC_IRQHandler+0xf2>
 8001fd6:	4b76      	ldr	r3, [pc, #472]	@ (80021b0 <HAL_ADC_IRQHandler+0x2c0>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	2b09      	cmp	r3, #9
 8001fe0:	d009      	beq.n	8001ff6 <HAL_ADC_IRQHandler+0x106>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fea:	d004      	beq.n	8001ff6 <HAL_ADC_IRQHandler+0x106>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a70      	ldr	r2, [pc, #448]	@ (80021b4 <HAL_ADC_IRQHandler+0x2c4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d104      	bne.n	8002000 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	e00f      	b.n	8002020 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002008:	d004      	beq.n	8002014 <HAL_ADC_IRQHandler+0x124>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a66      	ldr	r2, [pc, #408]	@ (80021a8 <HAL_ADC_IRQHandler+0x2b8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d102      	bne.n	800201a <HAL_ADC_IRQHandler+0x12a>
 8002014:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002018:	e000      	b.n	800201c <HAL_ADC_IRQHandler+0x12c>
 800201a:	4b66      	ldr	r3, [pc, #408]	@ (80021b4 <HAL_ADC_IRQHandler+0x2c4>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800202a:	2b00      	cmp	r3, #0
 800202c:	d137      	bne.n	800209e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002034:	2b00      	cmp	r3, #0
 8002036:	d132      	bne.n	800209e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d02d      	beq.n	800209e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11a      	bne.n	8002086 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 020c 	bic.w	r2, r2, #12
 800205e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d112      	bne.n	800209e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	@ 0x40
 8002084:	e00b      	b.n	800209e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f043 0210 	orr.w	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fd28 	bl	8001af4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	220c      	movs	r2, #12
 80020aa:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <HAL_ADC_IRQHandler+0x1d0>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10b      	bne.n	80020d8 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8138 	beq.w	800233c <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8132 	beq.w	800233c <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ec:	d004      	beq.n	80020f8 <HAL_ADC_IRQHandler+0x208>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a2d      	ldr	r2, [pc, #180]	@ (80021a8 <HAL_ADC_IRQHandler+0x2b8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d106      	bne.n	8002106 <HAL_ADC_IRQHandler+0x216>
 80020f8:	4b2c      	ldr	r3, [pc, #176]	@ (80021ac <HAL_ADC_IRQHandler+0x2bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	2b00      	cmp	r3, #0
 8002102:	d03e      	beq.n	8002182 <HAL_ADC_IRQHandler+0x292>
 8002104:	e005      	b.n	8002112 <HAL_ADC_IRQHandler+0x222>
 8002106:	4b2a      	ldr	r3, [pc, #168]	@ (80021b0 <HAL_ADC_IRQHandler+0x2c0>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	2b00      	cmp	r3, #0
 8002110:	d037      	beq.n	8002182 <HAL_ADC_IRQHandler+0x292>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800211a:	d004      	beq.n	8002126 <HAL_ADC_IRQHandler+0x236>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a21      	ldr	r2, [pc, #132]	@ (80021a8 <HAL_ADC_IRQHandler+0x2b8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d106      	bne.n	8002134 <HAL_ADC_IRQHandler+0x244>
 8002126:	4b21      	ldr	r3, [pc, #132]	@ (80021ac <HAL_ADC_IRQHandler+0x2bc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	2b05      	cmp	r3, #5
 8002130:	d027      	beq.n	8002182 <HAL_ADC_IRQHandler+0x292>
 8002132:	e005      	b.n	8002140 <HAL_ADC_IRQHandler+0x250>
 8002134:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <HAL_ADC_IRQHandler+0x2c0>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2b05      	cmp	r3, #5
 800213e:	d020      	beq.n	8002182 <HAL_ADC_IRQHandler+0x292>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002148:	d004      	beq.n	8002154 <HAL_ADC_IRQHandler+0x264>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a16      	ldr	r2, [pc, #88]	@ (80021a8 <HAL_ADC_IRQHandler+0x2b8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d106      	bne.n	8002162 <HAL_ADC_IRQHandler+0x272>
 8002154:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_ADC_IRQHandler+0x2bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	2b09      	cmp	r3, #9
 800215e:	d010      	beq.n	8002182 <HAL_ADC_IRQHandler+0x292>
 8002160:	e005      	b.n	800216e <HAL_ADC_IRQHandler+0x27e>
 8002162:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <HAL_ADC_IRQHandler+0x2c0>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	2b09      	cmp	r3, #9
 800216c:	d009      	beq.n	8002182 <HAL_ADC_IRQHandler+0x292>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002176:	d004      	beq.n	8002182 <HAL_ADC_IRQHandler+0x292>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <HAL_ADC_IRQHandler+0x2c4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d104      	bne.n	800218c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	e018      	b.n	80021be <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002194:	d004      	beq.n	80021a0 <HAL_ADC_IRQHandler+0x2b0>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a03      	ldr	r2, [pc, #12]	@ (80021a8 <HAL_ADC_IRQHandler+0x2b8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d10b      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x2c8>
 80021a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021a4:	e009      	b.n	80021ba <HAL_ADC_IRQHandler+0x2ca>
 80021a6:	bf00      	nop
 80021a8:	50000100 	.word	0x50000100
 80021ac:	50000300 	.word	0x50000300
 80021b0:	50000700 	.word	0x50000700
 80021b4:	50000400 	.word	0x50000400
 80021b8:	4b92      	ldr	r3, [pc, #584]	@ (8002404 <HAL_ADC_IRQHandler+0x514>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f040 80b0 	bne.w	800232e <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00d      	beq.n	80021f4 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 80a3 	bne.w	800232e <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 809d 	bne.w	800232e <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8097 	beq.w	800232e <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002208:	d004      	beq.n	8002214 <HAL_ADC_IRQHandler+0x324>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a7e      	ldr	r2, [pc, #504]	@ (8002408 <HAL_ADC_IRQHandler+0x518>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d106      	bne.n	8002222 <HAL_ADC_IRQHandler+0x332>
 8002214:	4b7d      	ldr	r3, [pc, #500]	@ (800240c <HAL_ADC_IRQHandler+0x51c>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	2b00      	cmp	r3, #0
 800221e:	d03e      	beq.n	800229e <HAL_ADC_IRQHandler+0x3ae>
 8002220:	e005      	b.n	800222e <HAL_ADC_IRQHandler+0x33e>
 8002222:	4b7b      	ldr	r3, [pc, #492]	@ (8002410 <HAL_ADC_IRQHandler+0x520>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	2b00      	cmp	r3, #0
 800222c:	d037      	beq.n	800229e <HAL_ADC_IRQHandler+0x3ae>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002236:	d004      	beq.n	8002242 <HAL_ADC_IRQHandler+0x352>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a72      	ldr	r2, [pc, #456]	@ (8002408 <HAL_ADC_IRQHandler+0x518>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d106      	bne.n	8002250 <HAL_ADC_IRQHandler+0x360>
 8002242:	4b72      	ldr	r3, [pc, #456]	@ (800240c <HAL_ADC_IRQHandler+0x51c>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	2b06      	cmp	r3, #6
 800224c:	d027      	beq.n	800229e <HAL_ADC_IRQHandler+0x3ae>
 800224e:	e005      	b.n	800225c <HAL_ADC_IRQHandler+0x36c>
 8002250:	4b6f      	ldr	r3, [pc, #444]	@ (8002410 <HAL_ADC_IRQHandler+0x520>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2b06      	cmp	r3, #6
 800225a:	d020      	beq.n	800229e <HAL_ADC_IRQHandler+0x3ae>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002264:	d004      	beq.n	8002270 <HAL_ADC_IRQHandler+0x380>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a67      	ldr	r2, [pc, #412]	@ (8002408 <HAL_ADC_IRQHandler+0x518>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d106      	bne.n	800227e <HAL_ADC_IRQHandler+0x38e>
 8002270:	4b66      	ldr	r3, [pc, #408]	@ (800240c <HAL_ADC_IRQHandler+0x51c>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2b07      	cmp	r3, #7
 800227a:	d010      	beq.n	800229e <HAL_ADC_IRQHandler+0x3ae>
 800227c:	e005      	b.n	800228a <HAL_ADC_IRQHandler+0x39a>
 800227e:	4b64      	ldr	r3, [pc, #400]	@ (8002410 <HAL_ADC_IRQHandler+0x520>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	2b07      	cmp	r3, #7
 8002288:	d009      	beq.n	800229e <HAL_ADC_IRQHandler+0x3ae>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002292:	d004      	beq.n	800229e <HAL_ADC_IRQHandler+0x3ae>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a5a      	ldr	r2, [pc, #360]	@ (8002404 <HAL_ADC_IRQHandler+0x514>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d104      	bne.n	80022a8 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e00f      	b.n	80022c8 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022b0:	d004      	beq.n	80022bc <HAL_ADC_IRQHandler+0x3cc>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a54      	ldr	r2, [pc, #336]	@ (8002408 <HAL_ADC_IRQHandler+0x518>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d102      	bne.n	80022c2 <HAL_ADC_IRQHandler+0x3d2>
 80022bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022c0:	e000      	b.n	80022c4 <HAL_ADC_IRQHandler+0x3d4>
 80022c2:	4b50      	ldr	r3, [pc, #320]	@ (8002404 <HAL_ADC_IRQHandler+0x514>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d12d      	bne.n	800232e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d11a      	bne.n	8002316 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80022ee:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d112      	bne.n	800232e <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	f043 0201 	orr.w	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	641a      	str	r2, [r3, #64]	@ 0x40
 8002314:	e00b      	b.n	800232e <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f043 0210 	orr.w	r2, r3, #16
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f8c4 	bl	80024bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2260      	movs	r2, #96	@ 0x60
 800233a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	d011      	beq.n	800236a <HAL_ADC_IRQHandler+0x47a>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00c      	beq.n	800236a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fbd3 	bl	8001b08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2280      	movs	r2, #128	@ 0x80
 8002368:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d012      	beq.n	800239a <HAL_ADC_IRQHandler+0x4aa>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00d      	beq.n	800239a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8aa 	bl	80024e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002398:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d012      	beq.n	80023ca <HAL_ADC_IRQHandler+0x4da>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00d      	beq.n	80023ca <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f89c 	bl	80024f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023c8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d04f      	beq.n	8002474 <HAL_ADC_IRQHandler+0x584>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d04a      	beq.n	8002474 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	e02d      	b.n	8002448 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023f4:	d004      	beq.n	8002400 <HAL_ADC_IRQHandler+0x510>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a03      	ldr	r2, [pc, #12]	@ (8002408 <HAL_ADC_IRQHandler+0x518>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d109      	bne.n	8002414 <HAL_ADC_IRQHandler+0x524>
 8002400:	4b02      	ldr	r3, [pc, #8]	@ (800240c <HAL_ADC_IRQHandler+0x51c>)
 8002402:	e008      	b.n	8002416 <HAL_ADC_IRQHandler+0x526>
 8002404:	50000400 	.word	0x50000400
 8002408:	50000100 	.word	0x50000100
 800240c:	50000300 	.word	0x50000300
 8002410:	50000700 	.word	0x50000700
 8002414:	4b28      	ldr	r3, [pc, #160]	@ (80024b8 <HAL_ADC_IRQHandler+0x5c8>)
 8002416:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d10a      	bne.n	8002448 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002432:	2301      	movs	r3, #1
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e007      	b.n	8002448 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002444:	2301      	movs	r3, #1
 8002446:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d10e      	bne.n	800246c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	f043 0202 	orr.w	r2, r3, #2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fb58 	bl	8001b1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2210      	movs	r2, #16
 8002472:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800247a:	2b00      	cmp	r3, #0
 800247c:	d018      	beq.n	80024b0 <HAL_ADC_IRQHandler+0x5c0>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002498:	f043 0208 	orr.w	r2, r3, #8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024a8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f810 	bl	80024d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80024b0:	bf00      	nop
 80024b2:	3720      	adds	r7, #32
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	50000700 	.word	0x50000700

080024bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800250c:	b480      	push	{r7}
 800250e:	b09b      	sub	sp, #108	@ 0x6c
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_ADC_ConfigChannel+0x22>
 800252a:	2302      	movs	r3, #2
 800252c:	e2c8      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x5b4>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 82ac 	bne.w	8002a9e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b04      	cmp	r3, #4
 800254c:	d81c      	bhi.n	8002588 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	461a      	mov	r2, r3
 8002562:	231f      	movs	r3, #31
 8002564:	4093      	lsls	r3, r2
 8002566:	43db      	mvns	r3, r3
 8002568:	4019      	ands	r1, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa00 f203 	lsl.w	r2, r0, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	631a      	str	r2, [r3, #48]	@ 0x30
 8002586:	e063      	b.n	8002650 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b09      	cmp	r3, #9
 800258e:	d81e      	bhi.n	80025ce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	3b1e      	subs	r3, #30
 80025a4:	221f      	movs	r2, #31
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	4019      	ands	r1, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	3b1e      	subs	r3, #30
 80025c0:	fa00 f203 	lsl.w	r2, r0, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80025cc:	e040      	b.n	8002650 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b0e      	cmp	r3, #14
 80025d4:	d81e      	bhi.n	8002614 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	3b3c      	subs	r3, #60	@ 0x3c
 80025ea:	221f      	movs	r2, #31
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	4019      	ands	r1, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	3b3c      	subs	r3, #60	@ 0x3c
 8002606:	fa00 f203 	lsl.w	r2, r0, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	639a      	str	r2, [r3, #56]	@ 0x38
 8002612:	e01d      	b.n	8002650 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	3b5a      	subs	r3, #90	@ 0x5a
 8002628:	221f      	movs	r2, #31
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	4019      	ands	r1, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	3b5a      	subs	r3, #90	@ 0x5a
 8002644:	fa00 f203 	lsl.w	r2, r0, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 80e5 	bne.w	800282a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b09      	cmp	r3, #9
 8002666:	d91c      	bls.n	80026a2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6999      	ldr	r1, [r3, #24]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	3b1e      	subs	r3, #30
 800267a:	2207      	movs	r2, #7
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	4019      	ands	r1, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6898      	ldr	r0, [r3, #8]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	3b1e      	subs	r3, #30
 8002694:	fa00 f203 	lsl.w	r2, r0, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	619a      	str	r2, [r3, #24]
 80026a0:	e019      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6959      	ldr	r1, [r3, #20]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	2207      	movs	r2, #7
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	4019      	ands	r1, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6898      	ldr	r0, [r3, #8]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	fa00 f203 	lsl.w	r2, r0, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	08db      	lsrs	r3, r3, #3
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d84f      	bhi.n	8002798 <HAL_ADC_ConfigChannel+0x28c>
 80026f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002700 <HAL_ADC_ConfigChannel+0x1f4>)
 80026fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fe:	bf00      	nop
 8002700:	08002711 	.word	0x08002711
 8002704:	08002733 	.word	0x08002733
 8002708:	08002755 	.word	0x08002755
 800270c:	08002777 	.word	0x08002777
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002716:	4b99      	ldr	r3, [pc, #612]	@ (800297c <HAL_ADC_ConfigChannel+0x470>)
 8002718:	4013      	ands	r3, r2
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	0691      	lsls	r1, r2, #26
 8002720:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002722:	430a      	orrs	r2, r1
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800272e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002730:	e07b      	b.n	800282a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002738:	4b90      	ldr	r3, [pc, #576]	@ (800297c <HAL_ADC_ConfigChannel+0x470>)
 800273a:	4013      	ands	r3, r2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	0691      	lsls	r1, r2, #26
 8002742:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002744:	430a      	orrs	r2, r1
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002750:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002752:	e06a      	b.n	800282a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800275a:	4b88      	ldr	r3, [pc, #544]	@ (800297c <HAL_ADC_ConfigChannel+0x470>)
 800275c:	4013      	ands	r3, r2
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	0691      	lsls	r1, r2, #26
 8002764:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002766:	430a      	orrs	r2, r1
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002772:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002774:	e059      	b.n	800282a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800277c:	4b7f      	ldr	r3, [pc, #508]	@ (800297c <HAL_ADC_ConfigChannel+0x470>)
 800277e:	4013      	ands	r3, r2
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	0691      	lsls	r1, r2, #26
 8002786:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002788:	430a      	orrs	r2, r1
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002794:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002796:	e048      	b.n	800282a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	069b      	lsls	r3, r3, #26
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027ba:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	069b      	lsls	r3, r3, #26
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027de:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	069b      	lsls	r3, r3, #26
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002802:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800280a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	069b      	lsls	r3, r3, #26
 8002814:	429a      	cmp	r2, r3
 8002816:	d107      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002826:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002828:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d108      	bne.n	800284a <HAL_ADC_ConfigChannel+0x33e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x33e>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_ADC_ConfigChannel+0x340>
 800284a:	2300      	movs	r3, #0
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 8131 	bne.w	8002ab4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d00f      	beq.n	800287a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2201      	movs	r2, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43da      	mvns	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	400a      	ands	r2, r1
 8002874:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002878:	e049      	b.n	800290e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2201      	movs	r2, #1
 8002888:	409a      	lsls	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b09      	cmp	r3, #9
 800289a:	d91c      	bls.n	80028d6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6999      	ldr	r1, [r3, #24]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	3b1b      	subs	r3, #27
 80028ae:	2207      	movs	r2, #7
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4019      	ands	r1, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6898      	ldr	r0, [r3, #8]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	3b1b      	subs	r3, #27
 80028c8:	fa00 f203 	lsl.w	r2, r0, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	619a      	str	r2, [r3, #24]
 80028d4:	e01b      	b.n	800290e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6959      	ldr	r1, [r3, #20]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	2207      	movs	r2, #7
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	4019      	ands	r1, r3
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6898      	ldr	r0, [r3, #8]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	fa00 f203 	lsl.w	r2, r0, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002916:	d004      	beq.n	8002922 <HAL_ADC_ConfigChannel+0x416>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a18      	ldr	r2, [pc, #96]	@ (8002980 <HAL_ADC_ConfigChannel+0x474>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x41a>
 8002922:	4b18      	ldr	r3, [pc, #96]	@ (8002984 <HAL_ADC_ConfigChannel+0x478>)
 8002924:	e000      	b.n	8002928 <HAL_ADC_ConfigChannel+0x41c>
 8002926:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <HAL_ADC_ConfigChannel+0x47c>)
 8002928:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b10      	cmp	r3, #16
 8002930:	d105      	bne.n	800293e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800293a:	2b00      	cmp	r3, #0
 800293c:	d015      	beq.n	800296a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002942:	2b11      	cmp	r3, #17
 8002944:	d105      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002956:	2b12      	cmp	r3, #18
 8002958:	f040 80ac 	bne.w	8002ab4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800295c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002964:	2b00      	cmp	r3, #0
 8002966:	f040 80a5 	bne.w	8002ab4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002972:	d10b      	bne.n	800298c <HAL_ADC_ConfigChannel+0x480>
 8002974:	4b02      	ldr	r3, [pc, #8]	@ (8002980 <HAL_ADC_ConfigChannel+0x474>)
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e023      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x4b6>
 800297a:	bf00      	nop
 800297c:	83fff000 	.word	0x83fff000
 8002980:	50000100 	.word	0x50000100
 8002984:	50000300 	.word	0x50000300
 8002988:	50000700 	.word	0x50000700
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a4e      	ldr	r2, [pc, #312]	@ (8002acc <HAL_ADC_ConfigChannel+0x5c0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d103      	bne.n	800299e <HAL_ADC_ConfigChannel+0x492>
 8002996:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	e011      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x4b6>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a4b      	ldr	r2, [pc, #300]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x5c4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d102      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x4a2>
 80029a8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x5c8>)
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	e009      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x4b6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a48      	ldr	r2, [pc, #288]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x5c8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d102      	bne.n	80029be <HAL_ADC_ConfigChannel+0x4b2>
 80029b8:	4b45      	ldr	r3, [pc, #276]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x5c4>)
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e001      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x4b6>
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d108      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x4d6>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x4d6>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x4d8>
 80029e2:	2300      	movs	r3, #0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d150      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029e8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d010      	beq.n	8002a10 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x4fe>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x4fe>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x500>
 8002a0a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d13c      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d11d      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x548>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a20:	d118      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a2c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2a      	ldr	r2, [pc, #168]	@ (8002adc <HAL_ADC_ConfigChannel+0x5d0>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	0c9a      	lsrs	r2, r3, #18
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a44:	e002      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f9      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a52:	e02e      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b11      	cmp	r3, #17
 8002a5a:	d10b      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x568>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a64:	d106      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002a66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002a6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a70:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a72:	e01e      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b12      	cmp	r3, #18
 8002a7a:	d11a      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002a7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a86:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a88:	e013      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002a9c:	e00a      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f043 0220 	orr.w	r2, r3, #32
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002ab0:	e000      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ab2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002abc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	376c      	adds	r7, #108	@ 0x6c
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	50000100 	.word	0x50000100
 8002ad0:	50000400 	.word	0x50000400
 8002ad4:	50000500 	.word	0x50000500
 8002ad8:	20000008 	.word	0x20000008
 8002adc:	431bde83 	.word	0x431bde83

08002ae0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b099      	sub	sp, #100	@ 0x64
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002af8:	d102      	bne.n	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002afa:	4b6d      	ldr	r3, [pc, #436]	@ (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	e01a      	b.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6a      	ldr	r2, [pc, #424]	@ (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d103      	bne.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002b0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	e011      	b.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a67      	ldr	r2, [pc, #412]	@ (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d102      	bne.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b1c:	4b66      	ldr	r3, [pc, #408]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	e009      	b.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a64      	ldr	r2, [pc, #400]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d102      	bne.n	8002b32 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b2c:	4b61      	ldr	r3, [pc, #388]	@ (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	e001      	b.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0b0      	b.n	8002ca2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e0a9      	b.n	8002ca2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f040 808d 	bne.w	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 8086 	bne.w	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b7c:	d004      	beq.n	8002b88 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a4b      	ldr	r2, [pc, #300]	@ (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002b88:	4b4c      	ldr	r3, [pc, #304]	@ (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002b8a:	e000      	b.n	8002b8e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002b8c:	4b4c      	ldr	r3, [pc, #304]	@ (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002b8e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d040      	beq.n	8002c1a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002baa:	035b      	lsls	r3, r3, #13
 8002bac:	430b      	orrs	r3, r1
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bb2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d108      	bne.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d15c      	bne.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d107      	bne.n	8002bf6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002bf6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d14b      	bne.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002bfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c04:	f023 030f 	bic.w	r3, r3, #15
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	6811      	ldr	r1, [r2, #0]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	6892      	ldr	r2, [r2, #8]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	431a      	orrs	r2, r3
 8002c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c16:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c18:	e03c      	b.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c24:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d108      	bne.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002c46:	2300      	movs	r3, #0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d123      	bne.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d107      	bne.n	8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002c68:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d112      	bne.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002c6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c76:	f023 030f 	bic.w	r3, r3, #15
 8002c7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c7c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c7e:	e009      	b.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002c92:	e000      	b.n	8002c96 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c94:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3764      	adds	r7, #100	@ 0x64
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	50000100 	.word	0x50000100
 8002cb4:	50000400 	.word	0x50000400
 8002cb8:	50000500 	.word	0x50000500
 8002cbc:	50000300 	.word	0x50000300
 8002cc0:	50000700 	.word	0x50000700

08002cc4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d108      	bne.n	8002cf0 <ADC_Disable+0x2c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <ADC_Disable+0x2c>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <ADC_Disable+0x2e>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d047      	beq.n	8002d86 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 030d 	and.w	r3, r3, #13
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d10f      	bne.n	8002d24 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0202 	orr.w	r2, r2, #2
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002d1c:	f7fe feba 	bl	8001a94 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d22:	e029      	b.n	8002d78 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	f043 0210 	orr.w	r2, r3, #16
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e023      	b.n	8002d88 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d40:	f7fe fea8 	bl	8001a94 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d914      	bls.n	8002d78 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10d      	bne.n	8002d78 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	f043 0210 	orr.w	r2, r3, #16
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e007      	b.n	8002d88 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d0dc      	beq.n	8002d40 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <HAL_COMP_Init+0x26>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_COMP_Init+0x2c>
  {
    status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	77fb      	strb	r3, [r7, #31]
 8002dba:	e088      	b.n	8002ece <HAL_COMP_Init+0x13e>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbc:	4b46      	ldr	r3, [pc, #280]	@ (8002ed8 <HAL_COMP_Init+0x148>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	4a45      	ldr	r2, [pc, #276]	@ (8002ed8 <HAL_COMP_Init+0x148>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6193      	str	r3, [r2, #24]
 8002dc8:	4b43      	ldr	r3, [pc, #268]	@ (8002ed8 <HAL_COMP_Init+0x148>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fe f953 	bl	8001080 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002de4:	61bb      	str	r3, [r7, #24]

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0282 	bic.w	r2, r3, #130	@ 0x82
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f023 020c 	bic.w	r2, r3, #12
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	601a      	str	r2, [r3, #0]

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0)) != 0UL) &&
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d016      	beq.n	8002ec6 <HAL_COMP_Init+0x136>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d113      	bne.n	8002ec6 <HAL_COMP_Init+0x136>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002edc <HAL_COMP_Init+0x14c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	099b      	lsrs	r3, r3, #6
 8002ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ee0 <HAL_COMP_Init+0x150>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002eb8:	e002      	b.n	8002ec0 <HAL_COMP_Init+0x130>
      {
        wait_loop_index--;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f9      	bne.n	8002eba <HAL_COMP_Init+0x12a>
      }
    }

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  return status;
 8002ece:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3720      	adds	r7, #32
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	20000008 	.word	0x20000008
 8002ee0:	053e2d63 	.word	0x053e2d63

08002ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f16:	4a04      	ldr	r2, [pc, #16]	@ (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	60d3      	str	r3, [r2, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f30:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <__NVIC_GetPriorityGrouping+0x18>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	f003 0307 	and.w	r3, r3, #7
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db0b      	blt.n	8002f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	4907      	ldr	r1, [pc, #28]	@ (8002f80 <__NVIC_EnableIRQ+0x38>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2001      	movs	r0, #1
 8002f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db0a      	blt.n	8002fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	@ (8002fd0 <__NVIC_SetPriority+0x4c>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fac:	e00a      	b.n	8002fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4908      	ldr	r1, [pc, #32]	@ (8002fd4 <__NVIC_SetPriority+0x50>)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	761a      	strb	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	@ 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
         );
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	@ 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ff4c 	bl	8002ee4 <__NVIC_SetPriorityGrouping>
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003066:	f7ff ff61 	bl	8002f2c <__NVIC_GetPriorityGrouping>
 800306a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	6978      	ldr	r0, [r7, #20]
 8003072:	f7ff ffb1 	bl	8002fd8 <NVIC_EncodePriority>
 8003076:	4602      	mov	r2, r0
 8003078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ff80 	bl	8002f84 <__NVIC_SetPriority>
}
 8003084:	bf00      	nop
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff ff54 	bl	8002f48 <__NVIC_EnableIRQ>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e037      	b.n	800312e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030d4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80030d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80030e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f8b3 	bl	800327c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	2204      	movs	r2, #4
 8003154:	409a      	lsls	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d024      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x72>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01f      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d107      	bne.n	8003186 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0204 	bic.w	r2, r2, #4
 8003184:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318e:	2104      	movs	r1, #4
 8003190:	fa01 f202 	lsl.w	r2, r1, r2
 8003194:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d06a      	beq.n	8003274 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031a6:	e065      	b.n	8003274 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	2202      	movs	r2, #2
 80031ae:	409a      	lsls	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d02c      	beq.n	8003212 <HAL_DMA_IRQHandler+0xdc>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d027      	beq.n	8003212 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10b      	bne.n	80031e8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 020a 	bic.w	r2, r2, #10
 80031de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	2102      	movs	r1, #2
 80031f2:	fa01 f202 	lsl.w	r2, r1, r2
 80031f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	d035      	beq.n	8003274 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003210:	e030      	b.n	8003274 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	2208      	movs	r2, #8
 8003218:	409a      	lsls	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4013      	ands	r3, r2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d028      	beq.n	8003274 <HAL_DMA_IRQHandler+0x13e>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d023      	beq.n	8003274 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 020e 	bic.w	r2, r2, #14
 800323a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f202 	lsl.w	r2, r1, r2
 800324a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	2b00      	cmp	r3, #0
 8003268:	d004      	beq.n	8003274 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
    }
  }
}
 8003272:	e7ff      	b.n	8003274 <HAL_DMA_IRQHandler+0x13e>
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	4b14      	ldr	r3, [pc, #80]	@ (80032dc <DMA_CalcBaseAndBitshift+0x60>)
 800328c:	429a      	cmp	r2, r3
 800328e:	d80f      	bhi.n	80032b0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b12      	ldr	r3, [pc, #72]	@ (80032e0 <DMA_CalcBaseAndBitshift+0x64>)
 8003298:	4413      	add	r3, r2
 800329a:	4a12      	ldr	r2, [pc, #72]	@ (80032e4 <DMA_CalcBaseAndBitshift+0x68>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	009a      	lsls	r2, r3, #2
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a0f      	ldr	r2, [pc, #60]	@ (80032e8 <DMA_CalcBaseAndBitshift+0x6c>)
 80032ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80032ae:	e00e      	b.n	80032ce <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	4b0d      	ldr	r3, [pc, #52]	@ (80032ec <DMA_CalcBaseAndBitshift+0x70>)
 80032b8:	4413      	add	r3, r2
 80032ba:	4a0a      	ldr	r2, [pc, #40]	@ (80032e4 <DMA_CalcBaseAndBitshift+0x68>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	009a      	lsls	r2, r3, #2
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a09      	ldr	r2, [pc, #36]	@ (80032f0 <DMA_CalcBaseAndBitshift+0x74>)
 80032cc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40020407 	.word	0x40020407
 80032e0:	bffdfff8 	.word	0xbffdfff8
 80032e4:	cccccccd 	.word	0xcccccccd
 80032e8:	40020000 	.word	0x40020000
 80032ec:	bffdfbf8 	.word	0xbffdfbf8
 80032f0:	40020400 	.word	0x40020400

080032f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003302:	e154      	b.n	80035ae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	2101      	movs	r1, #1
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	fa01 f303 	lsl.w	r3, r1, r3
 8003310:	4013      	ands	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8146 	beq.w	80035a8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d005      	beq.n	8003334 <HAL_GPIO_Init+0x40>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d130      	bne.n	8003396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	2203      	movs	r2, #3
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800336a:	2201      	movs	r2, #1
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	f003 0201 	and.w	r2, r3, #1
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d017      	beq.n	80033d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	2203      	movs	r2, #3
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d123      	bne.n	8003426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	08da      	lsrs	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3208      	adds	r2, #8
 80033e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	220f      	movs	r2, #15
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	08da      	lsrs	r2, r3, #3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3208      	adds	r2, #8
 8003420:	6939      	ldr	r1, [r7, #16]
 8003422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	2203      	movs	r2, #3
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4013      	ands	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0203 	and.w	r2, r3, #3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80a0 	beq.w	80035a8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003468:	4b58      	ldr	r3, [pc, #352]	@ (80035cc <HAL_GPIO_Init+0x2d8>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	4a57      	ldr	r2, [pc, #348]	@ (80035cc <HAL_GPIO_Init+0x2d8>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6193      	str	r3, [r2, #24]
 8003474:	4b55      	ldr	r3, [pc, #340]	@ (80035cc <HAL_GPIO_Init+0x2d8>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003480:	4a53      	ldr	r2, [pc, #332]	@ (80035d0 <HAL_GPIO_Init+0x2dc>)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	3302      	adds	r3, #2
 8003488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	220f      	movs	r2, #15
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034aa:	d019      	beq.n	80034e0 <HAL_GPIO_Init+0x1ec>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a49      	ldr	r2, [pc, #292]	@ (80035d4 <HAL_GPIO_Init+0x2e0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d013      	beq.n	80034dc <HAL_GPIO_Init+0x1e8>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a48      	ldr	r2, [pc, #288]	@ (80035d8 <HAL_GPIO_Init+0x2e4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00d      	beq.n	80034d8 <HAL_GPIO_Init+0x1e4>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a47      	ldr	r2, [pc, #284]	@ (80035dc <HAL_GPIO_Init+0x2e8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <HAL_GPIO_Init+0x1e0>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a46      	ldr	r2, [pc, #280]	@ (80035e0 <HAL_GPIO_Init+0x2ec>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_GPIO_Init+0x1dc>
 80034cc:	2304      	movs	r3, #4
 80034ce:	e008      	b.n	80034e2 <HAL_GPIO_Init+0x1ee>
 80034d0:	2305      	movs	r3, #5
 80034d2:	e006      	b.n	80034e2 <HAL_GPIO_Init+0x1ee>
 80034d4:	2303      	movs	r3, #3
 80034d6:	e004      	b.n	80034e2 <HAL_GPIO_Init+0x1ee>
 80034d8:	2302      	movs	r3, #2
 80034da:	e002      	b.n	80034e2 <HAL_GPIO_Init+0x1ee>
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <HAL_GPIO_Init+0x1ee>
 80034e0:	2300      	movs	r3, #0
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	f002 0203 	and.w	r2, r2, #3
 80034e8:	0092      	lsls	r2, r2, #2
 80034ea:	4093      	lsls	r3, r2
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034f2:	4937      	ldr	r1, [pc, #220]	@ (80035d0 <HAL_GPIO_Init+0x2dc>)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	3302      	adds	r3, #2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003500:	4b38      	ldr	r3, [pc, #224]	@ (80035e4 <HAL_GPIO_Init+0x2f0>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	43db      	mvns	r3, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003524:	4a2f      	ldr	r2, [pc, #188]	@ (80035e4 <HAL_GPIO_Init+0x2f0>)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800352a:	4b2e      	ldr	r3, [pc, #184]	@ (80035e4 <HAL_GPIO_Init+0x2f0>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	43db      	mvns	r3, r3
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800354e:	4a25      	ldr	r2, [pc, #148]	@ (80035e4 <HAL_GPIO_Init+0x2f0>)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003554:	4b23      	ldr	r3, [pc, #140]	@ (80035e4 <HAL_GPIO_Init+0x2f0>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003578:	4a1a      	ldr	r2, [pc, #104]	@ (80035e4 <HAL_GPIO_Init+0x2f0>)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800357e:	4b19      	ldr	r3, [pc, #100]	@ (80035e4 <HAL_GPIO_Init+0x2f0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035a2:	4a10      	ldr	r2, [pc, #64]	@ (80035e4 <HAL_GPIO_Init+0x2f0>)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3301      	adds	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	fa22 f303 	lsr.w	r3, r2, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f47f aea3 	bne.w	8003304 <HAL_GPIO_Init+0x10>
  }
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40010000 	.word	0x40010000
 80035d4:	48000400 	.word	0x48000400
 80035d8:	48000800 	.word	0x48000800
 80035dc:	48000c00 	.word	0x48000c00
 80035e0:	48001000 	.word	0x48001000
 80035e4:	40010400 	.word	0x40010400

080035e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	807b      	strh	r3, [r7, #2]
 80035f4:	4613      	mov	r3, r2
 80035f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f8:	787b      	ldrb	r3, [r7, #1]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003604:	e002      	b.n	800360c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e08d      	b.n	8003746 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fde6 	bl	8001210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2224      	movs	r2, #36	@ 0x24
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003668:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003678:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d107      	bne.n	8003692 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	e006      	b.n	80036a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800369e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d108      	bne.n	80036ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	e007      	b.n	80036ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69d9      	ldr	r1, [r3, #28]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1a      	ldr	r2, [r3, #32]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	461a      	mov	r2, r3
 800375e:	4603      	mov	r3, r0
 8003760:	817b      	strh	r3, [r7, #10]
 8003762:	460b      	mov	r3, r1
 8003764:	813b      	strh	r3, [r7, #8]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b20      	cmp	r3, #32
 8003774:	f040 80f9 	bne.w	800396a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_I2C_Mem_Write+0x34>
 800377e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800378a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0ed      	b.n	800396c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_I2C_Mem_Write+0x4e>
 800379a:	2302      	movs	r3, #2
 800379c:	e0e6      	b.n	800396c <HAL_I2C_Mem_Write+0x21c>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037a6:	f7fe f975 	bl	8001a94 <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2319      	movs	r3, #25
 80037b2:	2201      	movs	r2, #1
 80037b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f955 	bl	8003a68 <I2C_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0d1      	b.n	800396c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2221      	movs	r2, #33	@ 0x21
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2240      	movs	r2, #64	@ 0x40
 80037d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037f0:	88f8      	ldrh	r0, [r7, #6]
 80037f2:	893a      	ldrh	r2, [r7, #8]
 80037f4:	8979      	ldrh	r1, [r7, #10]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	4603      	mov	r3, r0
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f8b9 	bl	8003978 <I2C_RequestMemoryWrite>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0a9      	b.n	800396c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2bff      	cmp	r3, #255	@ 0xff
 8003820:	d90e      	bls.n	8003840 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	22ff      	movs	r2, #255	@ 0xff
 8003826:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382c:	b2da      	uxtb	r2, r3
 800382e:	8979      	ldrh	r1, [r7, #10]
 8003830:	2300      	movs	r3, #0
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fad9 	bl	8003df0 <I2C_TransferConfig>
 800383e:	e00f      	b.n	8003860 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384e:	b2da      	uxtb	r2, r3
 8003850:	8979      	ldrh	r1, [r7, #10]
 8003852:	2300      	movs	r3, #0
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 fac8 	bl	8003df0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f958 	bl	8003b1a <I2C_WaitOnTXISFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e07b      	b.n	800396c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d034      	beq.n	8003918 <HAL_I2C_Mem_Write+0x1c8>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d130      	bne.n	8003918 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038bc:	2200      	movs	r2, #0
 80038be:	2180      	movs	r1, #128	@ 0x80
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f8d1 	bl	8003a68 <I2C_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e04d      	b.n	800396c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2bff      	cmp	r3, #255	@ 0xff
 80038d8:	d90e      	bls.n	80038f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	22ff      	movs	r2, #255	@ 0xff
 80038de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	8979      	ldrh	r1, [r7, #10]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fa7d 	bl	8003df0 <I2C_TransferConfig>
 80038f6:	e00f      	b.n	8003918 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003906:	b2da      	uxtb	r2, r3
 8003908:	8979      	ldrh	r1, [r7, #10]
 800390a:	2300      	movs	r3, #0
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fa6c 	bl	8003df0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d19e      	bne.n	8003860 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f93e 	bl	8003ba8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e01a      	b.n	800396c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2220      	movs	r2, #32
 800393c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6859      	ldr	r1, [r3, #4]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4b0a      	ldr	r3, [pc, #40]	@ (8003974 <HAL_I2C_Mem_Write+0x224>)
 800394a:	400b      	ands	r3, r1
 800394c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	e000      	b.n	800396c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800396a:	2302      	movs	r3, #2
  }
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	fe00e800 	.word	0xfe00e800

08003978 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	4608      	mov	r0, r1
 8003982:	4611      	mov	r1, r2
 8003984:	461a      	mov	r2, r3
 8003986:	4603      	mov	r3, r0
 8003988:	817b      	strh	r3, [r7, #10]
 800398a:	460b      	mov	r3, r1
 800398c:	813b      	strh	r3, [r7, #8]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	8979      	ldrh	r1, [r7, #10]
 8003998:	4b20      	ldr	r3, [pc, #128]	@ (8003a1c <I2C_RequestMemoryWrite+0xa4>)
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fa25 	bl	8003df0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	69b9      	ldr	r1, [r7, #24]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f8b5 	bl	8003b1a <I2C_WaitOnTXISFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e02c      	b.n	8003a14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d105      	bne.n	80039cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039c0:	893b      	ldrh	r3, [r7, #8]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80039ca:	e015      	b.n	80039f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039cc:	893b      	ldrh	r3, [r7, #8]
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	69b9      	ldr	r1, [r7, #24]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f89b 	bl	8003b1a <I2C_WaitOnTXISFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e012      	b.n	8003a14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039ee:	893b      	ldrh	r3, [r7, #8]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2200      	movs	r2, #0
 8003a00:	2180      	movs	r1, #128	@ 0x80
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f830 	bl	8003a68 <I2C_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	80002000 	.word	0x80002000

08003a20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d103      	bne.n	8003a3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d007      	beq.n	8003a5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	619a      	str	r2, [r3, #24]
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	4613      	mov	r3, r2
 8003a76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a78:	e03b      	b.n	8003af2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	6839      	ldr	r1, [r7, #0]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f8d6 	bl	8003c30 <I2C_IsErrorOccurred>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e041      	b.n	8003b12 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d02d      	beq.n	8003af2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a96:	f7fd fffd 	bl	8001a94 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <I2C_WaitOnFlagUntilTimeout+0x44>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d122      	bne.n	8003af2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d113      	bne.n	8003af2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e00f      	b.n	8003b12 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4013      	ands	r3, r2
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	bf0c      	ite	eq
 8003b02:	2301      	moveq	r3, #1
 8003b04:	2300      	movne	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d0b4      	beq.n	8003a7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b26:	e033      	b.n	8003b90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f87f 	bl	8003c30 <I2C_IsErrorOccurred>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e031      	b.n	8003ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	d025      	beq.n	8003b90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b44:	f7fd ffa6 	bl	8001a94 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d302      	bcc.n	8003b5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d11a      	bne.n	8003b90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d013      	beq.n	8003b90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e007      	b.n	8003ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d1c4      	bne.n	8003b28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bb4:	e02f      	b.n	8003c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f838 	bl	8003c30 <I2C_IsErrorOccurred>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e02d      	b.n	8003c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fd ff63 	bl	8001a94 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11a      	bne.n	8003c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d013      	beq.n	8003c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	f043 0220 	orr.w	r2, r3, #32
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e007      	b.n	8003c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d1c8      	bne.n	8003bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	@ 0x28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d068      	beq.n	8003d2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2210      	movs	r2, #16
 8003c62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c64:	e049      	b.n	8003cfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d045      	beq.n	8003cfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c6e:	f7fd ff11 	bl	8001a94 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <I2C_IsErrorOccurred+0x54>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d13a      	bne.n	8003cfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ca6:	d121      	bne.n	8003cec <I2C_IsErrorOccurred+0xbc>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cae:	d01d      	beq.n	8003cec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d01a      	beq.n	8003cec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cc6:	f7fd fee5 	bl	8001a94 <HAL_GetTick>
 8003cca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ccc:	e00e      	b.n	8003cec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cce:	f7fd fee1 	bl	8001a94 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b19      	cmp	r3, #25
 8003cda:	d907      	bls.n	8003cec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f043 0320 	orr.w	r3, r3, #32
 8003ce2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003cea:	e006      	b.n	8003cfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d1e9      	bne.n	8003cce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d003      	beq.n	8003d10 <I2C_IsErrorOccurred+0xe0>
 8003d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0aa      	beq.n	8003c66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d103      	bne.n	8003d20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f043 0304 	orr.w	r3, r3, #4
 8003d26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	f043 0308 	orr.w	r3, r3, #8
 8003d68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	f043 0302 	orr.w	r3, r3, #2
 8003d8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01c      	beq.n	8003dde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff fe3b 	bl	8003a20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6859      	ldr	r1, [r3, #4]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b0d      	ldr	r3, [pc, #52]	@ (8003dec <I2C_IsErrorOccurred+0x1bc>)
 8003db6:	400b      	ands	r3, r1
 8003db8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3728      	adds	r7, #40	@ 0x28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	fe00e800 	.word	0xfe00e800

08003df0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	817b      	strh	r3, [r7, #10]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e02:	897b      	ldrh	r3, [r7, #10]
 8003e04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e08:	7a7b      	ldrb	r3, [r7, #9]
 8003e0a:	041b      	lsls	r3, r3, #16
 8003e0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	0d5b      	lsrs	r3, r3, #21
 8003e2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e2e:	4b08      	ldr	r3, [pc, #32]	@ (8003e50 <I2C_TransferConfig+0x60>)
 8003e30:	430b      	orrs	r3, r1
 8003e32:	43db      	mvns	r3, r3
 8003e34:	ea02 0103 	and.w	r1, r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	03ff63ff 	.word	0x03ff63ff

08003e54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d138      	bne.n	8003edc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e032      	b.n	8003ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2224      	movs	r2, #36	@ 0x24
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ea6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6819      	ldr	r1, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d139      	bne.n	8003f74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e033      	b.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2224      	movs	r2, #36	@ 0x24
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0b9      	b.n	8004108 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f008 ff61 	bl	800ce70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f003 fc3b 	bl	8007836 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	73fb      	strb	r3, [r7, #15]
 8003fc4:	e03e      	b.n	8004044 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3311      	adds	r3, #17
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3310      	adds	r3, #16
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3313      	adds	r3, #19
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	440b      	add	r3, r1
 8004010:	3320      	adds	r3, #32
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004016:	7bfa      	ldrb	r2, [r7, #15]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	440b      	add	r3, r1
 8004024:	3324      	adds	r3, #36	@ 0x24
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	440b      	add	r3, r1
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	3301      	adds	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	429a      	cmp	r2, r3
 800404c:	d3bb      	bcc.n	8003fc6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]
 8004052:	e044      	b.n	80040de <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	440b      	add	r3, r1
 8004062:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004066:	2200      	movs	r2, #0
 8004068:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	440b      	add	r3, r1
 8004078:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800407c:	7bfa      	ldrb	r2, [r7, #15]
 800407e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004080:	7bfa      	ldrb	r2, [r7, #15]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	440b      	add	r3, r1
 800408e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004096:	7bfa      	ldrb	r2, [r7, #15]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040ac:	7bfa      	ldrb	r2, [r7, #15]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	440b      	add	r3, r1
 80040ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040c2:	7bfa      	ldrb	r2, [r7, #15]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	3301      	adds	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	791b      	ldrb	r3, [r3, #4]
 80040e2:	7bfa      	ldrb	r2, [r7, #15]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d3b5      	bcc.n	8004054 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80040f4:	f003 fbba 	bl	800786c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_PCD_Start+0x16>
 8004122:	2302      	movs	r3, #2
 8004124:	e016      	b.n	8004154 <HAL_PCD_Start+0x44>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f003 fb68 	bl	8007808 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004138:	2101      	movs	r1, #1
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f009 f934 	bl	800d3a8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f005 fe25 	bl	8009d94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f005 fe1e 	bl	8009daa <USB_ReadInterrupts>
 800416e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fab1 	bl	80046e2 <PCD_EP_ISR_Handler>

    return;
 8004180:	e0bd      	b.n	80042fe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004188:	2b00      	cmp	r3, #0
 800418a:	d013      	beq.n	80041b4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004194:	b29a      	uxth	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419e:	b292      	uxth	r2, r2
 80041a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f008 ff04 	bl	800cfb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80041aa:	2100      	movs	r1, #0
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8a9 	bl	8004304 <HAL_PCD_SetAddress>

    return;
 80041b2:	e0a4      	b.n	80042fe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00c      	beq.n	80041d8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041d0:	b292      	uxth	r2, r2
 80041d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80041d6:	e092      	b.n	80042fe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00c      	beq.n	80041fc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041f4:	b292      	uxth	r2, r2
 80041f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80041fa:	e080      	b.n	80042fe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d027      	beq.n	8004256 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800420e:	b29a      	uxth	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0204 	bic.w	r2, r2, #4
 8004218:	b292      	uxth	r2, r2
 800421a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004226:	b29a      	uxth	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0208 	bic.w	r2, r2, #8
 8004230:	b292      	uxth	r2, r2
 8004232:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f008 fef4 	bl	800d024 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800424e:	b292      	uxth	r2, r2
 8004250:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004254:	e053      	b.n	80042fe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800425c:	2b00      	cmp	r3, #0
 800425e:	d027      	beq.n	80042b0 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004268:	b29a      	uxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	b292      	uxth	r2, r2
 8004274:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004280:	b29a      	uxth	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800428a:	b292      	uxth	r2, r2
 800428c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0204 	orr.w	r2, r2, #4
 80042a2:	b292      	uxth	r2, r2
 80042a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f008 fea1 	bl	800cff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80042ae:	e026      	b.n	80042fe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00f      	beq.n	80042da <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042cc:	b292      	uxth	r2, r2
 80042ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f008 fe5f 	bl	800cf96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80042d8:	e011      	b.n	80042fe <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042f6:	b292      	uxth	r2, r2
 80042f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80042fc:	bf00      	nop
  }
}
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_PCD_SetAddress+0x1a>
 800431a:	2302      	movs	r3, #2
 800431c:	e012      	b.n	8004344 <HAL_PCD_SetAddress+0x40>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f005 fd19 	bl	8009d6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	4608      	mov	r0, r1
 8004356:	4611      	mov	r1, r2
 8004358:	461a      	mov	r2, r3
 800435a:	4603      	mov	r3, r0
 800435c:	70fb      	strb	r3, [r7, #3]
 800435e:	460b      	mov	r3, r1
 8004360:	803b      	strh	r3, [r7, #0]
 8004362:	4613      	mov	r3, r2
 8004364:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800436a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800436e:	2b00      	cmp	r3, #0
 8004370:	da0e      	bge.n	8004390 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 0207 	and.w	r2, r3, #7
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	3310      	adds	r3, #16
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	705a      	strb	r2, [r3, #1]
 800438e:	e00e      	b.n	80043ae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	f003 0207 	and.w	r2, r3, #7
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	4413      	add	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043ba:	883a      	ldrh	r2, [r7, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	78ba      	ldrb	r2, [r7, #2]
 80043c4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043c6:	78bb      	ldrb	r3, [r7, #2]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d102      	bne.n	80043d2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_PCD_EP_Open+0x94>
 80043dc:	2302      	movs	r3, #2
 80043de:	e00e      	b.n	80043fe <HAL_PCD_EP_Open+0xb2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68f9      	ldr	r1, [r7, #12]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f003 fa5a 	bl	80078a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80043fc:	7afb      	ldrb	r3, [r7, #11]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004416:	2b00      	cmp	r3, #0
 8004418:	da0e      	bge.n	8004438 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	f003 0207 	and.w	r2, r3, #7
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	3310      	adds	r3, #16
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	705a      	strb	r2, [r3, #1]
 8004436:	e00e      	b.n	8004456 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	f003 0207 	and.w	r2, r3, #7
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_PCD_EP_Close+0x6a>
 800446c:	2302      	movs	r3, #2
 800446e:	e00e      	b.n	800448e <HAL_PCD_EP_Close+0x88>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68f9      	ldr	r1, [r7, #12]
 800447e:	4618      	mov	r0, r3
 8004480:	f003 fdd6 	bl	8008030 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b086      	sub	sp, #24
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	460b      	mov	r3, r1
 80044a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044a6:	7afb      	ldrb	r3, [r7, #11]
 80044a8:	f003 0207 	and.w	r2, r3, #7
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2200      	movs	r2, #0
 80044d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d6:	7afb      	ldrb	r3, [r7, #11]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6979      	ldr	r1, [r7, #20]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f003 ff8e 	bl	800840a <USB_EPStartXfer>

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	f003 0207 	and.w	r2, r3, #7
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	440b      	add	r3, r1
 8004516:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800451a:	681b      	ldr	r3, [r3, #0]
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	460b      	mov	r3, r1
 8004536:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004538:	7afb      	ldrb	r3, [r7, #11]
 800453a:	f003 0207 	and.w	r2, r3, #7
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	3310      	adds	r3, #16
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2200      	movs	r2, #0
 800456c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2201      	movs	r2, #1
 8004572:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004574:	7afb      	ldrb	r3, [r7, #11]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	b2da      	uxtb	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	4618      	mov	r0, r3
 8004588:	f003 ff3f 	bl	800840a <USB_EPStartXfer>

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	460b      	mov	r3, r1
 80045a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	7912      	ldrb	r2, [r2, #4]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d901      	bls.n	80045b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e03e      	b.n	8004632 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	da0e      	bge.n	80045da <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	f003 0207 	and.w	r2, r3, #7
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	3310      	adds	r3, #16
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	4413      	add	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	705a      	strb	r2, [r3, #1]
 80045d8:	e00c      	b.n	80045f4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4413      	add	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_PCD_EP_SetStall+0x7e>
 8004610:	2302      	movs	r3, #2
 8004612:	e00e      	b.n	8004632 <HAL_PCD_EP_SetStall+0x9c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68f9      	ldr	r1, [r7, #12]
 8004622:	4618      	mov	r0, r3
 8004624:	f005 faa3 	bl	8009b6e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	7912      	ldrb	r2, [r2, #4]
 8004650:	4293      	cmp	r3, r2
 8004652:	d901      	bls.n	8004658 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e040      	b.n	80046da <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800465c:	2b00      	cmp	r3, #0
 800465e:	da0e      	bge.n	800467e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	f003 0207 	and.w	r2, r3, #7
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	3310      	adds	r3, #16
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	705a      	strb	r2, [r3, #1]
 800467c:	e00e      	b.n	800469c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	f003 0207 	and.w	r2, r3, #7
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4413      	add	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_PCD_EP_ClrStall+0x82>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e00e      	b.n	80046da <HAL_PCD_EP_ClrStall+0xa0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68f9      	ldr	r1, [r7, #12]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f005 faa0 	bl	8009c10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b096      	sub	sp, #88	@ 0x58
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046ea:	e3bb      	b.n	8004e64 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046f4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80046f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8004706:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800470a:	2b00      	cmp	r3, #0
 800470c:	f040 8175 	bne.w	80049fa <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004710:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	d14e      	bne.n	80047ba <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800472c:	81fb      	strh	r3, [r7, #14]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	89fb      	ldrh	r3, [r7, #14]
 8004734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3310      	adds	r3, #16
 8004744:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800474e:	b29b      	uxth	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4413      	add	r3, r2
 800475a:	3302      	adds	r3, #2
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800476e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004770:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	441a      	add	r2, r3
 800477c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800477e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004780:	2100      	movs	r1, #0
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f008 fbed 	bl	800cf62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	7b1b      	ldrb	r3, [r3, #12]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 8368 	beq.w	8004e64 <PCD_EP_ISR_Handler+0x782>
 8004794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	f040 8363 	bne.w	8004e64 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	7b1b      	ldrb	r3, [r3, #12]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	731a      	strb	r2, [r3, #12]
 80047b8:	e354      	b.n	8004e64 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047c0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80047cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80047d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d034      	beq.n	8004842 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4413      	add	r3, r2
 80047ec:	3306      	adds	r3, #6
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004802:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800480e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004810:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004814:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004816:	b29b      	uxth	r3, r3
 8004818:	f005 fb1d 	bl	8009e56 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	b29a      	uxth	r2, r3
 8004824:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004828:	4013      	ands	r3, r2
 800482a:	823b      	strh	r3, [r7, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	8a3a      	ldrh	r2, [r7, #16]
 8004832:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004836:	b292      	uxth	r2, r2
 8004838:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f008 fb64 	bl	800cf08 <HAL_PCD_SetupStageCallback>
 8004840:	e310      	b.n	8004e64 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004842:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004846:	2b00      	cmp	r3, #0
 8004848:	f280 830c 	bge.w	8004e64 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29a      	uxth	r2, r3
 8004854:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004858:	4013      	ands	r3, r2
 800485a:	83fb      	strh	r3, [r7, #30]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	8bfa      	ldrh	r2, [r7, #30]
 8004862:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004866:	b292      	uxth	r2, r2
 8004868:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004872:	b29b      	uxth	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	3306      	adds	r3, #6
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004894:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d019      	beq.n	80048d2 <PCD_EP_ISR_Handler+0x1f0>
 800489e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d015      	beq.n	80048d2 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ac:	6959      	ldr	r1, [r3, #20]
 80048ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80048b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f005 facd 	bl	8009e56 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80048bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	441a      	add	r2, r3
 80048c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80048ca:	2100      	movs	r1, #0
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f008 fb2d 	bl	800cf2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80048dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80048e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f040 82bd 	bne.w	8004e64 <PCD_EP_ISR_Handler+0x782>
 80048ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80048ee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80048f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048f6:	f000 82b5 	beq.w	8004e64 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	61bb      	str	r3, [r7, #24]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004908:	b29b      	uxth	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	4413      	add	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b29b      	uxth	r3, r3
 8004920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004924:	b29a      	uxth	r2, r3
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	801a      	strh	r2, [r3, #0]
 800492a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <PCD_EP_ISR_Handler+0x266>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004940:	b29a      	uxth	r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	801a      	strh	r2, [r3, #0]
 8004946:	e039      	b.n	80049bc <PCD_EP_ISR_Handler+0x2da>
 8004948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b3e      	cmp	r3, #62	@ 0x3e
 800494e:	d818      	bhi.n	8004982 <PCD_EP_ISR_Handler+0x2a0>
 8004950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	647b      	str	r3, [r7, #68]	@ 0x44
 8004958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <PCD_EP_ISR_Handler+0x288>
 8004964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004966:	3301      	adds	r3, #1
 8004968:	647b      	str	r3, [r7, #68]	@ 0x44
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29a      	uxth	r2, r3
 8004970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004972:	b29b      	uxth	r3, r3
 8004974:	029b      	lsls	r3, r3, #10
 8004976:	b29b      	uxth	r3, r3
 8004978:	4313      	orrs	r3, r2
 800497a:	b29a      	uxth	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	801a      	strh	r2, [r3, #0]
 8004980:	e01c      	b.n	80049bc <PCD_EP_ISR_Handler+0x2da>
 8004982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	647b      	str	r3, [r7, #68]	@ 0x44
 800498a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2b00      	cmp	r3, #0
 8004994:	d102      	bne.n	800499c <PCD_EP_ISR_Handler+0x2ba>
 8004996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004998:	3b01      	subs	r3, #1
 800499a:	647b      	str	r3, [r7, #68]	@ 0x44
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	029b      	lsls	r3, r3, #10
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4313      	orrs	r3, r2
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049cc:	827b      	strh	r3, [r7, #18]
 80049ce:	8a7b      	ldrh	r3, [r7, #18]
 80049d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80049d4:	827b      	strh	r3, [r7, #18]
 80049d6:	8a7b      	ldrh	r3, [r7, #18]
 80049d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049dc:	827b      	strh	r3, [r7, #18]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	8a7b      	ldrh	r3, [r7, #18]
 80049e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	8013      	strh	r3, [r2, #0]
 80049f8:	e234      	b.n	8004e64 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a0e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f280 80fc 	bge.w	8004c10 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004a2e:	4013      	ands	r3, r2
 8004a30:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8004a46:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a4a:	b292      	uxth	r2, r2
 8004a4c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004a4e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4413      	add	r3, r2
 8004a62:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a66:	7b1b      	ldrb	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d125      	bne.n	8004ab8 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4413      	add	r3, r2
 8004a80:	3306      	adds	r3, #6
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a94:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004a98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8092 	beq.w	8004bc6 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa8:	6959      	ldr	r1, [r3, #20]
 8004aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aac:	88da      	ldrh	r2, [r3, #6]
 8004aae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ab2:	f005 f9d0 	bl	8009e56 <USB_ReadPMA>
 8004ab6:	e086      	b.n	8004bc6 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aba:	78db      	ldrb	r3, [r3, #3]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d10a      	bne.n	8004ad6 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ac0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f9d9 	bl	8004e80 <HAL_PCD_EP_DB_Receive>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004ad4:	e077      	b.n	8004bc6 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d024      	beq.n	8004b7e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	3302      	adds	r3, #2
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b5c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004b60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d02e      	beq.n	8004bc6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b6e:	6959      	ldr	r1, [r3, #20]
 8004b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b72:	891a      	ldrh	r2, [r3, #8]
 8004b74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004b78:	f005 f96d 	bl	8009e56 <USB_ReadPMA>
 8004b7c:	e023      	b.n	8004bc6 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4413      	add	r3, r2
 8004b92:	3306      	adds	r3, #6
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6812      	ldr	r2, [r2, #0]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004baa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb8:	6959      	ldr	r1, [r3, #20]
 8004bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bbc:	895a      	ldrh	r2, [r3, #10]
 8004bbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bc2:	f005 f948 	bl	8009e56 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc8:	69da      	ldr	r2, [r3, #28]
 8004bca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bce:	441a      	add	r2, r3
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bdc:	441a      	add	r2, r3
 8004bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <PCD_EP_ISR_Handler+0x514>
 8004bea:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d206      	bcs.n	8004c04 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f008 f995 	bl	800cf2c <HAL_PCD_DataOutStageCallback>
 8004c02:	e005      	b.n	8004c10 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f003 fbfd 	bl	800840a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8123 	beq.w	8004e64 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004c1e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	3310      	adds	r3, #16
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	441a      	add	r2, r3
 8004c5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c70:	78db      	ldrb	r3, [r3, #3]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	f040 80a2 	bne.w	8004dbc <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c80:	7b1b      	ldrb	r3, [r3, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8093 	beq.w	8004dae <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d046      	beq.n	8004d22 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c96:	785b      	ldrb	r3, [r3, #1]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d126      	bne.n	8004cea <PCD_EP_ISR_Handler+0x608>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	4413      	add	r3, r2
 8004cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	011a      	lsls	r2, r3, #4
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cc2:	623b      	str	r3, [r7, #32]
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	801a      	strh	r2, [r3, #0]
 8004ce8:	e061      	b.n	8004dae <PCD_EP_ISR_Handler+0x6cc>
 8004cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d15d      	bne.n	8004dae <PCD_EP_ISR_Handler+0x6cc>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d06:	4413      	add	r3, r2
 8004d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	011a      	lsls	r2, r3, #4
 8004d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d12:	4413      	add	r3, r2
 8004d14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	e045      	b.n	8004dae <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d126      	bne.n	8004d7e <PCD_EP_ISR_Handler+0x69c>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d44:	4413      	add	r3, r2
 8004d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	011a      	lsls	r2, r3, #4
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d50:	4413      	add	r3, r2
 8004d52:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d56:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	801a      	strh	r2, [r3, #0]
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7a:	801a      	strh	r2, [r3, #0]
 8004d7c:	e017      	b.n	8004dae <PCD_EP_ISR_Handler+0x6cc>
 8004d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d113      	bne.n	8004dae <PCD_EP_ISR_Handler+0x6cc>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d94:	4413      	add	r3, r2
 8004d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	011a      	lsls	r2, r3, #4
 8004d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da0:	4413      	add	r3, r2
 8004da2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004daa:	2200      	movs	r2, #0
 8004dac:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f008 f8d4 	bl	800cf62 <HAL_PCD_DataInStageCallback>
 8004dba:	e053      	b.n	8004e64 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004dbc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d146      	bne.n	8004e56 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4413      	add	r3, r2
 8004ddc:	3302      	adds	r3, #2
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004df0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df6:	699a      	ldr	r2, [r3, #24]
 8004df8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d907      	bls.n	8004e10 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e02:	699a      	ldr	r2, [r3, #24]
 8004e04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e08:	1ad2      	subs	r2, r2, r3
 8004e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e0c:	619a      	str	r2, [r3, #24]
 8004e0e:	e002      	b.n	8004e16 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e12:	2200      	movs	r2, #0
 8004e14:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	4619      	mov	r1, r3
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f008 f89c 	bl	800cf62 <HAL_PCD_DataInStageCallback>
 8004e2a:	e01b      	b.n	8004e64 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e34:	441a      	add	r2, r3
 8004e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e38:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e42:	441a      	add	r2, r3
 8004e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e46:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f003 fadb 	bl	800840a <USB_EPStartXfer>
 8004e54:	e006      	b.n	8004e64 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e56:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f91b 	bl	800509a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	b21b      	sxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f6ff ac3b 	blt.w	80046ec <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3758      	adds	r7, #88	@ 0x58
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d07e      	beq.n	8004f96 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	3302      	adds	r3, #2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ec0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	8b7b      	ldrh	r3, [r7, #26]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d306      	bcc.n	8004eda <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	699a      	ldr	r2, [r3, #24]
 8004ed0:	8b7b      	ldrh	r3, [r7, #26]
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	619a      	str	r2, [r3, #24]
 8004ed8:	e002      	b.n	8004ee0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2200      	movs	r2, #0
 8004ede:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d123      	bne.n	8004f30 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f02:	833b      	strh	r3, [r7, #24]
 8004f04:	8b3b      	ldrh	r3, [r7, #24]
 8004f06:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f0a:	833b      	strh	r3, [r7, #24]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	441a      	add	r2, r3
 8004f1a:	8b3b      	ldrh	r3, [r7, #24]
 8004f1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01f      	beq.n	8004f7a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f54:	82fb      	strh	r3, [r7, #22]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	441a      	add	r2, r3
 8004f64:	8afb      	ldrh	r3, [r7, #22]
 8004f66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f7a:	8b7b      	ldrh	r3, [r7, #26]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 8087 	beq.w	8005090 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6959      	ldr	r1, [r3, #20]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	891a      	ldrh	r2, [r3, #8]
 8004f8e:	8b7b      	ldrh	r3, [r7, #26]
 8004f90:	f004 ff61 	bl	8009e56 <USB_ReadPMA>
 8004f94:	e07c      	b.n	8005090 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4413      	add	r3, r2
 8004faa:	3306      	adds	r3, #6
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fbe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	699a      	ldr	r2, [r3, #24]
 8004fc4:	8b7b      	ldrh	r3, [r7, #26]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d306      	bcc.n	8004fd8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	8b7b      	ldrh	r3, [r7, #26]
 8004fd0:	1ad2      	subs	r2, r2, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	619a      	str	r2, [r3, #24]
 8004fd6:	e002      	b.n	8004fde <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d123      	bne.n	800502e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005000:	83fb      	strh	r3, [r7, #30]
 8005002:	8bfb      	ldrh	r3, [r7, #30]
 8005004:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005008:	83fb      	strh	r3, [r7, #30]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	441a      	add	r2, r3
 8005018:	8bfb      	ldrh	r3, [r7, #30]
 800501a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800501e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800502a:	b29b      	uxth	r3, r3
 800502c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d11f      	bne.n	8005078 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800504e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005052:	83bb      	strh	r3, [r7, #28]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	441a      	add	r2, r3
 8005062:	8bbb      	ldrh	r3, [r7, #28]
 8005064:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005068:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800506c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005070:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005074:	b29b      	uxth	r3, r3
 8005076:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005078:	8b7b      	ldrh	r3, [r7, #26]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d008      	beq.n	8005090 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	6959      	ldr	r1, [r3, #20]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	895a      	ldrh	r2, [r3, #10]
 800508a:	8b7b      	ldrh	r3, [r7, #26]
 800508c:	f004 fee3 	bl	8009e56 <USB_ReadPMA>
    }
  }

  return count;
 8005090:	8b7b      	ldrh	r3, [r7, #26]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b0a4      	sub	sp, #144	@ 0x90
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	4613      	mov	r3, r2
 80050a6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 81dd 	beq.w	800546e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050bc:	b29b      	uxth	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4413      	add	r3, r2
 80050c8:	3302      	adds	r3, #2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050dc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	699a      	ldr	r2, [r3, #24]
 80050e4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d907      	bls.n	80050fc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80050f4:	1ad2      	subs	r2, r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	619a      	str	r2, [r3, #24]
 80050fa:	e002      	b.n	8005102 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2200      	movs	r2, #0
 8005100:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f040 80b9 	bne.w	800527e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d126      	bne.n	8005162 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005122:	b29b      	uxth	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005128:	4413      	add	r3, r2
 800512a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	011a      	lsls	r2, r3, #4
 8005132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005134:	4413      	add	r3, r2
 8005136:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800513a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005146:	b29a      	uxth	r2, r3
 8005148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514a:	801a      	strh	r2, [r3, #0]
 800514c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515a:	b29a      	uxth	r2, r3
 800515c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515e:	801a      	strh	r2, [r3, #0]
 8005160:	e01a      	b.n	8005198 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	785b      	ldrb	r3, [r3, #1]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d116      	bne.n	8005198 <HAL_PCD_EP_DB_Transmit+0xfe>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005178:	b29b      	uxth	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517e:	4413      	add	r3, r2
 8005180:	637b      	str	r3, [r7, #52]	@ 0x34
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	011a      	lsls	r2, r3, #4
 8005188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518a:	4413      	add	r3, r2
 800518c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005190:	633b      	str	r3, [r7, #48]	@ 0x30
 8005192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005194:	2200      	movs	r2, #0
 8005196:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	627b      	str	r3, [r7, #36]	@ 0x24
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d126      	bne.n	80051f4 <HAL_PCD_EP_DB_Transmit+0x15a>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	011a      	lsls	r2, r3, #4
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	4413      	add	r3, r2
 80051c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d8:	b29a      	uxth	r2, r3
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	e017      	b.n	8005224 <HAL_PCD_EP_DB_Transmit+0x18a>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d113      	bne.n	8005224 <HAL_PCD_EP_DB_Transmit+0x18a>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005204:	b29b      	uxth	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	4413      	add	r3, r2
 800520c:	627b      	str	r3, [r7, #36]	@ 0x24
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	011a      	lsls	r2, r3, #4
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	4413      	add	r3, r2
 8005218:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800521c:	623b      	str	r3, [r7, #32]
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	2200      	movs	r2, #0
 8005222:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	4619      	mov	r1, r3
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f007 fe99 	bl	800cf62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 82fc 	beq.w	8005834 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005256:	82fb      	strh	r3, [r7, #22]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	441a      	add	r2, r3
 8005266:	8afb      	ldrh	r3, [r7, #22]
 8005268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800526c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005270:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005278:	b29b      	uxth	r3, r3
 800527a:	8013      	strh	r3, [r2, #0]
 800527c:	e2da      	b.n	8005834 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d021      	beq.n	80052cc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29b      	uxth	r3, r3
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800529e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052a2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	441a      	add	r2, r3
 80052b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80052b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	f040 82ae 	bne.w	8005834 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80052e0:	441a      	add	r2, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	69da      	ldr	r2, [r3, #28]
 80052ea:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80052ee:	441a      	add	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	6a1a      	ldr	r2, [r3, #32]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d30b      	bcc.n	8005318 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005310:	1ad2      	subs	r2, r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	621a      	str	r2, [r3, #32]
 8005316:	e017      	b.n	8005348 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d108      	bne.n	8005332 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005320:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005324:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005330:	e00a      	b.n	8005348 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2200      	movs	r2, #0
 8005346:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d165      	bne.n	800541c <HAL_PCD_EP_DB_Transmit+0x382>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800535e:	b29b      	uxth	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005364:	4413      	add	r3, r2
 8005366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	011a      	lsls	r2, r3, #4
 800536e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005370:	4413      	add	r3, r2
 8005372:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005376:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	b29b      	uxth	r3, r3
 800537e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005382:	b29a      	uxth	r2, r3
 8005384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005386:	801a      	strh	r2, [r3, #0]
 8005388:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	e057      	b.n	8005456 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80053a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80053ac:	d818      	bhi.n	80053e0 <HAL_PCD_EP_DB_Transmit+0x346>
 80053ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053b2:	085b      	lsrs	r3, r3, #1
 80053b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_PCD_EP_DB_Transmit+0x32e>
 80053c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c4:	3301      	adds	r3, #1
 80053c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	029b      	lsls	r3, r3, #10
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	4313      	orrs	r3, r2
 80053d8:	b29a      	uxth	r2, r3
 80053da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053dc:	801a      	strh	r2, [r3, #0]
 80053de:	e03a      	b.n	8005456 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80053e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d102      	bne.n	80053fa <HAL_PCD_EP_DB_Transmit+0x360>
 80053f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053f6:	3b01      	subs	r3, #1
 80053f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29a      	uxth	r2, r3
 8005400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005402:	b29b      	uxth	r3, r3
 8005404:	029b      	lsls	r3, r3, #10
 8005406:	b29b      	uxth	r3, r3
 8005408:	4313      	orrs	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005414:	b29a      	uxth	r2, r3
 8005416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	e01c      	b.n	8005456 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d118      	bne.n	8005456 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	647b      	str	r3, [r7, #68]	@ 0x44
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005432:	b29b      	uxth	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005438:	4413      	add	r3, r2
 800543a:	647b      	str	r3, [r7, #68]	@ 0x44
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	011a      	lsls	r2, r3, #4
 8005442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005444:	4413      	add	r3, r2
 8005446:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800544a:	643b      	str	r3, [r7, #64]	@ 0x40
 800544c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005450:	b29a      	uxth	r2, r3
 8005452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005454:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6959      	ldr	r1, [r3, #20]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	891a      	ldrh	r2, [r3, #8]
 8005462:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005466:	b29b      	uxth	r3, r3
 8005468:	f004 fcaf 	bl	8009dca <USB_WritePMA>
 800546c:	e1e2      	b.n	8005834 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005476:	b29b      	uxth	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4413      	add	r3, r2
 8005482:	3306      	adds	r3, #6
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005496:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d307      	bcc.n	80054b6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	619a      	str	r2, [r3, #24]
 80054b4:	e002      	b.n	80054bc <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2200      	movs	r2, #0
 80054ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f040 80c0 	bne.w	8005646 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	785b      	ldrb	r3, [r3, #1]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d126      	bne.n	800551c <HAL_PCD_EP_DB_Transmit+0x482>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054dc:	b29b      	uxth	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054e2:	4413      	add	r3, r2
 80054e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	011a      	lsls	r2, r3, #4
 80054ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054ee:	4413      	add	r3, r2
 80054f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005500:	b29a      	uxth	r2, r3
 8005502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005504:	801a      	strh	r2, [r3, #0]
 8005506:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005514:	b29a      	uxth	r2, r3
 8005516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005518:	801a      	strh	r2, [r3, #0]
 800551a:	e01a      	b.n	8005552 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d116      	bne.n	8005552 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	667b      	str	r3, [r7, #100]	@ 0x64
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005532:	b29b      	uxth	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005538:	4413      	add	r3, r2
 800553a:	667b      	str	r3, [r7, #100]	@ 0x64
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	011a      	lsls	r2, r3, #4
 8005542:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005544:	4413      	add	r3, r2
 8005546:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800554a:	663b      	str	r3, [r7, #96]	@ 0x60
 800554c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800554e:	2200      	movs	r2, #0
 8005550:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	677b      	str	r3, [r7, #116]	@ 0x74
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d12b      	bne.n	80055b8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800556e:	b29b      	uxth	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005574:	4413      	add	r3, r2
 8005576:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	011a      	lsls	r2, r3, #4
 800557e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005580:	4413      	add	r3, r2
 8005582:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005586:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800558a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005596:	b29a      	uxth	r2, r3
 8005598:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800559c:	801a      	strh	r2, [r3, #0]
 800559e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055b4:	801a      	strh	r2, [r3, #0]
 80055b6:	e017      	b.n	80055e8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	785b      	ldrb	r3, [r3, #1]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d113      	bne.n	80055e8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055ce:	4413      	add	r3, r2
 80055d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	011a      	lsls	r2, r3, #4
 80055d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055da:	4413      	add	r3, r2
 80055dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80055e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055e4:	2200      	movs	r2, #0
 80055e6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	4619      	mov	r1, r3
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f007 fcb7 	bl	800cf62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f040 811a 	bne.w	8005834 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b29b      	uxth	r3, r3
 8005612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561a:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	441a      	add	r2, r3
 800562c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005630:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005634:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005638:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800563c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005640:	b29b      	uxth	r3, r3
 8005642:	8013      	strh	r3, [r2, #0]
 8005644:	e0f6      	b.n	8005834 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d121      	bne.n	8005694 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800566a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	441a      	add	r2, r3
 800567c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005688:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800568c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005690:	b29b      	uxth	r3, r3
 8005692:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800569a:	2b01      	cmp	r3, #1
 800569c:	f040 80ca 	bne.w	8005834 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	695a      	ldr	r2, [r3, #20]
 80056a4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80056a8:	441a      	add	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	69da      	ldr	r2, [r3, #28]
 80056b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80056b6:	441a      	add	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	6a1a      	ldr	r2, [r3, #32]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d30b      	bcc.n	80056e0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	6a1a      	ldr	r2, [r3, #32]
 80056d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056d8:	1ad2      	subs	r2, r2, r3
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	621a      	str	r2, [r3, #32]
 80056de:	e017      	b.n	8005710 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d108      	bne.n	80056fa <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80056e8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80056ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80056f8:	e00a      	b.n	8005710 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2200      	movs	r2, #0
 8005706:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	657b      	str	r3, [r7, #84]	@ 0x54
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d165      	bne.n	80057ea <HAL_PCD_EP_DB_Transmit+0x750>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800572c:	b29b      	uxth	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005732:	4413      	add	r3, r2
 8005734:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	011a      	lsls	r2, r3, #4
 800573c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800573e:	4413      	add	r3, r2
 8005740:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005744:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005746:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005750:	b29a      	uxth	r2, r3
 8005752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005754:	801a      	strh	r2, [r3, #0]
 8005756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <HAL_PCD_EP_DB_Transmit+0x6da>
 800575e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29b      	uxth	r3, r3
 8005764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576c:	b29a      	uxth	r2, r3
 800576e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	e054      	b.n	800581e <HAL_PCD_EP_DB_Transmit+0x784>
 8005774:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005778:	2b3e      	cmp	r3, #62	@ 0x3e
 800577a:	d818      	bhi.n	80057ae <HAL_PCD_EP_DB_Transmit+0x714>
 800577c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005780:	085b      	lsrs	r3, r3, #1
 8005782:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005792:	3301      	adds	r3, #1
 8005794:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005796:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29a      	uxth	r2, r3
 800579c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800579e:	b29b      	uxth	r3, r3
 80057a0:	029b      	lsls	r3, r3, #10
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	4313      	orrs	r3, r2
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057aa:	801a      	strh	r2, [r3, #0]
 80057ac:	e037      	b.n	800581e <HAL_PCD_EP_DB_Transmit+0x784>
 80057ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d102      	bne.n	80057c8 <HAL_PCD_EP_DB_Transmit+0x72e>
 80057c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057c4:	3b01      	subs	r3, #1
 80057c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	4313      	orrs	r3, r2
 80057d8:	b29b      	uxth	r3, r3
 80057da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057e6:	801a      	strh	r2, [r3, #0]
 80057e8:	e019      	b.n	800581e <HAL_PCD_EP_DB_Transmit+0x784>
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d115      	bne.n	800581e <HAL_PCD_EP_DB_Transmit+0x784>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005800:	4413      	add	r3, r2
 8005802:	657b      	str	r3, [r7, #84]	@ 0x54
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	011a      	lsls	r2, r3, #4
 800580a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800580c:	4413      	add	r3, r2
 800580e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005812:	653b      	str	r3, [r7, #80]	@ 0x50
 8005814:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005818:	b29a      	uxth	r2, r3
 800581a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800581c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6959      	ldr	r1, [r3, #20]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	895a      	ldrh	r2, [r3, #10]
 800582a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800582e:	b29b      	uxth	r3, r3
 8005830:	f004 facb 	bl	8009dca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800584a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800584e:	82bb      	strh	r3, [r7, #20]
 8005850:	8abb      	ldrh	r3, [r7, #20]
 8005852:	f083 0310 	eor.w	r3, r3, #16
 8005856:	82bb      	strh	r3, [r7, #20]
 8005858:	8abb      	ldrh	r3, [r7, #20]
 800585a:	f083 0320 	eor.w	r3, r3, #32
 800585e:	82bb      	strh	r3, [r7, #20]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	441a      	add	r2, r3
 800586e:	8abb      	ldrh	r3, [r7, #20]
 8005870:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005874:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005878:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800587c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005880:	b29b      	uxth	r3, r3
 8005882:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3790      	adds	r7, #144	@ 0x90
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800588e:	b480      	push	{r7}
 8005890:	b087      	sub	sp, #28
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	607b      	str	r3, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	817b      	strh	r3, [r7, #10]
 800589c:	4613      	mov	r3, r2
 800589e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80058a0:	897b      	ldrh	r3, [r7, #10]
 80058a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00b      	beq.n	80058c4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ac:	897b      	ldrh	r3, [r7, #10]
 80058ae:	f003 0207 	and.w	r2, r3, #7
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	3310      	adds	r3, #16
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	e009      	b.n	80058d8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058c4:	897a      	ldrh	r2, [r7, #10]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80058d8:	893b      	ldrh	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d107      	bne.n	80058ee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2200      	movs	r2, #0
 80058e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	80da      	strh	r2, [r3, #6]
 80058ec:	e00b      	b.n	8005906 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2201      	movs	r2, #1
 80058f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	0c1b      	lsrs	r3, r3, #16
 8005900:	b29a      	uxth	r2, r3
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800591a:	af00      	add	r7, sp, #0
 800591c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005920:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005924:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800592a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	f001 b823 	b.w	8006980 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800593a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800593e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 817d 	beq.w	8005c4a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005950:	4bbc      	ldr	r3, [pc, #752]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 030c 	and.w	r3, r3, #12
 8005958:	2b04      	cmp	r3, #4
 800595a:	d00c      	beq.n	8005976 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800595c:	4bb9      	ldr	r3, [pc, #740]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 030c 	and.w	r3, r3, #12
 8005964:	2b08      	cmp	r3, #8
 8005966:	d15c      	bne.n	8005a22 <HAL_RCC_OscConfig+0x10e>
 8005968:	4bb6      	ldr	r3, [pc, #728]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005974:	d155      	bne.n	8005a22 <HAL_RCC_OscConfig+0x10e>
 8005976:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800597a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005982:	fa93 f3a3 	rbit	r3, r3
 8005986:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800598a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800598e:	fab3 f383 	clz	r3, r3
 8005992:	b2db      	uxtb	r3, r3
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d102      	bne.n	80059a8 <HAL_RCC_OscConfig+0x94>
 80059a2:	4ba8      	ldr	r3, [pc, #672]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	e015      	b.n	80059d4 <HAL_RCC_OscConfig+0xc0>
 80059a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059ac:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80059b4:	fa93 f3a3 	rbit	r3, r3
 80059b8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80059bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059c0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80059c4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80059c8:	fa93 f3a3 	rbit	r3, r3
 80059cc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80059d0:	4b9c      	ldr	r3, [pc, #624]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80059d8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80059dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80059e0:	fa92 f2a2 	rbit	r2, r2
 80059e4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80059e8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80059ec:	fab2 f282 	clz	r2, r2
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	f042 0220 	orr.w	r2, r2, #32
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	f002 021f 	and.w	r2, r2, #31
 80059fc:	2101      	movs	r1, #1
 80059fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005a02:	4013      	ands	r3, r2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 811f 	beq.w	8005c48 <HAL_RCC_OscConfig+0x334>
 8005a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f040 8116 	bne.w	8005c48 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f000 bfaf 	b.w	8006980 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a32:	d106      	bne.n	8005a42 <HAL_RCC_OscConfig+0x12e>
 8005a34:	4b83      	ldr	r3, [pc, #524]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a82      	ldr	r2, [pc, #520]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005a3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	e036      	b.n	8005ab0 <HAL_RCC_OscConfig+0x19c>
 8005a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10c      	bne.n	8005a6c <HAL_RCC_OscConfig+0x158>
 8005a52:	4b7c      	ldr	r3, [pc, #496]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a7b      	ldr	r2, [pc, #492]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	4b79      	ldr	r3, [pc, #484]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a78      	ldr	r2, [pc, #480]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005a64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	e021      	b.n	8005ab0 <HAL_RCC_OscConfig+0x19c>
 8005a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a7c:	d10c      	bne.n	8005a98 <HAL_RCC_OscConfig+0x184>
 8005a7e:	4b71      	ldr	r3, [pc, #452]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a70      	ldr	r2, [pc, #448]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a6d      	ldr	r2, [pc, #436]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	e00b      	b.n	8005ab0 <HAL_RCC_OscConfig+0x19c>
 8005a98:	4b6a      	ldr	r3, [pc, #424]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a69      	ldr	r2, [pc, #420]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	4b67      	ldr	r3, [pc, #412]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a66      	ldr	r2, [pc, #408]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005aae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ab0:	4b64      	ldr	r3, [pc, #400]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab4:	f023 020f 	bic.w	r2, r3, #15
 8005ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005abc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	495f      	ldr	r1, [pc, #380]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ace:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d059      	beq.n	8005b8e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ada:	f7fb ffdb 	bl	8001a94 <HAL_GetTick>
 8005ade:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae2:	e00a      	b.n	8005afa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ae4:	f7fb ffd6 	bl	8001a94 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b64      	cmp	r3, #100	@ 0x64
 8005af2:	d902      	bls.n	8005afa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	f000 bf43 	b.w	8006980 <HAL_RCC_OscConfig+0x106c>
 8005afa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005afe:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b02:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005b06:	fa93 f3a3 	rbit	r3, r3
 8005b0a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005b0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b12:	fab3 f383 	clz	r3, r3
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d102      	bne.n	8005b2c <HAL_RCC_OscConfig+0x218>
 8005b26:	4b47      	ldr	r3, [pc, #284]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	e015      	b.n	8005b58 <HAL_RCC_OscConfig+0x244>
 8005b2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b30:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005b38:	fa93 f3a3 	rbit	r3, r3
 8005b3c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005b40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b44:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005b48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005b4c:	fa93 f3a3 	rbit	r3, r3
 8005b50:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005b54:	4b3b      	ldr	r3, [pc, #236]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005b5c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005b60:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005b64:	fa92 f2a2 	rbit	r2, r2
 8005b68:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005b6c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005b70:	fab2 f282 	clz	r2, r2
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	f042 0220 	orr.w	r2, r2, #32
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	f002 021f 	and.w	r2, r2, #31
 8005b80:	2101      	movs	r1, #1
 8005b82:	fa01 f202 	lsl.w	r2, r1, r2
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ab      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x1d0>
 8005b8c:	e05d      	b.n	8005c4a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8e:	f7fb ff81 	bl	8001a94 <HAL_GetTick>
 8005b92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b96:	e00a      	b.n	8005bae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b98:	f7fb ff7c 	bl	8001a94 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b64      	cmp	r3, #100	@ 0x64
 8005ba6:	d902      	bls.n	8005bae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	f000 bee9 	b.w	8006980 <HAL_RCC_OscConfig+0x106c>
 8005bae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005bb2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005bba:	fa93 f3a3 	rbit	r3, r3
 8005bbe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005bc2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bc6:	fab3 f383 	clz	r3, r3
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d102      	bne.n	8005be0 <HAL_RCC_OscConfig+0x2cc>
 8005bda:	4b1a      	ldr	r3, [pc, #104]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	e015      	b.n	8005c0c <HAL_RCC_OscConfig+0x2f8>
 8005be0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005be4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005bec:	fa93 f3a3 	rbit	r3, r3
 8005bf0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005bf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005bf8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005bfc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005c00:	fa93 f3a3 	rbit	r3, r3
 8005c04:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8005c08:	4b0e      	ldr	r3, [pc, #56]	@ (8005c44 <HAL_RCC_OscConfig+0x330>)
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005c10:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005c14:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005c18:	fa92 f2a2 	rbit	r2, r2
 8005c1c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005c20:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005c24:	fab2 f282 	clz	r2, r2
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	f042 0220 	orr.w	r2, r2, #32
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	f002 021f 	and.w	r2, r2, #31
 8005c34:	2101      	movs	r1, #1
 8005c36:	fa01 f202 	lsl.w	r2, r1, r2
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1ab      	bne.n	8005b98 <HAL_RCC_OscConfig+0x284>
 8005c40:	e003      	b.n	8005c4a <HAL_RCC_OscConfig+0x336>
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 817d 	beq.w	8005f5a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005c60:	4ba6      	ldr	r3, [pc, #664]	@ (8005efc <HAL_RCC_OscConfig+0x5e8>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 030c 	and.w	r3, r3, #12
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005c6c:	4ba3      	ldr	r3, [pc, #652]	@ (8005efc <HAL_RCC_OscConfig+0x5e8>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f003 030c 	and.w	r3, r3, #12
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d172      	bne.n	8005d5e <HAL_RCC_OscConfig+0x44a>
 8005c78:	4ba0      	ldr	r3, [pc, #640]	@ (8005efc <HAL_RCC_OscConfig+0x5e8>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d16c      	bne.n	8005d5e <HAL_RCC_OscConfig+0x44a>
 8005c84:	2302      	movs	r3, #2
 8005c86:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005c8e:	fa93 f3a3 	rbit	r3, r3
 8005c92:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005c96:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c9a:	fab3 f383 	clz	r3, r3
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	f043 0301 	orr.w	r3, r3, #1
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d102      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x3a0>
 8005cae:	4b93      	ldr	r3, [pc, #588]	@ (8005efc <HAL_RCC_OscConfig+0x5e8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	e013      	b.n	8005cdc <HAL_RCC_OscConfig+0x3c8>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cba:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005cbe:	fa93 f3a3 	rbit	r3, r3
 8005cc2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005ccc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005cd0:	fa93 f3a3 	rbit	r3, r3
 8005cd4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005cd8:	4b88      	ldr	r3, [pc, #544]	@ (8005efc <HAL_RCC_OscConfig+0x5e8>)
 8005cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8005ce2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005ce6:	fa92 f2a2 	rbit	r2, r2
 8005cea:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8005cee:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005cf2:	fab2 f282 	clz	r2, r2
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	f042 0220 	orr.w	r2, r2, #32
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	f002 021f 	and.w	r2, r2, #31
 8005d02:	2101      	movs	r1, #1
 8005d04:	fa01 f202 	lsl.w	r2, r1, r2
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCC_OscConfig+0x410>
 8005d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d002      	beq.n	8005d24 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f000 be2e 	b.w	8006980 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d24:	4b75      	ldr	r3, [pc, #468]	@ (8005efc <HAL_RCC_OscConfig+0x5e8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	21f8      	movs	r1, #248	@ 0xf8
 8005d3a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005d42:	fa91 f1a1 	rbit	r1, r1
 8005d46:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8005d4a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8005d4e:	fab1 f181 	clz	r1, r1
 8005d52:	b2c9      	uxtb	r1, r1
 8005d54:	408b      	lsls	r3, r1
 8005d56:	4969      	ldr	r1, [pc, #420]	@ (8005efc <HAL_RCC_OscConfig+0x5e8>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5c:	e0fd      	b.n	8005f5a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8088 	beq.w	8005e80 <HAL_RCC_OscConfig+0x56c>
 8005d70:	2301      	movs	r3, #1
 8005d72:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d76:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8005d7a:	fa93 f3a3 	rbit	r3, r3
 8005d7e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8005d82:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d86:	fab3 f383 	clz	r3, r3
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005d90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	461a      	mov	r2, r3
 8005d98:	2301      	movs	r3, #1
 8005d9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9c:	f7fb fe7a 	bl	8001a94 <HAL_GetTick>
 8005da0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da4:	e00a      	b.n	8005dbc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005da6:	f7fb fe75 	bl	8001a94 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d902      	bls.n	8005dbc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	f000 bde2 	b.w	8006980 <HAL_RCC_OscConfig+0x106c>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8005dc6:	fa93 f3a3 	rbit	r3, r3
 8005dca:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8005dce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd2:	fab3 f383 	clz	r3, r3
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	f043 0301 	orr.w	r3, r3, #1
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d102      	bne.n	8005dec <HAL_RCC_OscConfig+0x4d8>
 8005de6:	4b45      	ldr	r3, [pc, #276]	@ (8005efc <HAL_RCC_OscConfig+0x5e8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	e013      	b.n	8005e14 <HAL_RCC_OscConfig+0x500>
 8005dec:	2302      	movs	r3, #2
 8005dee:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005df6:	fa93 f3a3 	rbit	r3, r3
 8005dfa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005dfe:	2302      	movs	r3, #2
 8005e00:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005e04:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8005e08:	fa93 f3a3 	rbit	r3, r3
 8005e0c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8005e10:	4b3a      	ldr	r3, [pc, #232]	@ (8005efc <HAL_RCC_OscConfig+0x5e8>)
 8005e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e14:	2202      	movs	r2, #2
 8005e16:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8005e1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8005e1e:	fa92 f2a2 	rbit	r2, r2
 8005e22:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8005e26:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8005e2a:	fab2 f282 	clz	r2, r2
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	f042 0220 	orr.w	r2, r2, #32
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	f002 021f 	and.w	r2, r2, #31
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e40:	4013      	ands	r3, r2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0af      	beq.n	8005da6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e46:	4b2d      	ldr	r3, [pc, #180]	@ (8005efc <HAL_RCC_OscConfig+0x5e8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	21f8      	movs	r1, #248	@ 0xf8
 8005e5c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e60:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005e64:	fa91 f1a1 	rbit	r1, r1
 8005e68:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005e6c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005e70:	fab1 f181 	clz	r1, r1
 8005e74:	b2c9      	uxtb	r1, r1
 8005e76:	408b      	lsls	r3, r1
 8005e78:	4920      	ldr	r1, [pc, #128]	@ (8005efc <HAL_RCC_OscConfig+0x5e8>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	600b      	str	r3, [r1, #0]
 8005e7e:	e06c      	b.n	8005f5a <HAL_RCC_OscConfig+0x646>
 8005e80:	2301      	movs	r3, #1
 8005e82:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e86:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005e8a:	fa93 f3a3 	rbit	r3, r3
 8005e8e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8005e92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e96:	fab3 f383 	clz	r3, r3
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005ea0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eac:	f7fb fdf2 	bl	8001a94 <HAL_GetTick>
 8005eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eb4:	e00a      	b.n	8005ecc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eb6:	f7fb fded 	bl	8001a94 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d902      	bls.n	8005ecc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	f000 bd5a 	b.w	8006980 <HAL_RCC_OscConfig+0x106c>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ed6:	fa93 f3a3 	rbit	r3, r3
 8005eda:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8005ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ee2:	fab3 f383 	clz	r3, r3
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d104      	bne.n	8005f00 <HAL_RCC_OscConfig+0x5ec>
 8005ef6:	4b01      	ldr	r3, [pc, #4]	@ (8005efc <HAL_RCC_OscConfig+0x5e8>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	e015      	b.n	8005f28 <HAL_RCC_OscConfig+0x614>
 8005efc:	40021000 	.word	0x40021000
 8005f00:	2302      	movs	r3, #2
 8005f02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f0a:	fa93 f3a3 	rbit	r3, r3
 8005f0e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005f12:	2302      	movs	r3, #2
 8005f14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005f18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f1c:	fa93 f3a3 	rbit	r3, r3
 8005f20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005f24:	4bc8      	ldr	r3, [pc, #800]	@ (8006248 <HAL_RCC_OscConfig+0x934>)
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8005f2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005f32:	fa92 f2a2 	rbit	r2, r2
 8005f36:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8005f3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005f3e:	fab2 f282 	clz	r2, r2
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	f042 0220 	orr.w	r2, r2, #32
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	f002 021f 	and.w	r2, r2, #31
 8005f4e:	2101      	movs	r1, #1
 8005f50:	fa01 f202 	lsl.w	r2, r1, r2
 8005f54:	4013      	ands	r3, r2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1ad      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 8110 	beq.w	8006190 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d079      	beq.n	8006074 <HAL_RCC_OscConfig+0x760>
 8005f80:	2301      	movs	r3, #1
 8005f82:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f8a:	fa93 f3a3 	rbit	r3, r3
 8005f8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8005f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f96:	fab3 f383 	clz	r3, r3
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4bab      	ldr	r3, [pc, #684]	@ (800624c <HAL_RCC_OscConfig+0x938>)
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005faa:	f7fb fd73 	bl	8001a94 <HAL_GetTick>
 8005fae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb2:	e00a      	b.n	8005fca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fb4:	f7fb fd6e 	bl	8001a94 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d902      	bls.n	8005fca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	f000 bcdb 	b.w	8006980 <HAL_RCC_OscConfig+0x106c>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005fd4:	fa93 f3a3 	rbit	r3, r3
 8005fd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fe0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	fa93 f2a3 	rbit	r2, r3
 8005ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	2202      	movs	r2, #2
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	fa93 f2a3 	rbit	r2, r3
 800601a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800601e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006022:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006024:	4b88      	ldr	r3, [pc, #544]	@ (8006248 <HAL_RCC_OscConfig+0x934>)
 8006026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800602c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006030:	2102      	movs	r1, #2
 8006032:	6019      	str	r1, [r3, #0]
 8006034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006038:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	fa93 f1a3 	rbit	r1, r3
 8006042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006046:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800604a:	6019      	str	r1, [r3, #0]
  return result;
 800604c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006050:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	fab3 f383 	clz	r3, r3
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006060:	b2db      	uxtb	r3, r3
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	2101      	movs	r1, #1
 8006068:	fa01 f303 	lsl.w	r3, r1, r3
 800606c:	4013      	ands	r3, r2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0a0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x6a0>
 8006072:	e08d      	b.n	8006190 <HAL_RCC_OscConfig+0x87c>
 8006074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006078:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800607c:	2201      	movs	r2, #1
 800607e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006084:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	fa93 f2a3 	rbit	r2, r3
 800608e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006092:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006096:	601a      	str	r2, [r3, #0]
  return result;
 8006098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800609c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80060a0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060a2:	fab3 f383 	clz	r3, r3
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	4b68      	ldr	r3, [pc, #416]	@ (800624c <HAL_RCC_OscConfig+0x938>)
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	461a      	mov	r2, r3
 80060b2:	2300      	movs	r3, #0
 80060b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060b6:	f7fb fced 	bl	8001a94 <HAL_GetTick>
 80060ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060be:	e00a      	b.n	80060d6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060c0:	f7fb fce8 	bl	8001a94 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d902      	bls.n	80060d6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	f000 bc55 	b.w	8006980 <HAL_RCC_OscConfig+0x106c>
 80060d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80060de:	2202      	movs	r2, #2
 80060e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	fa93 f2a3 	rbit	r2, r3
 80060f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006102:	2202      	movs	r2, #2
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800610a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	fa93 f2a3 	rbit	r2, r3
 8006114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006118:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006122:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006126:	2202      	movs	r2, #2
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800612e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	fa93 f2a3 	rbit	r2, r3
 8006138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800613c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006140:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006142:	4b41      	ldr	r3, [pc, #260]	@ (8006248 <HAL_RCC_OscConfig+0x934>)
 8006144:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800614a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800614e:	2102      	movs	r1, #2
 8006150:	6019      	str	r1, [r3, #0]
 8006152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006156:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	fa93 f1a3 	rbit	r1, r3
 8006160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006164:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006168:	6019      	str	r1, [r3, #0]
  return result;
 800616a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800616e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	fab3 f383 	clz	r3, r3
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	2101      	movs	r1, #1
 8006186:	fa01 f303 	lsl.w	r3, r1, r3
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d197      	bne.n	80060c0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006194:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 81a1 	beq.w	80064e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061a6:	2300      	movs	r3, #0
 80061a8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ac:	4b26      	ldr	r3, [pc, #152]	@ (8006248 <HAL_RCC_OscConfig+0x934>)
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d116      	bne.n	80061e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061b8:	4b23      	ldr	r3, [pc, #140]	@ (8006248 <HAL_RCC_OscConfig+0x934>)
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	4a22      	ldr	r2, [pc, #136]	@ (8006248 <HAL_RCC_OscConfig+0x934>)
 80061be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061c2:	61d3      	str	r3, [r2, #28]
 80061c4:	4b20      	ldr	r3, [pc, #128]	@ (8006248 <HAL_RCC_OscConfig+0x934>)
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80061cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061d0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061da:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80061de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006250 <HAL_RCC_OscConfig+0x93c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d11a      	bne.n	8006228 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061f2:	4b17      	ldr	r3, [pc, #92]	@ (8006250 <HAL_RCC_OscConfig+0x93c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a16      	ldr	r2, [pc, #88]	@ (8006250 <HAL_RCC_OscConfig+0x93c>)
 80061f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061fe:	f7fb fc49 	bl	8001a94 <HAL_GetTick>
 8006202:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006206:	e009      	b.n	800621c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006208:	f7fb fc44 	bl	8001a94 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b64      	cmp	r3, #100	@ 0x64
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e3b1      	b.n	8006980 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800621c:	4b0c      	ldr	r3, [pc, #48]	@ (8006250 <HAL_RCC_OscConfig+0x93c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0ef      	beq.n	8006208 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800622c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d10d      	bne.n	8006254 <HAL_RCC_OscConfig+0x940>
 8006238:	4b03      	ldr	r3, [pc, #12]	@ (8006248 <HAL_RCC_OscConfig+0x934>)
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	4a02      	ldr	r2, [pc, #8]	@ (8006248 <HAL_RCC_OscConfig+0x934>)
 800623e:	f043 0301 	orr.w	r3, r3, #1
 8006242:	6213      	str	r3, [r2, #32]
 8006244:	e03c      	b.n	80062c0 <HAL_RCC_OscConfig+0x9ac>
 8006246:	bf00      	nop
 8006248:	40021000 	.word	0x40021000
 800624c:	10908120 	.word	0x10908120
 8006250:	40007000 	.word	0x40007000
 8006254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006258:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10c      	bne.n	800627e <HAL_RCC_OscConfig+0x96a>
 8006264:	4bc1      	ldr	r3, [pc, #772]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	4ac0      	ldr	r2, [pc, #768]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	6213      	str	r3, [r2, #32]
 8006270:	4bbe      	ldr	r3, [pc, #760]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	4abd      	ldr	r2, [pc, #756]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 8006276:	f023 0304 	bic.w	r3, r3, #4
 800627a:	6213      	str	r3, [r2, #32]
 800627c:	e020      	b.n	80062c0 <HAL_RCC_OscConfig+0x9ac>
 800627e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006282:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	2b05      	cmp	r3, #5
 800628c:	d10c      	bne.n	80062a8 <HAL_RCC_OscConfig+0x994>
 800628e:	4bb7      	ldr	r3, [pc, #732]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	4ab6      	ldr	r2, [pc, #728]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 8006294:	f043 0304 	orr.w	r3, r3, #4
 8006298:	6213      	str	r3, [r2, #32]
 800629a:	4bb4      	ldr	r3, [pc, #720]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	4ab3      	ldr	r2, [pc, #716]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	6213      	str	r3, [r2, #32]
 80062a6:	e00b      	b.n	80062c0 <HAL_RCC_OscConfig+0x9ac>
 80062a8:	4bb0      	ldr	r3, [pc, #704]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	4aaf      	ldr	r2, [pc, #700]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 80062ae:	f023 0301 	bic.w	r3, r3, #1
 80062b2:	6213      	str	r3, [r2, #32]
 80062b4:	4bad      	ldr	r3, [pc, #692]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	4aac      	ldr	r2, [pc, #688]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 80062ba:	f023 0304 	bic.w	r3, r3, #4
 80062be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8081 	beq.w	80063d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d2:	f7fb fbdf 	bl	8001a94 <HAL_GetTick>
 80062d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062da:	e00b      	b.n	80062f4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062dc:	f7fb fbda 	bl	8001a94 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e345      	b.n	8006980 <HAL_RCC_OscConfig+0x106c>
 80062f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80062fc:	2202      	movs	r2, #2
 80062fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006304:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	fa93 f2a3 	rbit	r2, r3
 800630e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006312:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800631c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006320:	2202      	movs	r2, #2
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006328:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	fa93 f2a3 	rbit	r2, r3
 8006332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006336:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800633a:	601a      	str	r2, [r3, #0]
  return result;
 800633c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006340:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006344:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006346:	fab3 f383 	clz	r3, r3
 800634a:	b2db      	uxtb	r3, r3
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f043 0302 	orr.w	r3, r3, #2
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d102      	bne.n	8006360 <HAL_RCC_OscConfig+0xa4c>
 800635a:	4b84      	ldr	r3, [pc, #528]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	e013      	b.n	8006388 <HAL_RCC_OscConfig+0xa74>
 8006360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006364:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006368:	2202      	movs	r2, #2
 800636a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006370:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	fa93 f2a3 	rbit	r2, r3
 800637a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800637e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	4b79      	ldr	r3, [pc, #484]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 8006386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006388:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800638c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006390:	2102      	movs	r1, #2
 8006392:	6011      	str	r1, [r2, #0]
 8006394:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006398:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800639c:	6812      	ldr	r2, [r2, #0]
 800639e:	fa92 f1a2 	rbit	r1, r2
 80063a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063a6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80063aa:	6011      	str	r1, [r2, #0]
  return result;
 80063ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063b0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80063b4:	6812      	ldr	r2, [r2, #0]
 80063b6:	fab2 f282 	clz	r2, r2
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	f002 021f 	and.w	r2, r2, #31
 80063c6:	2101      	movs	r1, #1
 80063c8:	fa01 f202 	lsl.w	r2, r1, r2
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d084      	beq.n	80062dc <HAL_RCC_OscConfig+0x9c8>
 80063d2:	e07f      	b.n	80064d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063d4:	f7fb fb5e 	bl	8001a94 <HAL_GetTick>
 80063d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063dc:	e00b      	b.n	80063f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063de:	f7fb fb59 	bl	8001a94 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e2c4      	b.n	8006980 <HAL_RCC_OscConfig+0x106c>
 80063f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063fa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80063fe:	2202      	movs	r2, #2
 8006400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006406:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	fa93 f2a3 	rbit	r2, r3
 8006410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006414:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800641e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006422:	2202      	movs	r2, #2
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800642a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	fa93 f2a3 	rbit	r2, r3
 8006434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006438:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800643c:	601a      	str	r2, [r3, #0]
  return result;
 800643e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006442:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006446:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006448:	fab3 f383 	clz	r3, r3
 800644c:	b2db      	uxtb	r3, r3
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f043 0302 	orr.w	r3, r3, #2
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d102      	bne.n	8006462 <HAL_RCC_OscConfig+0xb4e>
 800645c:	4b43      	ldr	r3, [pc, #268]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	e013      	b.n	800648a <HAL_RCC_OscConfig+0xb76>
 8006462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006466:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800646a:	2202      	movs	r2, #2
 800646c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006472:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	fa93 f2a3 	rbit	r2, r3
 800647c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006480:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	4b39      	ldr	r3, [pc, #228]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 8006488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800648e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006492:	2102      	movs	r1, #2
 8006494:	6011      	str	r1, [r2, #0]
 8006496:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800649a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800649e:	6812      	ldr	r2, [r2, #0]
 80064a0:	fa92 f1a2 	rbit	r1, r2
 80064a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064a8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80064ac:	6011      	str	r1, [r2, #0]
  return result;
 80064ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064b2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80064b6:	6812      	ldr	r2, [r2, #0]
 80064b8:	fab2 f282 	clz	r2, r2
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	f002 021f 	and.w	r2, r2, #31
 80064c8:	2101      	movs	r1, #1
 80064ca:	fa01 f202 	lsl.w	r2, r1, r2
 80064ce:	4013      	ands	r3, r2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d184      	bne.n	80063de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d105      	bne.n	80064e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064dc:	4b23      	ldr	r3, [pc, #140]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	4a22      	ldr	r2, [pc, #136]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 80064e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8242 	beq.w	800697e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064fa:	4b1c      	ldr	r3, [pc, #112]	@ (800656c <HAL_RCC_OscConfig+0xc58>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f003 030c 	and.w	r3, r3, #12
 8006502:	2b08      	cmp	r3, #8
 8006504:	f000 8213 	beq.w	800692e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800650c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	2b02      	cmp	r3, #2
 8006516:	f040 8162 	bne.w	80067de <HAL_RCC_OscConfig+0xeca>
 800651a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800651e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006522:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800652c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	fa93 f2a3 	rbit	r2, r3
 8006536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800653a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800653e:	601a      	str	r2, [r3, #0]
  return result;
 8006540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006544:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006548:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654a:	fab3 f383 	clz	r3, r3
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006554:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	461a      	mov	r2, r3
 800655c:	2300      	movs	r3, #0
 800655e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006560:	f7fb fa98 	bl	8001a94 <HAL_GetTick>
 8006564:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006568:	e00c      	b.n	8006584 <HAL_RCC_OscConfig+0xc70>
 800656a:	bf00      	nop
 800656c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006570:	f7fb fa90 	bl	8001a94 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e1fd      	b.n	8006980 <HAL_RCC_OscConfig+0x106c>
 8006584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006588:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800658c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006596:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	fa93 f2a3 	rbit	r2, r3
 80065a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065a4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80065a8:	601a      	str	r2, [r3, #0]
  return result;
 80065aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80065b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065b4:	fab3 f383 	clz	r3, r3
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d102      	bne.n	80065ce <HAL_RCC_OscConfig+0xcba>
 80065c8:	4bb0      	ldr	r3, [pc, #704]	@ (800688c <HAL_RCC_OscConfig+0xf78>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	e027      	b.n	800661e <HAL_RCC_OscConfig+0xd0a>
 80065ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065d2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80065d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065e0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	fa93 f2a3 	rbit	r2, r3
 80065ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ee:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065f8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80065fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006606:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	fa93 f2a3 	rbit	r2, r3
 8006610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006614:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	4b9c      	ldr	r3, [pc, #624]	@ (800688c <HAL_RCC_OscConfig+0xf78>)
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006622:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006626:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800662a:	6011      	str	r1, [r2, #0]
 800662c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006630:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	fa92 f1a2 	rbit	r1, r2
 800663a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800663e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006642:	6011      	str	r1, [r2, #0]
  return result;
 8006644:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006648:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800664c:	6812      	ldr	r2, [r2, #0]
 800664e:	fab2 f282 	clz	r2, r2
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	f042 0220 	orr.w	r2, r2, #32
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	f002 021f 	and.w	r2, r2, #31
 800665e:	2101      	movs	r1, #1
 8006660:	fa01 f202 	lsl.w	r2, r1, r2
 8006664:	4013      	ands	r3, r2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d182      	bne.n	8006570 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800666a:	4b88      	ldr	r3, [pc, #544]	@ (800688c <HAL_RCC_OscConfig+0xf78>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006676:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800667e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006682:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	430b      	orrs	r3, r1
 800668c:	497f      	ldr	r1, [pc, #508]	@ (800688c <HAL_RCC_OscConfig+0xf78>)
 800668e:	4313      	orrs	r3, r2
 8006690:	604b      	str	r3, [r1, #4]
 8006692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006696:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800669a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800669e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066a4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	fa93 f2a3 	rbit	r2, r3
 80066ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066b2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80066b6:	601a      	str	r2, [r3, #0]
  return result;
 80066b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066bc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80066c0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066c2:	fab3 f383 	clz	r3, r3
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80066cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	461a      	mov	r2, r3
 80066d4:	2301      	movs	r3, #1
 80066d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d8:	f7fb f9dc 	bl	8001a94 <HAL_GetTick>
 80066dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066e0:	e009      	b.n	80066f6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066e2:	f7fb f9d7 	bl	8001a94 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e144      	b.n	8006980 <HAL_RCC_OscConfig+0x106c>
 80066f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066fa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80066fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006708:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	fa93 f2a3 	rbit	r2, r3
 8006712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006716:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800671a:	601a      	str	r2, [r3, #0]
  return result;
 800671c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006720:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006724:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006726:	fab3 f383 	clz	r3, r3
 800672a:	b2db      	uxtb	r3, r3
 800672c:	095b      	lsrs	r3, r3, #5
 800672e:	b2db      	uxtb	r3, r3
 8006730:	f043 0301 	orr.w	r3, r3, #1
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b01      	cmp	r3, #1
 8006738:	d102      	bne.n	8006740 <HAL_RCC_OscConfig+0xe2c>
 800673a:	4b54      	ldr	r3, [pc, #336]	@ (800688c <HAL_RCC_OscConfig+0xf78>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	e027      	b.n	8006790 <HAL_RCC_OscConfig+0xe7c>
 8006740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006744:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006748:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800674c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006752:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	fa93 f2a3 	rbit	r2, r3
 800675c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006760:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800676a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800676e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006778:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	fa93 f2a3 	rbit	r2, r3
 8006782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006786:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	4b3f      	ldr	r3, [pc, #252]	@ (800688c <HAL_RCC_OscConfig+0xf78>)
 800678e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006790:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006794:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006798:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800679c:	6011      	str	r1, [r2, #0]
 800679e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067a2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	fa92 f1a2 	rbit	r1, r2
 80067ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067b0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80067b4:	6011      	str	r1, [r2, #0]
  return result;
 80067b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067ba:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	fab2 f282 	clz	r2, r2
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	f042 0220 	orr.w	r2, r2, #32
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	f002 021f 	and.w	r2, r2, #31
 80067d0:	2101      	movs	r1, #1
 80067d2:	fa01 f202 	lsl.w	r2, r1, r2
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d082      	beq.n	80066e2 <HAL_RCC_OscConfig+0xdce>
 80067dc:	e0cf      	b.n	800697e <HAL_RCC_OscConfig+0x106a>
 80067de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067e2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80067e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067f0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	fa93 f2a3 	rbit	r2, r3
 80067fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067fe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006802:	601a      	str	r2, [r3, #0]
  return result;
 8006804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006808:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800680c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680e:	fab3 f383 	clz	r3, r3
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006818:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	461a      	mov	r2, r3
 8006820:	2300      	movs	r3, #0
 8006822:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006824:	f7fb f936 	bl	8001a94 <HAL_GetTick>
 8006828:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800682c:	e009      	b.n	8006842 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800682e:	f7fb f931 	bl	8001a94 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e09e      	b.n	8006980 <HAL_RCC_OscConfig+0x106c>
 8006842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006846:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800684a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800684e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006854:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	fa93 f2a3 	rbit	r2, r3
 800685e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006862:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006866:	601a      	str	r2, [r3, #0]
  return result;
 8006868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800686c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006870:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006872:	fab3 f383 	clz	r3, r3
 8006876:	b2db      	uxtb	r3, r3
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f043 0301 	orr.w	r3, r3, #1
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	d104      	bne.n	8006890 <HAL_RCC_OscConfig+0xf7c>
 8006886:	4b01      	ldr	r3, [pc, #4]	@ (800688c <HAL_RCC_OscConfig+0xf78>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	e029      	b.n	80068e0 <HAL_RCC_OscConfig+0xfcc>
 800688c:	40021000 	.word	0x40021000
 8006890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006894:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006898:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800689c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800689e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068a2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	fa93 f2a3 	rbit	r2, r3
 80068ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068b0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ba:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80068be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068c8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	fa93 f2a3 	rbit	r2, r3
 80068d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068d6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	4b2b      	ldr	r3, [pc, #172]	@ (800698c <HAL_RCC_OscConfig+0x1078>)
 80068de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80068e4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80068e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80068ec:	6011      	str	r1, [r2, #0]
 80068ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80068f2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80068f6:	6812      	ldr	r2, [r2, #0]
 80068f8:	fa92 f1a2 	rbit	r1, r2
 80068fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006900:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006904:	6011      	str	r1, [r2, #0]
  return result;
 8006906:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800690a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	fab2 f282 	clz	r2, r2
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	f042 0220 	orr.w	r2, r2, #32
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	f002 021f 	and.w	r2, r2, #31
 8006920:	2101      	movs	r1, #1
 8006922:	fa01 f202 	lsl.w	r2, r1, r2
 8006926:	4013      	ands	r3, r2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d180      	bne.n	800682e <HAL_RCC_OscConfig+0xf1a>
 800692c:	e027      	b.n	800697e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800692e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006932:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e01e      	b.n	8006980 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006942:	4b12      	ldr	r3, [pc, #72]	@ (800698c <HAL_RCC_OscConfig+0x1078>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800694a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800694e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006956:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	429a      	cmp	r2, r3
 8006960:	d10b      	bne.n	800697a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006962:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006966:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800696a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800696e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006976:	429a      	cmp	r2, r3
 8006978:	d001      	beq.n	800697e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40021000 	.word	0x40021000

08006990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b09e      	sub	sp, #120	@ 0x78
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e162      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069a8:	4b90      	ldr	r3, [pc, #576]	@ (8006bec <HAL_RCC_ClockConfig+0x25c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d910      	bls.n	80069d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069b6:	4b8d      	ldr	r3, [pc, #564]	@ (8006bec <HAL_RCC_ClockConfig+0x25c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f023 0207 	bic.w	r2, r3, #7
 80069be:	498b      	ldr	r1, [pc, #556]	@ (8006bec <HAL_RCC_ClockConfig+0x25c>)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c6:	4b89      	ldr	r3, [pc, #548]	@ (8006bec <HAL_RCC_ClockConfig+0x25c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d001      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e14a      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e4:	4b82      	ldr	r3, [pc, #520]	@ (8006bf0 <HAL_RCC_ClockConfig+0x260>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	497f      	ldr	r1, [pc, #508]	@ (8006bf0 <HAL_RCC_ClockConfig+0x260>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80dc 	beq.w	8006bbc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d13c      	bne.n	8006a86 <HAL_RCC_ClockConfig+0xf6>
 8006a0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a14:	fa93 f3a3 	rbit	r3, r3
 8006a18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a1c:	fab3 f383 	clz	r3, r3
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	095b      	lsrs	r3, r3, #5
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	f043 0301 	orr.w	r3, r3, #1
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d102      	bne.n	8006a36 <HAL_RCC_ClockConfig+0xa6>
 8006a30:	4b6f      	ldr	r3, [pc, #444]	@ (8006bf0 <HAL_RCC_ClockConfig+0x260>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	e00f      	b.n	8006a56 <HAL_RCC_ClockConfig+0xc6>
 8006a36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a3e:	fa93 f3a3 	rbit	r3, r3
 8006a42:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a48:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a4c:	fa93 f3a3 	rbit	r3, r3
 8006a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a52:	4b67      	ldr	r3, [pc, #412]	@ (8006bf0 <HAL_RCC_ClockConfig+0x260>)
 8006a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006a5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a5e:	fa92 f2a2 	rbit	r2, r2
 8006a62:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006a64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a66:	fab2 f282 	clz	r2, r2
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	f042 0220 	orr.w	r2, r2, #32
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	f002 021f 	and.w	r2, r2, #31
 8006a76:	2101      	movs	r1, #1
 8006a78:	fa01 f202 	lsl.w	r2, r1, r2
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d17b      	bne.n	8006b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e0f3      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d13c      	bne.n	8006b08 <HAL_RCC_ClockConfig+0x178>
 8006a8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a96:	fa93 f3a3 	rbit	r3, r3
 8006a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9e:	fab3 f383 	clz	r3, r3
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	f043 0301 	orr.w	r3, r3, #1
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d102      	bne.n	8006ab8 <HAL_RCC_ClockConfig+0x128>
 8006ab2:	4b4f      	ldr	r3, [pc, #316]	@ (8006bf0 <HAL_RCC_ClockConfig+0x260>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	e00f      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x148>
 8006ab8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006abc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ac0:	fa93 f3a3 	rbit	r3, r3
 8006ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006aca:	643b      	str	r3, [r7, #64]	@ 0x40
 8006acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ace:	fa93 f3a3 	rbit	r3, r3
 8006ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ad4:	4b46      	ldr	r3, [pc, #280]	@ (8006bf0 <HAL_RCC_ClockConfig+0x260>)
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006adc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006ade:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ae0:	fa92 f2a2 	rbit	r2, r2
 8006ae4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006ae6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ae8:	fab2 f282 	clz	r2, r2
 8006aec:	b2d2      	uxtb	r2, r2
 8006aee:	f042 0220 	orr.w	r2, r2, #32
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	f002 021f 	and.w	r2, r2, #31
 8006af8:	2101      	movs	r1, #1
 8006afa:	fa01 f202 	lsl.w	r2, r1, r2
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d13a      	bne.n	8006b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e0b2      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2de>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	fa93 f3a3 	rbit	r3, r3
 8006b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b16:	fab3 f383 	clz	r3, r3
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	095b      	lsrs	r3, r3, #5
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f043 0301 	orr.w	r3, r3, #1
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d102      	bne.n	8006b30 <HAL_RCC_ClockConfig+0x1a0>
 8006b2a:	4b31      	ldr	r3, [pc, #196]	@ (8006bf0 <HAL_RCC_ClockConfig+0x260>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	e00d      	b.n	8006b4c <HAL_RCC_ClockConfig+0x1bc>
 8006b30:	2302      	movs	r3, #2
 8006b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b36:	fa93 f3a3 	rbit	r3, r3
 8006b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	623b      	str	r3, [r7, #32]
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	fa93 f3a3 	rbit	r3, r3
 8006b46:	61fb      	str	r3, [r7, #28]
 8006b48:	4b29      	ldr	r3, [pc, #164]	@ (8006bf0 <HAL_RCC_ClockConfig+0x260>)
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	61ba      	str	r2, [r7, #24]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	fa92 f2a2 	rbit	r2, r2
 8006b56:	617a      	str	r2, [r7, #20]
  return result;
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	fab2 f282 	clz	r2, r2
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	f042 0220 	orr.w	r2, r2, #32
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	f002 021f 	and.w	r2, r2, #31
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b70:	4013      	ands	r3, r2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e079      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf0 <HAL_RCC_ClockConfig+0x260>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f023 0203 	bic.w	r2, r3, #3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	491a      	ldr	r1, [pc, #104]	@ (8006bf0 <HAL_RCC_ClockConfig+0x260>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b8c:	f7fa ff82 	bl	8001a94 <HAL_GetTick>
 8006b90:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b92:	e00a      	b.n	8006baa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b94:	f7fa ff7e 	bl	8001a94 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e061      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006baa:	4b11      	ldr	r3, [pc, #68]	@ (8006bf0 <HAL_RCC_ClockConfig+0x260>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f003 020c 	and.w	r2, r3, #12
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d1eb      	bne.n	8006b94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006bec <HAL_RCC_ClockConfig+0x25c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d214      	bcs.n	8006bf4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bca:	4b08      	ldr	r3, [pc, #32]	@ (8006bec <HAL_RCC_ClockConfig+0x25c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f023 0207 	bic.w	r2, r3, #7
 8006bd2:	4906      	ldr	r1, [pc, #24]	@ (8006bec <HAL_RCC_ClockConfig+0x25c>)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bda:	4b04      	ldr	r3, [pc, #16]	@ (8006bec <HAL_RCC_ClockConfig+0x25c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d005      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e040      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2de>
 8006bec:	40022000 	.word	0x40022000
 8006bf0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d008      	beq.n	8006c12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c00:	4b1d      	ldr	r3, [pc, #116]	@ (8006c78 <HAL_RCC_ClockConfig+0x2e8>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	491a      	ldr	r1, [pc, #104]	@ (8006c78 <HAL_RCC_ClockConfig+0x2e8>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d009      	beq.n	8006c32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c1e:	4b16      	ldr	r3, [pc, #88]	@ (8006c78 <HAL_RCC_ClockConfig+0x2e8>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	4912      	ldr	r1, [pc, #72]	@ (8006c78 <HAL_RCC_ClockConfig+0x2e8>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006c32:	f000 f829 	bl	8006c88 <HAL_RCC_GetSysClockFreq>
 8006c36:	4601      	mov	r1, r0
 8006c38:	4b0f      	ldr	r3, [pc, #60]	@ (8006c78 <HAL_RCC_ClockConfig+0x2e8>)
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c40:	22f0      	movs	r2, #240	@ 0xf0
 8006c42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	fa92 f2a2 	rbit	r2, r2
 8006c4a:	60fa      	str	r2, [r7, #12]
  return result;
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	fab2 f282 	clz	r2, r2
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	40d3      	lsrs	r3, r2
 8006c56:	4a09      	ldr	r2, [pc, #36]	@ (8006c7c <HAL_RCC_ClockConfig+0x2ec>)
 8006c58:	5cd3      	ldrb	r3, [r2, r3]
 8006c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8006c5e:	4a08      	ldr	r2, [pc, #32]	@ (8006c80 <HAL_RCC_ClockConfig+0x2f0>)
 8006c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006c62:	4b08      	ldr	r3, [pc, #32]	@ (8006c84 <HAL_RCC_ClockConfig+0x2f4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fa fb8c 	bl	8001384 <HAL_InitTick>
  
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3778      	adds	r7, #120	@ 0x78
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	0800d56c 	.word	0x0800d56c
 8006c80:	20000008 	.word	0x20000008
 8006c84:	2000000c 	.word	0x2000000c

08006c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	2300      	movs	r3, #0
 8006c94:	60bb      	str	r3, [r7, #8]
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x94>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f003 030c 	and.w	r3, r3, #12
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d002      	beq.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x30>
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d003      	beq.n	8006cbe <HAL_RCC_GetSysClockFreq+0x36>
 8006cb6:	e026      	b.n	8006d06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cb8:	4b19      	ldr	r3, [pc, #100]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8006cba:	613b      	str	r3, [r7, #16]
      break;
 8006cbc:	e026      	b.n	8006d0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	0c9b      	lsrs	r3, r3, #18
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	4a17      	ldr	r2, [pc, #92]	@ (8006d24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006cc8:	5cd3      	ldrb	r3, [r2, r3]
 8006cca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006ccc:	4b13      	ldr	r3, [pc, #76]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x94>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	4a14      	ldr	r2, [pc, #80]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006cd6:	5cd3      	ldrb	r3, [r2, r3]
 8006cd8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d008      	beq.n	8006cf6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006ce4:	4a0e      	ldr	r2, [pc, #56]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	fb02 f303 	mul.w	r3, r2, r3
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	e004      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	613b      	str	r3, [r7, #16]
      break;
 8006d04:	e002      	b.n	8006d0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006d08:	613b      	str	r3, [r7, #16]
      break;
 8006d0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d0c:	693b      	ldr	r3, [r7, #16]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40021000 	.word	0x40021000
 8006d20:	00f42400 	.word	0x00f42400
 8006d24:	0800db80 	.word	0x0800db80
 8006d28:	0800db90 	.word	0x0800db90
 8006d2c:	003d0900 	.word	0x003d0900
 8006d30:	007a1200 	.word	0x007a1200

08006d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d38:	4b03      	ldr	r3, [pc, #12]	@ (8006d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000008 	.word	0x20000008

08006d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006d52:	f7ff ffef 	bl	8006d34 <HAL_RCC_GetHCLKFreq>
 8006d56:	4601      	mov	r1, r0
 8006d58:	4b0b      	ldr	r3, [pc, #44]	@ (8006d88 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006d60:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006d64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	fa92 f2a2 	rbit	r2, r2
 8006d6c:	603a      	str	r2, [r7, #0]
  return result;
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	fab2 f282 	clz	r2, r2
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	40d3      	lsrs	r3, r2
 8006d78:	4a04      	ldr	r2, [pc, #16]	@ (8006d8c <HAL_RCC_GetPCLK2Freq+0x40>)
 8006d7a:	5cd3      	ldrb	r3, [r2, r3]
 8006d7c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	0800d57c 	.word	0x0800d57c

08006d90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	220f      	movs	r2, #15
 8006d9e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006da0:	4b12      	ldr	r3, [pc, #72]	@ (8006dec <HAL_RCC_GetClockConfig+0x5c>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f003 0203 	and.w	r2, r3, #3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006dac:	4b0f      	ldr	r3, [pc, #60]	@ (8006dec <HAL_RCC_GetClockConfig+0x5c>)
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006db8:	4b0c      	ldr	r3, [pc, #48]	@ (8006dec <HAL_RCC_GetClockConfig+0x5c>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006dc4:	4b09      	ldr	r3, [pc, #36]	@ (8006dec <HAL_RCC_GetClockConfig+0x5c>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	08db      	lsrs	r3, r3, #3
 8006dca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006dd2:	4b07      	ldr	r3, [pc, #28]	@ (8006df0 <HAL_RCC_GetClockConfig+0x60>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0207 	and.w	r2, r3, #7
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	601a      	str	r2, [r3, #0]
}
 8006dde:	bf00      	nop
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40021000 	.word	0x40021000
 8006df0:	40022000 	.word	0x40022000

08006df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b092      	sub	sp, #72	@ 0x48
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006e04:	2300      	movs	r3, #0
 8006e06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 80d4 	beq.w	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e18:	4b4e      	ldr	r3, [pc, #312]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10e      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e24:	4b4b      	ldr	r3, [pc, #300]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	4a4a      	ldr	r2, [pc, #296]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e2e:	61d3      	str	r3, [r2, #28]
 8006e30:	4b48      	ldr	r3, [pc, #288]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e42:	4b45      	ldr	r3, [pc, #276]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d118      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e4e:	4b42      	ldr	r3, [pc, #264]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a41      	ldr	r2, [pc, #260]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e58:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e5a:	f7fa fe1b 	bl	8001a94 <HAL_GetTick>
 8006e5e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e60:	e008      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e62:	f7fa fe17 	bl	8001a94 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b64      	cmp	r3, #100	@ 0x64
 8006e6e:	d901      	bls.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e169      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e74:	4b38      	ldr	r3, [pc, #224]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0f0      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e80:	4b34      	ldr	r3, [pc, #208]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8084 	beq.w	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d07c      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eaa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006eae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb2:	fa93 f3a3 	rbit	r3, r3
 8006eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006eba:	fab3 f383 	clz	r3, r3
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4b26      	ldr	r3, [pc, #152]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2301      	movs	r3, #1
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed6:	fa93 f3a3 	rbit	r3, r3
 8006eda:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ede:	fab3 f383 	clz	r3, r3
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	461a      	mov	r2, r3
 8006eee:	2300      	movs	r3, #0
 8006ef0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ef2:	4a18      	ldr	r2, [pc, #96]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ef6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d04b      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f02:	f7fa fdc7 	bl	8001a94 <HAL_GetTick>
 8006f06:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f08:	e00a      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f0a:	f7fa fdc3 	bl	8001a94 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e113      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006f20:	2302      	movs	r3, #2
 8006f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f26:	fa93 f3a3 	rbit	r3, r3
 8006f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	623b      	str	r3, [r7, #32]
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	fa93 f3a3 	rbit	r3, r3
 8006f36:	61fb      	str	r3, [r7, #28]
  return result;
 8006f38:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f3a:	fab3 f383 	clz	r3, r3
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f043 0302 	orr.w	r3, r3, #2
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d108      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006f4e:	4b01      	ldr	r3, [pc, #4]	@ (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	e00d      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006f54:	40021000 	.word	0x40021000
 8006f58:	40007000 	.word	0x40007000
 8006f5c:	10908100 	.word	0x10908100
 8006f60:	2302      	movs	r3, #2
 8006f62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	fa93 f3a3 	rbit	r3, r3
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	4b78      	ldr	r3, [pc, #480]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	2202      	movs	r2, #2
 8006f72:	613a      	str	r2, [r7, #16]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	fa92 f2a2 	rbit	r2, r2
 8006f7a:	60fa      	str	r2, [r7, #12]
  return result;
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	fab2 f282 	clz	r2, r2
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	f002 021f 	and.w	r2, r2, #31
 8006f8e:	2101      	movs	r1, #1
 8006f90:	fa01 f202 	lsl.w	r2, r1, r2
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0b7      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006f9a:	4b6d      	ldr	r3, [pc, #436]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	496a      	ldr	r1, [pc, #424]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006fac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d105      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fb4:	4b66      	ldr	r3, [pc, #408]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	4a65      	ldr	r2, [pc, #404]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d008      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fcc:	4b60      	ldr	r3, [pc, #384]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd0:	f023 0203 	bic.w	r2, r3, #3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	495d      	ldr	r1, [pc, #372]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d008      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fea:	4b59      	ldr	r3, [pc, #356]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	4956      	ldr	r1, [pc, #344]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b00      	cmp	r3, #0
 8007006:	d008      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007008:	4b51      	ldr	r3, [pc, #324]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800700a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	494e      	ldr	r1, [pc, #312]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007016:	4313      	orrs	r3, r2
 8007018:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	2b00      	cmp	r3, #0
 8007024:	d008      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007026:	4b4a      	ldr	r3, [pc, #296]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702a:	f023 0210 	bic.w	r2, r3, #16
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	4947      	ldr	r1, [pc, #284]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007034:	4313      	orrs	r3, r2
 8007036:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d008      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007044:	4b42      	ldr	r3, [pc, #264]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007050:	493f      	ldr	r1, [pc, #252]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007052:	4313      	orrs	r3, r2
 8007054:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d008      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007062:	4b3b      	ldr	r3, [pc, #236]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007066:	f023 0220 	bic.w	r2, r3, #32
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	4938      	ldr	r1, [pc, #224]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007070:	4313      	orrs	r3, r2
 8007072:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d008      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007080:	4b33      	ldr	r3, [pc, #204]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007084:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	4930      	ldr	r1, [pc, #192]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800708e:	4313      	orrs	r3, r2
 8007090:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0310 	and.w	r3, r3, #16
 800709a:	2b00      	cmp	r3, #0
 800709c:	d008      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800709e:	4b2c      	ldr	r3, [pc, #176]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	4929      	ldr	r1, [pc, #164]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80070bc:	4b24      	ldr	r3, [pc, #144]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c8:	4921      	ldr	r1, [pc, #132]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d008      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80070da:	4b1d      	ldr	r3, [pc, #116]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070de:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e6:	491a      	ldr	r1, [pc, #104]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d008      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80070f8:	4b15      	ldr	r3, [pc, #84]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fc:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007104:	4912      	ldr	r1, [pc, #72]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007106:	4313      	orrs	r3, r2
 8007108:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d008      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007116:	4b0e      	ldr	r3, [pc, #56]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007122:	490b      	ldr	r1, [pc, #44]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007124:	4313      	orrs	r3, r2
 8007126:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d008      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007134:	4b06      	ldr	r3, [pc, #24]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007138:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007140:	4903      	ldr	r1, [pc, #12]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007142:	4313      	orrs	r3, r2
 8007144:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3748      	adds	r7, #72	@ 0x48
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	40021000 	.word	0x40021000

08007154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e09d      	b.n	80072a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716a:	2b00      	cmp	r3, #0
 800716c:	d108      	bne.n	8007180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007176:	d009      	beq.n	800718c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	61da      	str	r2, [r3, #28]
 800717e:	e005      	b.n	800718c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fa f876 	bl	8001298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80071cc:	d902      	bls.n	80071d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	e002      	b.n	80071da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80071d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80071e2:	d007      	beq.n	80071f4 <HAL_SPI_Init+0xa0>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80071ec:	d002      	beq.n	80071f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	431a      	orrs	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800722c:	431a      	orrs	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007236:	ea42 0103 	orr.w	r1, r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	0c1b      	lsrs	r3, r3, #16
 8007250:	f003 0204 	and.w	r2, r3, #4
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007258:	f003 0310 	and.w	r3, r3, #16
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007270:	ea42 0103 	orr.w	r1, r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	69da      	ldr	r2, [r3, #28]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007290:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e049      	b.n	8007350 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d106      	bne.n	80072d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f841 	bl	8007358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2202      	movs	r2, #2
 80072da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3304      	adds	r3, #4
 80072e6:	4619      	mov	r1, r3
 80072e8:	4610      	mov	r0, r2
 80072ea:	f000 f9d3 	bl	8007694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b01      	cmp	r3, #1
 800737e:	d001      	beq.n	8007384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e04a      	b.n	800741a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0201 	orr.w	r2, r2, #1
 800739a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a21      	ldr	r2, [pc, #132]	@ (8007428 <HAL_TIM_Base_Start_IT+0xbc>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d018      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x6c>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ae:	d013      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x6c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1d      	ldr	r2, [pc, #116]	@ (800742c <HAL_TIM_Base_Start_IT+0xc0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00e      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x6c>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1c      	ldr	r2, [pc, #112]	@ (8007430 <HAL_TIM_Base_Start_IT+0xc4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d009      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x6c>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a1a      	ldr	r2, [pc, #104]	@ (8007434 <HAL_TIM_Base_Start_IT+0xc8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d004      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0x6c>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a19      	ldr	r2, [pc, #100]	@ (8007438 <HAL_TIM_Base_Start_IT+0xcc>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d115      	bne.n	8007404 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689a      	ldr	r2, [r3, #8]
 80073de:	4b17      	ldr	r3, [pc, #92]	@ (800743c <HAL_TIM_Base_Start_IT+0xd0>)
 80073e0:	4013      	ands	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b06      	cmp	r3, #6
 80073e8:	d015      	beq.n	8007416 <HAL_TIM_Base_Start_IT+0xaa>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073f0:	d011      	beq.n	8007416 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f042 0201 	orr.w	r2, r2, #1
 8007400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007402:	e008      	b.n	8007416 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	e000      	b.n	8007418 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	40012c00 	.word	0x40012c00
 800742c:	40000400 	.word	0x40000400
 8007430:	40000800 	.word	0x40000800
 8007434:	40013400 	.word	0x40013400
 8007438:	40014000 	.word	0x40014000
 800743c:	00010007 	.word	0x00010007

08007440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d020      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01b      	beq.n	80074a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0202 	mvn.w	r2, #2
 8007474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	f003 0303 	and.w	r3, r3, #3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f8e4 	bl	8007658 <HAL_TIM_IC_CaptureCallback>
 8007490:	e005      	b.n	800749e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f8d6 	bl	8007644 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f8e7 	bl	800766c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 0304 	and.w	r3, r3, #4
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d020      	beq.n	80074f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01b      	beq.n	80074f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0204 	mvn.w	r2, #4
 80074c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f8be 	bl	8007658 <HAL_TIM_IC_CaptureCallback>
 80074dc:	e005      	b.n	80074ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f8b0 	bl	8007644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f8c1 	bl	800766c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d020      	beq.n	800753c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01b      	beq.n	800753c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0208 	mvn.w	r2, #8
 800750c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2204      	movs	r2, #4
 8007512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f898 	bl	8007658 <HAL_TIM_IC_CaptureCallback>
 8007528:	e005      	b.n	8007536 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f88a 	bl	8007644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f89b 	bl	800766c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b00      	cmp	r3, #0
 8007544:	d020      	beq.n	8007588 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f003 0310 	and.w	r3, r3, #16
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01b      	beq.n	8007588 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0210 	mvn.w	r2, #16
 8007558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2208      	movs	r2, #8
 800755e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f872 	bl	8007658 <HAL_TIM_IC_CaptureCallback>
 8007574:	e005      	b.n	8007582 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f864 	bl	8007644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f875 	bl	800766c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00c      	beq.n	80075ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d007      	beq.n	80075ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0201 	mvn.w	r2, #1
 80075a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7f9 fb62 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00c      	beq.n	80075d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d007      	beq.n	80075d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80075c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f908 	bl	80077e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00c      	beq.n	80075f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d007      	beq.n	80075f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80075ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f900 	bl	80077f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00c      	beq.n	8007618 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d007      	beq.n	8007618 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f834 	bl	8007680 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00c      	beq.n	800763c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f003 0320 	and.w	r3, r3, #32
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f06f 0220 	mvn.w	r2, #32
 8007634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f8c8 	bl	80077cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a42      	ldr	r2, [pc, #264]	@ (80077b0 <TIM_Base_SetConfig+0x11c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00f      	beq.n	80076cc <TIM_Base_SetConfig+0x38>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b2:	d00b      	beq.n	80076cc <TIM_Base_SetConfig+0x38>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a3f      	ldr	r2, [pc, #252]	@ (80077b4 <TIM_Base_SetConfig+0x120>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d007      	beq.n	80076cc <TIM_Base_SetConfig+0x38>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a3e      	ldr	r2, [pc, #248]	@ (80077b8 <TIM_Base_SetConfig+0x124>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d003      	beq.n	80076cc <TIM_Base_SetConfig+0x38>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a3d      	ldr	r2, [pc, #244]	@ (80077bc <TIM_Base_SetConfig+0x128>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d108      	bne.n	80076de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a33      	ldr	r2, [pc, #204]	@ (80077b0 <TIM_Base_SetConfig+0x11c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01b      	beq.n	800771e <TIM_Base_SetConfig+0x8a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ec:	d017      	beq.n	800771e <TIM_Base_SetConfig+0x8a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a30      	ldr	r2, [pc, #192]	@ (80077b4 <TIM_Base_SetConfig+0x120>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d013      	beq.n	800771e <TIM_Base_SetConfig+0x8a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a2f      	ldr	r2, [pc, #188]	@ (80077b8 <TIM_Base_SetConfig+0x124>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00f      	beq.n	800771e <TIM_Base_SetConfig+0x8a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a2e      	ldr	r2, [pc, #184]	@ (80077bc <TIM_Base_SetConfig+0x128>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00b      	beq.n	800771e <TIM_Base_SetConfig+0x8a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a2d      	ldr	r2, [pc, #180]	@ (80077c0 <TIM_Base_SetConfig+0x12c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d007      	beq.n	800771e <TIM_Base_SetConfig+0x8a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a2c      	ldr	r2, [pc, #176]	@ (80077c4 <TIM_Base_SetConfig+0x130>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d003      	beq.n	800771e <TIM_Base_SetConfig+0x8a>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a2b      	ldr	r2, [pc, #172]	@ (80077c8 <TIM_Base_SetConfig+0x134>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d108      	bne.n	8007730 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4313      	orrs	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a16      	ldr	r2, [pc, #88]	@ (80077b0 <TIM_Base_SetConfig+0x11c>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d00f      	beq.n	800777c <TIM_Base_SetConfig+0xe8>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a17      	ldr	r2, [pc, #92]	@ (80077bc <TIM_Base_SetConfig+0x128>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00b      	beq.n	800777c <TIM_Base_SetConfig+0xe8>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a16      	ldr	r2, [pc, #88]	@ (80077c0 <TIM_Base_SetConfig+0x12c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d007      	beq.n	800777c <TIM_Base_SetConfig+0xe8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a15      	ldr	r2, [pc, #84]	@ (80077c4 <TIM_Base_SetConfig+0x130>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d003      	beq.n	800777c <TIM_Base_SetConfig+0xe8>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a14      	ldr	r2, [pc, #80]	@ (80077c8 <TIM_Base_SetConfig+0x134>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d103      	bne.n	8007784 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	691a      	ldr	r2, [r3, #16]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b01      	cmp	r3, #1
 8007794:	d105      	bne.n	80077a2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f023 0201 	bic.w	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	611a      	str	r2, [r3, #16]
  }
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	40012c00 	.word	0x40012c00
 80077b4:	40000400 	.word	0x40000400
 80077b8:	40000800 	.word	0x40000800
 80077bc:	40013400 	.word	0x40013400
 80077c0:	40014000 	.word	0x40014000
 80077c4:	40014400 	.word	0x40014400
 80077c8:	40014800 	.word	0x40014800

080077cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007818:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800781c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	b29a      	uxth	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800783e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007842:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800784a:	b29a      	uxth	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	b29b      	uxth	r3, r3
 8007850:	43db      	mvns	r3, r3
 8007852:	b29b      	uxth	r3, r3
 8007854:	4013      	ands	r3, r2
 8007856:	b29a      	uxth	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	1d3b      	adds	r3, r7, #4
 8007876:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2201      	movs	r2, #1
 800787e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b09d      	sub	sp, #116	@ 0x74
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80078ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	78db      	ldrb	r3, [r3, #3]
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d81f      	bhi.n	800791a <USB_ActivateEndpoint+0x72>
 80078da:	a201      	add	r2, pc, #4	@ (adr r2, 80078e0 <USB_ActivateEndpoint+0x38>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	080078f1 	.word	0x080078f1
 80078e4:	0800790d 	.word	0x0800790d
 80078e8:	08007923 	.word	0x08007923
 80078ec:	080078ff 	.word	0x080078ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80078f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80078f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80078fc:	e012      	b.n	8007924 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80078fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007902:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007906:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800790a:	e00b      	b.n	8007924 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800790c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007910:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007914:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007918:	e004      	b.n	8007924 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007920:	e000      	b.n	8007924 <USB_ActivateEndpoint+0x7c>
      break;
 8007922:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	441a      	add	r2, r3
 800792e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800793a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800793e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007942:	b29b      	uxth	r3, r3
 8007944:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	b21b      	sxth	r3, r3
 8007956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800795a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800795e:	b21a      	sxth	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	b21b      	sxth	r3, r3
 8007966:	4313      	orrs	r3, r2
 8007968:	b21b      	sxth	r3, r3
 800796a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	441a      	add	r2, r3
 8007978:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800797c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800798c:	b29b      	uxth	r3, r3
 800798e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	7b1b      	ldrb	r3, [r3, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f040 8178 	bne.w	8007c8a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	785b      	ldrb	r3, [r3, #1]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 8084 	beq.w	8007aac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	61bb      	str	r3, [r7, #24]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	4413      	add	r3, r2
 80079b6:	61bb      	str	r3, [r7, #24]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	011a      	lsls	r2, r3, #4
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	88db      	ldrh	r3, [r3, #6]
 80079cc:	085b      	lsrs	r3, r3, #1
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	827b      	strh	r3, [r7, #18]
 80079e6:	8a7b      	ldrh	r3, [r7, #18]
 80079e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d01b      	beq.n	8007a28 <USB_ActivateEndpoint+0x180>
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a06:	823b      	strh	r3, [r7, #16]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	441a      	add	r2, r3
 8007a12:	8a3b      	ldrh	r3, [r7, #16]
 8007a14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	78db      	ldrb	r3, [r3, #3]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d020      	beq.n	8007a72 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a46:	81bb      	strh	r3, [r7, #12]
 8007a48:	89bb      	ldrh	r3, [r7, #12]
 8007a4a:	f083 0320 	eor.w	r3, r3, #32
 8007a4e:	81bb      	strh	r3, [r7, #12]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	441a      	add	r2, r3
 8007a5a:	89bb      	ldrh	r3, [r7, #12]
 8007a5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	8013      	strh	r3, [r2, #0]
 8007a70:	e2d5      	b.n	800801e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a88:	81fb      	strh	r3, [r7, #14]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	441a      	add	r2, r3
 8007a94:	89fb      	ldrh	r3, [r7, #14]
 8007a96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	8013      	strh	r3, [r2, #0]
 8007aaa:	e2b8      	b.n	800801e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abc:	4413      	add	r3, r2
 8007abe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	011a      	lsls	r2, r3, #4
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	88db      	ldrh	r3, [r3, #6]
 8007ad4:	085b      	lsrs	r3, r3, #1
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ade:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	461a      	mov	r2, r3
 8007aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af0:	4413      	add	r3, r2
 8007af2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	011a      	lsls	r2, r3, #4
 8007afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afc:	4413      	add	r3, r2
 8007afe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b12:	801a      	strh	r2, [r3, #0]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <USB_ActivateEndpoint+0x28a>
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2e:	801a      	strh	r2, [r3, #0]
 8007b30:	e039      	b.n	8007ba6 <USB_ActivateEndpoint+0x2fe>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b38:	d818      	bhi.n	8007b6c <USB_ActivateEndpoint+0x2c4>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <USB_ActivateEndpoint+0x2ac>
 8007b4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b50:	3301      	adds	r3, #1
 8007b52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	029b      	lsls	r3, r3, #10
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	4313      	orrs	r3, r2
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	801a      	strh	r2, [r3, #0]
 8007b6a:	e01c      	b.n	8007ba6 <USB_ActivateEndpoint+0x2fe>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	095b      	lsrs	r3, r3, #5
 8007b72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	f003 031f 	and.w	r3, r3, #31
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <USB_ActivateEndpoint+0x2de>
 8007b80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b82:	3b01      	subs	r3, #1
 8007b84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	029b      	lsls	r3, r3, #10
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007bb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d01b      	beq.n	8007bf6 <USB_ActivateEndpoint+0x34e>
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd4:	843b      	strh	r3, [r7, #32]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	441a      	add	r2, r3
 8007be0:	8c3b      	ldrh	r3, [r7, #32]
 8007be2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007be6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d124      	bne.n	8007c48 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c14:	83bb      	strh	r3, [r7, #28]
 8007c16:	8bbb      	ldrh	r3, [r7, #28]
 8007c18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c1c:	83bb      	strh	r3, [r7, #28]
 8007c1e:	8bbb      	ldrh	r3, [r7, #28]
 8007c20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c24:	83bb      	strh	r3, [r7, #28]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	441a      	add	r2, r3
 8007c30:	8bbb      	ldrh	r3, [r7, #28]
 8007c32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	8013      	strh	r3, [r2, #0]
 8007c46:	e1ea      	b.n	800801e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c5e:	83fb      	strh	r3, [r7, #30]
 8007c60:	8bfb      	ldrh	r3, [r7, #30]
 8007c62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c66:	83fb      	strh	r3, [r7, #30]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	441a      	add	r2, r3
 8007c72:	8bfb      	ldrh	r3, [r7, #30]
 8007c74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	8013      	strh	r3, [r2, #0]
 8007c88:	e1c9      	b.n	800801e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	78db      	ldrb	r3, [r3, #3]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d11e      	bne.n	8007cd0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ca8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	441a      	add	r2, r3
 8007cb6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cc2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	8013      	strh	r3, [r2, #0]
 8007cce:	e01d      	b.n	8007d0c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ce6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	441a      	add	r2, r3
 8007cf4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d1c:	4413      	add	r3, r2
 8007d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	011a      	lsls	r2, r3, #4
 8007d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	891b      	ldrh	r3, [r3, #8]
 8007d34:	085b      	lsrs	r3, r3, #1
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d50:	4413      	add	r3, r2
 8007d52:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	011a      	lsls	r2, r3, #4
 8007d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007d62:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	895b      	ldrh	r3, [r3, #10]
 8007d68:	085b      	lsrs	r3, r3, #1
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d72:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	785b      	ldrb	r3, [r3, #1]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f040 8093 	bne.w	8007ea4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007d8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d01b      	beq.n	8007dd2 <USB_ActivateEndpoint+0x52a>
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007db0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	441a      	add	r2, r3
 8007dbc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007dbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007de0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d01b      	beq.n	8007e22 <USB_ActivateEndpoint+0x57a>
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e00:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	441a      	add	r2, r3
 8007e0c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e38:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007e3a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007e3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e40:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007e42:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007e44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e48:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	441a      	add	r2, r3
 8007e54:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007e56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e80:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	441a      	add	r2, r3
 8007e8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	8013      	strh	r3, [r2, #0]
 8007ea2:	e0bc      	b.n	800801e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007eb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01d      	beq.n	8007efc <USB_ActivateEndpoint+0x654>
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ed6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	441a      	add	r2, r3
 8007ee4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ef0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007f0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01d      	beq.n	8007f54 <USB_ActivateEndpoint+0x6ac>
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f2e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	441a      	add	r2, r3
 8007f3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	78db      	ldrb	r3, [r3, #3]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d024      	beq.n	8007fa6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f72:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007f76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007f7a:	f083 0320 	eor.w	r3, r3, #32
 8007f7e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	441a      	add	r2, r3
 8007f8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	8013      	strh	r3, [r2, #0]
 8007fa4:	e01d      	b.n	8007fe2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fbc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	441a      	add	r2, r3
 8007fca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007fce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ff4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ff8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	441a      	add	r2, r3
 8008006:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800800a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800800e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800801a:	b29b      	uxth	r3, r3
 800801c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800801e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008022:	4618      	mov	r0, r3
 8008024:	3774      	adds	r7, #116	@ 0x74
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop

08008030 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008030:	b480      	push	{r7}
 8008032:	b08d      	sub	sp, #52	@ 0x34
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	7b1b      	ldrb	r3, [r3, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f040 808e 	bne.w	8008160 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	785b      	ldrb	r3, [r3, #1]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d044      	beq.n	80080d6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	81bb      	strh	r3, [r7, #12]
 800805a:	89bb      	ldrh	r3, [r7, #12]
 800805c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008060:	2b00      	cmp	r3, #0
 8008062:	d01b      	beq.n	800809c <USB_DeactivateEndpoint+0x6c>
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29b      	uxth	r3, r3
 8008072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800807a:	817b      	strh	r3, [r7, #10]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	441a      	add	r2, r3
 8008086:	897b      	ldrh	r3, [r7, #10]
 8008088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800808c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008094:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008098:	b29b      	uxth	r3, r3
 800809a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080b2:	813b      	strh	r3, [r7, #8]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	441a      	add	r2, r3
 80080be:	893b      	ldrh	r3, [r7, #8]
 80080c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	8013      	strh	r3, [r2, #0]
 80080d4:	e192      	b.n	80083fc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	827b      	strh	r3, [r7, #18]
 80080e4:	8a7b      	ldrh	r3, [r7, #18]
 80080e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d01b      	beq.n	8008126 <USB_DeactivateEndpoint+0xf6>
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008104:	823b      	strh	r3, [r7, #16]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	441a      	add	r2, r3
 8008110:	8a3b      	ldrh	r3, [r7, #16]
 8008112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800811a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800811e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008122:	b29b      	uxth	r3, r3
 8008124:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	b29b      	uxth	r3, r3
 8008134:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800813c:	81fb      	strh	r3, [r7, #14]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	441a      	add	r2, r3
 8008148:	89fb      	ldrh	r3, [r7, #14]
 800814a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800814e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800815a:	b29b      	uxth	r3, r3
 800815c:	8013      	strh	r3, [r2, #0]
 800815e:	e14d      	b.n	80083fc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	785b      	ldrb	r3, [r3, #1]
 8008164:	2b00      	cmp	r3, #0
 8008166:	f040 80a5 	bne.w	80082b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	881b      	ldrh	r3, [r3, #0]
 8008176:	843b      	strh	r3, [r7, #32]
 8008178:	8c3b      	ldrh	r3, [r7, #32]
 800817a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d01b      	beq.n	80081ba <USB_DeactivateEndpoint+0x18a>
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008198:	83fb      	strh	r3, [r7, #30]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	441a      	add	r2, r3
 80081a4:	8bfb      	ldrh	r3, [r7, #30]
 80081a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	83bb      	strh	r3, [r7, #28]
 80081c8:	8bbb      	ldrh	r3, [r7, #28]
 80081ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d01b      	beq.n	800820a <USB_DeactivateEndpoint+0x1da>
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081e8:	837b      	strh	r3, [r7, #26]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	441a      	add	r2, r3
 80081f4:	8b7b      	ldrh	r3, [r7, #26]
 80081f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008202:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008206:	b29b      	uxth	r3, r3
 8008208:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	b29b      	uxth	r3, r3
 8008218:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800821c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008220:	833b      	strh	r3, [r7, #24]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	441a      	add	r2, r3
 800822c:	8b3b      	ldrh	r3, [r7, #24]
 800822e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800823a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800823e:	b29b      	uxth	r3, r3
 8008240:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	b29b      	uxth	r3, r3
 8008250:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008258:	82fb      	strh	r3, [r7, #22]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	441a      	add	r2, r3
 8008264:	8afb      	ldrh	r3, [r7, #22]
 8008266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800826a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800826e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008276:	b29b      	uxth	r3, r3
 8008278:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800828c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008290:	82bb      	strh	r3, [r7, #20]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	441a      	add	r2, r3
 800829c:	8abb      	ldrh	r3, [r7, #20]
 800829e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	8013      	strh	r3, [r2, #0]
 80082b2:	e0a3      	b.n	80083fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80082c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80082c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d01b      	beq.n	8008304 <USB_DeactivateEndpoint+0x2d4>
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	441a      	add	r2, r3
 80082ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80082f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80082fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008300:	b29b      	uxth	r3, r3
 8008302:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008312:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01b      	beq.n	8008354 <USB_DeactivateEndpoint+0x324>
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b29b      	uxth	r3, r3
 800832a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800832e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008332:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	441a      	add	r2, r3
 800833e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008340:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008344:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008348:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800834c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008350:	b29b      	uxth	r3, r3
 8008352:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800836a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	441a      	add	r2, r3
 8008376:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008378:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800837c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008380:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008388:	b29b      	uxth	r3, r3
 800838a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	b29b      	uxth	r3, r3
 800839a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800839e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	441a      	add	r2, r3
 80083ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083da:	847b      	strh	r3, [r7, #34]	@ 0x22
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	441a      	add	r2, r3
 80083e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80083e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3734      	adds	r7, #52	@ 0x34
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b0c2      	sub	sp, #264	@ 0x108
 800840e:	af00      	add	r7, sp, #0
 8008410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008414:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008418:	6018      	str	r0, [r3, #0]
 800841a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008422:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	785b      	ldrb	r3, [r3, #1]
 8008430:	2b01      	cmp	r3, #1
 8008432:	f040 86b7 	bne.w	80091a4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699a      	ldr	r2, [r3, #24]
 8008442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	429a      	cmp	r2, r3
 8008450:	d908      	bls.n	8008464 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008462:	e007      	b.n	8008474 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	7b1b      	ldrb	r3, [r3, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d13a      	bne.n	80084fa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6959      	ldr	r1, [r3, #20]
 8008490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	88da      	ldrh	r2, [r3, #6]
 800849c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80084a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80084aa:	6800      	ldr	r0, [r0, #0]
 80084ac:	f001 fc8d 	bl	8009dca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80084b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	613b      	str	r3, [r7, #16]
 80084bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	461a      	mov	r2, r3
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	4413      	add	r3, r2
 80084d2:	613b      	str	r3, [r7, #16]
 80084d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	011a      	lsls	r2, r3, #4
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	4413      	add	r3, r2
 80084e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	801a      	strh	r2, [r3, #0]
 80084f6:	f000 be1f 	b.w	8009138 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80084fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	78db      	ldrb	r3, [r3, #3]
 8008506:	2b02      	cmp	r3, #2
 8008508:	f040 8462 	bne.w	8008dd0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800850c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6a1a      	ldr	r2, [r3, #32]
 8008518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800851c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	429a      	cmp	r2, r3
 8008526:	f240 83df 	bls.w	8008ce8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800852a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800852e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	b29b      	uxth	r3, r3
 8008548:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800854c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008550:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008558:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	441a      	add	r2, r3
 800856e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800857a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800857e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008582:	b29b      	uxth	r3, r3
 8008584:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800858a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6a1a      	ldr	r2, [r3, #32]
 8008592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008596:	1ad2      	subs	r2, r2, r3
 8008598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800859c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80085a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 81c7 	beq.w	800895a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80085cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80085d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	785b      	ldrb	r3, [r3, #1]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d177      	bne.n	80086d8 <USB_EPStartXfer+0x2ce>
 80085e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008602:	b29b      	uxth	r3, r3
 8008604:	461a      	mov	r2, r3
 8008606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008608:	4413      	add	r3, r2
 800860a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800860c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	011a      	lsls	r2, r3, #4
 800861a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861c:	4413      	add	r3, r2
 800861e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008622:	627b      	str	r3, [r7, #36]	@ 0x24
 8008624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	b29b      	uxth	r3, r3
 800862a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800862e:	b29a      	uxth	r2, r3
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	801a      	strh	r2, [r3, #0]
 8008634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10a      	bne.n	8008652 <USB_EPStartXfer+0x248>
 800863c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	b29b      	uxth	r3, r3
 8008642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800864a:	b29a      	uxth	r2, r3
 800864c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864e:	801a      	strh	r2, [r3, #0]
 8008650:	e067      	b.n	8008722 <USB_EPStartXfer+0x318>
 8008652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008656:	2b3e      	cmp	r3, #62	@ 0x3e
 8008658:	d81c      	bhi.n	8008694 <USB_EPStartXfer+0x28a>
 800865a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865e:	085b      	lsrs	r3, r3, #1
 8008660:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	d004      	beq.n	800867a <USB_EPStartXfer+0x270>
 8008670:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008674:	3301      	adds	r3, #1
 8008676:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29a      	uxth	r2, r3
 8008680:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008684:	b29b      	uxth	r3, r3
 8008686:	029b      	lsls	r3, r3, #10
 8008688:	b29b      	uxth	r3, r3
 800868a:	4313      	orrs	r3, r2
 800868c:	b29a      	uxth	r2, r3
 800868e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008690:	801a      	strh	r2, [r3, #0]
 8008692:	e046      	b.n	8008722 <USB_EPStartXfer+0x318>
 8008694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008698:	095b      	lsrs	r3, r3, #5
 800869a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800869e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a2:	f003 031f 	and.w	r3, r3, #31
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d104      	bne.n	80086b4 <USB_EPStartXfer+0x2aa>
 80086aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80086ae:	3b01      	subs	r3, #1
 80086b0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80086b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80086be:	b29b      	uxth	r3, r3
 80086c0:	029b      	lsls	r3, r3, #10
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	4313      	orrs	r3, r2
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	e024      	b.n	8008722 <USB_EPStartXfer+0x318>
 80086d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d11c      	bne.n	8008722 <USB_EPStartXfer+0x318>
 80086e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	461a      	mov	r2, r3
 80086fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fc:	4413      	add	r3, r2
 80086fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	011a      	lsls	r2, r3, #4
 800870e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008710:	4413      	add	r3, r2
 8008712:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800871c:	b29a      	uxth	r2, r3
 800871e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008720:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	895b      	ldrh	r3, [r3, #10]
 800872e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6959      	ldr	r1, [r3, #20]
 800873e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008742:	b29b      	uxth	r3, r3
 8008744:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008748:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800874c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008750:	6800      	ldr	r0, [r0, #0]
 8008752:	f001 fb3a 	bl	8009dca <USB_WritePMA>
            ep->xfer_buff += len;
 8008756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	695a      	ldr	r2, [r3, #20]
 8008762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008766:	441a      	add	r2, r3
 8008768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800876c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6a1a      	ldr	r2, [r3, #32]
 8008780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	429a      	cmp	r2, r3
 800878e:	d90f      	bls.n	80087b0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6a1a      	ldr	r2, [r3, #32]
 800879c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a0:	1ad2      	subs	r2, r2, r3
 80087a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	621a      	str	r2, [r3, #32]
 80087ae:	e00e      	b.n	80087ce <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80087b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6a1b      	ldr	r3, [r3, #32]
 80087bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80087c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2200      	movs	r2, #0
 80087cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80087ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	785b      	ldrb	r3, [r3, #1]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d177      	bne.n	80088ce <USB_EPStartXfer+0x4c4>
 80087de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	61bb      	str	r3, [r7, #24]
 80087ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	461a      	mov	r2, r3
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	4413      	add	r3, r2
 8008800:	61bb      	str	r3, [r7, #24]
 8008802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	011a      	lsls	r2, r3, #4
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	4413      	add	r3, r2
 8008814:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	b29b      	uxth	r3, r3
 8008820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008824:	b29a      	uxth	r2, r3
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	801a      	strh	r2, [r3, #0]
 800882a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10a      	bne.n	8008848 <USB_EPStartXfer+0x43e>
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	b29b      	uxth	r3, r3
 8008838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800883c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008840:	b29a      	uxth	r2, r3
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	801a      	strh	r2, [r3, #0]
 8008846:	e06d      	b.n	8008924 <USB_EPStartXfer+0x51a>
 8008848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800884c:	2b3e      	cmp	r3, #62	@ 0x3e
 800884e:	d81c      	bhi.n	800888a <USB_EPStartXfer+0x480>
 8008850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008854:	085b      	lsrs	r3, r3, #1
 8008856:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800885a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d004      	beq.n	8008870 <USB_EPStartXfer+0x466>
 8008866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800886a:	3301      	adds	r3, #1
 800886c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	b29a      	uxth	r2, r3
 8008876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800887a:	b29b      	uxth	r3, r3
 800887c:	029b      	lsls	r3, r3, #10
 800887e:	b29b      	uxth	r3, r3
 8008880:	4313      	orrs	r3, r2
 8008882:	b29a      	uxth	r2, r3
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	801a      	strh	r2, [r3, #0]
 8008888:	e04c      	b.n	8008924 <USB_EPStartXfer+0x51a>
 800888a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800888e:	095b      	lsrs	r3, r3, #5
 8008890:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008898:	f003 031f 	and.w	r3, r3, #31
 800889c:	2b00      	cmp	r3, #0
 800889e:	d104      	bne.n	80088aa <USB_EPStartXfer+0x4a0>
 80088a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088a4:	3b01      	subs	r3, #1
 80088a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	881b      	ldrh	r3, [r3, #0]
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	029b      	lsls	r3, r3, #10
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	4313      	orrs	r3, r2
 80088bc:	b29b      	uxth	r3, r3
 80088be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	801a      	strh	r2, [r3, #0]
 80088cc:	e02a      	b.n	8008924 <USB_EPStartXfer+0x51a>
 80088ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d122      	bne.n	8008924 <USB_EPStartXfer+0x51a>
 80088de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	623b      	str	r3, [r7, #32]
 80088ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	461a      	mov	r2, r3
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	4413      	add	r3, r2
 8008900:	623b      	str	r3, [r7, #32]
 8008902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	011a      	lsls	r2, r3, #4
 8008910:	6a3b      	ldr	r3, [r7, #32]
 8008912:	4413      	add	r3, r2
 8008914:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008918:	61fb      	str	r3, [r7, #28]
 800891a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800891e:	b29a      	uxth	r2, r3
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	891b      	ldrh	r3, [r3, #8]
 8008930:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6959      	ldr	r1, [r3, #20]
 8008940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008944:	b29b      	uxth	r3, r3
 8008946:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800894a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800894e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008952:	6800      	ldr	r0, [r0, #0]
 8008954:	f001 fa39 	bl	8009dca <USB_WritePMA>
 8008958:	e3ee      	b.n	8009138 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800895a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800895e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	785b      	ldrb	r3, [r3, #1]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d177      	bne.n	8008a5a <USB_EPStartXfer+0x650>
 800896a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800896e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800897a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008984:	b29b      	uxth	r3, r3
 8008986:	461a      	mov	r2, r3
 8008988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800898a:	4413      	add	r3, r2
 800898c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800898e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	011a      	lsls	r2, r3, #4
 800899c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800899e:	4413      	add	r3, r2
 80089a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80089a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80089a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089b4:	801a      	strh	r2, [r3, #0]
 80089b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <USB_EPStartXfer+0x5ca>
 80089be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089c0:	881b      	ldrh	r3, [r3, #0]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089d0:	801a      	strh	r2, [r3, #0]
 80089d2:	e06d      	b.n	8008ab0 <USB_EPStartXfer+0x6a6>
 80089d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80089da:	d81c      	bhi.n	8008a16 <USB_EPStartXfer+0x60c>
 80089dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e0:	085b      	lsrs	r3, r3, #1
 80089e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d004      	beq.n	80089fc <USB_EPStartXfer+0x5f2>
 80089f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80089f6:	3301      	adds	r3, #1
 80089f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	029b      	lsls	r3, r3, #10
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a12:	801a      	strh	r2, [r3, #0]
 8008a14:	e04c      	b.n	8008ab0 <USB_EPStartXfer+0x6a6>
 8008a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a1a:	095b      	lsrs	r3, r3, #5
 8008a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a24:	f003 031f 	and.w	r3, r3, #31
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <USB_EPStartXfer+0x62c>
 8008a2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a30:	3b01      	subs	r3, #1
 8008a32:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	029b      	lsls	r3, r3, #10
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	4313      	orrs	r3, r2
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a56:	801a      	strh	r2, [r3, #0]
 8008a58:	e02a      	b.n	8008ab0 <USB_EPStartXfer+0x6a6>
 8008a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d122      	bne.n	8008ab0 <USB_EPStartXfer+0x6a6>
 8008a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	461a      	mov	r2, r3
 8008a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a8a:	4413      	add	r3, r2
 8008a8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	011a      	lsls	r2, r3, #4
 8008a9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	891b      	ldrh	r3, [r3, #8]
 8008abc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6959      	ldr	r1, [r3, #20]
 8008acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008ad6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008ada:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008ade:	6800      	ldr	r0, [r0, #0]
 8008ae0:	f001 f973 	bl	8009dca <USB_WritePMA>
            ep->xfer_buff += len;
 8008ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	695a      	ldr	r2, [r3, #20]
 8008af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008af4:	441a      	add	r2, r3
 8008af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6a1a      	ldr	r2, [r3, #32]
 8008b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d90f      	bls.n	8008b3e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6a1a      	ldr	r2, [r3, #32]
 8008b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b2e:	1ad2      	subs	r2, r2, r3
 8008b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	621a      	str	r2, [r3, #32]
 8008b3c:	e00e      	b.n	8008b5c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	785b      	ldrb	r3, [r3, #1]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d177      	bne.n	8008c68 <USB_EPStartXfer+0x85e>
 8008b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	461a      	mov	r2, r3
 8008b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b98:	4413      	add	r3, r2
 8008b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	011a      	lsls	r2, r3, #4
 8008baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bac:	4413      	add	r3, r2
 8008bae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc2:	801a      	strh	r2, [r3, #0]
 8008bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10a      	bne.n	8008be2 <USB_EPStartXfer+0x7d8>
 8008bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bce:	881b      	ldrh	r3, [r3, #0]
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bde:	801a      	strh	r2, [r3, #0]
 8008be0:	e067      	b.n	8008cb2 <USB_EPStartXfer+0x8a8>
 8008be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be6:	2b3e      	cmp	r3, #62	@ 0x3e
 8008be8:	d81c      	bhi.n	8008c24 <USB_EPStartXfer+0x81a>
 8008bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bee:	085b      	lsrs	r3, r3, #1
 8008bf0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d004      	beq.n	8008c0a <USB_EPStartXfer+0x800>
 8008c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c04:	3301      	adds	r3, #1
 8008c06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0c:	881b      	ldrh	r3, [r3, #0]
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	029b      	lsls	r3, r3, #10
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c20:	801a      	strh	r2, [r3, #0]
 8008c22:	e046      	b.n	8008cb2 <USB_EPStartXfer+0x8a8>
 8008c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c32:	f003 031f 	and.w	r3, r3, #31
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d104      	bne.n	8008c44 <USB_EPStartXfer+0x83a>
 8008c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c46:	881b      	ldrh	r3, [r3, #0]
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	029b      	lsls	r3, r3, #10
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	4313      	orrs	r3, r2
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	e024      	b.n	8008cb2 <USB_EPStartXfer+0x8a8>
 8008c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d11c      	bne.n	8008cb2 <USB_EPStartXfer+0x8a8>
 8008c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c8c:	4413      	add	r3, r2
 8008c8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	011a      	lsls	r2, r3, #4
 8008c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	895b      	ldrh	r3, [r3, #10]
 8008cbe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6959      	ldr	r1, [r3, #20]
 8008cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008cd8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008cdc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008ce0:	6800      	ldr	r0, [r0, #0]
 8008ce2:	f001 f872 	bl	8009dca <USB_WritePMA>
 8008ce6:	e227      	b.n	8009138 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d1e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	441a      	add	r2, r3
 8008d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008d40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	461a      	mov	r2, r3
 8008d72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d74:	4413      	add	r3, r2
 8008d76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	011a      	lsls	r2, r3, #4
 8008d86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d88:	4413      	add	r3, r2
 8008d8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	891b      	ldrh	r3, [r3, #8]
 8008da6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6959      	ldr	r1, [r3, #20]
 8008db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008dc0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008dc4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008dc8:	6800      	ldr	r0, [r0, #0]
 8008dca:	f000 fffe 	bl	8009dca <USB_WritePMA>
 8008dce:	e1b3      	b.n	8009138 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6a1a      	ldr	r2, [r3, #32]
 8008ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de0:	1ad2      	subs	r2, r2, r3
 8008de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 80c6 	beq.w	8008fa2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	785b      	ldrb	r3, [r3, #1]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d177      	bne.n	8008f22 <USB_EPStartXfer+0xb18>
 8008e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	461a      	mov	r2, r3
 8008e50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e52:	4413      	add	r3, r2
 8008e54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	011a      	lsls	r2, r3, #4
 8008e64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e66:	4413      	add	r3, r2
 8008e68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e7c:	801a      	strh	r2, [r3, #0]
 8008e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10a      	bne.n	8008e9c <USB_EPStartXfer+0xa92>
 8008e86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e98:	801a      	strh	r2, [r3, #0]
 8008e9a:	e067      	b.n	8008f6c <USB_EPStartXfer+0xb62>
 8008e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ea2:	d81c      	bhi.n	8008ede <USB_EPStartXfer+0xad4>
 8008ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea8:	085b      	lsrs	r3, r3, #1
 8008eaa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d004      	beq.n	8008ec4 <USB_EPStartXfer+0xaba>
 8008eba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008ec4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	029b      	lsls	r3, r3, #10
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008eda:	801a      	strh	r2, [r3, #0]
 8008edc:	e046      	b.n	8008f6c <USB_EPStartXfer+0xb62>
 8008ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee2:	095b      	lsrs	r3, r3, #5
 8008ee4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eec:	f003 031f 	and.w	r3, r3, #31
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d104      	bne.n	8008efe <USB_EPStartXfer+0xaf4>
 8008ef4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008efe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	029b      	lsls	r3, r3, #10
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f1e:	801a      	strh	r2, [r3, #0]
 8008f20:	e024      	b.n	8008f6c <USB_EPStartXfer+0xb62>
 8008f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	785b      	ldrb	r3, [r3, #1]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d11c      	bne.n	8008f6c <USB_EPStartXfer+0xb62>
 8008f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	461a      	mov	r2, r3
 8008f44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f46:	4413      	add	r3, r2
 8008f48:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	011a      	lsls	r2, r3, #4
 8008f58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008f60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	895b      	ldrh	r3, [r3, #10]
 8008f78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6959      	ldr	r1, [r3, #20]
 8008f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f9a:	6800      	ldr	r0, [r0, #0]
 8008f9c:	f000 ff15 	bl	8009dca <USB_WritePMA>
 8008fa0:	e0ca      	b.n	8009138 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	785b      	ldrb	r3, [r3, #1]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d177      	bne.n	80090a2 <USB_EPStartXfer+0xc98>
 8008fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008fd2:	4413      	add	r3, r2
 8008fd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	011a      	lsls	r2, r3, #4
 8008fe4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008fec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008fee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ff0:	881b      	ldrh	r3, [r3, #0]
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ffc:	801a      	strh	r2, [r3, #0]
 8008ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <USB_EPStartXfer+0xc12>
 8009006:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	b29b      	uxth	r3, r3
 800900c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009014:	b29a      	uxth	r2, r3
 8009016:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009018:	801a      	strh	r2, [r3, #0]
 800901a:	e073      	b.n	8009104 <USB_EPStartXfer+0xcfa>
 800901c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009020:	2b3e      	cmp	r3, #62	@ 0x3e
 8009022:	d81c      	bhi.n	800905e <USB_EPStartXfer+0xc54>
 8009024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009028:	085b      	lsrs	r3, r3, #1
 800902a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800902e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d004      	beq.n	8009044 <USB_EPStartXfer+0xc3a>
 800903a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800903e:	3301      	adds	r3, #1
 8009040:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	b29a      	uxth	r2, r3
 800904a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800904e:	b29b      	uxth	r3, r3
 8009050:	029b      	lsls	r3, r3, #10
 8009052:	b29b      	uxth	r3, r3
 8009054:	4313      	orrs	r3, r2
 8009056:	b29a      	uxth	r2, r3
 8009058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800905a:	801a      	strh	r2, [r3, #0]
 800905c:	e052      	b.n	8009104 <USB_EPStartXfer+0xcfa>
 800905e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009062:	095b      	lsrs	r3, r3, #5
 8009064:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800906c:	f003 031f 	and.w	r3, r3, #31
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <USB_EPStartXfer+0xc74>
 8009074:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009078:	3b01      	subs	r3, #1
 800907a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800907e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	b29a      	uxth	r2, r3
 8009084:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009088:	b29b      	uxth	r3, r3
 800908a:	029b      	lsls	r3, r3, #10
 800908c:	b29b      	uxth	r3, r3
 800908e:	4313      	orrs	r3, r2
 8009090:	b29b      	uxth	r3, r3
 8009092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800909a:	b29a      	uxth	r2, r3
 800909c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800909e:	801a      	strh	r2, [r3, #0]
 80090a0:	e030      	b.n	8009104 <USB_EPStartXfer+0xcfa>
 80090a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	785b      	ldrb	r3, [r3, #1]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d128      	bne.n	8009104 <USB_EPStartXfer+0xcfa>
 80090b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	461a      	mov	r2, r3
 80090d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090d6:	4413      	add	r3, r2
 80090d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	011a      	lsls	r2, r3, #4
 80090ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090ee:	4413      	add	r3, r2
 80090f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80090f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009102:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	891b      	ldrh	r3, [r3, #8]
 8009110:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6959      	ldr	r1, [r3, #20]
 8009120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009124:	b29b      	uxth	r3, r3
 8009126:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800912a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800912e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009132:	6800      	ldr	r0, [r0, #0]
 8009134:	f000 fe49 	bl	8009dca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800913c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	b29b      	uxth	r3, r3
 8009156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800915a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800915e:	817b      	strh	r3, [r7, #10]
 8009160:	897b      	ldrh	r3, [r7, #10]
 8009162:	f083 0310 	eor.w	r3, r3, #16
 8009166:	817b      	strh	r3, [r7, #10]
 8009168:	897b      	ldrh	r3, [r7, #10]
 800916a:	f083 0320 	eor.w	r3, r3, #32
 800916e:	817b      	strh	r3, [r7, #10]
 8009170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800917e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	441a      	add	r2, r3
 800918a:	897b      	ldrh	r3, [r7, #10]
 800918c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009190:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009194:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800919c:	b29b      	uxth	r3, r3
 800919e:	8013      	strh	r3, [r2, #0]
 80091a0:	f000 bcdf 	b.w	8009b62 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80091a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	7b1b      	ldrb	r3, [r3, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f040 80bc 	bne.w	800932e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80091b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	699a      	ldr	r2, [r3, #24]
 80091c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d917      	bls.n	8009202 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80091d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80091e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	699a      	ldr	r2, [r3, #24]
 80091ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f2:	1ad2      	subs	r2, r2, r3
 80091f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	619a      	str	r2, [r3, #24]
 8009200:	e00e      	b.n	8009220 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2200      	movs	r2, #0
 800921e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009224:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800922e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800923c:	b29b      	uxth	r3, r3
 800923e:	461a      	mov	r2, r3
 8009240:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009244:	4413      	add	r3, r2
 8009246:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800924a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800924e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	011a      	lsls	r2, r3, #4
 8009258:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800925c:	4413      	add	r3, r2
 800925e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009262:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009266:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	b29b      	uxth	r3, r3
 800926e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009272:	b29a      	uxth	r2, r3
 8009274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009278:	801a      	strh	r2, [r3, #0]
 800927a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10d      	bne.n	800929e <USB_EPStartXfer+0xe94>
 8009282:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	b29b      	uxth	r3, r3
 800928a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800928e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009292:	b29a      	uxth	r2, r3
 8009294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009298:	801a      	strh	r2, [r3, #0]
 800929a:	f000 bc28 	b.w	8009aee <USB_EPStartXfer+0x16e4>
 800929e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80092a4:	d81f      	bhi.n	80092e6 <USB_EPStartXfer+0xedc>
 80092a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092aa:	085b      	lsrs	r3, r3, #1
 80092ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d004      	beq.n	80092c6 <USB_EPStartXfer+0xebc>
 80092bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80092c0:	3301      	adds	r3, #1
 80092c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	029b      	lsls	r3, r3, #10
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	4313      	orrs	r3, r2
 80092da:	b29a      	uxth	r2, r3
 80092dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092e0:	801a      	strh	r2, [r3, #0]
 80092e2:	f000 bc04 	b.w	8009aee <USB_EPStartXfer+0x16e4>
 80092e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ea:	095b      	lsrs	r3, r3, #5
 80092ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f4:	f003 031f 	and.w	r3, r3, #31
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d104      	bne.n	8009306 <USB_EPStartXfer+0xefc>
 80092fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009300:	3b01      	subs	r3, #1
 8009302:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009306:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	b29a      	uxth	r2, r3
 800930e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009312:	b29b      	uxth	r3, r3
 8009314:	029b      	lsls	r3, r3, #10
 8009316:	b29b      	uxth	r3, r3
 8009318:	4313      	orrs	r3, r2
 800931a:	b29b      	uxth	r3, r3
 800931c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009324:	b29a      	uxth	r2, r3
 8009326:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800932a:	801a      	strh	r2, [r3, #0]
 800932c:	e3df      	b.n	8009aee <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800932e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	78db      	ldrb	r3, [r3, #3]
 800933a:	2b02      	cmp	r3, #2
 800933c:	f040 8218 	bne.w	8009770 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	785b      	ldrb	r3, [r3, #1]
 800934c:	2b00      	cmp	r3, #0
 800934e:	f040 809d 	bne.w	800948c <USB_EPStartXfer+0x1082>
 8009352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009356:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009364:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800936e:	b29b      	uxth	r3, r3
 8009370:	461a      	mov	r2, r3
 8009372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009376:	4413      	add	r3, r2
 8009378:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800937c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	011a      	lsls	r2, r3, #4
 800938a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800938e:	4413      	add	r3, r2
 8009390:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009394:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009398:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093aa:	801a      	strh	r2, [r3, #0]
 80093ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10c      	bne.n	80093d6 <USB_EPStartXfer+0xfcc>
 80093bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093d2:	801a      	strh	r2, [r3, #0]
 80093d4:	e08f      	b.n	80094f6 <USB_EPStartXfer+0x10ec>
 80093d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80093e4:	d826      	bhi.n	8009434 <USB_EPStartXfer+0x102a>
 80093e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	085b      	lsrs	r3, r3, #1
 80093f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	2b00      	cmp	r3, #0
 800940a:	d004      	beq.n	8009416 <USB_EPStartXfer+0x100c>
 800940c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009410:	3301      	adds	r3, #1
 8009412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	b29a      	uxth	r2, r3
 800941e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009422:	b29b      	uxth	r3, r3
 8009424:	029b      	lsls	r3, r3, #10
 8009426:	b29b      	uxth	r3, r3
 8009428:	4313      	orrs	r3, r2
 800942a:	b29a      	uxth	r2, r3
 800942c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009430:	801a      	strh	r2, [r3, #0]
 8009432:	e060      	b.n	80094f6 <USB_EPStartXfer+0x10ec>
 8009434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	095b      	lsrs	r3, r3, #5
 8009442:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800944a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	f003 031f 	and.w	r3, r3, #31
 8009456:	2b00      	cmp	r3, #0
 8009458:	d104      	bne.n	8009464 <USB_EPStartXfer+0x105a>
 800945a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800945e:	3b01      	subs	r3, #1
 8009460:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	b29a      	uxth	r2, r3
 800946c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009470:	b29b      	uxth	r3, r3
 8009472:	029b      	lsls	r3, r3, #10
 8009474:	b29b      	uxth	r3, r3
 8009476:	4313      	orrs	r3, r2
 8009478:	b29b      	uxth	r3, r3
 800947a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800947e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009482:	b29a      	uxth	r2, r3
 8009484:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009488:	801a      	strh	r2, [r3, #0]
 800948a:	e034      	b.n	80094f6 <USB_EPStartXfer+0x10ec>
 800948c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	785b      	ldrb	r3, [r3, #1]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d12c      	bne.n	80094f6 <USB_EPStartXfer+0x10ec>
 800949c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	461a      	mov	r2, r3
 80094bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80094c0:	4413      	add	r3, r2
 80094c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	011a      	lsls	r2, r3, #4
 80094d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80094d8:	4413      	add	r3, r2
 80094da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80094de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80094f4:	801a      	strh	r2, [r3, #0]
 80094f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	785b      	ldrb	r3, [r3, #1]
 8009510:	2b00      	cmp	r3, #0
 8009512:	f040 809d 	bne.w	8009650 <USB_EPStartXfer+0x1246>
 8009516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800951a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009532:	b29b      	uxth	r3, r3
 8009534:	461a      	mov	r2, r3
 8009536:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800953a:	4413      	add	r3, r2
 800953c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	011a      	lsls	r2, r3, #4
 800954e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009552:	4413      	add	r3, r2
 8009554:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800955c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	b29b      	uxth	r3, r3
 8009564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009568:	b29a      	uxth	r2, r3
 800956a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800956e:	801a      	strh	r2, [r3, #0]
 8009570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10c      	bne.n	800959a <USB_EPStartXfer+0x1190>
 8009580:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009584:	881b      	ldrh	r3, [r3, #0]
 8009586:	b29b      	uxth	r3, r3
 8009588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800958c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009590:	b29a      	uxth	r2, r3
 8009592:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009596:	801a      	strh	r2, [r3, #0]
 8009598:	e088      	b.n	80096ac <USB_EPStartXfer+0x12a2>
 800959a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800959e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80095a8:	d826      	bhi.n	80095f8 <USB_EPStartXfer+0x11ee>
 80095aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	085b      	lsrs	r3, r3, #1
 80095b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80095bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d004      	beq.n	80095da <USB_EPStartXfer+0x11d0>
 80095d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095d4:	3301      	adds	r3, #1
 80095d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80095da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	029b      	lsls	r3, r3, #10
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	4313      	orrs	r3, r2
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095f4:	801a      	strh	r2, [r3, #0]
 80095f6:	e059      	b.n	80096ac <USB_EPStartXfer+0x12a2>
 80095f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	095b      	lsrs	r3, r3, #5
 8009606:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800960a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800960e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	f003 031f 	and.w	r3, r3, #31
 800961a:	2b00      	cmp	r3, #0
 800961c:	d104      	bne.n	8009628 <USB_EPStartXfer+0x121e>
 800961e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009622:	3b01      	subs	r3, #1
 8009624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009628:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800962c:	881b      	ldrh	r3, [r3, #0]
 800962e:	b29a      	uxth	r2, r3
 8009630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009634:	b29b      	uxth	r3, r3
 8009636:	029b      	lsls	r3, r3, #10
 8009638:	b29b      	uxth	r3, r3
 800963a:	4313      	orrs	r3, r2
 800963c:	b29b      	uxth	r3, r3
 800963e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009646:	b29a      	uxth	r2, r3
 8009648:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800964c:	801a      	strh	r2, [r3, #0]
 800964e:	e02d      	b.n	80096ac <USB_EPStartXfer+0x12a2>
 8009650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d125      	bne.n	80096ac <USB_EPStartXfer+0x12a2>
 8009660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009664:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800966e:	b29b      	uxth	r3, r3
 8009670:	461a      	mov	r2, r3
 8009672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009676:	4413      	add	r3, r2
 8009678:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800967c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	011a      	lsls	r2, r3, #4
 800968a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800968e:	4413      	add	r3, r2
 8009690:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009694:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800969c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80096aa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80096ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 8218 	beq.w	8009aee <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80096be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80096de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80096e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d005      	beq.n	80096f6 <USB_EPStartXfer+0x12ec>
 80096ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80096ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10d      	bne.n	8009712 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80096f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80096fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f040 81f5 	bne.w	8009aee <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009704:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800970c:	2b00      	cmp	r3, #0
 800970e:	f040 81ee 	bne.w	8009aee <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009716:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	b29b      	uxth	r3, r3
 8009730:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009738:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800973c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009740:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800974a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	441a      	add	r2, r3
 8009756:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800975a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800975e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009766:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800976a:	b29b      	uxth	r3, r3
 800976c:	8013      	strh	r3, [r2, #0]
 800976e:	e1be      	b.n	8009aee <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	78db      	ldrb	r3, [r3, #3]
 800977c:	2b01      	cmp	r3, #1
 800977e:	f040 81b4 	bne.w	8009aea <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699a      	ldr	r2, [r3, #24]
 800978e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	429a      	cmp	r2, r3
 800979c:	d917      	bls.n	80097ce <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800979e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80097ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	699a      	ldr	r2, [r3, #24]
 80097ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097be:	1ad2      	subs	r2, r2, r3
 80097c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	619a      	str	r2, [r3, #24]
 80097cc:	e00e      	b.n	80097ec <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80097ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80097de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2200      	movs	r2, #0
 80097ea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80097ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	785b      	ldrb	r3, [r3, #1]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f040 8085 	bne.w	8009908 <USB_EPStartXfer+0x14fe>
 80097fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009802:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800980c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800981a:	b29b      	uxth	r3, r3
 800981c:	461a      	mov	r2, r3
 800981e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009822:	4413      	add	r3, r2
 8009824:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800982c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	011a      	lsls	r2, r3, #4
 8009836:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800983a:	4413      	add	r3, r2
 800983c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009840:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009844:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	b29b      	uxth	r3, r3
 800984c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009850:	b29a      	uxth	r2, r3
 8009852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009856:	801a      	strh	r2, [r3, #0]
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10c      	bne.n	800987a <USB_EPStartXfer+0x1470>
 8009860:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	b29b      	uxth	r3, r3
 8009868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800986c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009870:	b29a      	uxth	r2, r3
 8009872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009876:	801a      	strh	r2, [r3, #0]
 8009878:	e077      	b.n	800996a <USB_EPStartXfer+0x1560>
 800987a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800987e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009880:	d81e      	bhi.n	80098c0 <USB_EPStartXfer+0x14b6>
 8009882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009886:	085b      	lsrs	r3, r3, #1
 8009888:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800988c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	2b00      	cmp	r3, #0
 8009896:	d004      	beq.n	80098a2 <USB_EPStartXfer+0x1498>
 8009898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800989c:	3301      	adds	r3, #1
 800989e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80098a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	029b      	lsls	r3, r3, #10
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	4313      	orrs	r3, r2
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098bc:	801a      	strh	r2, [r3, #0]
 80098be:	e054      	b.n	800996a <USB_EPStartXfer+0x1560>
 80098c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c4:	095b      	lsrs	r3, r3, #5
 80098c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80098ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ce:	f003 031f 	and.w	r3, r3, #31
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d104      	bne.n	80098e0 <USB_EPStartXfer+0x14d6>
 80098d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098da:	3b01      	subs	r3, #1
 80098dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80098e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80098e4:	881b      	ldrh	r3, [r3, #0]
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	029b      	lsls	r3, r3, #10
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	4313      	orrs	r3, r2
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098fe:	b29a      	uxth	r2, r3
 8009900:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009904:	801a      	strh	r2, [r3, #0]
 8009906:	e030      	b.n	800996a <USB_EPStartXfer+0x1560>
 8009908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800990c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	785b      	ldrb	r3, [r3, #1]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d128      	bne.n	800996a <USB_EPStartXfer+0x1560>
 8009918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800991c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800992a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009934:	b29b      	uxth	r3, r3
 8009936:	461a      	mov	r2, r3
 8009938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800993c:	4413      	add	r3, r2
 800993e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	011a      	lsls	r2, r3, #4
 8009950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009954:	4413      	add	r3, r2
 8009956:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800995a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800995e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009962:	b29a      	uxth	r2, r3
 8009964:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009968:	801a      	strh	r2, [r3, #0]
 800996a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	785b      	ldrb	r3, [r3, #1]
 8009984:	2b00      	cmp	r3, #0
 8009986:	f040 8085 	bne.w	8009a94 <USB_EPStartXfer+0x168a>
 800998a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800998e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800999c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	461a      	mov	r2, r3
 80099aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80099ae:	4413      	add	r3, r2
 80099b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80099b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	011a      	lsls	r2, r3, #4
 80099c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80099c6:	4413      	add	r3, r2
 80099c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80099cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099dc:	b29a      	uxth	r2, r3
 80099de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099e2:	801a      	strh	r2, [r3, #0]
 80099e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10c      	bne.n	8009a06 <USB_EPStartXfer+0x15fc>
 80099ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a02:	801a      	strh	r2, [r3, #0]
 8009a04:	e073      	b.n	8009aee <USB_EPStartXfer+0x16e4>
 8009a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a0c:	d81e      	bhi.n	8009a4c <USB_EPStartXfer+0x1642>
 8009a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a12:	085b      	lsrs	r3, r3, #1
 8009a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d004      	beq.n	8009a2e <USB_EPStartXfer+0x1624>
 8009a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a28:	3301      	adds	r3, #1
 8009a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	029b      	lsls	r3, r3, #10
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	4313      	orrs	r3, r2
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a48:	801a      	strh	r2, [r3, #0]
 8009a4a:	e050      	b.n	8009aee <USB_EPStartXfer+0x16e4>
 8009a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a50:	095b      	lsrs	r3, r3, #5
 8009a52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a5a:	f003 031f 	and.w	r3, r3, #31
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d104      	bne.n	8009a6c <USB_EPStartXfer+0x1662>
 8009a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a66:	3b01      	subs	r3, #1
 8009a68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	029b      	lsls	r3, r3, #10
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009a90:	801a      	strh	r2, [r3, #0]
 8009a92:	e02c      	b.n	8009aee <USB_EPStartXfer+0x16e4>
 8009a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	785b      	ldrb	r3, [r3, #1]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d124      	bne.n	8009aee <USB_EPStartXfer+0x16e4>
 8009aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009aba:	4413      	add	r3, r2
 8009abc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	011a      	lsls	r2, r3, #4
 8009ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009ae6:	801a      	strh	r2, [r3, #0]
 8009ae8:	e001      	b.n	8009aee <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e03a      	b.n	8009b64 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b14:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009b18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009b1c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009b20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009b24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009b28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b2c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	441a      	add	r2, r3
 8009b4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b085      	sub	sp, #20
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	785b      	ldrb	r3, [r3, #1]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d020      	beq.n	8009bc2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b96:	81bb      	strh	r3, [r7, #12]
 8009b98:	89bb      	ldrh	r3, [r7, #12]
 8009b9a:	f083 0310 	eor.w	r3, r3, #16
 8009b9e:	81bb      	strh	r3, [r7, #12]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	441a      	add	r2, r3
 8009baa:	89bb      	ldrh	r3, [r7, #12]
 8009bac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	8013      	strh	r3, [r2, #0]
 8009bc0:	e01f      	b.n	8009c02 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009bd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bd8:	81fb      	strh	r3, [r7, #14]
 8009bda:	89fb      	ldrh	r3, [r7, #14]
 8009bdc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009be0:	81fb      	strh	r3, [r7, #14]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	441a      	add	r2, r3
 8009bec:	89fb      	ldrh	r3, [r7, #14]
 8009bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3714      	adds	r7, #20
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b087      	sub	sp, #28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	7b1b      	ldrb	r3, [r3, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f040 809d 	bne.w	8009d5e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	785b      	ldrb	r3, [r3, #1]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d04c      	beq.n	8009cc6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	823b      	strh	r3, [r7, #16]
 8009c3a:	8a3b      	ldrh	r3, [r7, #16]
 8009c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01b      	beq.n	8009c7c <USB_EPClearStall+0x6c>
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	881b      	ldrh	r3, [r3, #0]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c5a:	81fb      	strh	r3, [r7, #14]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	441a      	add	r2, r3
 8009c66:	89fb      	ldrh	r3, [r7, #14]
 8009c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	78db      	ldrb	r3, [r3, #3]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d06c      	beq.n	8009d5e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c9a:	81bb      	strh	r3, [r7, #12]
 8009c9c:	89bb      	ldrh	r3, [r7, #12]
 8009c9e:	f083 0320 	eor.w	r3, r3, #32
 8009ca2:	81bb      	strh	r3, [r7, #12]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	441a      	add	r2, r3
 8009cae:	89bb      	ldrh	r3, [r7, #12]
 8009cb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	8013      	strh	r3, [r2, #0]
 8009cc4:	e04b      	b.n	8009d5e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	82fb      	strh	r3, [r7, #22]
 8009cd4:	8afb      	ldrh	r3, [r7, #22]
 8009cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d01b      	beq.n	8009d16 <USB_EPClearStall+0x106>
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	881b      	ldrh	r3, [r3, #0]
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cf4:	82bb      	strh	r3, [r7, #20]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	441a      	add	r2, r3
 8009d00:	8abb      	ldrh	r3, [r7, #20]
 8009d02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	881b      	ldrh	r3, [r3, #0]
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d2c:	827b      	strh	r3, [r7, #18]
 8009d2e:	8a7b      	ldrh	r3, [r7, #18]
 8009d30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009d34:	827b      	strh	r3, [r7, #18]
 8009d36:	8a7b      	ldrh	r3, [r7, #18]
 8009d38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009d3c:	827b      	strh	r3, [r7, #18]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	441a      	add	r2, r3
 8009d48:	8a7b      	ldrh	r3, [r7, #18]
 8009d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	371c      	adds	r7, #28
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	460b      	mov	r3, r1
 8009d76:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009d78:	78fb      	ldrb	r3, [r7, #3]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d103      	bne.n	8009d86 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2280      	movs	r2, #128	@ 0x80
 8009d82:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b085      	sub	sp, #20
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b08b      	sub	sp, #44	@ 0x2c
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	60f8      	str	r0, [r7, #12]
 8009dd2:	60b9      	str	r1, [r7, #8]
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	460b      	mov	r3, r1
 8009dda:	80fb      	strh	r3, [r7, #6]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009de0:	88bb      	ldrh	r3, [r7, #4]
 8009de2:	3301      	adds	r3, #1
 8009de4:	085b      	lsrs	r3, r3, #1
 8009de6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009df0:	88fb      	ldrh	r3, [r7, #6]
 8009df2:	005a      	lsls	r2, r3, #1
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	4413      	add	r3, r2
 8009df8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009dfc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e02:	e01e      	b.n	8009e42 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	021b      	lsls	r3, r3, #8
 8009e12:	b21a      	sxth	r2, r3
 8009e14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	b21b      	sxth	r3, r3
 8009e1c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	8a7a      	ldrh	r2, [r7, #18]
 8009e22:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	3302      	adds	r3, #2
 8009e28:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	3302      	adds	r3, #2
 8009e2e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	3301      	adds	r3, #1
 8009e34:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1dd      	bne.n	8009e04 <USB_WritePMA+0x3a>
  }
}
 8009e48:	bf00      	nop
 8009e4a:	bf00      	nop
 8009e4c:	372c      	adds	r7, #44	@ 0x2c
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b08b      	sub	sp, #44	@ 0x2c
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	60f8      	str	r0, [r7, #12]
 8009e5e:	60b9      	str	r1, [r7, #8]
 8009e60:	4611      	mov	r1, r2
 8009e62:	461a      	mov	r2, r3
 8009e64:	460b      	mov	r3, r1
 8009e66:	80fb      	strh	r3, [r7, #6]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009e6c:	88bb      	ldrh	r3, [r7, #4]
 8009e6e:	085b      	lsrs	r3, r3, #1
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e7c:	88fb      	ldrh	r3, [r7, #6]
 8009e7e:	005a      	lsls	r2, r3, #1
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e88:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e8e:	e01b      	b.n	8009ec8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	3302      	adds	r3, #2
 8009e9c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	0a1b      	lsrs	r3, r3, #8
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	3302      	adds	r3, #2
 8009ec0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1e0      	bne.n	8009e90 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009ece:	88bb      	ldrh	r3, [r7, #4]
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d007      	beq.n	8009eea <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	b2da      	uxtb	r2, r3
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	701a      	strb	r2, [r3, #0]
  }
}
 8009eea:	bf00      	nop
 8009eec:	372c      	adds	r7, #44	@ 0x2c
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	460b      	mov	r3, r1
 8009f00:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	7c1b      	ldrb	r3, [r3, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d115      	bne.n	8009f3a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009f0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f12:	2202      	movs	r2, #2
 8009f14:	2181      	movs	r1, #129	@ 0x81
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f003 f907 	bl	800d12a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f26:	2202      	movs	r2, #2
 8009f28:	2101      	movs	r1, #1
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f003 f8fd 	bl	800d12a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8009f38:	e012      	b.n	8009f60 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009f3a:	2340      	movs	r3, #64	@ 0x40
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	2181      	movs	r1, #129	@ 0x81
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f003 f8f2 	bl	800d12a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f4c:	2340      	movs	r3, #64	@ 0x40
 8009f4e:	2202      	movs	r2, #2
 8009f50:	2101      	movs	r1, #1
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f003 f8e9 	bl	800d12a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009f60:	2308      	movs	r3, #8
 8009f62:	2203      	movs	r2, #3
 8009f64:	2182      	movs	r1, #130	@ 0x82
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f003 f8df 	bl	800d12a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009f72:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009f76:	f003 f9ff 	bl	800d378 <USBD_static_malloc>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d102      	bne.n	8009f92 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	73fb      	strb	r3, [r7, #15]
 8009f90:	e026      	b.n	8009fe0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f98:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	7c1b      	ldrb	r3, [r3, #16]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d109      	bne.n	8009fd0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009fc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f003 f99f 	bl	800d30c <USBD_LL_PrepareReceive>
 8009fce:	e007      	b.n	8009fe0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009fd6:	2340      	movs	r3, #64	@ 0x40
 8009fd8:	2101      	movs	r1, #1
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f003 f996 	bl	800d30c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009ffa:	2181      	movs	r1, #129	@ 0x81
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f003 f8ba 	bl	800d176 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a008:	2101      	movs	r1, #1
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f003 f8b3 	bl	800d176 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a018:	2182      	movs	r1, #130	@ 0x82
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f003 f8ab 	bl	800d176 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00e      	beq.n	800a04e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a040:	4618      	mov	r0, r3
 800a042:	f003 f9a7 	bl	800d394 <USBD_static_free>
    pdev->pClassData = NULL;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a068:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a06e:	2300      	movs	r3, #0
 800a070:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d039      	beq.n	800a0f6 <USBD_CDC_Setup+0x9e>
 800a082:	2b20      	cmp	r3, #32
 800a084:	d17f      	bne.n	800a186 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	88db      	ldrh	r3, [r3, #6]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d029      	beq.n	800a0e2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	b25b      	sxtb	r3, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	da11      	bge.n	800a0bc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a0a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	88d2      	ldrh	r2, [r2, #6]
 800a0aa:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a0ac:	6939      	ldr	r1, [r7, #16]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	88db      	ldrh	r3, [r3, #6]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f001 fa0f 	bl	800b4d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a0ba:	e06b      	b.n	800a194 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	785a      	ldrb	r2, [r3, #1]
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	88db      	ldrh	r3, [r3, #6]
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a0d2:	6939      	ldr	r1, [r7, #16]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	88db      	ldrh	r3, [r3, #6]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f001 fa2a 	bl	800b534 <USBD_CtlPrepareRx>
      break;
 800a0e0:	e058      	b.n	800a194 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	7850      	ldrb	r0, [r2, #1]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	4798      	blx	r3
      break;
 800a0f4:	e04e      	b.n	800a194 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	785b      	ldrb	r3, [r3, #1]
 800a0fa:	2b0b      	cmp	r3, #11
 800a0fc:	d02e      	beq.n	800a15c <USBD_CDC_Setup+0x104>
 800a0fe:	2b0b      	cmp	r3, #11
 800a100:	dc38      	bgt.n	800a174 <USBD_CDC_Setup+0x11c>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d002      	beq.n	800a10c <USBD_CDC_Setup+0xb4>
 800a106:	2b0a      	cmp	r3, #10
 800a108:	d014      	beq.n	800a134 <USBD_CDC_Setup+0xdc>
 800a10a:	e033      	b.n	800a174 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a112:	2b03      	cmp	r3, #3
 800a114:	d107      	bne.n	800a126 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a116:	f107 030c 	add.w	r3, r7, #12
 800a11a:	2202      	movs	r2, #2
 800a11c:	4619      	mov	r1, r3
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f001 f9da 	bl	800b4d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a124:	e02e      	b.n	800a184 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f001 f96a 	bl	800b402 <USBD_CtlError>
            ret = USBD_FAIL;
 800a12e:	2302      	movs	r3, #2
 800a130:	75fb      	strb	r3, [r7, #23]
          break;
 800a132:	e027      	b.n	800a184 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d107      	bne.n	800a14e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a13e:	f107 030f 	add.w	r3, r7, #15
 800a142:	2201      	movs	r2, #1
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f001 f9c6 	bl	800b4d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a14c:	e01a      	b.n	800a184 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f001 f956 	bl	800b402 <USBD_CtlError>
            ret = USBD_FAIL;
 800a156:	2302      	movs	r3, #2
 800a158:	75fb      	strb	r3, [r7, #23]
          break;
 800a15a:	e013      	b.n	800a184 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a162:	2b03      	cmp	r3, #3
 800a164:	d00d      	beq.n	800a182 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 f94a 	bl	800b402 <USBD_CtlError>
            ret = USBD_FAIL;
 800a16e:	2302      	movs	r3, #2
 800a170:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a172:	e006      	b.n	800a182 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f001 f943 	bl	800b402 <USBD_CtlError>
          ret = USBD_FAIL;
 800a17c:	2302      	movs	r3, #2
 800a17e:	75fb      	strb	r3, [r7, #23]
          break;
 800a180:	e000      	b.n	800a184 <USBD_CDC_Setup+0x12c>
          break;
 800a182:	bf00      	nop
      }
      break;
 800a184:	e006      	b.n	800a194 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f001 f93a 	bl	800b402 <USBD_CtlError>
      ret = USBD_FAIL;
 800a18e:	2302      	movs	r3, #2
 800a190:	75fb      	strb	r3, [r7, #23]
      break;
 800a192:	bf00      	nop
  }

  return ret;
 800a194:	7dfb      	ldrb	r3, [r7, #23]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1b0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a1b8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d03a      	beq.n	800a23a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a1c4:	78fa      	ldrb	r2, [r7, #3]
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4413      	add	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	440b      	add	r3, r1
 800a1d2:	331c      	adds	r3, #28
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d029      	beq.n	800a22e <USBD_CDC_DataIn+0x90>
 800a1da:	78fa      	ldrb	r2, [r7, #3]
 800a1dc:	6879      	ldr	r1, [r7, #4]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4413      	add	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	440b      	add	r3, r1
 800a1e8:	331c      	adds	r3, #28
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	78f9      	ldrb	r1, [r7, #3]
 800a1ee:	68b8      	ldr	r0, [r7, #8]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	440b      	add	r3, r1
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	4403      	add	r3, r0
 800a1fa:	3320      	adds	r3, #32
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	fbb2 f1f3 	udiv	r1, r2, r3
 800a202:	fb01 f303 	mul.w	r3, r1, r3
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d110      	bne.n	800a22e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a20c:	78fa      	ldrb	r2, [r7, #3]
 800a20e:	6879      	ldr	r1, [r7, #4]
 800a210:	4613      	mov	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	440b      	add	r3, r1
 800a21a:	331c      	adds	r3, #28
 800a21c:	2200      	movs	r2, #0
 800a21e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a220:	78f9      	ldrb	r1, [r7, #3]
 800a222:	2300      	movs	r3, #0
 800a224:	2200      	movs	r2, #0
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f003 f84d 	bl	800d2c6 <USBD_LL_Transmit>
 800a22c:	e003      	b.n	800a236 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	e000      	b.n	800a23c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a23a:	2302      	movs	r3, #2
  }
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a256:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a258:	78fb      	ldrb	r3, [r7, #3]
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f003 f878 	bl	800d352 <USBD_LL_GetRxDataSize>
 800a262:	4602      	mov	r2, r0
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00d      	beq.n	800a290 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a288:	4611      	mov	r1, r2
 800a28a:	4798      	blx	r3

    return USBD_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	e000      	b.n	800a292 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a290:	2302      	movs	r3, #2
  }
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2a8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d014      	beq.n	800a2de <USBD_CDC_EP0_RxReady+0x44>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a2ba:	2bff      	cmp	r3, #255	@ 0xff
 800a2bc:	d00f      	beq.n	800a2de <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a2cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a2d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	22ff      	movs	r2, #255	@ 0xff
 800a2da:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2243      	movs	r2, #67	@ 0x43
 800a2f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a2f6:	4b03      	ldr	r3, [pc, #12]	@ (800a304 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	2000009c 	.word	0x2000009c

0800a308 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2243      	movs	r2, #67	@ 0x43
 800a314:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a316:	4b03      	ldr	r3, [pc, #12]	@ (800a324 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a318:	4618      	mov	r0, r3
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	20000058 	.word	0x20000058

0800a328 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2243      	movs	r2, #67	@ 0x43
 800a334:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a336:	4b03      	ldr	r3, [pc, #12]	@ (800a344 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a338:	4618      	mov	r0, r3
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	200000e0 	.word	0x200000e0

0800a348 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	220a      	movs	r2, #10
 800a354:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a356:	4b03      	ldr	r3, [pc, #12]	@ (800a364 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr
 800a364:	20000014 	.word	0x20000014

0800a368 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a372:	2302      	movs	r3, #2
 800a374:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d005      	beq.n	800a388 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a388:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a396:	b480      	push	{r7}
 800a398:	b087      	sub	sp, #28
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	60b9      	str	r1, [r7, #8]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3aa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a3b4:	88fa      	ldrh	r2, [r7, #6]
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	371c      	adds	r7, #28
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b085      	sub	sp, #20
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a400:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d01c      	beq.n	800a446 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a412:	2b00      	cmp	r3, #0
 800a414:	d115      	bne.n	800a442 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a434:	b29b      	uxth	r3, r3
 800a436:	2181      	movs	r1, #129	@ 0x81
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f002 ff44 	bl	800d2c6 <USBD_LL_Transmit>

      return USBD_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	e002      	b.n	800a448 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a442:	2301      	movs	r3, #1
 800a444:	e000      	b.n	800a448 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a446:	2302      	movs	r3, #2
  }
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a45e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a466:	2b00      	cmp	r3, #0
 800a468:	d017      	beq.n	800a49a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	7c1b      	ldrb	r3, [r3, #16]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d109      	bne.n	800a486 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a478:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a47c:	2101      	movs	r1, #1
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f002 ff44 	bl	800d30c <USBD_LL_PrepareReceive>
 800a484:	e007      	b.n	800a496 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a48c:	2340      	movs	r3, #64	@ 0x40
 800a48e:	2101      	movs	r1, #1
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f002 ff3b 	bl	800d30c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a496:	2300      	movs	r3, #0
 800a498:	e000      	b.n	800a49c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a49a:	2302      	movs	r3, #2
  }
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	e01a      	b.n	800a4f2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d003      	beq.n	800a4ce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	79fa      	ldrb	r2, [r7, #7]
 800a4e8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f002 fda8 	bl	800d040 <USBD_LL_Init>

  return USBD_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b085      	sub	sp, #20
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d006      	beq.n	800a51c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]
 800a51a:	e001      	b.n	800a520 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a51c:	2302      	movs	r3, #2
 800a51e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a520:	7bfb      	ldrb	r3, [r7, #15]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b082      	sub	sp, #8
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f002 fddc 	bl	800d0f4 <USBD_LL_Start>

  return USBD_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a546:	b480      	push	{r7}
 800a548:	b083      	sub	sp, #12
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a568:	2302      	movs	r3, #2
 800a56a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00c      	beq.n	800a590 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	78fa      	ldrb	r2, [r7, #3]
 800a580:	4611      	mov	r1, r2
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	4798      	blx	r3
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	78fa      	ldrb	r2, [r7, #3]
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	4798      	blx	r3

  return USBD_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 fedb 	bl	800b38e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a5f4:	f003 031f 	and.w	r3, r3, #31
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d016      	beq.n	800a62a <USBD_LL_SetupStage+0x6a>
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d81c      	bhi.n	800a63a <USBD_LL_SetupStage+0x7a>
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <USBD_LL_SetupStage+0x4a>
 800a604:	2b01      	cmp	r3, #1
 800a606:	d008      	beq.n	800a61a <USBD_LL_SetupStage+0x5a>
 800a608:	e017      	b.n	800a63a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a610:	4619      	mov	r1, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f9ce 	bl	800a9b4 <USBD_StdDevReq>
      break;
 800a618:	e01a      	b.n	800a650 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fa30 	bl	800aa88 <USBD_StdItfReq>
      break;
 800a628:	e012      	b.n	800a650 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800a630:	4619      	mov	r1, r3
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fa70 	bl	800ab18 <USBD_StdEPReq>
      break;
 800a638:	e00a      	b.n	800a650 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800a640:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a644:	b2db      	uxtb	r3, r3
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f002 fdb3 	bl	800d1b4 <USBD_LL_StallEP>
      break;
 800a64e:	bf00      	nop
  }

  return USBD_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b086      	sub	sp, #24
 800a65e:	af00      	add	r7, sp, #0
 800a660:	60f8      	str	r0, [r7, #12]
 800a662:	460b      	mov	r3, r1
 800a664:	607a      	str	r2, [r7, #4]
 800a666:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a668:	7afb      	ldrb	r3, [r7, #11]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d14b      	bne.n	800a706 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a674:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a67c:	2b03      	cmp	r3, #3
 800a67e:	d134      	bne.n	800a6ea <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	68da      	ldr	r2, [r3, #12]
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d919      	bls.n	800a6c0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	68da      	ldr	r2, [r3, #12]
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	1ad2      	subs	r2, r2, r3
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	68da      	ldr	r2, [r3, #12]
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d203      	bcs.n	800a6ae <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	e002      	b.n	800a6b4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	6879      	ldr	r1, [r7, #4]
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f000 ff59 	bl	800b570 <USBD_CtlContinueRx>
 800a6be:	e038      	b.n	800a732 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00a      	beq.n	800a6e2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d105      	bne.n	800a6e2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 ff56 	bl	800b594 <USBD_CtlSendStatus>
 800a6e8:	e023      	b.n	800a732 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a6f0:	2b05      	cmp	r3, #5
 800a6f2:	d11e      	bne.n	800a732 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f002 fd58 	bl	800d1b4 <USBD_LL_StallEP>
 800a704:	e015      	b.n	800a732 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00d      	beq.n	800a72e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a718:	2b03      	cmp	r3, #3
 800a71a:	d108      	bne.n	800a72e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	7afa      	ldrb	r2, [r7, #11]
 800a726:	4611      	mov	r1, r2
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	4798      	blx	r3
 800a72c:	e001      	b.n	800a732 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a72e:	2302      	movs	r3, #2
 800a730:	e000      	b.n	800a734 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3718      	adds	r7, #24
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	460b      	mov	r3, r1
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a74a:	7afb      	ldrb	r3, [r7, #11]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d17f      	bne.n	800a850 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	3314      	adds	r3, #20
 800a754:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d15c      	bne.n	800a81a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	68da      	ldr	r2, [r3, #12]
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d915      	bls.n	800a798 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	68da      	ldr	r2, [r3, #12]
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	1ad2      	subs	r2, r2, r3
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	b29b      	uxth	r3, r3
 800a780:	461a      	mov	r2, r3
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 fec3 	bl	800b510 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a78a:	2300      	movs	r3, #0
 800a78c:	2200      	movs	r2, #0
 800a78e:	2100      	movs	r1, #0
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f002 fdbb 	bl	800d30c <USBD_LL_PrepareReceive>
 800a796:	e04e      	b.n	800a836 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	697a      	ldr	r2, [r7, #20]
 800a79e:	6912      	ldr	r2, [r2, #16]
 800a7a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7a4:	fb01 f202 	mul.w	r2, r1, r2
 800a7a8:	1a9b      	subs	r3, r3, r2
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d11c      	bne.n	800a7e8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	689a      	ldr	r2, [r3, #8]
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d316      	bcc.n	800a7e8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	689a      	ldr	r2, [r3, #8]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d20f      	bcs.n	800a7e8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f000 fe9f 	bl	800b510 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7da:	2300      	movs	r3, #0
 800a7dc:	2200      	movs	r2, #0
 800a7de:	2100      	movs	r1, #0
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f002 fd93 	bl	800d30c <USBD_LL_PrepareReceive>
 800a7e6:	e026      	b.n	800a836 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d00a      	beq.n	800a80a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a7fa:	2b03      	cmp	r3, #3
 800a7fc:	d105      	bne.n	800a80a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a80a:	2180      	movs	r1, #128	@ 0x80
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f002 fcd1 	bl	800d1b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f000 fed1 	bl	800b5ba <USBD_CtlReceiveStatus>
 800a818:	e00d      	b.n	800a836 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a820:	2b04      	cmp	r3, #4
 800a822:	d004      	beq.n	800a82e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d103      	bne.n	800a836 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a82e:	2180      	movs	r1, #128	@ 0x80
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f002 fcbf 	bl	800d1b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d11d      	bne.n	800a87c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f7ff fe80 	bl	800a546 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a84e:	e015      	b.n	800a87c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a856:	695b      	ldr	r3, [r3, #20]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00d      	beq.n	800a878 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a862:	2b03      	cmp	r3, #3
 800a864:	d108      	bne.n	800a878 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	7afa      	ldrb	r2, [r7, #11]
 800a870:	4611      	mov	r1, r2
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	4798      	blx	r3
 800a876:	e001      	b.n	800a87c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a878:	2302      	movs	r3, #2
 800a87a:	e000      	b.n	800a87e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b082      	sub	sp, #8
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a88e:	2340      	movs	r3, #64	@ 0x40
 800a890:	2200      	movs	r2, #0
 800a892:	2100      	movs	r1, #0
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f002 fc48 	bl	800d12a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2240      	movs	r2, #64	@ 0x40
 800a8a6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8aa:	2340      	movs	r3, #64	@ 0x40
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2180      	movs	r1, #128	@ 0x80
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f002 fc3a 	bl	800d12a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2240      	movs	r2, #64	@ 0x40
 800a8c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d009      	beq.n	800a8fe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	6852      	ldr	r2, [r2, #4]
 800a8f6:	b2d2      	uxtb	r2, r2
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	4798      	blx	r3
  }

  return USBD_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	460b      	mov	r3, r1
 800a912:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	78fa      	ldrb	r2, [r7, #3]
 800a918:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2204      	movs	r2, #4
 800a940:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a952:	b480      	push	{r7}
 800a954:	b083      	sub	sp, #12
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a960:	2b04      	cmp	r3, #4
 800a962:	d105      	bne.n	800a970 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b082      	sub	sp, #8
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d10b      	bne.n	800a9a8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d005      	beq.n	800a9a8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
	...

0800a9b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9ca:	2b40      	cmp	r3, #64	@ 0x40
 800a9cc:	d005      	beq.n	800a9da <USBD_StdDevReq+0x26>
 800a9ce:	2b40      	cmp	r3, #64	@ 0x40
 800a9d0:	d84f      	bhi.n	800aa72 <USBD_StdDevReq+0xbe>
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d009      	beq.n	800a9ea <USBD_StdDevReq+0x36>
 800a9d6:	2b20      	cmp	r3, #32
 800a9d8:	d14b      	bne.n	800aa72 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	4798      	blx	r3
      break;
 800a9e8:	e048      	b.n	800aa7c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	785b      	ldrb	r3, [r3, #1]
 800a9ee:	2b09      	cmp	r3, #9
 800a9f0:	d839      	bhi.n	800aa66 <USBD_StdDevReq+0xb2>
 800a9f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9f8 <USBD_StdDevReq+0x44>)
 800a9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f8:	0800aa49 	.word	0x0800aa49
 800a9fc:	0800aa5d 	.word	0x0800aa5d
 800aa00:	0800aa67 	.word	0x0800aa67
 800aa04:	0800aa53 	.word	0x0800aa53
 800aa08:	0800aa67 	.word	0x0800aa67
 800aa0c:	0800aa2b 	.word	0x0800aa2b
 800aa10:	0800aa21 	.word	0x0800aa21
 800aa14:	0800aa67 	.word	0x0800aa67
 800aa18:	0800aa3f 	.word	0x0800aa3f
 800aa1c:	0800aa35 	.word	0x0800aa35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa20:	6839      	ldr	r1, [r7, #0]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f9dc 	bl	800ade0 <USBD_GetDescriptor>
          break;
 800aa28:	e022      	b.n	800aa70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fb3f 	bl	800b0b0 <USBD_SetAddress>
          break;
 800aa32:	e01d      	b.n	800aa70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fb7e 	bl	800b138 <USBD_SetConfig>
          break;
 800aa3c:	e018      	b.n	800aa70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fc07 	bl	800b254 <USBD_GetConfig>
          break;
 800aa46:	e013      	b.n	800aa70 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fc37 	bl	800b2be <USBD_GetStatus>
          break;
 800aa50:	e00e      	b.n	800aa70 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fc65 	bl	800b324 <USBD_SetFeature>
          break;
 800aa5a:	e009      	b.n	800aa70 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 fc74 	bl	800b34c <USBD_ClrFeature>
          break;
 800aa64:	e004      	b.n	800aa70 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fcca 	bl	800b402 <USBD_CtlError>
          break;
 800aa6e:	bf00      	nop
      }
      break;
 800aa70:	e004      	b.n	800aa7c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fcc4 	bl	800b402 <USBD_CtlError>
      break;
 800aa7a:	bf00      	nop
  }

  return ret;
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop

0800aa88 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa9e:	2b40      	cmp	r3, #64	@ 0x40
 800aaa0:	d005      	beq.n	800aaae <USBD_StdItfReq+0x26>
 800aaa2:	2b40      	cmp	r3, #64	@ 0x40
 800aaa4:	d82e      	bhi.n	800ab04 <USBD_StdItfReq+0x7c>
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <USBD_StdItfReq+0x26>
 800aaaa:	2b20      	cmp	r3, #32
 800aaac:	d12a      	bne.n	800ab04 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aab4:	3b01      	subs	r3, #1
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d81d      	bhi.n	800aaf6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	889b      	ldrh	r3, [r3, #4]
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d813      	bhi.n	800aaec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	4798      	blx	r3
 800aad2:	4603      	mov	r3, r0
 800aad4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	88db      	ldrh	r3, [r3, #6]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d110      	bne.n	800ab00 <USBD_StdItfReq+0x78>
 800aade:	7bfb      	ldrb	r3, [r7, #15]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10d      	bne.n	800ab00 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fd55 	bl	800b594 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aaea:	e009      	b.n	800ab00 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fc87 	bl	800b402 <USBD_CtlError>
          break;
 800aaf4:	e004      	b.n	800ab00 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fc82 	bl	800b402 <USBD_CtlError>
          break;
 800aafe:	e000      	b.n	800ab02 <USBD_StdItfReq+0x7a>
          break;
 800ab00:	bf00      	nop
      }
      break;
 800ab02:	e004      	b.n	800ab0e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fc7b 	bl	800b402 <USBD_CtlError>
      break;
 800ab0c:	bf00      	nop
  }

  return USBD_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	889b      	ldrh	r3, [r3, #4]
 800ab2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab34:	2b40      	cmp	r3, #64	@ 0x40
 800ab36:	d007      	beq.n	800ab48 <USBD_StdEPReq+0x30>
 800ab38:	2b40      	cmp	r3, #64	@ 0x40
 800ab3a:	f200 8146 	bhi.w	800adca <USBD_StdEPReq+0x2b2>
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00a      	beq.n	800ab58 <USBD_StdEPReq+0x40>
 800ab42:	2b20      	cmp	r3, #32
 800ab44:	f040 8141 	bne.w	800adca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	6839      	ldr	r1, [r7, #0]
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	4798      	blx	r3
      break;
 800ab56:	e13d      	b.n	800add4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab60:	2b20      	cmp	r3, #32
 800ab62:	d10a      	bne.n	800ab7a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	4798      	blx	r3
 800ab72:	4603      	mov	r3, r0
 800ab74:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
 800ab78:	e12d      	b.n	800add6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	785b      	ldrb	r3, [r3, #1]
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d007      	beq.n	800ab92 <USBD_StdEPReq+0x7a>
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	f300 811b 	bgt.w	800adbe <USBD_StdEPReq+0x2a6>
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d072      	beq.n	800ac72 <USBD_StdEPReq+0x15a>
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d03a      	beq.n	800ac06 <USBD_StdEPReq+0xee>
 800ab90:	e115      	b.n	800adbe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d002      	beq.n	800aba2 <USBD_StdEPReq+0x8a>
 800ab9c:	2b03      	cmp	r3, #3
 800ab9e:	d015      	beq.n	800abcc <USBD_StdEPReq+0xb4>
 800aba0:	e02b      	b.n	800abfa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00c      	beq.n	800abc2 <USBD_StdEPReq+0xaa>
 800aba8:	7bbb      	ldrb	r3, [r7, #14]
 800abaa:	2b80      	cmp	r3, #128	@ 0x80
 800abac:	d009      	beq.n	800abc2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f002 fafe 	bl	800d1b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800abb8:	2180      	movs	r1, #128	@ 0x80
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f002 fafa 	bl	800d1b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abc0:	e020      	b.n	800ac04 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fc1c 	bl	800b402 <USBD_CtlError>
              break;
 800abca:	e01b      	b.n	800ac04 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	885b      	ldrh	r3, [r3, #2]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10e      	bne.n	800abf2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800abd4:	7bbb      	ldrb	r3, [r7, #14]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00b      	beq.n	800abf2 <USBD_StdEPReq+0xda>
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	2b80      	cmp	r3, #128	@ 0x80
 800abde:	d008      	beq.n	800abf2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	88db      	ldrh	r3, [r3, #6]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d104      	bne.n	800abf2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800abe8:	7bbb      	ldrb	r3, [r7, #14]
 800abea:	4619      	mov	r1, r3
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f002 fae1 	bl	800d1b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fcce 	bl	800b594 <USBD_CtlSendStatus>

              break;
 800abf8:	e004      	b.n	800ac04 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800abfa:	6839      	ldr	r1, [r7, #0]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fc00 	bl	800b402 <USBD_CtlError>
              break;
 800ac02:	bf00      	nop
          }
          break;
 800ac04:	e0e0      	b.n	800adc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d002      	beq.n	800ac16 <USBD_StdEPReq+0xfe>
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d015      	beq.n	800ac40 <USBD_StdEPReq+0x128>
 800ac14:	e026      	b.n	800ac64 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00c      	beq.n	800ac36 <USBD_StdEPReq+0x11e>
 800ac1c:	7bbb      	ldrb	r3, [r7, #14]
 800ac1e:	2b80      	cmp	r3, #128	@ 0x80
 800ac20:	d009      	beq.n	800ac36 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f002 fac4 	bl	800d1b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ac2c:	2180      	movs	r1, #128	@ 0x80
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f002 fac0 	bl	800d1b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac34:	e01c      	b.n	800ac70 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fbe2 	bl	800b402 <USBD_CtlError>
              break;
 800ac3e:	e017      	b.n	800ac70 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	885b      	ldrh	r3, [r3, #2]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d112      	bne.n	800ac6e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac48:	7bbb      	ldrb	r3, [r7, #14]
 800ac4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d004      	beq.n	800ac5c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac52:	7bbb      	ldrb	r3, [r7, #14]
 800ac54:	4619      	mov	r1, r3
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f002 facb 	bl	800d1f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fc99 	bl	800b594 <USBD_CtlSendStatus>
              }
              break;
 800ac62:	e004      	b.n	800ac6e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fbcb 	bl	800b402 <USBD_CtlError>
              break;
 800ac6c:	e000      	b.n	800ac70 <USBD_StdEPReq+0x158>
              break;
 800ac6e:	bf00      	nop
          }
          break;
 800ac70:	e0aa      	b.n	800adc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d002      	beq.n	800ac82 <USBD_StdEPReq+0x16a>
 800ac7c:	2b03      	cmp	r3, #3
 800ac7e:	d032      	beq.n	800ace6 <USBD_StdEPReq+0x1ce>
 800ac80:	e097      	b.n	800adb2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d007      	beq.n	800ac98 <USBD_StdEPReq+0x180>
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
 800ac8a:	2b80      	cmp	r3, #128	@ 0x80
 800ac8c:	d004      	beq.n	800ac98 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ac8e:	6839      	ldr	r1, [r7, #0]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fbb6 	bl	800b402 <USBD_CtlError>
                break;
 800ac96:	e091      	b.n	800adbc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	da0b      	bge.n	800acb8 <USBD_StdEPReq+0x1a0>
 800aca0:	7bbb      	ldrb	r3, [r7, #14]
 800aca2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aca6:	4613      	mov	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	3310      	adds	r3, #16
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	4413      	add	r3, r2
 800acb4:	3304      	adds	r3, #4
 800acb6:	e00b      	b.n	800acd0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acb8:	7bbb      	ldrb	r3, [r7, #14]
 800acba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acbe:	4613      	mov	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	4413      	add	r3, r2
 800acce:	3304      	adds	r3, #4
 800acd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	2202      	movs	r2, #2
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fbfa 	bl	800b4d8 <USBD_CtlSendData>
              break;
 800ace4:	e06a      	b.n	800adbc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ace6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acea:	2b00      	cmp	r3, #0
 800acec:	da11      	bge.n	800ad12 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800acee:	7bbb      	ldrb	r3, [r7, #14]
 800acf0:	f003 020f 	and.w	r2, r3, #15
 800acf4:	6879      	ldr	r1, [r7, #4]
 800acf6:	4613      	mov	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	440b      	add	r3, r1
 800ad00:	3318      	adds	r3, #24
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d117      	bne.n	800ad38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fb79 	bl	800b402 <USBD_CtlError>
                  break;
 800ad10:	e054      	b.n	800adbc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad12:	7bbb      	ldrb	r3, [r7, #14]
 800ad14:	f003 020f 	and.w	r2, r3, #15
 800ad18:	6879      	ldr	r1, [r7, #4]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	4413      	add	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	440b      	add	r3, r1
 800ad24:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d104      	bne.n	800ad38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fb66 	bl	800b402 <USBD_CtlError>
                  break;
 800ad36:	e041      	b.n	800adbc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	da0b      	bge.n	800ad58 <USBD_StdEPReq+0x240>
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
 800ad42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad46:	4613      	mov	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	4413      	add	r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	3310      	adds	r3, #16
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	4413      	add	r3, r2
 800ad54:	3304      	adds	r3, #4
 800ad56:	e00b      	b.n	800ad70 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad5e:	4613      	mov	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	3304      	adds	r3, #4
 800ad70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad72:	7bbb      	ldrb	r3, [r7, #14]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d002      	beq.n	800ad7e <USBD_StdEPReq+0x266>
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	2b80      	cmp	r3, #128	@ 0x80
 800ad7c:	d103      	bne.n	800ad86 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2200      	movs	r2, #0
 800ad82:	601a      	str	r2, [r3, #0]
 800ad84:	e00e      	b.n	800ada4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ad86:	7bbb      	ldrb	r3, [r7, #14]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f002 fa50 	bl	800d230 <USBD_LL_IsStallEP>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	e002      	b.n	800ada4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2202      	movs	r2, #2
 800ada8:	4619      	mov	r1, r3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fb94 	bl	800b4d8 <USBD_CtlSendData>
              break;
 800adb0:	e004      	b.n	800adbc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fb24 	bl	800b402 <USBD_CtlError>
              break;
 800adba:	bf00      	nop
          }
          break;
 800adbc:	e004      	b.n	800adc8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fb1e 	bl	800b402 <USBD_CtlError>
          break;
 800adc6:	bf00      	nop
      }
      break;
 800adc8:	e004      	b.n	800add4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800adca:	6839      	ldr	r1, [r7, #0]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fb18 	bl	800b402 <USBD_CtlError>
      break;
 800add2:	bf00      	nop
  }

  return ret;
 800add4:	7bfb      	ldrb	r3, [r7, #15]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
	...

0800ade0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adea:	2300      	movs	r3, #0
 800adec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800adee:	2300      	movs	r3, #0
 800adf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800adf2:	2300      	movs	r3, #0
 800adf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	885b      	ldrh	r3, [r3, #2]
 800adfa:	0a1b      	lsrs	r3, r3, #8
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	3b01      	subs	r3, #1
 800ae00:	2b06      	cmp	r3, #6
 800ae02:	f200 8128 	bhi.w	800b056 <USBD_GetDescriptor+0x276>
 800ae06:	a201      	add	r2, pc, #4	@ (adr r2, 800ae0c <USBD_GetDescriptor+0x2c>)
 800ae08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0c:	0800ae29 	.word	0x0800ae29
 800ae10:	0800ae41 	.word	0x0800ae41
 800ae14:	0800ae81 	.word	0x0800ae81
 800ae18:	0800b057 	.word	0x0800b057
 800ae1c:	0800b057 	.word	0x0800b057
 800ae20:	0800aff7 	.word	0x0800aff7
 800ae24:	0800b023 	.word	0x0800b023
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	7c12      	ldrb	r2, [r2, #16]
 800ae34:	f107 0108 	add.w	r1, r7, #8
 800ae38:	4610      	mov	r0, r2
 800ae3a:	4798      	blx	r3
 800ae3c:	60f8      	str	r0, [r7, #12]
      break;
 800ae3e:	e112      	b.n	800b066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	7c1b      	ldrb	r3, [r3, #16]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10d      	bne.n	800ae64 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae50:	f107 0208 	add.w	r2, r7, #8
 800ae54:	4610      	mov	r0, r2
 800ae56:	4798      	blx	r3
 800ae58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	2202      	movs	r2, #2
 800ae60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ae62:	e100      	b.n	800b066 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6c:	f107 0208 	add.w	r2, r7, #8
 800ae70:	4610      	mov	r0, r2
 800ae72:	4798      	blx	r3
 800ae74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	2202      	movs	r2, #2
 800ae7c:	701a      	strb	r2, [r3, #0]
      break;
 800ae7e:	e0f2      	b.n	800b066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	885b      	ldrh	r3, [r3, #2]
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b05      	cmp	r3, #5
 800ae88:	f200 80ac 	bhi.w	800afe4 <USBD_GetDescriptor+0x204>
 800ae8c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae94 <USBD_GetDescriptor+0xb4>)
 800ae8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae92:	bf00      	nop
 800ae94:	0800aead 	.word	0x0800aead
 800ae98:	0800aee1 	.word	0x0800aee1
 800ae9c:	0800af15 	.word	0x0800af15
 800aea0:	0800af49 	.word	0x0800af49
 800aea4:	0800af7d 	.word	0x0800af7d
 800aea8:	0800afb1 	.word	0x0800afb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00b      	beq.n	800aed0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	7c12      	ldrb	r2, [r2, #16]
 800aec4:	f107 0108 	add.w	r1, r7, #8
 800aec8:	4610      	mov	r0, r2
 800aeca:	4798      	blx	r3
 800aecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aece:	e091      	b.n	800aff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aed0:	6839      	ldr	r1, [r7, #0]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fa95 	bl	800b402 <USBD_CtlError>
            err++;
 800aed8:	7afb      	ldrb	r3, [r7, #11]
 800aeda:	3301      	adds	r3, #1
 800aedc:	72fb      	strb	r3, [r7, #11]
          break;
 800aede:	e089      	b.n	800aff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00b      	beq.n	800af04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	7c12      	ldrb	r2, [r2, #16]
 800aef8:	f107 0108 	add.w	r1, r7, #8
 800aefc:	4610      	mov	r0, r2
 800aefe:	4798      	blx	r3
 800af00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af02:	e077      	b.n	800aff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fa7b 	bl	800b402 <USBD_CtlError>
            err++;
 800af0c:	7afb      	ldrb	r3, [r7, #11]
 800af0e:	3301      	adds	r3, #1
 800af10:	72fb      	strb	r3, [r7, #11]
          break;
 800af12:	e06f      	b.n	800aff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00b      	beq.n	800af38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	7c12      	ldrb	r2, [r2, #16]
 800af2c:	f107 0108 	add.w	r1, r7, #8
 800af30:	4610      	mov	r0, r2
 800af32:	4798      	blx	r3
 800af34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af36:	e05d      	b.n	800aff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa61 	bl	800b402 <USBD_CtlError>
            err++;
 800af40:	7afb      	ldrb	r3, [r7, #11]
 800af42:	3301      	adds	r3, #1
 800af44:	72fb      	strb	r3, [r7, #11]
          break;
 800af46:	e055      	b.n	800aff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00b      	beq.n	800af6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	7c12      	ldrb	r2, [r2, #16]
 800af60:	f107 0108 	add.w	r1, r7, #8
 800af64:	4610      	mov	r0, r2
 800af66:	4798      	blx	r3
 800af68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af6a:	e043      	b.n	800aff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fa47 	bl	800b402 <USBD_CtlError>
            err++;
 800af74:	7afb      	ldrb	r3, [r7, #11]
 800af76:	3301      	adds	r3, #1
 800af78:	72fb      	strb	r3, [r7, #11]
          break;
 800af7a:	e03b      	b.n	800aff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af82:	695b      	ldr	r3, [r3, #20]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d00b      	beq.n	800afa0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	7c12      	ldrb	r2, [r2, #16]
 800af94:	f107 0108 	add.w	r1, r7, #8
 800af98:	4610      	mov	r0, r2
 800af9a:	4798      	blx	r3
 800af9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af9e:	e029      	b.n	800aff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fa2d 	bl	800b402 <USBD_CtlError>
            err++;
 800afa8:	7afb      	ldrb	r3, [r7, #11]
 800afaa:	3301      	adds	r3, #1
 800afac:	72fb      	strb	r3, [r7, #11]
          break;
 800afae:	e021      	b.n	800aff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800afb6:	699b      	ldr	r3, [r3, #24]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00b      	beq.n	800afd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	7c12      	ldrb	r2, [r2, #16]
 800afc8:	f107 0108 	add.w	r1, r7, #8
 800afcc:	4610      	mov	r0, r2
 800afce:	4798      	blx	r3
 800afd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afd2:	e00f      	b.n	800aff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fa13 	bl	800b402 <USBD_CtlError>
            err++;
 800afdc:	7afb      	ldrb	r3, [r7, #11]
 800afde:	3301      	adds	r3, #1
 800afe0:	72fb      	strb	r3, [r7, #11]
          break;
 800afe2:	e007      	b.n	800aff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fa0b 	bl	800b402 <USBD_CtlError>
          err++;
 800afec:	7afb      	ldrb	r3, [r7, #11]
 800afee:	3301      	adds	r3, #1
 800aff0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800aff2:	e038      	b.n	800b066 <USBD_GetDescriptor+0x286>
 800aff4:	e037      	b.n	800b066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	7c1b      	ldrb	r3, [r3, #16]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d109      	bne.n	800b012 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b006:	f107 0208 	add.w	r2, r7, #8
 800b00a:	4610      	mov	r0, r2
 800b00c:	4798      	blx	r3
 800b00e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b010:	e029      	b.n	800b066 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f9f4 	bl	800b402 <USBD_CtlError>
        err++;
 800b01a:	7afb      	ldrb	r3, [r7, #11]
 800b01c:	3301      	adds	r3, #1
 800b01e:	72fb      	strb	r3, [r7, #11]
      break;
 800b020:	e021      	b.n	800b066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	7c1b      	ldrb	r3, [r3, #16]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10d      	bne.n	800b046 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b032:	f107 0208 	add.w	r2, r7, #8
 800b036:	4610      	mov	r0, r2
 800b038:	4798      	blx	r3
 800b03a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	3301      	adds	r3, #1
 800b040:	2207      	movs	r2, #7
 800b042:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b044:	e00f      	b.n	800b066 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 f9da 	bl	800b402 <USBD_CtlError>
        err++;
 800b04e:	7afb      	ldrb	r3, [r7, #11]
 800b050:	3301      	adds	r3, #1
 800b052:	72fb      	strb	r3, [r7, #11]
      break;
 800b054:	e007      	b.n	800b066 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f9d2 	bl	800b402 <USBD_CtlError>
      err++;
 800b05e:	7afb      	ldrb	r3, [r7, #11]
 800b060:	3301      	adds	r3, #1
 800b062:	72fb      	strb	r3, [r7, #11]
      break;
 800b064:	bf00      	nop
  }

  if (err != 0U)
 800b066:	7afb      	ldrb	r3, [r7, #11]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d11c      	bne.n	800b0a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b06c:	893b      	ldrh	r3, [r7, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d011      	beq.n	800b096 <USBD_GetDescriptor+0x2b6>
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	88db      	ldrh	r3, [r3, #6]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00d      	beq.n	800b096 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	88da      	ldrh	r2, [r3, #6]
 800b07e:	893b      	ldrh	r3, [r7, #8]
 800b080:	4293      	cmp	r3, r2
 800b082:	bf28      	it	cs
 800b084:	4613      	movcs	r3, r2
 800b086:	b29b      	uxth	r3, r3
 800b088:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b08a:	893b      	ldrh	r3, [r7, #8]
 800b08c:	461a      	mov	r2, r3
 800b08e:	68f9      	ldr	r1, [r7, #12]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fa21 	bl	800b4d8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	88db      	ldrh	r3, [r3, #6]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d104      	bne.n	800b0a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fa78 	bl	800b594 <USBD_CtlSendStatus>
 800b0a4:	e000      	b.n	800b0a8 <USBD_GetDescriptor+0x2c8>
    return;
 800b0a6:	bf00      	nop
    }
  }
}
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop

0800b0b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	889b      	ldrh	r3, [r3, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d130      	bne.n	800b124 <USBD_SetAddress+0x74>
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	88db      	ldrh	r3, [r3, #6]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d12c      	bne.n	800b124 <USBD_SetAddress+0x74>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	885b      	ldrh	r3, [r3, #2]
 800b0ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800b0d0:	d828      	bhi.n	800b124 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	885b      	ldrh	r3, [r3, #2]
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0e4:	2b03      	cmp	r3, #3
 800b0e6:	d104      	bne.n	800b0f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f989 	bl	800b402 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0f0:	e01d      	b.n	800b12e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	7bfa      	ldrb	r2, [r7, #15]
 800b0f6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b0fa:	7bfb      	ldrb	r3, [r7, #15]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f002 f8c2 	bl	800d288 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fa45 	bl	800b594 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d004      	beq.n	800b11a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2202      	movs	r2, #2
 800b114:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b118:	e009      	b.n	800b12e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b122:	e004      	b.n	800b12e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f96b 	bl	800b402 <USBD_CtlError>
  }
}
 800b12c:	bf00      	nop
 800b12e:	bf00      	nop
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
	...

0800b138 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	885b      	ldrh	r3, [r3, #2]
 800b146:	b2da      	uxtb	r2, r3
 800b148:	4b41      	ldr	r3, [pc, #260]	@ (800b250 <USBD_SetConfig+0x118>)
 800b14a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b14c:	4b40      	ldr	r3, [pc, #256]	@ (800b250 <USBD_SetConfig+0x118>)
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d904      	bls.n	800b15e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f953 	bl	800b402 <USBD_CtlError>
 800b15c:	e075      	b.n	800b24a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b164:	2b02      	cmp	r3, #2
 800b166:	d002      	beq.n	800b16e <USBD_SetConfig+0x36>
 800b168:	2b03      	cmp	r3, #3
 800b16a:	d023      	beq.n	800b1b4 <USBD_SetConfig+0x7c>
 800b16c:	e062      	b.n	800b234 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b16e:	4b38      	ldr	r3, [pc, #224]	@ (800b250 <USBD_SetConfig+0x118>)
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d01a      	beq.n	800b1ac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b176:	4b36      	ldr	r3, [pc, #216]	@ (800b250 <USBD_SetConfig+0x118>)
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	461a      	mov	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2203      	movs	r2, #3
 800b184:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b188:	4b31      	ldr	r3, [pc, #196]	@ (800b250 <USBD_SetConfig+0x118>)
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7ff f9e4 	bl	800a55c <USBD_SetClassConfig>
 800b194:	4603      	mov	r3, r0
 800b196:	2b02      	cmp	r3, #2
 800b198:	d104      	bne.n	800b1a4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 f930 	bl	800b402 <USBD_CtlError>
            return;
 800b1a2:	e052      	b.n	800b24a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 f9f5 	bl	800b594 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b1aa:	e04e      	b.n	800b24a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f9f1 	bl	800b594 <USBD_CtlSendStatus>
        break;
 800b1b2:	e04a      	b.n	800b24a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b1b4:	4b26      	ldr	r3, [pc, #152]	@ (800b250 <USBD_SetConfig+0x118>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d112      	bne.n	800b1e2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2202      	movs	r2, #2
 800b1c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800b1c4:	4b22      	ldr	r3, [pc, #136]	@ (800b250 <USBD_SetConfig+0x118>)
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b1ce:	4b20      	ldr	r3, [pc, #128]	@ (800b250 <USBD_SetConfig+0x118>)
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7ff f9e0 	bl	800a59a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 f9da 	bl	800b594 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b1e0:	e033      	b.n	800b24a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b1e2:	4b1b      	ldr	r3, [pc, #108]	@ (800b250 <USBD_SetConfig+0x118>)
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d01d      	beq.n	800b22c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7ff f9ce 	bl	800a59a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b1fe:	4b14      	ldr	r3, [pc, #80]	@ (800b250 <USBD_SetConfig+0x118>)
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	461a      	mov	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b208:	4b11      	ldr	r3, [pc, #68]	@ (800b250 <USBD_SetConfig+0x118>)
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff f9a4 	bl	800a55c <USBD_SetClassConfig>
 800b214:	4603      	mov	r3, r0
 800b216:	2b02      	cmp	r3, #2
 800b218:	d104      	bne.n	800b224 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f8f0 	bl	800b402 <USBD_CtlError>
            return;
 800b222:	e012      	b.n	800b24a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f9b5 	bl	800b594 <USBD_CtlSendStatus>
        break;
 800b22a:	e00e      	b.n	800b24a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f9b1 	bl	800b594 <USBD_CtlSendStatus>
        break;
 800b232:	e00a      	b.n	800b24a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f8e3 	bl	800b402 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b23c:	4b04      	ldr	r3, [pc, #16]	@ (800b250 <USBD_SetConfig+0x118>)
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	4619      	mov	r1, r3
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7ff f9a9 	bl	800a59a <USBD_ClrClassConfig>
        break;
 800b248:	bf00      	nop
    }
  }
}
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	20000c8c 	.word	0x20000c8c

0800b254 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	88db      	ldrh	r3, [r3, #6]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d004      	beq.n	800b270 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f8ca 	bl	800b402 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b26e:	e022      	b.n	800b2b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b276:	2b02      	cmp	r3, #2
 800b278:	dc02      	bgt.n	800b280 <USBD_GetConfig+0x2c>
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	dc03      	bgt.n	800b286 <USBD_GetConfig+0x32>
 800b27e:	e015      	b.n	800b2ac <USBD_GetConfig+0x58>
 800b280:	2b03      	cmp	r3, #3
 800b282:	d00b      	beq.n	800b29c <USBD_GetConfig+0x48>
 800b284:	e012      	b.n	800b2ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	3308      	adds	r3, #8
 800b290:	2201      	movs	r2, #1
 800b292:	4619      	mov	r1, r3
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f91f 	bl	800b4d8 <USBD_CtlSendData>
        break;
 800b29a:	e00c      	b.n	800b2b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	3304      	adds	r3, #4
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f917 	bl	800b4d8 <USBD_CtlSendData>
        break;
 800b2aa:	e004      	b.n	800b2b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f8a7 	bl	800b402 <USBD_CtlError>
        break;
 800b2b4:	bf00      	nop
}
 800b2b6:	bf00      	nop
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d81e      	bhi.n	800b312 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	88db      	ldrh	r3, [r3, #6]
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d004      	beq.n	800b2e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f88f 	bl	800b402 <USBD_CtlError>
        break;
 800b2e4:	e01a      	b.n	800b31c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d005      	beq.n	800b302 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	f043 0202 	orr.w	r2, r3, #2
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	330c      	adds	r3, #12
 800b306:	2202      	movs	r2, #2
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f8e4 	bl	800b4d8 <USBD_CtlSendData>
      break;
 800b310:	e004      	b.n	800b31c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f874 	bl	800b402 <USBD_CtlError>
      break;
 800b31a:	bf00      	nop
  }
}
 800b31c:	bf00      	nop
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	885b      	ldrh	r3, [r3, #2]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d106      	bne.n	800b344 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2201      	movs	r2, #1
 800b33a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 f928 	bl	800b594 <USBD_CtlSendStatus>
  }
}
 800b344:	bf00      	nop
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b35c:	3b01      	subs	r3, #1
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d80b      	bhi.n	800b37a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	885b      	ldrh	r3, [r3, #2]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d10c      	bne.n	800b384 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f90e 	bl	800b594 <USBD_CtlSendStatus>
      }
      break;
 800b378:	e004      	b.n	800b384 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 f840 	bl	800b402 <USBD_CtlError>
      break;
 800b382:	e000      	b.n	800b386 <USBD_ClrFeature+0x3a>
      break;
 800b384:	bf00      	nop
  }
}
 800b386:	bf00      	nop
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
 800b396:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	781a      	ldrb	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	785a      	ldrb	r2, [r3, #1]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	3302      	adds	r3, #2
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	3303      	adds	r3, #3
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	021b      	lsls	r3, r3, #8
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	4413      	add	r3, r2
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	3305      	adds	r3, #5
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	021b      	lsls	r3, r3, #8
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	4413      	add	r3, r2
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	3306      	adds	r3, #6
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	3307      	adds	r3, #7
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	021b      	lsls	r3, r3, #8
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	4413      	add	r3, r2
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	80da      	strh	r2, [r3, #6]

}
 800b3f6:	bf00      	nop
 800b3f8:	370c      	adds	r7, #12
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b082      	sub	sp, #8
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b40c:	2180      	movs	r1, #128	@ 0x80
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f001 fed0 	bl	800d1b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b414:	2100      	movs	r1, #0
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 fecc 	bl	800d1b4 <USBD_LL_StallEP>
}
 800b41c:	bf00      	nop
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b430:	2300      	movs	r3, #0
 800b432:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d032      	beq.n	800b4a0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f000 f834 	bl	800b4a8 <USBD_GetLen>
 800b440:	4603      	mov	r3, r0
 800b442:	3301      	adds	r3, #1
 800b444:	b29b      	uxth	r3, r3
 800b446:	005b      	lsls	r3, r3, #1
 800b448:	b29a      	uxth	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b44e:	7dfb      	ldrb	r3, [r7, #23]
 800b450:	1c5a      	adds	r2, r3, #1
 800b452:	75fa      	strb	r2, [r7, #23]
 800b454:	461a      	mov	r2, r3
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	4413      	add	r3, r2
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	7812      	ldrb	r2, [r2, #0]
 800b45e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b460:	7dfb      	ldrb	r3, [r7, #23]
 800b462:	1c5a      	adds	r2, r3, #1
 800b464:	75fa      	strb	r2, [r7, #23]
 800b466:	461a      	mov	r2, r3
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	4413      	add	r3, r2
 800b46c:	2203      	movs	r2, #3
 800b46e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b470:	e012      	b.n	800b498 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	1c5a      	adds	r2, r3, #1
 800b476:	60fa      	str	r2, [r7, #12]
 800b478:	7dfa      	ldrb	r2, [r7, #23]
 800b47a:	1c51      	adds	r1, r2, #1
 800b47c:	75f9      	strb	r1, [r7, #23]
 800b47e:	4611      	mov	r1, r2
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	440a      	add	r2, r1
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b488:	7dfb      	ldrb	r3, [r7, #23]
 800b48a:	1c5a      	adds	r2, r3, #1
 800b48c:	75fa      	strb	r2, [r7, #23]
 800b48e:	461a      	mov	r2, r3
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	4413      	add	r3, r2
 800b494:	2200      	movs	r2, #0
 800b496:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1e8      	bne.n	800b472 <USBD_GetString+0x4e>
    }
  }
}
 800b4a0:	bf00      	nop
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b4b4:	e005      	b.n	800b4c2 <USBD_GetLen+0x1a>
  {
    len++;
 800b4b6:	7bfb      	ldrb	r3, [r7, #15]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1f5      	bne.n	800b4b6 <USBD_GetLen+0xe>
  }

  return len;
 800b4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2202      	movs	r2, #2
 800b4ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b4ee:	88fa      	ldrh	r2, [r7, #6]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b4f4:	88fa      	ldrh	r2, [r7, #6]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4fa:	88fb      	ldrh	r3, [r7, #6]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	2100      	movs	r1, #0
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f001 fee0 	bl	800d2c6 <USBD_LL_Transmit>

  return USBD_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	4613      	mov	r3, r2
 800b51c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b51e:	88fb      	ldrh	r3, [r7, #6]
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	2100      	movs	r1, #0
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f001 fece 	bl	800d2c6 <USBD_LL_Transmit>

  return USBD_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	4613      	mov	r3, r2
 800b540:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2203      	movs	r2, #3
 800b546:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b54a:	88fa      	ldrh	r2, [r7, #6]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b552:	88fa      	ldrh	r2, [r7, #6]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b55a:	88fb      	ldrh	r3, [r7, #6]
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	2100      	movs	r1, #0
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f001 fed3 	bl	800d30c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	4613      	mov	r3, r2
 800b57c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b57e:	88fb      	ldrh	r3, [r7, #6]
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	2100      	movs	r1, #0
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f001 fec1 	bl	800d30c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2204      	movs	r2, #4
 800b5a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f001 fe8b 	bl	800d2c6 <USBD_LL_Transmit>

  return USBD_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2205      	movs	r2, #5
 800b5c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f001 fe9b 	bl	800d30c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b5ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5f2:	2b84      	cmp	r3, #132	@ 0x84
 800b5f4:	d005      	beq.n	800b602 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b5f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	3303      	adds	r3, #3
 800b600:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b602:	68fb      	ldr	r3, [r7, #12]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b614:	f000 fadc 	bl	800bbd0 <vTaskStartScheduler>
  
  return osOK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b61e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b620:	b089      	sub	sp, #36	@ 0x24
 800b622:	af04      	add	r7, sp, #16
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d020      	beq.n	800b672 <osThreadCreate+0x54>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d01c      	beq.n	800b672 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685c      	ldr	r4, [r3, #4]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	691e      	ldr	r6, [r3, #16]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7ff ffc8 	bl	800b5e0 <makeFreeRtosPriority>
 800b650:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b65a:	9202      	str	r2, [sp, #8]
 800b65c:	9301      	str	r3, [sp, #4]
 800b65e:	9100      	str	r1, [sp, #0]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	4632      	mov	r2, r6
 800b664:	4629      	mov	r1, r5
 800b666:	4620      	mov	r0, r4
 800b668:	f000 f8ed 	bl	800b846 <xTaskCreateStatic>
 800b66c:	4603      	mov	r3, r0
 800b66e:	60fb      	str	r3, [r7, #12]
 800b670:	e01c      	b.n	800b6ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685c      	ldr	r4, [r3, #4]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b67e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b686:	4618      	mov	r0, r3
 800b688:	f7ff ffaa 	bl	800b5e0 <makeFreeRtosPriority>
 800b68c:	4602      	mov	r2, r0
 800b68e:	f107 030c 	add.w	r3, r7, #12
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	9200      	str	r2, [sp, #0]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	4632      	mov	r2, r6
 800b69a:	4629      	mov	r1, r5
 800b69c:	4620      	mov	r0, r4
 800b69e:	f000 f931 	bl	800b904 <xTaskCreate>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d001      	beq.n	800b6ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	e000      	b.n	800b6ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b084      	sub	sp, #16
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <osDelay+0x16>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	e000      	b.n	800b6ce <osDelay+0x18>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f000 fa48 	bl	800bb64 <vTaskDelay>
  
  return osOK;
 800b6d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f103 0208 	add.w	r2, r3, #8
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f103 0208 	add.w	r2, r3, #8
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f103 0208 	add.w	r2, r3, #8
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b712:	bf00      	nop
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	689a      	ldr	r2, [r3, #8]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	1c5a      	adds	r2, r3, #1
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	601a      	str	r2, [r3, #0]
}
 800b774:	bf00      	nop
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b796:	d103      	bne.n	800b7a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	60fb      	str	r3, [r7, #12]
 800b79e:	e00c      	b.n	800b7ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	3308      	adds	r3, #8
 800b7a4:	60fb      	str	r3, [r7, #12]
 800b7a6:	e002      	b.n	800b7ae <vListInsert+0x2e>
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	60fb      	str	r3, [r7, #12]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d2f6      	bcs.n	800b7a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	1c5a      	adds	r2, r3, #1
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	601a      	str	r2, [r3, #0]
}
 800b7e6:	bf00      	nop
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b085      	sub	sp, #20
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	6892      	ldr	r2, [r2, #8]
 800b808:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	6852      	ldr	r2, [r2, #4]
 800b812:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d103      	bne.n	800b826 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	689a      	ldr	r2, [r3, #8]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	1e5a      	subs	r2, r3, #1
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3714      	adds	r7, #20
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b846:	b580      	push	{r7, lr}
 800b848:	b08e      	sub	sp, #56	@ 0x38
 800b84a:	af04      	add	r7, sp, #16
 800b84c:	60f8      	str	r0, [r7, #12]
 800b84e:	60b9      	str	r1, [r7, #8]
 800b850:	607a      	str	r2, [r7, #4]
 800b852:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10b      	bne.n	800b872 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b86c:	bf00      	nop
 800b86e:	bf00      	nop
 800b870:	e7fd      	b.n	800b86e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10b      	bne.n	800b890 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b87c:	f383 8811 	msr	BASEPRI, r3
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	61fb      	str	r3, [r7, #28]
}
 800b88a:	bf00      	nop
 800b88c:	bf00      	nop
 800b88e:	e7fd      	b.n	800b88c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b890:	2354      	movs	r3, #84	@ 0x54
 800b892:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	2b54      	cmp	r3, #84	@ 0x54
 800b898:	d00b      	beq.n	800b8b2 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	61bb      	str	r3, [r7, #24]
}
 800b8ac:	bf00      	nop
 800b8ae:	bf00      	nop
 800b8b0:	e7fd      	b.n	800b8ae <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d01e      	beq.n	800b8f6 <xTaskCreateStatic+0xb0>
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d01b      	beq.n	800b8f6 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	9303      	str	r3, [sp, #12]
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d6:	9302      	str	r3, [sp, #8]
 800b8d8:	f107 0314 	add.w	r3, r7, #20
 800b8dc:	9301      	str	r3, [sp, #4]
 800b8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	68b9      	ldr	r1, [r7, #8]
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f000 f850 	bl	800b98e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b8f0:	f000 f8ce 	bl	800ba90 <prvAddNewTaskToReadyList>
 800b8f4:	e001      	b.n	800b8fa <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b8fa:	697b      	ldr	r3, [r7, #20]
	}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3728      	adds	r7, #40	@ 0x28
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08c      	sub	sp, #48	@ 0x30
 800b908:	af04      	add	r7, sp, #16
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	603b      	str	r3, [r7, #0]
 800b910:	4613      	mov	r3, r2
 800b912:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b914:	88fb      	ldrh	r3, [r7, #6]
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	4618      	mov	r0, r3
 800b91a:	f000 fed5 	bl	800c6c8 <pvPortMalloc>
 800b91e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00e      	beq.n	800b944 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b926:	2054      	movs	r0, #84	@ 0x54
 800b928:	f000 fece 	bl	800c6c8 <pvPortMalloc>
 800b92c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d003      	beq.n	800b93c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	631a      	str	r2, [r3, #48]	@ 0x30
 800b93a:	e005      	b.n	800b948 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b93c:	6978      	ldr	r0, [r7, #20]
 800b93e:	f000 ff8b 	bl	800c858 <vPortFree>
 800b942:	e001      	b.n	800b948 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b944:	2300      	movs	r3, #0
 800b946:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d017      	beq.n	800b97e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	2200      	movs	r2, #0
 800b952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b956:	88fa      	ldrh	r2, [r7, #6]
 800b958:	2300      	movs	r3, #0
 800b95a:	9303      	str	r3, [sp, #12]
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	9302      	str	r3, [sp, #8]
 800b960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b962:	9301      	str	r3, [sp, #4]
 800b964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	68b9      	ldr	r1, [r7, #8]
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f000 f80e 	bl	800b98e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b972:	69f8      	ldr	r0, [r7, #28]
 800b974:	f000 f88c 	bl	800ba90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b978:	2301      	movs	r3, #1
 800b97a:	61bb      	str	r3, [r7, #24]
 800b97c:	e002      	b.n	800b984 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b97e:	f04f 33ff 	mov.w	r3, #4294967295
 800b982:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b984:	69bb      	ldr	r3, [r7, #24]
	}
 800b986:	4618      	mov	r0, r3
 800b988:	3720      	adds	r7, #32
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b088      	sub	sp, #32
 800b992:	af00      	add	r7, sp, #0
 800b994:	60f8      	str	r0, [r7, #12]
 800b996:	60b9      	str	r1, [r7, #8]
 800b998:	607a      	str	r2, [r7, #4]
 800b99a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4413      	add	r3, r2
 800b9ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	f023 0307 	bic.w	r3, r3, #7
 800b9b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	f003 0307 	and.w	r3, r3, #7
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00b      	beq.n	800b9d8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	617b      	str	r3, [r7, #20]
}
 800b9d2:	bf00      	nop
 800b9d4:	bf00      	nop
 800b9d6:	e7fd      	b.n	800b9d4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9d8:	2300      	movs	r3, #0
 800b9da:	61fb      	str	r3, [r7, #28]
 800b9dc:	e012      	b.n	800ba04 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b9de:	68ba      	ldr	r2, [r7, #8]
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	7819      	ldrb	r1, [r3, #0]
 800b9e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	3334      	adds	r3, #52	@ 0x34
 800b9ee:	460a      	mov	r2, r1
 800b9f0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d006      	beq.n	800ba0c <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	3301      	adds	r3, #1
 800ba02:	61fb      	str	r3, [r7, #28]
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	2b0f      	cmp	r3, #15
 800ba08:	d9e9      	bls.n	800b9de <prvInitialiseNewTask+0x50>
 800ba0a:	e000      	b.n	800ba0e <prvInitialiseNewTask+0x80>
		{
			break;
 800ba0c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba18:	2b06      	cmp	r3, #6
 800ba1a:	d901      	bls.n	800ba20 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba1c:	2306      	movs	r3, #6
 800ba1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba24:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba2a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2e:	2200      	movs	r2, #0
 800ba30:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba34:	3304      	adds	r3, #4
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7ff fe71 	bl	800b71e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3e:	3318      	adds	r3, #24
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7ff fe6c 	bl	800b71e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba4e:	f1c3 0207 	rsb	r2, r3, #7
 800ba52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba5a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba5e:	2200      	movs	r2, #0
 800ba60:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba64:	2200      	movs	r2, #0
 800ba66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba6a:	683a      	ldr	r2, [r7, #0]
 800ba6c:	68f9      	ldr	r1, [r7, #12]
 800ba6e:	69b8      	ldr	r0, [r7, #24]
 800ba70:	f000 fc18 	bl	800c2a4 <pxPortInitialiseStack>
 800ba74:	4602      	mov	r2, r0
 800ba76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba78:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ba7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba86:	bf00      	nop
 800ba88:	3720      	adds	r7, #32
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
	...

0800ba90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba98:	f000 fd36 	bl	800c508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba9c:	4b2a      	ldr	r3, [pc, #168]	@ (800bb48 <prvAddNewTaskToReadyList+0xb8>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3301      	adds	r3, #1
 800baa2:	4a29      	ldr	r2, [pc, #164]	@ (800bb48 <prvAddNewTaskToReadyList+0xb8>)
 800baa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800baa6:	4b29      	ldr	r3, [pc, #164]	@ (800bb4c <prvAddNewTaskToReadyList+0xbc>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d109      	bne.n	800bac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800baae:	4a27      	ldr	r2, [pc, #156]	@ (800bb4c <prvAddNewTaskToReadyList+0xbc>)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bab4:	4b24      	ldr	r3, [pc, #144]	@ (800bb48 <prvAddNewTaskToReadyList+0xb8>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d110      	bne.n	800bade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800babc:	f000 fac8 	bl	800c050 <prvInitialiseTaskLists>
 800bac0:	e00d      	b.n	800bade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bac2:	4b23      	ldr	r3, [pc, #140]	@ (800bb50 <prvAddNewTaskToReadyList+0xc0>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d109      	bne.n	800bade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800baca:	4b20      	ldr	r3, [pc, #128]	@ (800bb4c <prvAddNewTaskToReadyList+0xbc>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d802      	bhi.n	800bade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bad8:	4a1c      	ldr	r2, [pc, #112]	@ (800bb4c <prvAddNewTaskToReadyList+0xbc>)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bade:	4b1d      	ldr	r3, [pc, #116]	@ (800bb54 <prvAddNewTaskToReadyList+0xc4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3301      	adds	r3, #1
 800bae4:	4a1b      	ldr	r2, [pc, #108]	@ (800bb54 <prvAddNewTaskToReadyList+0xc4>)
 800bae6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baec:	2201      	movs	r2, #1
 800baee:	409a      	lsls	r2, r3
 800baf0:	4b19      	ldr	r3, [pc, #100]	@ (800bb58 <prvAddNewTaskToReadyList+0xc8>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4313      	orrs	r3, r2
 800baf6:	4a18      	ldr	r2, [pc, #96]	@ (800bb58 <prvAddNewTaskToReadyList+0xc8>)
 800baf8:	6013      	str	r3, [r2, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bafe:	4613      	mov	r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4a15      	ldr	r2, [pc, #84]	@ (800bb5c <prvAddNewTaskToReadyList+0xcc>)
 800bb08:	441a      	add	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	4619      	mov	r1, r3
 800bb10:	4610      	mov	r0, r2
 800bb12:	f7ff fe11 	bl	800b738 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb16:	f000 fd29 	bl	800c56c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb1a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb50 <prvAddNewTaskToReadyList+0xc0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00e      	beq.n	800bb40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb22:	4b0a      	ldr	r3, [pc, #40]	@ (800bb4c <prvAddNewTaskToReadyList+0xbc>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d207      	bcs.n	800bb40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb30:	4b0b      	ldr	r3, [pc, #44]	@ (800bb60 <prvAddNewTaskToReadyList+0xd0>)
 800bb32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb36:	601a      	str	r2, [r3, #0]
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb40:	bf00      	nop
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20000d90 	.word	0x20000d90
 800bb4c:	20000c90 	.word	0x20000c90
 800bb50:	20000d9c 	.word	0x20000d9c
 800bb54:	20000dac 	.word	0x20000dac
 800bb58:	20000d98 	.word	0x20000d98
 800bb5c:	20000c94 	.word	0x20000c94
 800bb60:	e000ed04 	.word	0xe000ed04

0800bb64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d018      	beq.n	800bba8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb76:	4b14      	ldr	r3, [pc, #80]	@ (800bbc8 <vTaskDelay+0x64>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00b      	beq.n	800bb96 <vTaskDelay+0x32>
	__asm volatile
 800bb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	60bb      	str	r3, [r7, #8]
}
 800bb90:	bf00      	nop
 800bb92:	bf00      	nop
 800bb94:	e7fd      	b.n	800bb92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb96:	f000 f87d 	bl	800bc94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fb1b 	bl	800c1d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bba2:	f000 f885 	bl	800bcb0 <xTaskResumeAll>
 800bba6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d107      	bne.n	800bbbe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bbae:	4b07      	ldr	r3, [pc, #28]	@ (800bbcc <vTaskDelay+0x68>)
 800bbb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbb4:	601a      	str	r2, [r3, #0]
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbbe:	bf00      	nop
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20000db8 	.word	0x20000db8
 800bbcc:	e000ed04 	.word	0xe000ed04

0800bbd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b08a      	sub	sp, #40	@ 0x28
 800bbd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbde:	463a      	mov	r2, r7
 800bbe0:	1d39      	adds	r1, r7, #4
 800bbe2:	f107 0308 	add.w	r3, r7, #8
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7f4 fafa 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	9202      	str	r2, [sp, #8]
 800bbf4:	9301      	str	r3, [sp, #4]
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	460a      	mov	r2, r1
 800bbfe:	491f      	ldr	r1, [pc, #124]	@ (800bc7c <vTaskStartScheduler+0xac>)
 800bc00:	481f      	ldr	r0, [pc, #124]	@ (800bc80 <vTaskStartScheduler+0xb0>)
 800bc02:	f7ff fe20 	bl	800b846 <xTaskCreateStatic>
 800bc06:	4603      	mov	r3, r0
 800bc08:	4a1e      	ldr	r2, [pc, #120]	@ (800bc84 <vTaskStartScheduler+0xb4>)
 800bc0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc0c:	4b1d      	ldr	r3, [pc, #116]	@ (800bc84 <vTaskStartScheduler+0xb4>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc14:	2301      	movs	r3, #1
 800bc16:	617b      	str	r3, [r7, #20]
 800bc18:	e001      	b.n	800bc1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d116      	bne.n	800bc52 <vTaskStartScheduler+0x82>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	613b      	str	r3, [r7, #16]
}
 800bc36:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc38:	4b13      	ldr	r3, [pc, #76]	@ (800bc88 <vTaskStartScheduler+0xb8>)
 800bc3a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc40:	4b12      	ldr	r3, [pc, #72]	@ (800bc8c <vTaskStartScheduler+0xbc>)
 800bc42:	2201      	movs	r2, #1
 800bc44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800bc46:	4b12      	ldr	r3, [pc, #72]	@ (800bc90 <vTaskStartScheduler+0xc0>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc4c:	f000 fbb8 	bl	800c3c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc50:	e00f      	b.n	800bc72 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc58:	d10b      	bne.n	800bc72 <vTaskStartScheduler+0xa2>
	__asm volatile
 800bc5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	60fb      	str	r3, [r7, #12]
}
 800bc6c:	bf00      	nop
 800bc6e:	bf00      	nop
 800bc70:	e7fd      	b.n	800bc6e <vTaskStartScheduler+0x9e>
}
 800bc72:	bf00      	nop
 800bc74:	3718      	adds	r7, #24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	0800d51c 	.word	0x0800d51c
 800bc80:	0800c021 	.word	0x0800c021
 800bc84:	20000db4 	.word	0x20000db4
 800bc88:	20000db0 	.word	0x20000db0
 800bc8c:	20000d9c 	.word	0x20000d9c
 800bc90:	20000d94 	.word	0x20000d94

0800bc94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc94:	b480      	push	{r7}
 800bc96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bc98:	4b04      	ldr	r3, [pc, #16]	@ (800bcac <vTaskSuspendAll+0x18>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	4a03      	ldr	r2, [pc, #12]	@ (800bcac <vTaskSuspendAll+0x18>)
 800bca0:	6013      	str	r3, [r2, #0]
}
 800bca2:	bf00      	nop
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr
 800bcac:	20000db8 	.word	0x20000db8

0800bcb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bcbe:	4b42      	ldr	r3, [pc, #264]	@ (800bdc8 <xTaskResumeAll+0x118>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d10b      	bne.n	800bcde <xTaskResumeAll+0x2e>
	__asm volatile
 800bcc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcca:	f383 8811 	msr	BASEPRI, r3
 800bcce:	f3bf 8f6f 	isb	sy
 800bcd2:	f3bf 8f4f 	dsb	sy
 800bcd6:	603b      	str	r3, [r7, #0]
}
 800bcd8:	bf00      	nop
 800bcda:	bf00      	nop
 800bcdc:	e7fd      	b.n	800bcda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bcde:	f000 fc13 	bl	800c508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bce2:	4b39      	ldr	r3, [pc, #228]	@ (800bdc8 <xTaskResumeAll+0x118>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	4a37      	ldr	r2, [pc, #220]	@ (800bdc8 <xTaskResumeAll+0x118>)
 800bcea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcec:	4b36      	ldr	r3, [pc, #216]	@ (800bdc8 <xTaskResumeAll+0x118>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d161      	bne.n	800bdb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcf4:	4b35      	ldr	r3, [pc, #212]	@ (800bdcc <xTaskResumeAll+0x11c>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d05d      	beq.n	800bdb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcfc:	e02e      	b.n	800bd5c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bcfe:	4b34      	ldr	r3, [pc, #208]	@ (800bdd0 <xTaskResumeAll+0x120>)
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	3318      	adds	r3, #24
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7ff fd71 	bl	800b7f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3304      	adds	r3, #4
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7ff fd6c 	bl	800b7f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd1e:	2201      	movs	r2, #1
 800bd20:	409a      	lsls	r2, r3
 800bd22:	4b2c      	ldr	r3, [pc, #176]	@ (800bdd4 <xTaskResumeAll+0x124>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4313      	orrs	r3, r2
 800bd28:	4a2a      	ldr	r2, [pc, #168]	@ (800bdd4 <xTaskResumeAll+0x124>)
 800bd2a:	6013      	str	r3, [r2, #0]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd30:	4613      	mov	r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4413      	add	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4a27      	ldr	r2, [pc, #156]	@ (800bdd8 <xTaskResumeAll+0x128>)
 800bd3a:	441a      	add	r2, r3
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	3304      	adds	r3, #4
 800bd40:	4619      	mov	r1, r3
 800bd42:	4610      	mov	r0, r2
 800bd44:	f7ff fcf8 	bl	800b738 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd4c:	4b23      	ldr	r3, [pc, #140]	@ (800bddc <xTaskResumeAll+0x12c>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d302      	bcc.n	800bd5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bd56:	4b22      	ldr	r3, [pc, #136]	@ (800bde0 <xTaskResumeAll+0x130>)
 800bd58:	2201      	movs	r2, #1
 800bd5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd5c:	4b1c      	ldr	r3, [pc, #112]	@ (800bdd0 <xTaskResumeAll+0x120>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1cc      	bne.n	800bcfe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd6a:	f000 fa0f 	bl	800c18c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bd6e:	4b1d      	ldr	r3, [pc, #116]	@ (800bde4 <xTaskResumeAll+0x134>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d010      	beq.n	800bd9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd7a:	f000 f837 	bl	800bdec <xTaskIncrementTick>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d002      	beq.n	800bd8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd84:	4b16      	ldr	r3, [pc, #88]	@ (800bde0 <xTaskResumeAll+0x130>)
 800bd86:	2201      	movs	r2, #1
 800bd88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1f1      	bne.n	800bd7a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800bd96:	4b13      	ldr	r3, [pc, #76]	@ (800bde4 <xTaskResumeAll+0x134>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd9c:	4b10      	ldr	r3, [pc, #64]	@ (800bde0 <xTaskResumeAll+0x130>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d009      	beq.n	800bdb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bda4:	2301      	movs	r3, #1
 800bda6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bda8:	4b0f      	ldr	r3, [pc, #60]	@ (800bde8 <xTaskResumeAll+0x138>)
 800bdaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdae:	601a      	str	r2, [r3, #0]
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdb8:	f000 fbd8 	bl	800c56c <vPortExitCritical>

	return xAlreadyYielded;
 800bdbc:	68bb      	ldr	r3, [r7, #8]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20000db8 	.word	0x20000db8
 800bdcc:	20000d90 	.word	0x20000d90
 800bdd0:	20000d50 	.word	0x20000d50
 800bdd4:	20000d98 	.word	0x20000d98
 800bdd8:	20000c94 	.word	0x20000c94
 800bddc:	20000c90 	.word	0x20000c90
 800bde0:	20000da4 	.word	0x20000da4
 800bde4:	20000da0 	.word	0x20000da0
 800bde8:	e000ed04 	.word	0xe000ed04

0800bdec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdf6:	4b51      	ldr	r3, [pc, #324]	@ (800bf3c <xTaskIncrementTick+0x150>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f040 808e 	bne.w	800bf1c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be00:	4b4f      	ldr	r3, [pc, #316]	@ (800bf40 <xTaskIncrementTick+0x154>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3301      	adds	r3, #1
 800be06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be08:	4a4d      	ldr	r2, [pc, #308]	@ (800bf40 <xTaskIncrementTick+0x154>)
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d121      	bne.n	800be58 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800be14:	4b4b      	ldr	r3, [pc, #300]	@ (800bf44 <xTaskIncrementTick+0x158>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00b      	beq.n	800be36 <xTaskIncrementTick+0x4a>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	603b      	str	r3, [r7, #0]
}
 800be30:	bf00      	nop
 800be32:	bf00      	nop
 800be34:	e7fd      	b.n	800be32 <xTaskIncrementTick+0x46>
 800be36:	4b43      	ldr	r3, [pc, #268]	@ (800bf44 <xTaskIncrementTick+0x158>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	60fb      	str	r3, [r7, #12]
 800be3c:	4b42      	ldr	r3, [pc, #264]	@ (800bf48 <xTaskIncrementTick+0x15c>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a40      	ldr	r2, [pc, #256]	@ (800bf44 <xTaskIncrementTick+0x158>)
 800be42:	6013      	str	r3, [r2, #0]
 800be44:	4a40      	ldr	r2, [pc, #256]	@ (800bf48 <xTaskIncrementTick+0x15c>)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	4b40      	ldr	r3, [pc, #256]	@ (800bf4c <xTaskIncrementTick+0x160>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3301      	adds	r3, #1
 800be50:	4a3e      	ldr	r2, [pc, #248]	@ (800bf4c <xTaskIncrementTick+0x160>)
 800be52:	6013      	str	r3, [r2, #0]
 800be54:	f000 f99a 	bl	800c18c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be58:	4b3d      	ldr	r3, [pc, #244]	@ (800bf50 <xTaskIncrementTick+0x164>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	693a      	ldr	r2, [r7, #16]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d34d      	bcc.n	800befe <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be62:	4b38      	ldr	r3, [pc, #224]	@ (800bf44 <xTaskIncrementTick+0x158>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <xTaskIncrementTick+0x84>
 800be6c:	2301      	movs	r3, #1
 800be6e:	e000      	b.n	800be72 <xTaskIncrementTick+0x86>
 800be70:	2300      	movs	r3, #0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d004      	beq.n	800be80 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be76:	4b36      	ldr	r3, [pc, #216]	@ (800bf50 <xTaskIncrementTick+0x164>)
 800be78:	f04f 32ff 	mov.w	r2, #4294967295
 800be7c:	601a      	str	r2, [r3, #0]
					break;
 800be7e:	e03e      	b.n	800befe <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800be80:	4b30      	ldr	r3, [pc, #192]	@ (800bf44 <xTaskIncrementTick+0x158>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	429a      	cmp	r2, r3
 800be96:	d203      	bcs.n	800bea0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be98:	4a2d      	ldr	r2, [pc, #180]	@ (800bf50 <xTaskIncrementTick+0x164>)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6013      	str	r3, [r2, #0]
						break;
 800be9e:	e02e      	b.n	800befe <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	3304      	adds	r3, #4
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7ff fca4 	bl	800b7f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d004      	beq.n	800bebc <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	3318      	adds	r3, #24
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7ff fc9b 	bl	800b7f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bec0:	2201      	movs	r2, #1
 800bec2:	409a      	lsls	r2, r3
 800bec4:	4b23      	ldr	r3, [pc, #140]	@ (800bf54 <xTaskIncrementTick+0x168>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4313      	orrs	r3, r2
 800beca:	4a22      	ldr	r2, [pc, #136]	@ (800bf54 <xTaskIncrementTick+0x168>)
 800becc:	6013      	str	r3, [r2, #0]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bed2:	4613      	mov	r3, r2
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	4413      	add	r3, r2
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4a1f      	ldr	r2, [pc, #124]	@ (800bf58 <xTaskIncrementTick+0x16c>)
 800bedc:	441a      	add	r2, r3
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	3304      	adds	r3, #4
 800bee2:	4619      	mov	r1, r3
 800bee4:	4610      	mov	r0, r2
 800bee6:	f7ff fc27 	bl	800b738 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beee:	4b1b      	ldr	r3, [pc, #108]	@ (800bf5c <xTaskIncrementTick+0x170>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d3b4      	bcc.n	800be62 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bef8:	2301      	movs	r3, #1
 800befa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800befc:	e7b1      	b.n	800be62 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800befe:	4b17      	ldr	r3, [pc, #92]	@ (800bf5c <xTaskIncrementTick+0x170>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf04:	4914      	ldr	r1, [pc, #80]	@ (800bf58 <xTaskIncrementTick+0x16c>)
 800bf06:	4613      	mov	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	440b      	add	r3, r1
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d907      	bls.n	800bf26 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bf16:	2301      	movs	r3, #1
 800bf18:	617b      	str	r3, [r7, #20]
 800bf1a:	e004      	b.n	800bf26 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bf1c:	4b10      	ldr	r3, [pc, #64]	@ (800bf60 <xTaskIncrementTick+0x174>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3301      	adds	r3, #1
 800bf22:	4a0f      	ldr	r2, [pc, #60]	@ (800bf60 <xTaskIncrementTick+0x174>)
 800bf24:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bf26:	4b0f      	ldr	r3, [pc, #60]	@ (800bf64 <xTaskIncrementTick+0x178>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bf32:	697b      	ldr	r3, [r7, #20]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3718      	adds	r7, #24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	20000db8 	.word	0x20000db8
 800bf40:	20000d94 	.word	0x20000d94
 800bf44:	20000d48 	.word	0x20000d48
 800bf48:	20000d4c 	.word	0x20000d4c
 800bf4c:	20000da8 	.word	0x20000da8
 800bf50:	20000db0 	.word	0x20000db0
 800bf54:	20000d98 	.word	0x20000d98
 800bf58:	20000c94 	.word	0x20000c94
 800bf5c:	20000c90 	.word	0x20000c90
 800bf60:	20000da0 	.word	0x20000da0
 800bf64:	20000da4 	.word	0x20000da4

0800bf68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b087      	sub	sp, #28
 800bf6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf6e:	4b27      	ldr	r3, [pc, #156]	@ (800c00c <vTaskSwitchContext+0xa4>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf76:	4b26      	ldr	r3, [pc, #152]	@ (800c010 <vTaskSwitchContext+0xa8>)
 800bf78:	2201      	movs	r2, #1
 800bf7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf7c:	e040      	b.n	800c000 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800bf7e:	4b24      	ldr	r3, [pc, #144]	@ (800c010 <vTaskSwitchContext+0xa8>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bf84:	4b23      	ldr	r3, [pc, #140]	@ (800c014 <vTaskSwitchContext+0xac>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	fab3 f383 	clz	r3, r3
 800bf90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bf92:	7afb      	ldrb	r3, [r7, #11]
 800bf94:	f1c3 031f 	rsb	r3, r3, #31
 800bf98:	617b      	str	r3, [r7, #20]
 800bf9a:	491f      	ldr	r1, [pc, #124]	@ (800c018 <vTaskSwitchContext+0xb0>)
 800bf9c:	697a      	ldr	r2, [r7, #20]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4413      	add	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	440b      	add	r3, r1
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10b      	bne.n	800bfc6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	607b      	str	r3, [r7, #4]
}
 800bfc0:	bf00      	nop
 800bfc2:	bf00      	nop
 800bfc4:	e7fd      	b.n	800bfc2 <vTaskSwitchContext+0x5a>
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4a11      	ldr	r2, [pc, #68]	@ (800c018 <vTaskSwitchContext+0xb0>)
 800bfd2:	4413      	add	r3, r2
 800bfd4:	613b      	str	r3, [r7, #16]
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	605a      	str	r2, [r3, #4]
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	685a      	ldr	r2, [r3, #4]
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	3308      	adds	r3, #8
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d104      	bne.n	800bff6 <vTaskSwitchContext+0x8e>
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	605a      	str	r2, [r3, #4]
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	4a07      	ldr	r2, [pc, #28]	@ (800c01c <vTaskSwitchContext+0xb4>)
 800bffe:	6013      	str	r3, [r2, #0]
}
 800c000:	bf00      	nop
 800c002:	371c      	adds	r7, #28
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	20000db8 	.word	0x20000db8
 800c010:	20000da4 	.word	0x20000da4
 800c014:	20000d98 	.word	0x20000d98
 800c018:	20000c94 	.word	0x20000c94
 800c01c:	20000c90 	.word	0x20000c90

0800c020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c028:	f000 f852 	bl	800c0d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c02c:	4b06      	ldr	r3, [pc, #24]	@ (800c048 <prvIdleTask+0x28>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d9f9      	bls.n	800c028 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c034:	4b05      	ldr	r3, [pc, #20]	@ (800c04c <prvIdleTask+0x2c>)
 800c036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c03a:	601a      	str	r2, [r3, #0]
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c044:	e7f0      	b.n	800c028 <prvIdleTask+0x8>
 800c046:	bf00      	nop
 800c048:	20000c94 	.word	0x20000c94
 800c04c:	e000ed04 	.word	0xe000ed04

0800c050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c056:	2300      	movs	r3, #0
 800c058:	607b      	str	r3, [r7, #4]
 800c05a:	e00c      	b.n	800c076 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	4613      	mov	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4a12      	ldr	r2, [pc, #72]	@ (800c0b0 <prvInitialiseTaskLists+0x60>)
 800c068:	4413      	add	r3, r2
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7ff fb37 	bl	800b6de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3301      	adds	r3, #1
 800c074:	607b      	str	r3, [r7, #4]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b06      	cmp	r3, #6
 800c07a:	d9ef      	bls.n	800c05c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c07c:	480d      	ldr	r0, [pc, #52]	@ (800c0b4 <prvInitialiseTaskLists+0x64>)
 800c07e:	f7ff fb2e 	bl	800b6de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c082:	480d      	ldr	r0, [pc, #52]	@ (800c0b8 <prvInitialiseTaskLists+0x68>)
 800c084:	f7ff fb2b 	bl	800b6de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c088:	480c      	ldr	r0, [pc, #48]	@ (800c0bc <prvInitialiseTaskLists+0x6c>)
 800c08a:	f7ff fb28 	bl	800b6de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c08e:	480c      	ldr	r0, [pc, #48]	@ (800c0c0 <prvInitialiseTaskLists+0x70>)
 800c090:	f7ff fb25 	bl	800b6de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c094:	480b      	ldr	r0, [pc, #44]	@ (800c0c4 <prvInitialiseTaskLists+0x74>)
 800c096:	f7ff fb22 	bl	800b6de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c09a:	4b0b      	ldr	r3, [pc, #44]	@ (800c0c8 <prvInitialiseTaskLists+0x78>)
 800c09c:	4a05      	ldr	r2, [pc, #20]	@ (800c0b4 <prvInitialiseTaskLists+0x64>)
 800c09e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c0cc <prvInitialiseTaskLists+0x7c>)
 800c0a2:	4a05      	ldr	r2, [pc, #20]	@ (800c0b8 <prvInitialiseTaskLists+0x68>)
 800c0a4:	601a      	str	r2, [r3, #0]
}
 800c0a6:	bf00      	nop
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20000c94 	.word	0x20000c94
 800c0b4:	20000d20 	.word	0x20000d20
 800c0b8:	20000d34 	.word	0x20000d34
 800c0bc:	20000d50 	.word	0x20000d50
 800c0c0:	20000d64 	.word	0x20000d64
 800c0c4:	20000d7c 	.word	0x20000d7c
 800c0c8:	20000d48 	.word	0x20000d48
 800c0cc:	20000d4c 	.word	0x20000d4c

0800c0d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0d6:	e019      	b.n	800c10c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c0d8:	f000 fa16 	bl	800c508 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c0dc:	4b10      	ldr	r3, [pc, #64]	@ (800c120 <prvCheckTasksWaitingTermination+0x50>)
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7ff fb82 	bl	800b7f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c124 <prvCheckTasksWaitingTermination+0x54>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	4a0b      	ldr	r2, [pc, #44]	@ (800c124 <prvCheckTasksWaitingTermination+0x54>)
 800c0f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c0f8:	4b0b      	ldr	r3, [pc, #44]	@ (800c128 <prvCheckTasksWaitingTermination+0x58>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	4a0a      	ldr	r2, [pc, #40]	@ (800c128 <prvCheckTasksWaitingTermination+0x58>)
 800c100:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c102:	f000 fa33 	bl	800c56c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f810 	bl	800c12c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c10c:	4b06      	ldr	r3, [pc, #24]	@ (800c128 <prvCheckTasksWaitingTermination+0x58>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d1e1      	bne.n	800c0d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	20000d64 	.word	0x20000d64
 800c124:	20000d90 	.word	0x20000d90
 800c128:	20000d78 	.word	0x20000d78

0800c12c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d108      	bne.n	800c150 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c142:	4618      	mov	r0, r3
 800c144:	f000 fb88 	bl	800c858 <vPortFree>
				vPortFree( pxTCB );
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 fb85 	bl	800c858 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c14e:	e019      	b.n	800c184 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c156:	2b01      	cmp	r3, #1
 800c158:	d103      	bne.n	800c162 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fb7c 	bl	800c858 <vPortFree>
	}
 800c160:	e010      	b.n	800c184 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c168:	2b02      	cmp	r3, #2
 800c16a:	d00b      	beq.n	800c184 <prvDeleteTCB+0x58>
	__asm volatile
 800c16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c170:	f383 8811 	msr	BASEPRI, r3
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	f3bf 8f4f 	dsb	sy
 800c17c:	60fb      	str	r3, [r7, #12]
}
 800c17e:	bf00      	nop
 800c180:	bf00      	nop
 800c182:	e7fd      	b.n	800c180 <prvDeleteTCB+0x54>
	}
 800c184:	bf00      	nop
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c192:	4b0f      	ldr	r3, [pc, #60]	@ (800c1d0 <prvResetNextTaskUnblockTime+0x44>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <prvResetNextTaskUnblockTime+0x14>
 800c19c:	2301      	movs	r3, #1
 800c19e:	e000      	b.n	800c1a2 <prvResetNextTaskUnblockTime+0x16>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d004      	beq.n	800c1b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c1a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c1d4 <prvResetNextTaskUnblockTime+0x48>)
 800c1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c1ae:	e008      	b.n	800c1c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c1b0:	4b07      	ldr	r3, [pc, #28]	@ (800c1d0 <prvResetNextTaskUnblockTime+0x44>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	4a05      	ldr	r2, [pc, #20]	@ (800c1d4 <prvResetNextTaskUnblockTime+0x48>)
 800c1c0:	6013      	str	r3, [r2, #0]
}
 800c1c2:	bf00      	nop
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	20000d48 	.word	0x20000d48
 800c1d4:	20000db0 	.word	0x20000db0

0800c1d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1e2:	4b29      	ldr	r3, [pc, #164]	@ (800c288 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1e8:	4b28      	ldr	r3, [pc, #160]	@ (800c28c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7ff faff 	bl	800b7f2 <uxListRemove>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10b      	bne.n	800c212 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c1fa:	4b24      	ldr	r3, [pc, #144]	@ (800c28c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c200:	2201      	movs	r2, #1
 800c202:	fa02 f303 	lsl.w	r3, r2, r3
 800c206:	43da      	mvns	r2, r3
 800c208:	4b21      	ldr	r3, [pc, #132]	@ (800c290 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4013      	ands	r3, r2
 800c20e:	4a20      	ldr	r2, [pc, #128]	@ (800c290 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c210:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c218:	d10a      	bne.n	800c230 <prvAddCurrentTaskToDelayedList+0x58>
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d007      	beq.n	800c230 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c220:	4b1a      	ldr	r3, [pc, #104]	@ (800c28c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	3304      	adds	r3, #4
 800c226:	4619      	mov	r1, r3
 800c228:	481a      	ldr	r0, [pc, #104]	@ (800c294 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c22a:	f7ff fa85 	bl	800b738 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c22e:	e026      	b.n	800c27e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4413      	add	r3, r2
 800c236:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c238:	4b14      	ldr	r3, [pc, #80]	@ (800c28c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	429a      	cmp	r2, r3
 800c246:	d209      	bcs.n	800c25c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c248:	4b13      	ldr	r3, [pc, #76]	@ (800c298 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	4b0f      	ldr	r3, [pc, #60]	@ (800c28c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3304      	adds	r3, #4
 800c252:	4619      	mov	r1, r3
 800c254:	4610      	mov	r0, r2
 800c256:	f7ff fa93 	bl	800b780 <vListInsert>
}
 800c25a:	e010      	b.n	800c27e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c25c:	4b0f      	ldr	r3, [pc, #60]	@ (800c29c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	4b0a      	ldr	r3, [pc, #40]	@ (800c28c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	3304      	adds	r3, #4
 800c266:	4619      	mov	r1, r3
 800c268:	4610      	mov	r0, r2
 800c26a:	f7ff fa89 	bl	800b780 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c26e:	4b0c      	ldr	r3, [pc, #48]	@ (800c2a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	429a      	cmp	r2, r3
 800c276:	d202      	bcs.n	800c27e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c278:	4a09      	ldr	r2, [pc, #36]	@ (800c2a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	6013      	str	r3, [r2, #0]
}
 800c27e:	bf00      	nop
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	20000d94 	.word	0x20000d94
 800c28c:	20000c90 	.word	0x20000c90
 800c290:	20000d98 	.word	0x20000d98
 800c294:	20000d7c 	.word	0x20000d7c
 800c298:	20000d4c 	.word	0x20000d4c
 800c29c:	20000d48 	.word	0x20000d48
 800c2a0:	20000db0 	.word	0x20000db0

0800c2a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3b04      	subs	r3, #4
 800c2b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c2bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3b04      	subs	r3, #4
 800c2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	f023 0201 	bic.w	r2, r3, #1
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3b04      	subs	r3, #4
 800c2d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c2d4:	4a0c      	ldr	r2, [pc, #48]	@ (800c308 <pxPortInitialiseStack+0x64>)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	3b14      	subs	r3, #20
 800c2de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3b04      	subs	r3, #4
 800c2ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f06f 0202 	mvn.w	r2, #2
 800c2f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3b20      	subs	r3, #32
 800c2f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3714      	adds	r7, #20
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	0800c30d 	.word	0x0800c30d

0800c30c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c312:	2300      	movs	r3, #0
 800c314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c316:	4b13      	ldr	r3, [pc, #76]	@ (800c364 <prvTaskExitError+0x58>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c31e:	d00b      	beq.n	800c338 <prvTaskExitError+0x2c>
	__asm volatile
 800c320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	60fb      	str	r3, [r7, #12]
}
 800c332:	bf00      	nop
 800c334:	bf00      	nop
 800c336:	e7fd      	b.n	800c334 <prvTaskExitError+0x28>
	__asm volatile
 800c338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c33c:	f383 8811 	msr	BASEPRI, r3
 800c340:	f3bf 8f6f 	isb	sy
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	60bb      	str	r3, [r7, #8]
}
 800c34a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c34c:	bf00      	nop
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d0fc      	beq.n	800c34e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c354:	bf00      	nop
 800c356:	bf00      	nop
 800c358:	3714      	adds	r7, #20
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	20000124 	.word	0x20000124
	...

0800c370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c370:	4b07      	ldr	r3, [pc, #28]	@ (800c390 <pxCurrentTCBConst2>)
 800c372:	6819      	ldr	r1, [r3, #0]
 800c374:	6808      	ldr	r0, [r1, #0]
 800c376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37a:	f380 8809 	msr	PSP, r0
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f04f 0000 	mov.w	r0, #0
 800c386:	f380 8811 	msr	BASEPRI, r0
 800c38a:	4770      	bx	lr
 800c38c:	f3af 8000 	nop.w

0800c390 <pxCurrentTCBConst2>:
 800c390:	20000c90 	.word	0x20000c90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c394:	bf00      	nop
 800c396:	bf00      	nop

0800c398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c398:	4808      	ldr	r0, [pc, #32]	@ (800c3bc <prvPortStartFirstTask+0x24>)
 800c39a:	6800      	ldr	r0, [r0, #0]
 800c39c:	6800      	ldr	r0, [r0, #0]
 800c39e:	f380 8808 	msr	MSP, r0
 800c3a2:	f04f 0000 	mov.w	r0, #0
 800c3a6:	f380 8814 	msr	CONTROL, r0
 800c3aa:	b662      	cpsie	i
 800c3ac:	b661      	cpsie	f
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	df00      	svc	0
 800c3b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c3ba:	bf00      	nop
 800c3bc:	e000ed08 	.word	0xe000ed08

0800c3c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c3c6:	4b47      	ldr	r3, [pc, #284]	@ (800c4e4 <xPortStartScheduler+0x124>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a47      	ldr	r2, [pc, #284]	@ (800c4e8 <xPortStartScheduler+0x128>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d10b      	bne.n	800c3e8 <xPortStartScheduler+0x28>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	613b      	str	r3, [r7, #16]
}
 800c3e2:	bf00      	nop
 800c3e4:	bf00      	nop
 800c3e6:	e7fd      	b.n	800c3e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c3e8:	4b3e      	ldr	r3, [pc, #248]	@ (800c4e4 <xPortStartScheduler+0x124>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a3f      	ldr	r2, [pc, #252]	@ (800c4ec <xPortStartScheduler+0x12c>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d10b      	bne.n	800c40a <xPortStartScheduler+0x4a>
	__asm volatile
 800c3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f6:	f383 8811 	msr	BASEPRI, r3
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	60fb      	str	r3, [r7, #12]
}
 800c404:	bf00      	nop
 800c406:	bf00      	nop
 800c408:	e7fd      	b.n	800c406 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c40a:	4b39      	ldr	r3, [pc, #228]	@ (800c4f0 <xPortStartScheduler+0x130>)
 800c40c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	b2db      	uxtb	r3, r3
 800c414:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	22ff      	movs	r2, #255	@ 0xff
 800c41a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	b2db      	uxtb	r3, r3
 800c422:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c424:	78fb      	ldrb	r3, [r7, #3]
 800c426:	b2db      	uxtb	r3, r3
 800c428:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c42c:	b2da      	uxtb	r2, r3
 800c42e:	4b31      	ldr	r3, [pc, #196]	@ (800c4f4 <xPortStartScheduler+0x134>)
 800c430:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c432:	4b31      	ldr	r3, [pc, #196]	@ (800c4f8 <xPortStartScheduler+0x138>)
 800c434:	2207      	movs	r2, #7
 800c436:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c438:	e009      	b.n	800c44e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c43a:	4b2f      	ldr	r3, [pc, #188]	@ (800c4f8 <xPortStartScheduler+0x138>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	3b01      	subs	r3, #1
 800c440:	4a2d      	ldr	r2, [pc, #180]	@ (800c4f8 <xPortStartScheduler+0x138>)
 800c442:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c444:	78fb      	ldrb	r3, [r7, #3]
 800c446:	b2db      	uxtb	r3, r3
 800c448:	005b      	lsls	r3, r3, #1
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c44e:	78fb      	ldrb	r3, [r7, #3]
 800c450:	b2db      	uxtb	r3, r3
 800c452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c456:	2b80      	cmp	r3, #128	@ 0x80
 800c458:	d0ef      	beq.n	800c43a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c45a:	4b27      	ldr	r3, [pc, #156]	@ (800c4f8 <xPortStartScheduler+0x138>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f1c3 0307 	rsb	r3, r3, #7
 800c462:	2b04      	cmp	r3, #4
 800c464:	d00b      	beq.n	800c47e <xPortStartScheduler+0xbe>
	__asm volatile
 800c466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	60bb      	str	r3, [r7, #8]
}
 800c478:	bf00      	nop
 800c47a:	bf00      	nop
 800c47c:	e7fd      	b.n	800c47a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c47e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4f8 <xPortStartScheduler+0x138>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	021b      	lsls	r3, r3, #8
 800c484:	4a1c      	ldr	r2, [pc, #112]	@ (800c4f8 <xPortStartScheduler+0x138>)
 800c486:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c488:	4b1b      	ldr	r3, [pc, #108]	@ (800c4f8 <xPortStartScheduler+0x138>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c490:	4a19      	ldr	r2, [pc, #100]	@ (800c4f8 <xPortStartScheduler+0x138>)
 800c492:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	b2da      	uxtb	r2, r3
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c49c:	4b17      	ldr	r3, [pc, #92]	@ (800c4fc <xPortStartScheduler+0x13c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a16      	ldr	r2, [pc, #88]	@ (800c4fc <xPortStartScheduler+0x13c>)
 800c4a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c4a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4a8:	4b14      	ldr	r3, [pc, #80]	@ (800c4fc <xPortStartScheduler+0x13c>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a13      	ldr	r2, [pc, #76]	@ (800c4fc <xPortStartScheduler+0x13c>)
 800c4ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c4b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c4b4:	f000 f8da 	bl	800c66c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c4b8:	4b11      	ldr	r3, [pc, #68]	@ (800c500 <xPortStartScheduler+0x140>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c4be:	f000 f8f9 	bl	800c6b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c4c2:	4b10      	ldr	r3, [pc, #64]	@ (800c504 <xPortStartScheduler+0x144>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a0f      	ldr	r2, [pc, #60]	@ (800c504 <xPortStartScheduler+0x144>)
 800c4c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c4cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c4ce:	f7ff ff63 	bl	800c398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c4d2:	f7ff fd49 	bl	800bf68 <vTaskSwitchContext>
	prvTaskExitError();
 800c4d6:	f7ff ff19 	bl	800c30c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3718      	adds	r7, #24
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	e000ed00 	.word	0xe000ed00
 800c4e8:	410fc271 	.word	0x410fc271
 800c4ec:	410fc270 	.word	0x410fc270
 800c4f0:	e000e400 	.word	0xe000e400
 800c4f4:	20000dbc 	.word	0x20000dbc
 800c4f8:	20000dc0 	.word	0x20000dc0
 800c4fc:	e000ed20 	.word	0xe000ed20
 800c500:	20000124 	.word	0x20000124
 800c504:	e000ef34 	.word	0xe000ef34

0800c508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	607b      	str	r3, [r7, #4]
}
 800c520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c522:	4b10      	ldr	r3, [pc, #64]	@ (800c564 <vPortEnterCritical+0x5c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	3301      	adds	r3, #1
 800c528:	4a0e      	ldr	r2, [pc, #56]	@ (800c564 <vPortEnterCritical+0x5c>)
 800c52a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c52c:	4b0d      	ldr	r3, [pc, #52]	@ (800c564 <vPortEnterCritical+0x5c>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b01      	cmp	r3, #1
 800c532:	d110      	bne.n	800c556 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c534:	4b0c      	ldr	r3, [pc, #48]	@ (800c568 <vPortEnterCritical+0x60>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00b      	beq.n	800c556 <vPortEnterCritical+0x4e>
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	603b      	str	r3, [r7, #0]
}
 800c550:	bf00      	nop
 800c552:	bf00      	nop
 800c554:	e7fd      	b.n	800c552 <vPortEnterCritical+0x4a>
	}
}
 800c556:	bf00      	nop
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	20000124 	.word	0x20000124
 800c568:	e000ed04 	.word	0xe000ed04

0800c56c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c572:	4b12      	ldr	r3, [pc, #72]	@ (800c5bc <vPortExitCritical+0x50>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d10b      	bne.n	800c592 <vPortExitCritical+0x26>
	__asm volatile
 800c57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c57e:	f383 8811 	msr	BASEPRI, r3
 800c582:	f3bf 8f6f 	isb	sy
 800c586:	f3bf 8f4f 	dsb	sy
 800c58a:	607b      	str	r3, [r7, #4]
}
 800c58c:	bf00      	nop
 800c58e:	bf00      	nop
 800c590:	e7fd      	b.n	800c58e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c592:	4b0a      	ldr	r3, [pc, #40]	@ (800c5bc <vPortExitCritical+0x50>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3b01      	subs	r3, #1
 800c598:	4a08      	ldr	r2, [pc, #32]	@ (800c5bc <vPortExitCritical+0x50>)
 800c59a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c59c:	4b07      	ldr	r3, [pc, #28]	@ (800c5bc <vPortExitCritical+0x50>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d105      	bne.n	800c5b0 <vPortExitCritical+0x44>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c5ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5b0:	bf00      	nop
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	20000124 	.word	0x20000124

0800c5c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c5c0:	f3ef 8009 	mrs	r0, PSP
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	4b15      	ldr	r3, [pc, #84]	@ (800c620 <pxCurrentTCBConst>)
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	f01e 0f10 	tst.w	lr, #16
 800c5d0:	bf08      	it	eq
 800c5d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c5d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5da:	6010      	str	r0, [r2, #0]
 800c5dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c5e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c5e4:	f380 8811 	msr	BASEPRI, r0
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f7ff fcba 	bl	800bf68 <vTaskSwitchContext>
 800c5f4:	f04f 0000 	mov.w	r0, #0
 800c5f8:	f380 8811 	msr	BASEPRI, r0
 800c5fc:	bc09      	pop	{r0, r3}
 800c5fe:	6819      	ldr	r1, [r3, #0]
 800c600:	6808      	ldr	r0, [r1, #0]
 800c602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c606:	f01e 0f10 	tst.w	lr, #16
 800c60a:	bf08      	it	eq
 800c60c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c610:	f380 8809 	msr	PSP, r0
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	f3af 8000 	nop.w

0800c620 <pxCurrentTCBConst>:
 800c620:	20000c90 	.word	0x20000c90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop

0800c628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	607b      	str	r3, [r7, #4]
}
 800c640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c642:	f7ff fbd3 	bl	800bdec <xTaskIncrementTick>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d003      	beq.n	800c654 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c64c:	4b06      	ldr	r3, [pc, #24]	@ (800c668 <SysTick_Handler+0x40>)
 800c64e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c652:	601a      	str	r2, [r3, #0]
 800c654:	2300      	movs	r3, #0
 800c656:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	f383 8811 	msr	BASEPRI, r3
}
 800c65e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c660:	bf00      	nop
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	e000ed04 	.word	0xe000ed04

0800c66c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c66c:	b480      	push	{r7}
 800c66e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c670:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a0 <vPortSetupTimerInterrupt+0x34>)
 800c672:	2200      	movs	r2, #0
 800c674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c676:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a4 <vPortSetupTimerInterrupt+0x38>)
 800c678:	2200      	movs	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c67c:	4b0a      	ldr	r3, [pc, #40]	@ (800c6a8 <vPortSetupTimerInterrupt+0x3c>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a0a      	ldr	r2, [pc, #40]	@ (800c6ac <vPortSetupTimerInterrupt+0x40>)
 800c682:	fba2 2303 	umull	r2, r3, r2, r3
 800c686:	099b      	lsrs	r3, r3, #6
 800c688:	4a09      	ldr	r2, [pc, #36]	@ (800c6b0 <vPortSetupTimerInterrupt+0x44>)
 800c68a:	3b01      	subs	r3, #1
 800c68c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c68e:	4b04      	ldr	r3, [pc, #16]	@ (800c6a0 <vPortSetupTimerInterrupt+0x34>)
 800c690:	2207      	movs	r2, #7
 800c692:	601a      	str	r2, [r3, #0]
}
 800c694:	bf00      	nop
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	e000e010 	.word	0xe000e010
 800c6a4:	e000e018 	.word	0xe000e018
 800c6a8:	20000008 	.word	0x20000008
 800c6ac:	10624dd3 	.word	0x10624dd3
 800c6b0:	e000e014 	.word	0xe000e014

0800c6b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c6b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c6c4 <vPortEnableVFP+0x10>
 800c6b8:	6801      	ldr	r1, [r0, #0]
 800c6ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c6be:	6001      	str	r1, [r0, #0]
 800c6c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c6c2:	bf00      	nop
 800c6c4:	e000ed88 	.word	0xe000ed88

0800c6c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b08a      	sub	sp, #40	@ 0x28
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c6d4:	f7ff fade 	bl	800bc94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c6d8:	4b5a      	ldr	r3, [pc, #360]	@ (800c844 <pvPortMalloc+0x17c>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d101      	bne.n	800c6e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c6e0:	f000 f916 	bl	800c910 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c6e4:	4b58      	ldr	r3, [pc, #352]	@ (800c848 <pvPortMalloc+0x180>)
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4013      	ands	r3, r2
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f040 8090 	bne.w	800c812 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d01e      	beq.n	800c736 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c6f8:	2208      	movs	r2, #8
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4413      	add	r3, r2
 800c6fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f003 0307 	and.w	r3, r3, #7
 800c706:	2b00      	cmp	r3, #0
 800c708:	d015      	beq.n	800c736 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f023 0307 	bic.w	r3, r3, #7
 800c710:	3308      	adds	r3, #8
 800c712:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f003 0307 	and.w	r3, r3, #7
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00b      	beq.n	800c736 <pvPortMalloc+0x6e>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	617b      	str	r3, [r7, #20]
}
 800c730:	bf00      	nop
 800c732:	bf00      	nop
 800c734:	e7fd      	b.n	800c732 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d06a      	beq.n	800c812 <pvPortMalloc+0x14a>
 800c73c:	4b43      	ldr	r3, [pc, #268]	@ (800c84c <pvPortMalloc+0x184>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	429a      	cmp	r2, r3
 800c744:	d865      	bhi.n	800c812 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c746:	4b42      	ldr	r3, [pc, #264]	@ (800c850 <pvPortMalloc+0x188>)
 800c748:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c74a:	4b41      	ldr	r3, [pc, #260]	@ (800c850 <pvPortMalloc+0x188>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c750:	e004      	b.n	800c75c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c754:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	429a      	cmp	r2, r3
 800c764:	d903      	bls.n	800c76e <pvPortMalloc+0xa6>
 800c766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1f1      	bne.n	800c752 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c76e:	4b35      	ldr	r3, [pc, #212]	@ (800c844 <pvPortMalloc+0x17c>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c774:	429a      	cmp	r2, r3
 800c776:	d04c      	beq.n	800c812 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2208      	movs	r2, #8
 800c77e:	4413      	add	r3, r2
 800c780:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	6a3b      	ldr	r3, [r7, #32]
 800c788:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78c:	685a      	ldr	r2, [r3, #4]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	1ad2      	subs	r2, r2, r3
 800c792:	2308      	movs	r3, #8
 800c794:	005b      	lsls	r3, r3, #1
 800c796:	429a      	cmp	r2, r3
 800c798:	d920      	bls.n	800c7dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c79a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4413      	add	r3, r2
 800c7a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	f003 0307 	and.w	r3, r3, #7
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00b      	beq.n	800c7c4 <pvPortMalloc+0xfc>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	613b      	str	r3, [r7, #16]
}
 800c7be:	bf00      	nop
 800c7c0:	bf00      	nop
 800c7c2:	e7fd      	b.n	800c7c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c6:	685a      	ldr	r2, [r3, #4]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	1ad2      	subs	r2, r2, r3
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c7d6:	69b8      	ldr	r0, [r7, #24]
 800c7d8:	f000 f8fc 	bl	800c9d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c7dc:	4b1b      	ldr	r3, [pc, #108]	@ (800c84c <pvPortMalloc+0x184>)
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	4a19      	ldr	r2, [pc, #100]	@ (800c84c <pvPortMalloc+0x184>)
 800c7e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c7ea:	4b18      	ldr	r3, [pc, #96]	@ (800c84c <pvPortMalloc+0x184>)
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	4b19      	ldr	r3, [pc, #100]	@ (800c854 <pvPortMalloc+0x18c>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d203      	bcs.n	800c7fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c7f6:	4b15      	ldr	r3, [pc, #84]	@ (800c84c <pvPortMalloc+0x184>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a16      	ldr	r2, [pc, #88]	@ (800c854 <pvPortMalloc+0x18c>)
 800c7fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c800:	685a      	ldr	r2, [r3, #4]
 800c802:	4b11      	ldr	r3, [pc, #68]	@ (800c848 <pvPortMalloc+0x180>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	431a      	orrs	r2, r3
 800c808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80e:	2200      	movs	r2, #0
 800c810:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c812:	f7ff fa4d 	bl	800bcb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	f003 0307 	and.w	r3, r3, #7
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00b      	beq.n	800c838 <pvPortMalloc+0x170>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	60fb      	str	r3, [r7, #12]
}
 800c832:	bf00      	nop
 800c834:	bf00      	nop
 800c836:	e7fd      	b.n	800c834 <pvPortMalloc+0x16c>
	return pvReturn;
 800c838:	69fb      	ldr	r3, [r7, #28]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3728      	adds	r7, #40	@ 0x28
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	200019cc 	.word	0x200019cc
 800c848:	200019d8 	.word	0x200019d8
 800c84c:	200019d0 	.word	0x200019d0
 800c850:	200019c4 	.word	0x200019c4
 800c854:	200019d4 	.word	0x200019d4

0800c858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d04a      	beq.n	800c900 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c86a:	2308      	movs	r3, #8
 800c86c:	425b      	negs	r3, r3
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	4413      	add	r3, r2
 800c872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	4b22      	ldr	r3, [pc, #136]	@ (800c908 <vPortFree+0xb0>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4013      	ands	r3, r2
 800c882:	2b00      	cmp	r3, #0
 800c884:	d10b      	bne.n	800c89e <vPortFree+0x46>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	60fb      	str	r3, [r7, #12]
}
 800c898:	bf00      	nop
 800c89a:	bf00      	nop
 800c89c:	e7fd      	b.n	800c89a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d00b      	beq.n	800c8be <vPortFree+0x66>
	__asm volatile
 800c8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8aa:	f383 8811 	msr	BASEPRI, r3
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f3bf 8f4f 	dsb	sy
 800c8b6:	60bb      	str	r3, [r7, #8]
}
 800c8b8:	bf00      	nop
 800c8ba:	bf00      	nop
 800c8bc:	e7fd      	b.n	800c8ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	4b11      	ldr	r3, [pc, #68]	@ (800c908 <vPortFree+0xb0>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4013      	ands	r3, r2
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d019      	beq.n	800c900 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d115      	bne.n	800c900 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c908 <vPortFree+0xb0>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	43db      	mvns	r3, r3
 800c8de:	401a      	ands	r2, r3
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c8e4:	f7ff f9d6 	bl	800bc94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	685a      	ldr	r2, [r3, #4]
 800c8ec:	4b07      	ldr	r3, [pc, #28]	@ (800c90c <vPortFree+0xb4>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	4a06      	ldr	r2, [pc, #24]	@ (800c90c <vPortFree+0xb4>)
 800c8f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c8f6:	6938      	ldr	r0, [r7, #16]
 800c8f8:	f000 f86c 	bl	800c9d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c8fc:	f7ff f9d8 	bl	800bcb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c900:	bf00      	nop
 800c902:	3718      	adds	r7, #24
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	200019d8 	.word	0x200019d8
 800c90c:	200019d0 	.word	0x200019d0

0800c910 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c910:	b480      	push	{r7}
 800c912:	b085      	sub	sp, #20
 800c914:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c916:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c91a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c91c:	4b27      	ldr	r3, [pc, #156]	@ (800c9bc <prvHeapInit+0xac>)
 800c91e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f003 0307 	and.w	r3, r3, #7
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00c      	beq.n	800c944 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3307      	adds	r3, #7
 800c92e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f023 0307 	bic.w	r3, r3, #7
 800c936:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	4a1f      	ldr	r2, [pc, #124]	@ (800c9bc <prvHeapInit+0xac>)
 800c940:	4413      	add	r3, r2
 800c942:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c948:	4a1d      	ldr	r2, [pc, #116]	@ (800c9c0 <prvHeapInit+0xb0>)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c94e:	4b1c      	ldr	r3, [pc, #112]	@ (800c9c0 <prvHeapInit+0xb0>)
 800c950:	2200      	movs	r2, #0
 800c952:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	68ba      	ldr	r2, [r7, #8]
 800c958:	4413      	add	r3, r2
 800c95a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c95c:	2208      	movs	r2, #8
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	1a9b      	subs	r3, r3, r2
 800c962:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f023 0307 	bic.w	r3, r3, #7
 800c96a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	4a15      	ldr	r2, [pc, #84]	@ (800c9c4 <prvHeapInit+0xb4>)
 800c970:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c972:	4b14      	ldr	r3, [pc, #80]	@ (800c9c4 <prvHeapInit+0xb4>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2200      	movs	r2, #0
 800c978:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c97a:	4b12      	ldr	r3, [pc, #72]	@ (800c9c4 <prvHeapInit+0xb4>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2200      	movs	r2, #0
 800c980:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	1ad2      	subs	r2, r2, r3
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c990:	4b0c      	ldr	r3, [pc, #48]	@ (800c9c4 <prvHeapInit+0xb4>)
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	4a0a      	ldr	r2, [pc, #40]	@ (800c9c8 <prvHeapInit+0xb8>)
 800c99e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	4a09      	ldr	r2, [pc, #36]	@ (800c9cc <prvHeapInit+0xbc>)
 800c9a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c9a8:	4b09      	ldr	r3, [pc, #36]	@ (800c9d0 <prvHeapInit+0xc0>)
 800c9aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c9ae:	601a      	str	r2, [r3, #0]
}
 800c9b0:	bf00      	nop
 800c9b2:	3714      	adds	r7, #20
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	20000dc4 	.word	0x20000dc4
 800c9c0:	200019c4 	.word	0x200019c4
 800c9c4:	200019cc 	.word	0x200019cc
 800c9c8:	200019d4 	.word	0x200019d4
 800c9cc:	200019d0 	.word	0x200019d0
 800c9d0:	200019d8 	.word	0x200019d8

0800c9d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c9dc:	4b28      	ldr	r3, [pc, #160]	@ (800ca80 <prvInsertBlockIntoFreeList+0xac>)
 800c9de:	60fb      	str	r3, [r7, #12]
 800c9e0:	e002      	b.n	800c9e8 <prvInsertBlockIntoFreeList+0x14>
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60fb      	str	r3, [r7, #12]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d8f7      	bhi.n	800c9e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d108      	bne.n	800ca16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	685a      	ldr	r2, [r3, #4]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	441a      	add	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	441a      	add	r2, r3
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d118      	bne.n	800ca5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	4b15      	ldr	r3, [pc, #84]	@ (800ca84 <prvInsertBlockIntoFreeList+0xb0>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d00d      	beq.n	800ca52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	685a      	ldr	r2, [r3, #4]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	441a      	add	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	601a      	str	r2, [r3, #0]
 800ca50:	e008      	b.n	800ca64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca52:	4b0c      	ldr	r3, [pc, #48]	@ (800ca84 <prvInsertBlockIntoFreeList+0xb0>)
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	e003      	b.n	800ca64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d002      	beq.n	800ca72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca72:	bf00      	nop
 800ca74:	3714      	adds	r7, #20
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	200019c4 	.word	0x200019c4
 800ca84:	200019cc 	.word	0x200019cc

0800ca88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4912      	ldr	r1, [pc, #72]	@ (800cad8 <MX_USB_DEVICE_Init+0x50>)
 800ca90:	4812      	ldr	r0, [pc, #72]	@ (800cadc <MX_USB_DEVICE_Init+0x54>)
 800ca92:	f7fd fd07 	bl	800a4a4 <USBD_Init>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca9c:	f7f4 f8fa 	bl	8000c94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800caa0:	490f      	ldr	r1, [pc, #60]	@ (800cae0 <MX_USB_DEVICE_Init+0x58>)
 800caa2:	480e      	ldr	r0, [pc, #56]	@ (800cadc <MX_USB_DEVICE_Init+0x54>)
 800caa4:	f7fd fd29 	bl	800a4fa <USBD_RegisterClass>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800caae:	f7f4 f8f1 	bl	8000c94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cab2:	490c      	ldr	r1, [pc, #48]	@ (800cae4 <MX_USB_DEVICE_Init+0x5c>)
 800cab4:	4809      	ldr	r0, [pc, #36]	@ (800cadc <MX_USB_DEVICE_Init+0x54>)
 800cab6:	f7fd fc57 	bl	800a368 <USBD_CDC_RegisterInterface>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cac0:	f7f4 f8e8 	bl	8000c94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cac4:	4805      	ldr	r0, [pc, #20]	@ (800cadc <MX_USB_DEVICE_Init+0x54>)
 800cac6:	f7fd fd32 	bl	800a52e <USBD_Start>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d001      	beq.n	800cad4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cad0:	f7f4 f8e0 	bl	8000c94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cad4:	bf00      	nop
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	20000138 	.word	0x20000138
 800cadc:	200019dc 	.word	0x200019dc
 800cae0:	20000020 	.word	0x20000020
 800cae4:	20000128 	.word	0x20000128

0800cae8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800caec:	2200      	movs	r2, #0
 800caee:	4905      	ldr	r1, [pc, #20]	@ (800cb04 <CDC_Init_FS+0x1c>)
 800caf0:	4805      	ldr	r0, [pc, #20]	@ (800cb08 <CDC_Init_FS+0x20>)
 800caf2:	f7fd fc50 	bl	800a396 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800caf6:	4905      	ldr	r1, [pc, #20]	@ (800cb0c <CDC_Init_FS+0x24>)
 800caf8:	4803      	ldr	r0, [pc, #12]	@ (800cb08 <CDC_Init_FS+0x20>)
 800cafa:	f7fd fc66 	bl	800a3ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cafe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	200020a0 	.word	0x200020a0
 800cb08:	200019dc 	.word	0x200019dc
 800cb0c:	20001ca0 	.word	0x20001ca0

0800cb10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cb10:	b480      	push	{r7}
 800cb12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cb14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	6039      	str	r1, [r7, #0]
 800cb2a:	71fb      	strb	r3, [r7, #7]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cb30:	79fb      	ldrb	r3, [r7, #7]
 800cb32:	2b23      	cmp	r3, #35	@ 0x23
 800cb34:	d84a      	bhi.n	800cbcc <CDC_Control_FS+0xac>
 800cb36:	a201      	add	r2, pc, #4	@ (adr r2, 800cb3c <CDC_Control_FS+0x1c>)
 800cb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3c:	0800cbcd 	.word	0x0800cbcd
 800cb40:	0800cbcd 	.word	0x0800cbcd
 800cb44:	0800cbcd 	.word	0x0800cbcd
 800cb48:	0800cbcd 	.word	0x0800cbcd
 800cb4c:	0800cbcd 	.word	0x0800cbcd
 800cb50:	0800cbcd 	.word	0x0800cbcd
 800cb54:	0800cbcd 	.word	0x0800cbcd
 800cb58:	0800cbcd 	.word	0x0800cbcd
 800cb5c:	0800cbcd 	.word	0x0800cbcd
 800cb60:	0800cbcd 	.word	0x0800cbcd
 800cb64:	0800cbcd 	.word	0x0800cbcd
 800cb68:	0800cbcd 	.word	0x0800cbcd
 800cb6c:	0800cbcd 	.word	0x0800cbcd
 800cb70:	0800cbcd 	.word	0x0800cbcd
 800cb74:	0800cbcd 	.word	0x0800cbcd
 800cb78:	0800cbcd 	.word	0x0800cbcd
 800cb7c:	0800cbcd 	.word	0x0800cbcd
 800cb80:	0800cbcd 	.word	0x0800cbcd
 800cb84:	0800cbcd 	.word	0x0800cbcd
 800cb88:	0800cbcd 	.word	0x0800cbcd
 800cb8c:	0800cbcd 	.word	0x0800cbcd
 800cb90:	0800cbcd 	.word	0x0800cbcd
 800cb94:	0800cbcd 	.word	0x0800cbcd
 800cb98:	0800cbcd 	.word	0x0800cbcd
 800cb9c:	0800cbcd 	.word	0x0800cbcd
 800cba0:	0800cbcd 	.word	0x0800cbcd
 800cba4:	0800cbcd 	.word	0x0800cbcd
 800cba8:	0800cbcd 	.word	0x0800cbcd
 800cbac:	0800cbcd 	.word	0x0800cbcd
 800cbb0:	0800cbcd 	.word	0x0800cbcd
 800cbb4:	0800cbcd 	.word	0x0800cbcd
 800cbb8:	0800cbcd 	.word	0x0800cbcd
 800cbbc:	0800cbcd 	.word	0x0800cbcd
 800cbc0:	0800cbcd 	.word	0x0800cbcd
 800cbc4:	0800cbcd 	.word	0x0800cbcd
 800cbc8:	0800cbcd 	.word	0x0800cbcd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cbcc:	bf00      	nop
  }

  return (USBD_OK);
 800cbce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	4805      	ldr	r0, [pc, #20]	@ (800cc00 <CDC_Receive_FS+0x24>)
 800cbea:	f7fd fbee 	bl	800a3ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cbee:	4804      	ldr	r0, [pc, #16]	@ (800cc00 <CDC_Receive_FS+0x24>)
 800cbf0:	f7fd fc2e 	bl	800a450 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cbf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	200019dc 	.word	0x200019dc

0800cc04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cc10:	2300      	movs	r3, #0
 800cc12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cc14:	4b0d      	ldr	r3, [pc, #52]	@ (800cc4c <CDC_Transmit_FS+0x48>)
 800cc16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d001      	beq.n	800cc2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cc26:	2301      	movs	r3, #1
 800cc28:	e00b      	b.n	800cc42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cc2a:	887b      	ldrh	r3, [r7, #2]
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	6879      	ldr	r1, [r7, #4]
 800cc30:	4806      	ldr	r0, [pc, #24]	@ (800cc4c <CDC_Transmit_FS+0x48>)
 800cc32:	f7fd fbb0 	bl	800a396 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cc36:	4805      	ldr	r0, [pc, #20]	@ (800cc4c <CDC_Transmit_FS+0x48>)
 800cc38:	f7fd fbdb 	bl	800a3f2 <USBD_CDC_TransmitPacket>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	200019dc 	.word	0x200019dc

0800cc50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	4603      	mov	r3, r0
 800cc58:	6039      	str	r1, [r7, #0]
 800cc5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	2212      	movs	r2, #18
 800cc60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cc62:	4b03      	ldr	r3, [pc, #12]	@ (800cc70 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr
 800cc70:	20000154 	.word	0x20000154

0800cc74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	2204      	movs	r2, #4
 800cc84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc86:	4b03      	ldr	r3, [pc, #12]	@ (800cc94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr
 800cc94:	20000168 	.word	0x20000168

0800cc98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	4603      	mov	r3, r0
 800cca0:	6039      	str	r1, [r7, #0]
 800cca2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cca4:	79fb      	ldrb	r3, [r7, #7]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d105      	bne.n	800ccb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccaa:	683a      	ldr	r2, [r7, #0]
 800ccac:	4907      	ldr	r1, [pc, #28]	@ (800cccc <USBD_FS_ProductStrDescriptor+0x34>)
 800ccae:	4808      	ldr	r0, [pc, #32]	@ (800ccd0 <USBD_FS_ProductStrDescriptor+0x38>)
 800ccb0:	f7fe fbb8 	bl	800b424 <USBD_GetString>
 800ccb4:	e004      	b.n	800ccc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccb6:	683a      	ldr	r2, [r7, #0]
 800ccb8:	4904      	ldr	r1, [pc, #16]	@ (800cccc <USBD_FS_ProductStrDescriptor+0x34>)
 800ccba:	4805      	ldr	r0, [pc, #20]	@ (800ccd0 <USBD_FS_ProductStrDescriptor+0x38>)
 800ccbc:	f7fe fbb2 	bl	800b424 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccc0:	4b02      	ldr	r3, [pc, #8]	@ (800cccc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3708      	adds	r7, #8
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	200024a0 	.word	0x200024a0
 800ccd0:	0800d524 	.word	0x0800d524

0800ccd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	4603      	mov	r3, r0
 800ccdc:	6039      	str	r1, [r7, #0]
 800ccde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cce0:	683a      	ldr	r2, [r7, #0]
 800cce2:	4904      	ldr	r1, [pc, #16]	@ (800ccf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cce4:	4804      	ldr	r0, [pc, #16]	@ (800ccf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cce6:	f7fe fb9d 	bl	800b424 <USBD_GetString>
  return USBD_StrDesc;
 800ccea:	4b02      	ldr	r3, [pc, #8]	@ (800ccf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3708      	adds	r7, #8
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	200024a0 	.word	0x200024a0
 800ccf8:	0800d53c 	.word	0x0800d53c

0800ccfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	4603      	mov	r3, r0
 800cd04:	6039      	str	r1, [r7, #0]
 800cd06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	221a      	movs	r2, #26
 800cd0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd0e:	f000 f843 	bl	800cd98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cd12:	4b02      	ldr	r3, [pc, #8]	@ (800cd1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	2000016c 	.word	0x2000016c

0800cd20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	4603      	mov	r3, r0
 800cd28:	6039      	str	r1, [r7, #0]
 800cd2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd2c:	79fb      	ldrb	r3, [r7, #7]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d105      	bne.n	800cd3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd32:	683a      	ldr	r2, [r7, #0]
 800cd34:	4907      	ldr	r1, [pc, #28]	@ (800cd54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd36:	4808      	ldr	r0, [pc, #32]	@ (800cd58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd38:	f7fe fb74 	bl	800b424 <USBD_GetString>
 800cd3c:	e004      	b.n	800cd48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd3e:	683a      	ldr	r2, [r7, #0]
 800cd40:	4904      	ldr	r1, [pc, #16]	@ (800cd54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd42:	4805      	ldr	r0, [pc, #20]	@ (800cd58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd44:	f7fe fb6e 	bl	800b424 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd48:	4b02      	ldr	r3, [pc, #8]	@ (800cd54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3708      	adds	r7, #8
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	200024a0 	.word	0x200024a0
 800cd58:	0800d550 	.word	0x0800d550

0800cd5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	4603      	mov	r3, r0
 800cd64:	6039      	str	r1, [r7, #0]
 800cd66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd68:	79fb      	ldrb	r3, [r7, #7]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d105      	bne.n	800cd7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	4907      	ldr	r1, [pc, #28]	@ (800cd90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd72:	4808      	ldr	r0, [pc, #32]	@ (800cd94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd74:	f7fe fb56 	bl	800b424 <USBD_GetString>
 800cd78:	e004      	b.n	800cd84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd7a:	683a      	ldr	r2, [r7, #0]
 800cd7c:	4904      	ldr	r1, [pc, #16]	@ (800cd90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd7e:	4805      	ldr	r0, [pc, #20]	@ (800cd94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd80:	f7fe fb50 	bl	800b424 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd84:	4b02      	ldr	r3, [pc, #8]	@ (800cd90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	200024a0 	.word	0x200024a0
 800cd94:	0800d55c 	.word	0x0800d55c

0800cd98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd9e:	4b0f      	ldr	r3, [pc, #60]	@ (800cddc <Get_SerialNum+0x44>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cda4:	4b0e      	ldr	r3, [pc, #56]	@ (800cde0 <Get_SerialNum+0x48>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cdaa:	4b0e      	ldr	r3, [pc, #56]	@ (800cde4 <Get_SerialNum+0x4c>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d009      	beq.n	800cdd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cdbe:	2208      	movs	r2, #8
 800cdc0:	4909      	ldr	r1, [pc, #36]	@ (800cde8 <Get_SerialNum+0x50>)
 800cdc2:	68f8      	ldr	r0, [r7, #12]
 800cdc4:	f000 f814 	bl	800cdf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cdc8:	2204      	movs	r2, #4
 800cdca:	4908      	ldr	r1, [pc, #32]	@ (800cdec <Get_SerialNum+0x54>)
 800cdcc:	68b8      	ldr	r0, [r7, #8]
 800cdce:	f000 f80f 	bl	800cdf0 <IntToUnicode>
  }
}
 800cdd2:	bf00      	nop
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	1ffff7ac 	.word	0x1ffff7ac
 800cde0:	1ffff7b0 	.word	0x1ffff7b0
 800cde4:	1ffff7b4 	.word	0x1ffff7b4
 800cde8:	2000016e 	.word	0x2000016e
 800cdec:	2000017e 	.word	0x2000017e

0800cdf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b087      	sub	sp, #28
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce02:	2300      	movs	r3, #0
 800ce04:	75fb      	strb	r3, [r7, #23]
 800ce06:	e027      	b.n	800ce58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	0f1b      	lsrs	r3, r3, #28
 800ce0c:	2b09      	cmp	r3, #9
 800ce0e:	d80b      	bhi.n	800ce28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	0f1b      	lsrs	r3, r3, #28
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	7dfb      	ldrb	r3, [r7, #23]
 800ce18:	005b      	lsls	r3, r3, #1
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	440b      	add	r3, r1
 800ce20:	3230      	adds	r2, #48	@ 0x30
 800ce22:	b2d2      	uxtb	r2, r2
 800ce24:	701a      	strb	r2, [r3, #0]
 800ce26:	e00a      	b.n	800ce3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	0f1b      	lsrs	r3, r3, #28
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	7dfb      	ldrb	r3, [r7, #23]
 800ce30:	005b      	lsls	r3, r3, #1
 800ce32:	4619      	mov	r1, r3
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	440b      	add	r3, r1
 800ce38:	3237      	adds	r2, #55	@ 0x37
 800ce3a:	b2d2      	uxtb	r2, r2
 800ce3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	011b      	lsls	r3, r3, #4
 800ce42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce44:	7dfb      	ldrb	r3, [r7, #23]
 800ce46:	005b      	lsls	r3, r3, #1
 800ce48:	3301      	adds	r3, #1
 800ce4a:	68ba      	ldr	r2, [r7, #8]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	2200      	movs	r2, #0
 800ce50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce52:	7dfb      	ldrb	r3, [r7, #23]
 800ce54:	3301      	adds	r3, #1
 800ce56:	75fb      	strb	r3, [r7, #23]
 800ce58:	7dfa      	ldrb	r2, [r7, #23]
 800ce5a:	79fb      	ldrb	r3, [r7, #7]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d3d3      	bcc.n	800ce08 <IntToUnicode+0x18>
  }
}
 800ce60:	bf00      	nop
 800ce62:	bf00      	nop
 800ce64:	371c      	adds	r7, #28
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
	...

0800ce70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b08a      	sub	sp, #40	@ 0x28
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce78:	f107 0314 	add.w	r3, r7, #20
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	601a      	str	r2, [r3, #0]
 800ce80:	605a      	str	r2, [r3, #4]
 800ce82:	609a      	str	r2, [r3, #8]
 800ce84:	60da      	str	r2, [r3, #12]
 800ce86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a1c      	ldr	r2, [pc, #112]	@ (800cf00 <HAL_PCD_MspInit+0x90>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d131      	bne.n	800cef6 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce92:	4b1c      	ldr	r3, [pc, #112]	@ (800cf04 <HAL_PCD_MspInit+0x94>)
 800ce94:	695b      	ldr	r3, [r3, #20]
 800ce96:	4a1b      	ldr	r2, [pc, #108]	@ (800cf04 <HAL_PCD_MspInit+0x94>)
 800ce98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce9c:	6153      	str	r3, [r2, #20]
 800ce9e:	4b19      	ldr	r3, [pc, #100]	@ (800cf04 <HAL_PCD_MspInit+0x94>)
 800cea0:	695b      	ldr	r3, [r3, #20]
 800cea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cea6:	613b      	str	r3, [r7, #16]
 800cea8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ceaa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ceae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800cebc:	230e      	movs	r3, #14
 800cebe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cec0:	f107 0314 	add.w	r3, r7, #20
 800cec4:	4619      	mov	r1, r3
 800cec6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ceca:	f7f6 fa13 	bl	80032f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cece:	4b0d      	ldr	r3, [pc, #52]	@ (800cf04 <HAL_PCD_MspInit+0x94>)
 800ced0:	69db      	ldr	r3, [r3, #28]
 800ced2:	4a0c      	ldr	r2, [pc, #48]	@ (800cf04 <HAL_PCD_MspInit+0x94>)
 800ced4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ced8:	61d3      	str	r3, [r2, #28]
 800ceda:	4b0a      	ldr	r3, [pc, #40]	@ (800cf04 <HAL_PCD_MspInit+0x94>)
 800cedc:	69db      	ldr	r3, [r3, #28]
 800cede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cee2:	60fb      	str	r3, [r7, #12]
 800cee4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800cee6:	2200      	movs	r2, #0
 800cee8:	2105      	movs	r1, #5
 800ceea:	2014      	movs	r0, #20
 800ceec:	f7f6 f8b2 	bl	8003054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800cef0:	2014      	movs	r0, #20
 800cef2:	f7f6 f8cb 	bl	800308c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cef6:	bf00      	nop
 800cef8:	3728      	adds	r7, #40	@ 0x28
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	40005c00 	.word	0x40005c00
 800cf04:	40021000 	.word	0x40021000

0800cf08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	4610      	mov	r0, r2
 800cf20:	f7fd fb4e 	bl	800a5c0 <USBD_LL_SetupStage>
}
 800cf24:	bf00      	nop
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	460b      	mov	r3, r1
 800cf36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800cf3e:	78fa      	ldrb	r2, [r7, #3]
 800cf40:	6879      	ldr	r1, [r7, #4]
 800cf42:	4613      	mov	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4413      	add	r3, r2
 800cf48:	00db      	lsls	r3, r3, #3
 800cf4a:	440b      	add	r3, r1
 800cf4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	78fb      	ldrb	r3, [r7, #3]
 800cf54:	4619      	mov	r1, r3
 800cf56:	f7fd fb80 	bl	800a65a <USBD_LL_DataOutStage>
}
 800cf5a:	bf00      	nop
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b082      	sub	sp, #8
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800cf74:	78fa      	ldrb	r2, [r7, #3]
 800cf76:	6879      	ldr	r1, [r7, #4]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4413      	add	r3, r2
 800cf7e:	00db      	lsls	r3, r3, #3
 800cf80:	440b      	add	r3, r1
 800cf82:	3324      	adds	r3, #36	@ 0x24
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	78fb      	ldrb	r3, [r7, #3]
 800cf88:	4619      	mov	r1, r3
 800cf8a:	f7fd fbd7 	bl	800a73c <USBD_LL_DataInStage>
}
 800cf8e:	bf00      	nop
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b082      	sub	sp, #8
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fd fcea 	bl	800a97e <USBD_LL_SOF>
}
 800cfaa:	bf00      	nop
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b084      	sub	sp, #16
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	795b      	ldrb	r3, [r3, #5]
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	d001      	beq.n	800cfca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cfc6:	f7f3 fe65 	bl	8000c94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800cfd0:	7bfa      	ldrb	r2, [r7, #15]
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7fd fc97 	bl	800a908 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fd fc50 	bl	800a886 <USBD_LL_Reset>
}
 800cfe6:	bf00      	nop
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
	...

0800cff0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fd fc92 	bl	800a928 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	7a5b      	ldrb	r3, [r3, #9]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d005      	beq.n	800d018 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d00c:	4b04      	ldr	r3, [pc, #16]	@ (800d020 <HAL_PCD_SuspendCallback+0x30>)
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	4a03      	ldr	r2, [pc, #12]	@ (800d020 <HAL_PCD_SuspendCallback+0x30>)
 800d012:	f043 0306 	orr.w	r3, r3, #6
 800d016:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d018:	bf00      	nop
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	e000ed00 	.word	0xe000ed00

0800d024 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d032:	4618      	mov	r0, r3
 800d034:	f7fd fc8d 	bl	800a952 <USBD_LL_Resume>
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d048:	4a28      	ldr	r2, [pc, #160]	@ (800d0ec <USBD_LL_Init+0xac>)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a26      	ldr	r2, [pc, #152]	@ (800d0ec <USBD_LL_Init+0xac>)
 800d054:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d058:	4b24      	ldr	r3, [pc, #144]	@ (800d0ec <USBD_LL_Init+0xac>)
 800d05a:	4a25      	ldr	r2, [pc, #148]	@ (800d0f0 <USBD_LL_Init+0xb0>)
 800d05c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d05e:	4b23      	ldr	r3, [pc, #140]	@ (800d0ec <USBD_LL_Init+0xac>)
 800d060:	2208      	movs	r2, #8
 800d062:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d064:	4b21      	ldr	r3, [pc, #132]	@ (800d0ec <USBD_LL_Init+0xac>)
 800d066:	2202      	movs	r2, #2
 800d068:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d06a:	4b20      	ldr	r3, [pc, #128]	@ (800d0ec <USBD_LL_Init+0xac>)
 800d06c:	2202      	movs	r2, #2
 800d06e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d070:	4b1e      	ldr	r3, [pc, #120]	@ (800d0ec <USBD_LL_Init+0xac>)
 800d072:	2200      	movs	r2, #0
 800d074:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d076:	4b1d      	ldr	r3, [pc, #116]	@ (800d0ec <USBD_LL_Init+0xac>)
 800d078:	2200      	movs	r2, #0
 800d07a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d07c:	481b      	ldr	r0, [pc, #108]	@ (800d0ec <USBD_LL_Init+0xac>)
 800d07e:	f7f6 ff80 	bl	8003f82 <HAL_PCD_Init>
 800d082:	4603      	mov	r3, r0
 800d084:	2b00      	cmp	r3, #0
 800d086:	d001      	beq.n	800d08c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d088:	f7f3 fe04 	bl	8000c94 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d092:	2318      	movs	r3, #24
 800d094:	2200      	movs	r2, #0
 800d096:	2100      	movs	r1, #0
 800d098:	f7f8 fbf9 	bl	800588e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d0a2:	2358      	movs	r3, #88	@ 0x58
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	2180      	movs	r1, #128	@ 0x80
 800d0a8:	f7f8 fbf1 	bl	800588e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d0b2:	23c0      	movs	r3, #192	@ 0xc0
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	2181      	movs	r1, #129	@ 0x81
 800d0b8:	f7f8 fbe9 	bl	800588e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d0c2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	2101      	movs	r1, #1
 800d0ca:	f7f8 fbe0 	bl	800588e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d0d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0d8:	2200      	movs	r2, #0
 800d0da:	2182      	movs	r1, #130	@ 0x82
 800d0dc:	f7f8 fbd7 	bl	800588e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3708      	adds	r7, #8
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	200026a0 	.word	0x200026a0
 800d0f0:	40005c00 	.word	0x40005c00

0800d0f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d100:	2300      	movs	r3, #0
 800d102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7f7 f800 	bl	8004110 <HAL_PCD_Start>
 800d110:	4603      	mov	r3, r0
 800d112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d114:	7bfb      	ldrb	r3, [r7, #15]
 800d116:	4618      	mov	r0, r3
 800d118:	f000 f952 	bl	800d3c0 <USBD_Get_USB_Status>
 800d11c:	4603      	mov	r3, r0
 800d11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d120:	7bbb      	ldrb	r3, [r7, #14]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3710      	adds	r7, #16
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b084      	sub	sp, #16
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	4608      	mov	r0, r1
 800d134:	4611      	mov	r1, r2
 800d136:	461a      	mov	r2, r3
 800d138:	4603      	mov	r3, r0
 800d13a:	70fb      	strb	r3, [r7, #3]
 800d13c:	460b      	mov	r3, r1
 800d13e:	70bb      	strb	r3, [r7, #2]
 800d140:	4613      	mov	r3, r2
 800d142:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d144:	2300      	movs	r3, #0
 800d146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d152:	78bb      	ldrb	r3, [r7, #2]
 800d154:	883a      	ldrh	r2, [r7, #0]
 800d156:	78f9      	ldrb	r1, [r7, #3]
 800d158:	f7f7 f8f8 	bl	800434c <HAL_PCD_EP_Open>
 800d15c:	4603      	mov	r3, r0
 800d15e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d160:	7bfb      	ldrb	r3, [r7, #15]
 800d162:	4618      	mov	r0, r3
 800d164:	f000 f92c 	bl	800d3c0 <USBD_Get_USB_Status>
 800d168:	4603      	mov	r3, r0
 800d16a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d16c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
 800d17e:	460b      	mov	r3, r1
 800d180:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d182:	2300      	movs	r3, #0
 800d184:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d186:	2300      	movs	r3, #0
 800d188:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d190:	78fa      	ldrb	r2, [r7, #3]
 800d192:	4611      	mov	r1, r2
 800d194:	4618      	mov	r0, r3
 800d196:	f7f7 f936 	bl	8004406 <HAL_PCD_EP_Close>
 800d19a:	4603      	mov	r3, r0
 800d19c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d19e:	7bfb      	ldrb	r3, [r7, #15]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 f90d 	bl	800d3c0 <USBD_Get_USB_Status>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	460b      	mov	r3, r1
 800d1be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d1ce:	78fa      	ldrb	r2, [r7, #3]
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7f7 f9df 	bl	8004596 <HAL_PCD_EP_SetStall>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f000 f8ee 	bl	800d3c0 <USBD_Get_USB_Status>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b084      	sub	sp, #16
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1fe:	2300      	movs	r3, #0
 800d200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d202:	2300      	movs	r3, #0
 800d204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d20c:	78fa      	ldrb	r2, [r7, #3]
 800d20e:	4611      	mov	r1, r2
 800d210:	4618      	mov	r0, r3
 800d212:	f7f7 fa12 	bl	800463a <HAL_PCD_EP_ClrStall>
 800d216:	4603      	mov	r3, r0
 800d218:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d21a:	7bfb      	ldrb	r3, [r7, #15]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f000 f8cf 	bl	800d3c0 <USBD_Get_USB_Status>
 800d222:	4603      	mov	r3, r0
 800d224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d226:	7bbb      	ldrb	r3, [r7, #14]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d242:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	da0b      	bge.n	800d264 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d24c:	78fb      	ldrb	r3, [r7, #3]
 800d24e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d252:	68f9      	ldr	r1, [r7, #12]
 800d254:	4613      	mov	r3, r2
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	4413      	add	r3, r2
 800d25a:	00db      	lsls	r3, r3, #3
 800d25c:	440b      	add	r3, r1
 800d25e:	3312      	adds	r3, #18
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	e00b      	b.n	800d27c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d264:	78fb      	ldrb	r3, [r7, #3]
 800d266:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d26a:	68f9      	ldr	r1, [r7, #12]
 800d26c:	4613      	mov	r3, r2
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	4413      	add	r3, r2
 800d272:	00db      	lsls	r3, r3, #3
 800d274:	440b      	add	r3, r1
 800d276:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d27a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3714      	adds	r7, #20
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d294:	2300      	movs	r3, #0
 800d296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d2a2:	78fa      	ldrb	r2, [r7, #3]
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7f7 f82c 	bl	8004304 <HAL_PCD_SetAddress>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f000 f884 	bl	800d3c0 <USBD_Get_USB_Status>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b086      	sub	sp, #24
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	60f8      	str	r0, [r7, #12]
 800d2ce:	607a      	str	r2, [r7, #4]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	72fb      	strb	r3, [r7, #11]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d2e8:	893b      	ldrh	r3, [r7, #8]
 800d2ea:	7af9      	ldrb	r1, [r7, #11]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	f7f7 f91b 	bl	8004528 <HAL_PCD_EP_Transmit>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2f6:	7dfb      	ldrb	r3, [r7, #23]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f000 f861 	bl	800d3c0 <USBD_Get_USB_Status>
 800d2fe:	4603      	mov	r3, r0
 800d300:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d302:	7dbb      	ldrb	r3, [r7, #22]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3718      	adds	r7, #24
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b086      	sub	sp, #24
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	607a      	str	r2, [r7, #4]
 800d316:	461a      	mov	r2, r3
 800d318:	460b      	mov	r3, r1
 800d31a:	72fb      	strb	r3, [r7, #11]
 800d31c:	4613      	mov	r3, r2
 800d31e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d324:	2300      	movs	r3, #0
 800d326:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d32e:	893b      	ldrh	r3, [r7, #8]
 800d330:	7af9      	ldrb	r1, [r7, #11]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	f7f7 f8af 	bl	8004496 <HAL_PCD_EP_Receive>
 800d338:	4603      	mov	r3, r0
 800d33a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d33c:	7dfb      	ldrb	r3, [r7, #23]
 800d33e:	4618      	mov	r0, r3
 800d340:	f000 f83e 	bl	800d3c0 <USBD_Get_USB_Status>
 800d344:	4603      	mov	r3, r0
 800d346:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d348:	7dbb      	ldrb	r3, [r7, #22]
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b082      	sub	sp, #8
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	460b      	mov	r3, r1
 800d35c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d364:	78fa      	ldrb	r2, [r7, #3]
 800d366:	4611      	mov	r1, r2
 800d368:	4618      	mov	r0, r3
 800d36a:	f7f7 f8c5 	bl	80044f8 <HAL_PCD_EP_GetRxCount>
 800d36e:	4603      	mov	r3, r0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d380:	4b03      	ldr	r3, [pc, #12]	@ (800d390 <USBD_static_malloc+0x18>)
}
 800d382:	4618      	mov	r0, r3
 800d384:	370c      	adds	r7, #12
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	20002974 	.word	0x20002974

0800d394 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]

}
 800d39c:	bf00      	nop
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d3b4:	bf00      	nop
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d3ce:	79fb      	ldrb	r3, [r7, #7]
 800d3d0:	2b03      	cmp	r3, #3
 800d3d2:	d817      	bhi.n	800d404 <USBD_Get_USB_Status+0x44>
 800d3d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d3dc <USBD_Get_USB_Status+0x1c>)
 800d3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3da:	bf00      	nop
 800d3dc:	0800d3ed 	.word	0x0800d3ed
 800d3e0:	0800d3f3 	.word	0x0800d3f3
 800d3e4:	0800d3f9 	.word	0x0800d3f9
 800d3e8:	0800d3ff 	.word	0x0800d3ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f0:	e00b      	b.n	800d40a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3f2:	2302      	movs	r3, #2
 800d3f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f6:	e008      	b.n	800d40a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d3fc:	e005      	b.n	800d40a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3fe:	2302      	movs	r3, #2
 800d400:	73fb      	strb	r3, [r7, #15]
    break;
 800d402:	e002      	b.n	800d40a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d404:	2302      	movs	r3, #2
 800d406:	73fb      	strb	r3, [r7, #15]
    break;
 800d408:	bf00      	nop
  }
  return usb_status;
 800d40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <memset>:
 800d418:	4402      	add	r2, r0
 800d41a:	4603      	mov	r3, r0
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d100      	bne.n	800d422 <memset+0xa>
 800d420:	4770      	bx	lr
 800d422:	f803 1b01 	strb.w	r1, [r3], #1
 800d426:	e7f9      	b.n	800d41c <memset+0x4>

0800d428 <__libc_init_array>:
 800d428:	b570      	push	{r4, r5, r6, lr}
 800d42a:	4d0d      	ldr	r5, [pc, #52]	@ (800d460 <__libc_init_array+0x38>)
 800d42c:	4c0d      	ldr	r4, [pc, #52]	@ (800d464 <__libc_init_array+0x3c>)
 800d42e:	1b64      	subs	r4, r4, r5
 800d430:	10a4      	asrs	r4, r4, #2
 800d432:	2600      	movs	r6, #0
 800d434:	42a6      	cmp	r6, r4
 800d436:	d109      	bne.n	800d44c <__libc_init_array+0x24>
 800d438:	4d0b      	ldr	r5, [pc, #44]	@ (800d468 <__libc_init_array+0x40>)
 800d43a:	4c0c      	ldr	r4, [pc, #48]	@ (800d46c <__libc_init_array+0x44>)
 800d43c:	f000 f818 	bl	800d470 <_init>
 800d440:	1b64      	subs	r4, r4, r5
 800d442:	10a4      	asrs	r4, r4, #2
 800d444:	2600      	movs	r6, #0
 800d446:	42a6      	cmp	r6, r4
 800d448:	d105      	bne.n	800d456 <__libc_init_array+0x2e>
 800d44a:	bd70      	pop	{r4, r5, r6, pc}
 800d44c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d450:	4798      	blx	r3
 800d452:	3601      	adds	r6, #1
 800d454:	e7ee      	b.n	800d434 <__libc_init_array+0xc>
 800d456:	f855 3b04 	ldr.w	r3, [r5], #4
 800d45a:	4798      	blx	r3
 800d45c:	3601      	adds	r6, #1
 800d45e:	e7f2      	b.n	800d446 <__libc_init_array+0x1e>
 800d460:	0800dba8 	.word	0x0800dba8
 800d464:	0800dba8 	.word	0x0800dba8
 800d468:	0800dba8 	.word	0x0800dba8
 800d46c:	0800dbac 	.word	0x0800dbac

0800d470 <_init>:
 800d470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d472:	bf00      	nop
 800d474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d476:	bc08      	pop	{r3}
 800d478:	469e      	mov	lr, r3
 800d47a:	4770      	bx	lr

0800d47c <_fini>:
 800d47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47e:	bf00      	nop
 800d480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d482:	bc08      	pop	{r3}
 800d484:	469e      	mov	lr, r3
 800d486:	4770      	bx	lr
