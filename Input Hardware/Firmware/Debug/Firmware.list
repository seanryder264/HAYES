
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  0800da88  0800da88  0000ea88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1a4  0800e1a4  0001018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e1a4  0800e1a4  0000f1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1ac  0800e1ac  0001018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1ac  0800e1ac  0000f1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e1b0  0800e1b0  0000f1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  0800e1b4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001018c  2**0
                  CONTENTS
 10 .bss          00002a0c  2000018c  2000018c  0001018c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002b98  20002b98  0001018c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021e39  00000000  00000000  000101bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000542f  00000000  00000000  00031ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e80  00000000  00000000  00037428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001768  00000000  00000000  000392a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025270  00000000  00000000  0003aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002983f  00000000  00000000  0005fc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3224  00000000  00000000  000894bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015c6e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f00  00000000  00000000  0015c728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00164628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da70 	.word	0x0800da70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	0800da70 	.word	0x0800da70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	@ (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	@ (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	@ 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	200001a8 	.word	0x200001a8
 8000210:	200001fc 	.word	0x200001fc

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b090      	sub	sp, #64	@ 0x40
 8000218:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f001 fc35 	bl	8001a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f863 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 fc15 	bl	8000a50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000226:	f000 fbd1 	bl	80009cc <MX_DMA_Init>
  MX_ADC3_Init();
 800022a:	f000 f98b 	bl	8000544 <MX_ADC3_Init>
  MX_COMP3_Init();
 800022e:	f000 fa59 	bl	80006e4 <MX_COMP3_Init>
  MX_COMP4_Init();
 8000232:	f000 fa85 	bl	8000740 <MX_COMP4_Init>
  MX_COMP5_Init();
 8000236:	f000 fab1 	bl	800079c <MX_COMP5_Init>
  MX_COMP6_Init();
 800023a:	f000 fadd 	bl	80007f8 <MX_COMP6_Init>
  MX_ADC1_Init();
 800023e:	f000 f8b3 	bl	80003a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000242:	f000 f921 	bl	8000488 <MX_ADC2_Init>
  MX_ADC4_Init();
 8000246:	f000 f9ef 	bl	8000628 <MX_ADC4_Init>
  MX_I2C2_Init();
 800024a:	f000 fb03 	bl	8000854 <MX_I2C2_Init>
  MX_SPI1_Init();
 800024e:	f000 fb41 	bl	80008d4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000252:	f000 fb7d 	bl	8000950 <MX_SPI3_Init>





  ssd1306_Init();
 8000256:	f001 fa17 	bl	8001688 <ssd1306_Init>
  ssd1306_Fill(White);
 800025a:	2001      	movs	r0, #1
 800025c:	f001 fa7e 	bl	800175c <ssd1306_Fill>
  ssd1306_SetCursor(6, 20);
 8000260:	2114      	movs	r1, #20
 8000262:	2006      	movs	r0, #6
 8000264:	f001 fbc6 	bl	80019f4 <ssd1306_SetCursor>
  ssd1306_WriteString(startupmessage, Font_6x8, Black);
 8000268:	4b19      	ldr	r3, [pc, #100]	@ (80002d0 <main+0xbc>)
 800026a:	6818      	ldr	r0, [r3, #0]
 800026c:	4b19      	ldr	r3, [pc, #100]	@ (80002d4 <main+0xc0>)
 800026e:	2200      	movs	r2, #0
 8000270:	9200      	str	r2, [sp, #0]
 8000272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000274:	f001 fb98 	bl	80019a8 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000278:	f001 fa88 	bl	800178c <ssd1306_UpdateScreen>

  MX_USB_DEVICE_Init();
 800027c:	f00c ff04 	bl	800d088 <MX_USB_DEVICE_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of USB_Transmit */
  osThreadDef(USB_Transmit, StartUSB_Transmit, osPriorityNormal, 0, 128);
 8000280:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <main+0xc4>)
 8000282:	f107 041c 	add.w	r4, r7, #28
 8000286:	461d      	mov	r5, r3
 8000288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_TransmitHandle = osThreadCreate(osThread(USB_Transmit), NULL);
 8000294:	f107 031c 	add.w	r3, r7, #28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f00b fcbd 	bl	800bc1a <osThreadCreate>
 80002a0:	4603      	mov	r3, r0
 80002a2:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <main+0xc8>)
 80002a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_Write */
  osThreadDef(LED_Write, StartLED_Write, osPriorityLow, 0, 128);
 80002a6:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <main+0xcc>)
 80002a8:	463c      	mov	r4, r7
 80002aa:	461d      	mov	r5, r3
 80002ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_WriteHandle = osThreadCreate(osThread(LED_Write), NULL);
 80002b8:	463b      	mov	r3, r7
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f00b fcac 	bl	800bc1a <osThreadCreate>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a07      	ldr	r2, [pc, #28]	@ (80002e4 <main+0xd0>)
 80002c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002c8:	f00b fca0 	bl	800bc0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <main+0xb8>
 80002d0:	20000004 	.word	0x20000004
 80002d4:	0800e178 	.word	0x0800e178
 80002d8:	0800dab8 	.word	0x0800dab8
 80002dc:	20000828 	.word	0x20000828
 80002e0:	0800dae0 	.word	0x0800dae0
 80002e4:	2000082c 	.word	0x2000082c

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b09e      	sub	sp, #120	@ 0x78
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002f2:	2228      	movs	r2, #40	@ 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f00d fb8e 	bl	800da18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
 8000308:	60da      	str	r2, [r3, #12]
 800030a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800030c:	463b      	mov	r3, r7
 800030e:	223c      	movs	r2, #60	@ 0x3c
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f00d fb80 	bl	800da18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000318:	2303      	movs	r3, #3
 800031a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800031c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000320:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000322:	2301      	movs	r3, #1
 8000324:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000326:	2301      	movs	r3, #1
 8000328:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032a:	2310      	movs	r3, #16
 800032c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	2302      	movs	r3, #2
 8000330:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000332:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000336:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000338:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800033c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000342:	4618      	mov	r0, r3
 8000344:	f005 fb0a 	bl	800595c <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800034e:	f000 fcc5 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2302      	movs	r3, #2
 8000358:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000362:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000368:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f006 fb32 	bl	80069d8 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800037a:	f000 fcaf 	bl	8000cdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C2;
 800037e:	4b09      	ldr	r3, [pc, #36]	@ (80003a4 <SystemClock_Config+0xbc>)
 8000380:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000382:	2300      	movs	r3, #0
 8000384:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000386:	2300      	movs	r3, #0
 8000388:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	463b      	mov	r3, r7
 800038c:	4618      	mov	r0, r3
 800038e:	f006 fd55 	bl	8006e3c <HAL_RCCEx_PeriphCLKConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000398:	f000 fca0 	bl	8000cdc <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3778      	adds	r7, #120	@ 0x78
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	00020040 	.word	0x00020040

080003a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08a      	sub	sp, #40	@ 0x28
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003ae:	f107 031c 	add.w	r3, r7, #28
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
 80003c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80003d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80003d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003da:	4b2a      	ldr	r3, [pc, #168]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e0:	4b28      	ldr	r3, [pc, #160]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003e6:	4b27      	ldr	r3, [pc, #156]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ec:	4b25      	ldr	r3, [pc, #148]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f4:	4b23      	ldr	r3, [pc, #140]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003fa:	4b22      	ldr	r3, [pc, #136]	@ (8000484 <MX_ADC1_Init+0xdc>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000400:	4b20      	ldr	r3, [pc, #128]	@ (8000484 <MX_ADC1_Init+0xdc>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000406:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <MX_ADC1_Init+0xdc>)
 8000408:	2201      	movs	r2, #1
 800040a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800040c:	4b1d      	ldr	r3, [pc, #116]	@ (8000484 <MX_ADC1_Init+0xdc>)
 800040e:	2200      	movs	r2, #0
 8000410:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <MX_ADC1_Init+0xdc>)
 8000416:	2204      	movs	r2, #4
 8000418:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800041a:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <MX_ADC1_Init+0xdc>)
 800041c:	2200      	movs	r2, #0
 800041e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <MX_ADC1_Init+0xdc>)
 8000422:	2200      	movs	r2, #0
 8000424:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000426:	4817      	ldr	r0, [pc, #92]	@ (8000484 <MX_ADC1_Init+0xdc>)
 8000428:	f001 fba6 	bl	8001b78 <HAL_ADC_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000432:	f000 fc53 	bl	8000cdc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800043a:	f107 031c 	add.w	r3, r7, #28
 800043e:	4619      	mov	r1, r3
 8000440:	4810      	ldr	r0, [pc, #64]	@ (8000484 <MX_ADC1_Init+0xdc>)
 8000442:	f002 fb71 	bl	8002b28 <HAL_ADCEx_MultiModeConfigChannel>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800044c:	f000 fc46 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000450:	2305      	movs	r3, #5
 8000452:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000454:	2301      	movs	r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000458:	2300      	movs	r3, #0
 800045a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	4619      	mov	r1, r3
 800046c:	4805      	ldr	r0, [pc, #20]	@ (8000484 <MX_ADC1_Init+0xdc>)
 800046e:	f002 f871 	bl	8002554 <HAL_ADC_ConfigChannel>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000478:	f000 fc30 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800047c:	bf00      	nop
 800047e:	3728      	adds	r7, #40	@ 0x28
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200003fc 	.word	0x200003fc

08000488 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800048e:	463b      	mov	r3, r7
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
 800049c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800049e:	4b27      	ldr	r3, [pc, #156]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004a0:	4a27      	ldr	r2, [pc, #156]	@ (8000540 <MX_ADC2_Init+0xb8>)
 80004a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004a4:	4b25      	ldr	r3, [pc, #148]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004ac:	4b23      	ldr	r3, [pc, #140]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004b2:	4b22      	ldr	r3, [pc, #136]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004b8:	4b20      	ldr	r3, [pc, #128]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004be:	4b1f      	ldr	r3, [pc, #124]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004c6:	4b1d      	ldr	r3, [pc, #116]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004cc:	4b1b      	ldr	r3, [pc, #108]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d2:	4b1a      	ldr	r3, [pc, #104]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80004d8:	4b18      	ldr	r3, [pc, #96]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004da:	2201      	movs	r2, #1
 80004dc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80004de:	4b17      	ldr	r3, [pc, #92]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004e6:	4b15      	ldr	r3, [pc, #84]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004e8:	2204      	movs	r2, #4
 80004ea:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80004ec:	4b13      	ldr	r3, [pc, #76]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004f2:	4b12      	ldr	r3, [pc, #72]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004f8:	4810      	ldr	r0, [pc, #64]	@ (800053c <MX_ADC2_Init+0xb4>)
 80004fa:	f001 fb3d 	bl	8001b78 <HAL_ADC_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000504:	f000 fbea 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000508:	2303      	movs	r3, #3
 800050a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800050c:	2301      	movs	r3, #1
 800050e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000520:	463b      	mov	r3, r7
 8000522:	4619      	mov	r1, r3
 8000524:	4805      	ldr	r0, [pc, #20]	@ (800053c <MX_ADC2_Init+0xb4>)
 8000526:	f002 f815 	bl	8002554 <HAL_ADC_ConfigChannel>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000530:	f000 fbd4 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	2000044c 	.word	0x2000044c
 8000540:	50000100 	.word	0x50000100

08000544 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	@ 0x28
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
 8000564:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000566:	4b2e      	ldr	r3, [pc, #184]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000568:	4a2e      	ldr	r2, [pc, #184]	@ (8000624 <MX_ADC3_Init+0xe0>)
 800056a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800056c:	4b2c      	ldr	r3, [pc, #176]	@ (8000620 <MX_ADC3_Init+0xdc>)
 800056e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000572:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000574:	4b2a      	ldr	r3, [pc, #168]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800057a:	4b29      	ldr	r3, [pc, #164]	@ (8000620 <MX_ADC3_Init+0xdc>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000580:	4b27      	ldr	r3, [pc, #156]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000582:	2200      	movs	r2, #0
 8000584:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000586:	4b26      	ldr	r3, [pc, #152]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000588:	2200      	movs	r2, #0
 800058a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800058e:	4b24      	ldr	r3, [pc, #144]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000590:	2200      	movs	r2, #0
 8000592:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000594:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000596:	2201      	movs	r2, #1
 8000598:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800059a:	4b21      	ldr	r3, [pc, #132]	@ (8000620 <MX_ADC3_Init+0xdc>)
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80005a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80005a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005b0:	2204      	movs	r2, #4
 80005b2:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005ba:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005bc:	2200      	movs	r2, #0
 80005be:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005c0:	4817      	ldr	r0, [pc, #92]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005c2:	f001 fad9 	bl	8001b78 <HAL_ADC_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 80005cc:	f000 fb86 	bl	8000cdc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	4619      	mov	r1, r3
 80005da:	4811      	ldr	r0, [pc, #68]	@ (8000620 <MX_ADC3_Init+0xdc>)
 80005dc:	f002 faa4 	bl	8002b28 <HAL_ADCEx_MultiModeConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 80005e6:	f000 fb79 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4619      	mov	r1, r3
 8000606:	4806      	ldr	r0, [pc, #24]	@ (8000620 <MX_ADC3_Init+0xdc>)
 8000608:	f001 ffa4 	bl	8002554 <HAL_ADC_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000612:	f000 fb63 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	@ 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000049c 	.word	0x2000049c
 8000624:	50000400 	.word	0x50000400

08000628 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
 800063c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800063e:	4b27      	ldr	r3, [pc, #156]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000640:	4a27      	ldr	r2, [pc, #156]	@ (80006e0 <MX_ADC4_Init+0xb8>)
 8000642:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000644:	4b25      	ldr	r3, [pc, #148]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000646:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800064a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800064c:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <MX_ADC4_Init+0xb4>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000652:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000658:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <MX_ADC4_Init+0xb4>)
 800065a:	2200      	movs	r2, #0
 800065c:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800065e:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000666:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000668:	2200      	movs	r2, #0
 800066a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066c:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_ADC4_Init+0xb4>)
 800066e:	2201      	movs	r2, #1
 8000670:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000672:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000678:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <MX_ADC4_Init+0xb4>)
 800067a:	2201      	movs	r2, #1
 800067c:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000688:	2204      	movs	r2, #4
 800068a:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800068c:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_ADC4_Init+0xb4>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_ADC4_Init+0xb4>)
 8000694:	2200      	movs	r2, #0
 8000696:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000698:	4810      	ldr	r0, [pc, #64]	@ (80006dc <MX_ADC4_Init+0xb4>)
 800069a:	f001 fa6d 	bl	8001b78 <HAL_ADC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 80006a4:	f000 fb1a 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a8:	2303      	movs	r3, #3
 80006aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_ADC4_Init+0xb4>)
 80006c6:	f001 ff45 	bl	8002554 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 80006d0:	f000 fb04 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200004ec 	.word	0x200004ec
 80006e0:	50000500 	.word	0x50000500

080006e4 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 80006e8:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <MX_COMP3_Init+0x54>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	@ (800073c <MX_COMP3_Init+0x58>)
 80006ec:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_COMP3_Init+0x54>)
 80006f0:	2240      	movs	r2, #64	@ 0x40
 80006f2:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80006f4:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <MX_COMP3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_COMP3_Init+0x54>)
 80006fc:	227f      	movs	r2, #127	@ 0x7f
 80006fe:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000700:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <MX_COMP3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_COMP3_Init+0x54>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <MX_COMP3_Init+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hcomp3.Init.Mode = COMP_MODE_HIGHSPEED;
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_COMP3_Init+0x54>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  hcomp3.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <MX_COMP3_Init+0x54>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_COMP3_Init+0x54>)
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	@ (8000738 <MX_COMP3_Init+0x54>)
 8000726:	f002 fb57 	bl	8002dd8 <HAL_COMP_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_COMP3_Init+0x50>
  {
    Error_Handler();
 8000730:	f000 fad4 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000064c 	.word	0x2000064c
 800073c:	40010024 	.word	0x40010024

08000740 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <MX_COMP4_Init+0x58>)
 8000748:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_COMP4_Init+0x54>)
 800074c:	2270      	movs	r2, #112	@ 0x70
 800074e:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_NONE;
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000758:	227f      	movs	r2, #127	@ 0x7f
 800075a:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800075c:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <MX_COMP4_Init+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <MX_COMP4_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_COMP4_Init+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	@ (8000794 <MX_COMP4_Init+0x54>)
 8000782:	f002 fb29 	bl	8002dd8 <HAL_COMP_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_COMP4_Init+0x50>
  {
    Error_Handler();
 800078c:	f000 faa6 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000067c 	.word	0x2000067c
 8000798:	40010028 	.word	0x40010028

0800079c <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007a2:	4a14      	ldr	r2, [pc, #80]	@ (80007f4 <MX_COMP5_Init+0x58>)
 80007a4:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH2;
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007a8:	2250      	movs	r2, #80	@ 0x50
 80007aa:	605a      	str	r2, [r3, #4]
  hcomp5.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	609a      	str	r2, [r3, #8]
  hcomp5.Init.Output = COMP_OUTPUT_NONE;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007b4:	227f      	movs	r2, #127	@ 0x7f
 80007b6:	60da      	str	r2, [r3, #12]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hcomp5.Init.Mode = COMP_MODE_HIGHSPEED;
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hcomp5.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_COMP5_Init+0x54>)
 80007de:	f002 fafb 	bl	8002dd8 <HAL_COMP_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_COMP5_Init+0x50>
  {
    Error_Handler();
 80007e8:	f000 fa78 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200006ac 	.word	0x200006ac
 80007f4:	4001002c 	.word	0x4001002c

080007f8 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 80007fc:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_COMP6_Init+0x54>)
 80007fe:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <MX_COMP6_Init+0x58>)
 8000800:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 8000802:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_COMP6_Init+0x54>)
 8000804:	2270      	movs	r2, #112	@ 0x70
 8000806:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8000808:	4b10      	ldr	r3, [pc, #64]	@ (800084c <MX_COMP6_Init+0x54>)
 800080a:	2280      	movs	r2, #128	@ 0x80
 800080c:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_NONE;
 800080e:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_COMP6_Init+0x54>)
 8000810:	227f      	movs	r2, #127	@ 0x7f
 8000812:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000814:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <MX_COMP6_Init+0x54>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_COMP6_Init+0x54>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <MX_COMP6_Init+0x54>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hcomp6.Init.Mode = COMP_MODE_HIGHSPEED;
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_COMP6_Init+0x54>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hcomp6.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	@ (800084c <MX_COMP6_Init+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_COMP6_Init+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_COMP6_Init+0x54>)
 800083a:	f002 facd 	bl	8002dd8 <HAL_COMP_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_COMP6_Init+0x50>
  {
    Error_Handler();
 8000844:	f000 fa4a 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200006dc 	.word	0x200006dc
 8000850:	40010030 	.word	0x40010030

08000854 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000858:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	@ (80008cc <MX_I2C2_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 800085e:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000860:	4a1b      	ldr	r2, [pc, #108]	@ (80008d0 <MX_I2C2_Init+0x7c>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000864:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_I2C2_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800088e:	480e      	ldr	r0, [pc, #56]	@ (80008c8 <MX_I2C2_Init+0x74>)
 8000890:	f002 fee6 	bl	8003660 <HAL_I2C_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800089a:	f000 fa1f 	bl	8000cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089e:	2100      	movs	r1, #0
 80008a0:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <MX_I2C2_Init+0x74>)
 80008a2:	f003 fafb 	bl	8003e9c <HAL_I2CEx_ConfigAnalogFilter>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f000 fa16 	bl	8000cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_I2C2_Init+0x74>)
 80008b4:	f003 fb3d 	bl	8003f32 <HAL_I2CEx_ConfigDigitalFilter>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008be:	f000 fa0d 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000070c 	.word	0x2000070c
 80008cc:	40005800 	.word	0x40005800
 80008d0:	00201d2b 	.word	0x00201d2b

080008d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	@ (800094c <MX_SPI1_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008ee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80008f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000906:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_SPI1_Init+0x74>)
 800090a:	2208      	movs	r2, #8
 800090c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000922:	2207      	movs	r2, #7
 8000924:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_SPI1_Init+0x74>)
 800092e:	2208      	movs	r2, #8
 8000930:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000934:	f006 fc32 	bl	800719c <HAL_SPI_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 f9cd 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000760 	.word	0x20000760
 800094c:	40013000 	.word	0x40013000

08000950 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000954:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	@ (80009c8 <MX_SPI3_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <MX_SPI3_Init+0x74>)
 800095c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000960:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000968:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <MX_SPI3_Init+0x74>)
 800096a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800096e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000970:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000976:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_SPI3_Init+0x74>)
 800097e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000982:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000986:	2220      	movs	r2, #32
 8000988:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_SPI3_Init+0x74>)
 800098c:	2280      	movs	r2, #128	@ 0x80
 800098e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_SPI3_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_SPI3_Init+0x74>)
 800099e:	2207      	movs	r2, #7
 80009a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_SPI3_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_SPI3_Init+0x74>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_SPI3_Init+0x74>)
 80009b0:	f006 fbf4 	bl	800719c <HAL_SPI_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009ba:	f000 f98f 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200007c4 	.word	0x200007c4
 80009c8:	40003c00 	.word	0x40003c00

080009cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <MX_DMA_Init+0x80>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a4c <MX_DMA_Init+0x80>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <MX_DMA_Init+0x80>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ea:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <MX_DMA_Init+0x80>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a17      	ldr	r2, [pc, #92]	@ (8000a4c <MX_DMA_Init+0x80>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <MX_DMA_Init+0x80>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2105      	movs	r1, #5
 8000a06:	200b      	movs	r0, #11
 8000a08:	f002 fb48 	bl	800309c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a0c:	200b      	movs	r0, #11
 8000a0e:	f002 fb61 	bl	80030d4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2105      	movs	r1, #5
 8000a16:	2038      	movs	r0, #56	@ 0x38
 8000a18:	f002 fb40 	bl	800309c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000a1c:	2038      	movs	r0, #56	@ 0x38
 8000a1e:	f002 fb59 	bl	80030d4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2105      	movs	r1, #5
 8000a26:	2039      	movs	r0, #57	@ 0x39
 8000a28:	f002 fb38 	bl	800309c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000a2c:	2039      	movs	r0, #57	@ 0x39
 8000a2e:	f002 fb51 	bl	80030d4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2105      	movs	r1, #5
 8000a36:	203c      	movs	r0, #60	@ 0x3c
 8000a38:	f002 fb30 	bl	800309c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000a3c:	203c      	movs	r0, #60	@ 0x3c
 8000a3e:	f002 fb49 	bl	80030d4 <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	@ 0x28
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b58      	ldr	r3, [pc, #352]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a57      	ldr	r2, [pc, #348]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b55      	ldr	r3, [pc, #340]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a7e:	4b52      	ldr	r3, [pc, #328]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a51      	ldr	r2, [pc, #324]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a88:	6153      	str	r3, [r2, #20]
 8000a8a:	4b4f      	ldr	r3, [pc, #316]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b4c      	ldr	r3, [pc, #304]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a4b      	ldr	r2, [pc, #300]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b49      	ldr	r3, [pc, #292]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b46      	ldr	r3, [pc, #280]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a45      	ldr	r2, [pc, #276]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ab8:	6153      	str	r3, [r2, #20]
 8000aba:	4b43      	ldr	r3, [pc, #268]	@ (8000bc8 <MX_GPIO_Init+0x178>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_COM_GPIO_Port, INPUT_COM_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4840      	ldr	r0, [pc, #256]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000acc:	f002 fdb0 	bl	8003630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUTPUT_COM_Pin|TP906_Pin|TP907_Pin|MUX_A_Pin
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f640 31f1 	movw	r1, #3057	@ 0xbf1
 8000ad6:	483e      	ldr	r0, [pc, #248]	@ (8000bd0 <MX_GPIO_Init+0x180>)
 8000ad8:	f002 fdaa 	bl	8003630 <HAL_GPIO_WritePin>
                          |MUX_B_Pin|MUX_C_Pin|MUX_INHIBIT_Pin|UI_RCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP908_Pin|TX_SLEEP_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae6:	f002 fda3 	bl	8003630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP909_Pin|PUSH_2_Pin|TX_RCLK_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000af0:	4838      	ldr	r0, [pc, #224]	@ (8000bd4 <MX_GPIO_Init+0x184>)
 8000af2:	f002 fd9d 	bl	8003630 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OFFSET_CENTER_Pin OFFSET_RIGHT_Pin OFFSET_UP_Pin SCALE_B_Pin
                           SCALE_A_Pin SCALE_PUSH_Pin */
  GPIO_InitStruct.Pin = OFFSET_CENTER_Pin|OFFSET_RIGHT_Pin|OFFSET_UP_Pin|SCALE_B_Pin
 8000af6:	f24e 030e 	movw	r3, #57358	@ 0xe00e
 8000afa:	617b      	str	r3, [r7, #20]
                          |SCALE_A_Pin|SCALE_PUSH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4831      	ldr	r0, [pc, #196]	@ (8000bd0 <MX_GPIO_Init+0x180>)
 8000b0c:	f002 fc16 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_COM_Pin */
  GPIO_InitStruct.Pin = INPUT_COM_Pin;
 8000b10:	2302      	movs	r3, #2
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_COM_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4829      	ldr	r0, [pc, #164]	@ (8000bcc <MX_GPIO_Init+0x17c>)
 8000b28:	f002 fc08 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_COM_Pin TP906_Pin TP907_Pin MUX_A_Pin
                           MUX_B_Pin MUX_C_Pin MUX_INHIBIT_Pin UI_RCLK_Pin */
  GPIO_InitStruct.Pin = OUTPUT_COM_Pin|TP906_Pin|TP907_Pin|MUX_A_Pin
 8000b2c:	f640 33f1 	movw	r3, #3057	@ 0xbf1
 8000b30:	617b      	str	r3, [r7, #20]
                          |MUX_B_Pin|MUX_C_Pin|MUX_INHIBIT_Pin|UI_RCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4822      	ldr	r0, [pc, #136]	@ (8000bd0 <MX_GPIO_Init+0x180>)
 8000b46:	f002 fbf9 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP908_Pin TX_SLEEP_Pin */
  GPIO_InitStruct.Pin = TP908_Pin|TX_SLEEP_Pin;
 8000b4a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b66:	f002 fbe9 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP909_Pin PUSH_2_Pin TX_RCLK_Pin */
  GPIO_InitStruct.Pin = TP909_Pin|PUSH_2_Pin|TX_RCLK_Pin;
 8000b6a:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4814      	ldr	r0, [pc, #80]	@ (8000bd4 <MX_GPIO_Init+0x184>)
 8000b84:	f002 fbda 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_1_Pin */
  GPIO_InitStruct.Pin = PUSH_1_Pin;
 8000b88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_1_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba0:	f002 fbcc 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_3_Pin OFFSET_UPB8_Pin OFFSET_DOWN_Pin */
  GPIO_InitStruct.Pin = PUSH_3_Pin|OFFSET_UPB8_Pin|OFFSET_DOWN_Pin;
 8000ba4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <MX_GPIO_Init+0x184>)
 8000bba:	f002 fbbf 	bl	800333c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	@ 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	48001400 	.word	0x48001400
 8000bd0:	48000800 	.word	0x48000800
 8000bd4:	48000400 	.word	0x48000400

08000bd8 <StartUSB_Transmit>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUSB_Transmit */
void StartUSB_Transmit(void const * argument)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000be0:	f00c fa52 	bl	800d088 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  osDelay(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f00b f864 	bl	800bcb2 <osDelay>
  for(;;)
  {
	  osDelay(1);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f00b f861 	bl	800bcb2 <osDelay>
	  if (CDC_Transmit_FS((uint8_t *) usbdata, strlen(usbdata)) != USBD_OK) {
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <StartUSB_Transmit+0x7c>)
 8000bf2:	681c      	ldr	r4, [r3, #0]
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <StartUSB_Transmit+0x7c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fae9 	bl	80001d0 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	4619      	mov	r1, r3
 8000c04:	4620      	mov	r0, r4
 8000c06:	f00c fafd 	bl	800d204 <CDC_Transmit_FS>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d010      	beq.n	8000c32 <StartUSB_Transmit+0x5a>
		  ssd1306_Fill(White);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f000 fda3 	bl	800175c <ssd1306_Fill>
	  	  ssd1306_SetCursor(6, 20);
 8000c16:	2114      	movs	r1, #20
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f000 feeb 	bl	80019f4 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("COM not established", Font_6x8, Black);
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <StartUSB_Transmit+0x80>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	9200      	str	r2, [sp, #0]
 8000c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c26:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <StartUSB_Transmit+0x84>)
 8000c28:	f000 febe 	bl	80019a8 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8000c2c:	f000 fdae 	bl	800178c <ssd1306_UpdateScreen>
 8000c30:	e7db      	b.n	8000bea <StartUSB_Transmit+0x12>
	  }
	  else {
		  ssd1306_Fill(White);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f000 fd92 	bl	800175c <ssd1306_Fill>
	  	  ssd1306_SetCursor(6, 20);
 8000c38:	2114      	movs	r1, #20
 8000c3a:	2006      	movs	r0, #6
 8000c3c:	f000 feda 	bl	80019f4 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("COM established", Font_6x8, Black);
 8000c40:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <StartUSB_Transmit+0x80>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	9200      	str	r2, [sp, #0]
 8000c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c48:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <StartUSB_Transmit+0x88>)
 8000c4a:	f000 fead 	bl	80019a8 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8000c4e:	f000 fd9d 	bl	800178c <ssd1306_UpdateScreen>
	  osDelay(1);
 8000c52:	e7ca      	b.n	8000bea <StartUSB_Transmit+0x12>
 8000c54:	20000000 	.word	0x20000000
 8000c58:	0800e178 	.word	0x0800e178
 8000c5c:	0800dafc 	.word	0x0800dafc
 8000c60:	0800db10 	.word	0x0800db10

08000c64 <StartLED_Write>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_Write */
void StartLED_Write(void const * argument)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_Write */
  /* Infinite loop */
  for(;;)
  {
	uint8_t current_leds = led_status & 0b11110000;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <StartLED_Write+0x48>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	f023 030f 	bic.w	r3, r3, #15
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi3, &current_leds, 1, HAL_MAX_DELAY);
 8000c78:	f107 010f 	add.w	r1, r7, #15
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	2201      	movs	r2, #1
 8000c82:	480b      	ldr	r0, [pc, #44]	@ (8000cb0 <StartLED_Write+0x4c>)
 8000c84:	f006 fb35 	bl	80072f2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, UI_RCLK_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c8e:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <StartLED_Write+0x50>)
 8000c90:	f002 fcce 	bl	8003630 <HAL_GPIO_WritePin>
    osDelay(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f00b f80c 	bl	800bcb2 <osDelay>
	HAL_GPIO_WritePin(GPIOC, UI_RCLK_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <StartLED_Write+0x50>)
 8000ca2:	f002 fcc5 	bl	8003630 <HAL_GPIO_WritePin>
  {
 8000ca6:	bf00      	nop
 8000ca8:	e7e0      	b.n	8000c6c <StartLED_Write+0x8>
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	200007c4 	.word	0x200007c4
 8000cb4:	48000800 	.word	0x48000800

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cca:	f000 fef3 	bl	8001ab4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40012c00 	.word	0x40012c00

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <Error_Handler+0x8>

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	4a10      	ldr	r2, [pc, #64]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6193      	str	r3, [r2, #24]
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	61d3      	str	r3, [r2, #28]
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	210f      	movs	r1, #15
 8000d22:	f06f 0001 	mvn.w	r0, #1
 8000d26:	f002 f9b9 	bl	800309c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b090      	sub	sp, #64	@ 0x40
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d58:	d15e      	bne.n	8000e18 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d5a:	4b94      	ldr	r3, [pc, #592]	@ (8000fac <HAL_ADC_MspInit+0x274>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	4a92      	ldr	r2, [pc, #584]	@ (8000fac <HAL_ADC_MspInit+0x274>)
 8000d62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d64:	4b91      	ldr	r3, [pc, #580]	@ (8000fac <HAL_ADC_MspInit+0x274>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10b      	bne.n	8000d84 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d6c:	4b90      	ldr	r3, [pc, #576]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	4a8f      	ldr	r2, [pc, #572]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	6153      	str	r3, [r2, #20]
 8000d78:	4b8d      	ldr	r3, [pc, #564]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d84:	4b8a      	ldr	r3, [pc, #552]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	4a89      	ldr	r2, [pc, #548]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000d8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d8e:	6153      	str	r3, [r2, #20]
 8000d90:	4b87      	ldr	r3, [pc, #540]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = RX1_ADC_Pin;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da0:	2303      	movs	r3, #3
 8000da2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX1_ADC_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dac:	4619      	mov	r1, r3
 8000dae:	4881      	ldr	r0, [pc, #516]	@ (8000fb4 <HAL_ADC_MspInit+0x27c>)
 8000db0:	f002 fac4 	bl	800333c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000db4:	4b80      	ldr	r3, [pc, #512]	@ (8000fb8 <HAL_ADC_MspInit+0x280>)
 8000db6:	4a81      	ldr	r2, [pc, #516]	@ (8000fbc <HAL_ADC_MspInit+0x284>)
 8000db8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dba:	4b7f      	ldr	r3, [pc, #508]	@ (8000fb8 <HAL_ADC_MspInit+0x280>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc0:	4b7d      	ldr	r3, [pc, #500]	@ (8000fb8 <HAL_ADC_MspInit+0x280>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dc6:	4b7c      	ldr	r3, [pc, #496]	@ (8000fb8 <HAL_ADC_MspInit+0x280>)
 8000dc8:	2280      	movs	r2, #128	@ 0x80
 8000dca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dcc:	4b7a      	ldr	r3, [pc, #488]	@ (8000fb8 <HAL_ADC_MspInit+0x280>)
 8000dce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dd2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd4:	4b78      	ldr	r3, [pc, #480]	@ (8000fb8 <HAL_ADC_MspInit+0x280>)
 8000dd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dda:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ddc:	4b76      	ldr	r3, [pc, #472]	@ (8000fb8 <HAL_ADC_MspInit+0x280>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000de2:	4b75      	ldr	r3, [pc, #468]	@ (8000fb8 <HAL_ADC_MspInit+0x280>)
 8000de4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000de8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dea:	4873      	ldr	r0, [pc, #460]	@ (8000fb8 <HAL_ADC_MspInit+0x280>)
 8000dec:	f002 f980 	bl	80030f0 <HAL_DMA_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000df6:	f7ff ff71 	bl	8000cdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a6e      	ldr	r2, [pc, #440]	@ (8000fb8 <HAL_ADC_MspInit+0x280>)
 8000dfe:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e00:	4a6d      	ldr	r2, [pc, #436]	@ (8000fb8 <HAL_ADC_MspInit+0x280>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2105      	movs	r1, #5
 8000e0a:	2012      	movs	r0, #18
 8000e0c:	f002 f946 	bl	800309c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e10:	2012      	movs	r0, #18
 8000e12:	f002 f95f 	bl	80030d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000e16:	e147      	b.n	80010a8 <HAL_ADC_MspInit+0x370>
  else if(hadc->Instance==ADC2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a68      	ldr	r2, [pc, #416]	@ (8000fc0 <HAL_ADC_MspInit+0x288>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d15f      	bne.n	8000ee2 <HAL_ADC_MspInit+0x1aa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e22:	4b62      	ldr	r3, [pc, #392]	@ (8000fac <HAL_ADC_MspInit+0x274>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	3301      	adds	r3, #1
 8000e28:	4a60      	ldr	r2, [pc, #384]	@ (8000fac <HAL_ADC_MspInit+0x274>)
 8000e2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e2c:	4b5f      	ldr	r3, [pc, #380]	@ (8000fac <HAL_ADC_MspInit+0x274>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d10b      	bne.n	8000e4c <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e34:	4b5e      	ldr	r3, [pc, #376]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	4a5d      	ldr	r2, [pc, #372]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	6153      	str	r3, [r2, #20]
 8000e40:	4b5b      	ldr	r3, [pc, #364]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	623b      	str	r3, [r7, #32]
 8000e4a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b58      	ldr	r3, [pc, #352]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	4a57      	ldr	r2, [pc, #348]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e56:	6153      	str	r3, [r2, #20]
 8000e58:	4b55      	ldr	r3, [pc, #340]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = RX3_ADC_Pin;
 8000e64:	2340      	movs	r3, #64	@ 0x40
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX3_ADC_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e74:	4619      	mov	r1, r3
 8000e76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7a:	f002 fa5f 	bl	800333c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8000e7e:	4b51      	ldr	r3, [pc, #324]	@ (8000fc4 <HAL_ADC_MspInit+0x28c>)
 8000e80:	4a51      	ldr	r2, [pc, #324]	@ (8000fc8 <HAL_ADC_MspInit+0x290>)
 8000e82:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e84:	4b4f      	ldr	r3, [pc, #316]	@ (8000fc4 <HAL_ADC_MspInit+0x28c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc4 <HAL_ADC_MspInit+0x28c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e90:	4b4c      	ldr	r3, [pc, #304]	@ (8000fc4 <HAL_ADC_MspInit+0x28c>)
 8000e92:	2280      	movs	r2, #128	@ 0x80
 8000e94:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e96:	4b4b      	ldr	r3, [pc, #300]	@ (8000fc4 <HAL_ADC_MspInit+0x28c>)
 8000e98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e9c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e9e:	4b49      	ldr	r3, [pc, #292]	@ (8000fc4 <HAL_ADC_MspInit+0x28c>)
 8000ea0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000ea6:	4b47      	ldr	r3, [pc, #284]	@ (8000fc4 <HAL_ADC_MspInit+0x28c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000eac:	4b45      	ldr	r3, [pc, #276]	@ (8000fc4 <HAL_ADC_MspInit+0x28c>)
 8000eae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000eb2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000eb4:	4843      	ldr	r0, [pc, #268]	@ (8000fc4 <HAL_ADC_MspInit+0x28c>)
 8000eb6:	f002 f91b 	bl	80030f0 <HAL_DMA_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 8000ec0:	f7ff ff0c 	bl	8000cdc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8000fc4 <HAL_ADC_MspInit+0x28c>)
 8000ec8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eca:	4a3e      	ldr	r2, [pc, #248]	@ (8000fc4 <HAL_ADC_MspInit+0x28c>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2105      	movs	r1, #5
 8000ed4:	2012      	movs	r0, #18
 8000ed6:	f002 f8e1 	bl	800309c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000eda:	2012      	movs	r0, #18
 8000edc:	f002 f8fa 	bl	80030d4 <HAL_NVIC_EnableIRQ>
}
 8000ee0:	e0e2      	b.n	80010a8 <HAL_ADC_MspInit+0x370>
  else if(hadc->Instance==ADC3)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a39      	ldr	r2, [pc, #228]	@ (8000fcc <HAL_ADC_MspInit+0x294>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d179      	bne.n	8000fe0 <HAL_ADC_MspInit+0x2a8>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000eec:	4b38      	ldr	r3, [pc, #224]	@ (8000fd0 <HAL_ADC_MspInit+0x298>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4a37      	ldr	r2, [pc, #220]	@ (8000fd0 <HAL_ADC_MspInit+0x298>)
 8000ef4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000ef6:	4b36      	ldr	r3, [pc, #216]	@ (8000fd0 <HAL_ADC_MspInit+0x298>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d10b      	bne.n	8000f16 <HAL_ADC_MspInit+0x1de>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000efe:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	4a2b      	ldr	r2, [pc, #172]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000f04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000f08:	6153      	str	r3, [r2, #20]
 8000f0a:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b26      	ldr	r3, [pc, #152]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a25      	ldr	r2, [pc, #148]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <HAL_ADC_MspInit+0x278>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RX2_ADC_Pin;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX2_ADC_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4824      	ldr	r0, [pc, #144]	@ (8000fd4 <HAL_ADC_MspInit+0x29c>)
 8000f42:	f002 f9fb 	bl	800333c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8000f46:	4b24      	ldr	r3, [pc, #144]	@ (8000fd8 <HAL_ADC_MspInit+0x2a0>)
 8000f48:	4a24      	ldr	r2, [pc, #144]	@ (8000fdc <HAL_ADC_MspInit+0x2a4>)
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <HAL_ADC_MspInit+0x2a0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f52:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <HAL_ADC_MspInit+0x2a0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <HAL_ADC_MspInit+0x2a0>)
 8000f5a:	2280      	movs	r2, #128	@ 0x80
 8000f5c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <HAL_ADC_MspInit+0x2a0>)
 8000f60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f64:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <HAL_ADC_MspInit+0x2a0>)
 8000f68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f6c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <HAL_ADC_MspInit+0x2a0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f74:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <HAL_ADC_MspInit+0x2a0>)
 8000f76:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000f7c:	4816      	ldr	r0, [pc, #88]	@ (8000fd8 <HAL_ADC_MspInit+0x2a0>)
 8000f7e:	f002 f8b7 	bl	80030f0 <HAL_DMA_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_ADC_MspInit+0x254>
      Error_Handler();
 8000f88:	f7ff fea8 	bl	8000cdc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <HAL_ADC_MspInit+0x2a0>)
 8000f90:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f92:	4a11      	ldr	r2, [pc, #68]	@ (8000fd8 <HAL_ADC_MspInit+0x2a0>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2105      	movs	r1, #5
 8000f9c:	202f      	movs	r0, #47	@ 0x2f
 8000f9e:	f002 f87d 	bl	800309c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000fa2:	202f      	movs	r0, #47	@ 0x2f
 8000fa4:	f002 f896 	bl	80030d4 <HAL_NVIC_EnableIRQ>
}
 8000fa8:	e07e      	b.n	80010a8 <HAL_ADC_MspInit+0x370>
 8000faa:	bf00      	nop
 8000fac:	20000830 	.word	0x20000830
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48001400 	.word	0x48001400
 8000fb8:	2000053c 	.word	0x2000053c
 8000fbc:	40020008 	.word	0x40020008
 8000fc0:	50000100 	.word	0x50000100
 8000fc4:	20000580 	.word	0x20000580
 8000fc8:	40020408 	.word	0x40020408
 8000fcc:	50000400 	.word	0x50000400
 8000fd0:	20000834 	.word	0x20000834
 8000fd4:	48000400 	.word	0x48000400
 8000fd8:	200005c4 	.word	0x200005c4
 8000fdc:	40020458 	.word	0x40020458
  else if(hadc->Instance==ADC4)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a32      	ldr	r2, [pc, #200]	@ (80010b0 <HAL_ADC_MspInit+0x378>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d15e      	bne.n	80010a8 <HAL_ADC_MspInit+0x370>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000fea:	4b32      	ldr	r3, [pc, #200]	@ (80010b4 <HAL_ADC_MspInit+0x37c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	4a30      	ldr	r2, [pc, #192]	@ (80010b4 <HAL_ADC_MspInit+0x37c>)
 8000ff2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80010b4 <HAL_ADC_MspInit+0x37c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d10b      	bne.n	8001014 <HAL_ADC_MspInit+0x2dc>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80010b8 <HAL_ADC_MspInit+0x380>)
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	4a2d      	ldr	r2, [pc, #180]	@ (80010b8 <HAL_ADC_MspInit+0x380>)
 8001002:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001006:	6153      	str	r3, [r2, #20]
 8001008:	4b2b      	ldr	r3, [pc, #172]	@ (80010b8 <HAL_ADC_MspInit+0x380>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b28      	ldr	r3, [pc, #160]	@ (80010b8 <HAL_ADC_MspInit+0x380>)
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	4a27      	ldr	r2, [pc, #156]	@ (80010b8 <HAL_ADC_MspInit+0x380>)
 800101a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800101e:	6153      	str	r3, [r2, #20]
 8001020:	4b25      	ldr	r3, [pc, #148]	@ (80010b8 <HAL_ADC_MspInit+0x380>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX4_ADC_Pin;
 800102c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001030:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001032:	2303      	movs	r3, #3
 8001034:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX4_ADC_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800103e:	4619      	mov	r1, r3
 8001040:	481e      	ldr	r0, [pc, #120]	@ (80010bc <HAL_ADC_MspInit+0x384>)
 8001042:	f002 f97b 	bl	800333c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8001046:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <HAL_ADC_MspInit+0x388>)
 8001048:	4a1e      	ldr	r2, [pc, #120]	@ (80010c4 <HAL_ADC_MspInit+0x38c>)
 800104a:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800104c:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <HAL_ADC_MspInit+0x388>)
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001052:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <HAL_ADC_MspInit+0x388>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <HAL_ADC_MspInit+0x388>)
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <HAL_ADC_MspInit+0x388>)
 8001060:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001064:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_ADC_MspInit+0x388>)
 8001068:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800106c:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 800106e:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <HAL_ADC_MspInit+0x388>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_ADC_MspInit+0x388>)
 8001076:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800107a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800107c:	4810      	ldr	r0, [pc, #64]	@ (80010c0 <HAL_ADC_MspInit+0x388>)
 800107e:	f002 f837 	bl	80030f0 <HAL_DMA_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_ADC_MspInit+0x354>
      Error_Handler();
 8001088:	f7ff fe28 	bl	8000cdc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a0c      	ldr	r2, [pc, #48]	@ (80010c0 <HAL_ADC_MspInit+0x388>)
 8001090:	639a      	str	r2, [r3, #56]	@ 0x38
 8001092:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <HAL_ADC_MspInit+0x388>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC4_IRQn, 5, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2105      	movs	r1, #5
 800109c:	203d      	movs	r0, #61	@ 0x3d
 800109e:	f001 fffd 	bl	800309c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 80010a2:	203d      	movs	r0, #61	@ 0x3d
 80010a4:	f002 f816 	bl	80030d4 <HAL_NVIC_EnableIRQ>
}
 80010a8:	bf00      	nop
 80010aa:	3740      	adds	r7, #64	@ 0x40
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	50000500 	.word	0x50000500
 80010b4:	20000834 	.word	0x20000834
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	20000608 	.word	0x20000608
 80010c4:	4002041c 	.word	0x4002041c

080010c8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	@ 0x38
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a56      	ldr	r2, [pc, #344]	@ (8001240 <HAL_COMP_MspInit+0x178>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d132      	bne.n	8001150 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b56      	ldr	r3, [pc, #344]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	4a55      	ldr	r2, [pc, #340]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f4:	6153      	str	r3, [r2, #20]
 80010f6:	4b53      	ldr	r3, [pc, #332]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	623b      	str	r3, [r7, #32]
 8001100:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b50      	ldr	r3, [pc, #320]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	4a4f      	ldr	r2, [pc, #316]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 8001108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800110c:	6153      	str	r3, [r2, #20]
 800110e:	4b4d      	ldr	r3, [pc, #308]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
    /**COMP3 GPIO Configuration
    PA4     ------> COMP3_INM
    PB14     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = RX1_COMP_Pin;
 800111a:	2310      	movs	r3, #16
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RX1_COMP_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001130:	f002 f904 	bl	800333c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VREFB14_Pin;
 8001134:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VREFB14_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	483f      	ldr	r0, [pc, #252]	@ (8001248 <HAL_COMP_MspInit+0x180>)
 800114a:	f002 f8f7 	bl	800333c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 800114e:	e073      	b.n	8001238 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP4)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a3d      	ldr	r2, [pc, #244]	@ (800124c <HAL_COMP_MspInit+0x184>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d118      	bne.n	800118c <HAL_COMP_MspInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b3a      	ldr	r3, [pc, #232]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	4a39      	ldr	r2, [pc, #228]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 8001160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001164:	6153      	str	r3, [r2, #20]
 8001166:	4b37      	ldr	r3, [pc, #220]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RX2_COMP_Pin|VREF_Pin;
 8001172:	2305      	movs	r3, #5
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4830      	ldr	r0, [pc, #192]	@ (8001248 <HAL_COMP_MspInit+0x180>)
 8001186:	f002 f8d9 	bl	800333c <HAL_GPIO_Init>
}
 800118a:	e055      	b.n	8001238 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP5)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a2f      	ldr	r2, [pc, #188]	@ (8001250 <HAL_COMP_MspInit+0x188>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d132      	bne.n	80011fc <HAL_COMP_MspInit+0x134>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a2a      	ldr	r2, [pc, #168]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 800119c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a0:	6153      	str	r3, [r2, #20]
 80011a2:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	4a24      	ldr	r2, [pc, #144]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011b8:	6153      	str	r3, [r2, #20]
 80011ba:	4b22      	ldr	r3, [pc, #136]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_COMP_Pin;
 80011c6:	2320      	movs	r3, #32
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ca:	2303      	movs	r3, #3
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RX3_COMP_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011dc:	f002 f8ae 	bl	800333c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VREFB13_Pin;
 80011e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VREFB13_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f2:	4619      	mov	r1, r3
 80011f4:	4814      	ldr	r0, [pc, #80]	@ (8001248 <HAL_COMP_MspInit+0x180>)
 80011f6:	f002 f8a1 	bl	800333c <HAL_GPIO_Init>
}
 80011fa:	e01d      	b.n	8001238 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP6)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <HAL_COMP_MspInit+0x18c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d118      	bne.n	8001238 <HAL_COMP_MspInit+0x170>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a0e      	ldr	r2, [pc, #56]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 800120c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <HAL_COMP_MspInit+0x17c>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX4_COMP_Pin|VREFB15_Pin;
 800121e:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001224:	2303      	movs	r3, #3
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <HAL_COMP_MspInit+0x180>)
 8001234:	f002 f882 	bl	800333c <HAL_GPIO_Init>
}
 8001238:	bf00      	nop
 800123a:	3738      	adds	r7, #56	@ 0x38
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40010024 	.word	0x40010024
 8001244:	40021000 	.word	0x40021000
 8001248:	48000400 	.word	0x48000400
 800124c:	40010028 	.word	0x40010028
 8001250:	4001002c 	.word	0x4001002c
 8001254:	40010030 	.word	0x40010030

08001258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <HAL_I2C_MspInit+0x80>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d129      	bne.n	80012ce <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <HAL_I2C_MspInit+0x84>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <HAL_I2C_MspInit+0x84>)
 8001280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001284:	6153      	str	r3, [r2, #20]
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_I2C_MspInit+0x84>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8001292:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001298:	2312      	movs	r3, #18
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012a4:	2304      	movs	r3, #4
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b2:	f002 f843 	bl	800333c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_I2C_MspInit+0x84>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_I2C_MspInit+0x84>)
 80012bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_I2C_MspInit+0x84>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	@ 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40005800 	.word	0x40005800
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	@ 0x30
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a2e      	ldr	r2, [pc, #184]	@ (80013b8 <HAL_SPI_MspInit+0xd8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d128      	bne.n	8001354 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001302:	4b2e      	ldr	r3, [pc, #184]	@ (80013bc <HAL_SPI_MspInit+0xdc>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	4a2d      	ldr	r2, [pc, #180]	@ (80013bc <HAL_SPI_MspInit+0xdc>)
 8001308:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800130c:	6193      	str	r3, [r2, #24]
 800130e:	4b2b      	ldr	r3, [pc, #172]	@ (80013bc <HAL_SPI_MspInit+0xdc>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b28      	ldr	r3, [pc, #160]	@ (80013bc <HAL_SPI_MspInit+0xdc>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a27      	ldr	r2, [pc, #156]	@ (80013bc <HAL_SPI_MspInit+0xdc>)
 8001320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001324:	6153      	str	r3, [r2, #20]
 8001326:	4b25      	ldr	r3, [pc, #148]	@ (80013bc <HAL_SPI_MspInit+0xdc>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TX_CLK_Pin|TX_MOSI_Pin;
 8001332:	2328      	movs	r3, #40	@ 0x28
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001342:	2305      	movs	r3, #5
 8001344:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	481c      	ldr	r0, [pc, #112]	@ (80013c0 <HAL_SPI_MspInit+0xe0>)
 800134e:	f001 fff5 	bl	800333c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001352:	e02d      	b.n	80013b0 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a1a      	ldr	r2, [pc, #104]	@ (80013c4 <HAL_SPI_MspInit+0xe4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d128      	bne.n	80013b0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <HAL_SPI_MspInit+0xdc>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a16      	ldr	r2, [pc, #88]	@ (80013bc <HAL_SPI_MspInit+0xdc>)
 8001364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <HAL_SPI_MspInit+0xdc>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_SPI_MspInit+0xdc>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	4a10      	ldr	r2, [pc, #64]	@ (80013bc <HAL_SPI_MspInit+0xdc>)
 800137c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001380:	6153      	str	r3, [r2, #20]
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <HAL_SPI_MspInit+0xdc>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UI_SCK_Pin|UI_MOSI_Pin;
 800138e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013a0:	2306      	movs	r3, #6
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <HAL_SPI_MspInit+0xe8>)
 80013ac:	f001 ffc6 	bl	800333c <HAL_GPIO_Init>
}
 80013b0:	bf00      	nop
 80013b2:	3730      	adds	r7, #48	@ 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40013000 	.word	0x40013000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48000400 	.word	0x48000400
 80013c4:	40003c00 	.word	0x40003c00
 80013c8:	48000800 	.word	0x48000800

080013cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	@ 0x30
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001498 <HAL_InitTick+0xcc>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a2d      	ldr	r2, [pc, #180]	@ (8001498 <HAL_InitTick+0xcc>)
 80013e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001498 <HAL_InitTick+0xcc>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013f4:	f107 020c 	add.w	r2, r7, #12
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 fcea 	bl	8006dd8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001404:	f005 fcc6 	bl	8006d94 <HAL_RCC_GetPCLK2Freq>
 8001408:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800140a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800140c:	4a23      	ldr	r2, [pc, #140]	@ (800149c <HAL_InitTick+0xd0>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	0c9b      	lsrs	r3, r3, #18
 8001414:	3b01      	subs	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001418:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <HAL_InitTick+0xd4>)
 800141a:	4a22      	ldr	r2, [pc, #136]	@ (80014a4 <HAL_InitTick+0xd8>)
 800141c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800141e:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <HAL_InitTick+0xd4>)
 8001420:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001424:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001426:	4a1e      	ldr	r2, [pc, #120]	@ (80014a0 <HAL_InitTick+0xd4>)
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800142c:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <HAL_InitTick+0xd4>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <HAL_InitTick+0xd4>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_InitTick+0xd4>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800143e:	4818      	ldr	r0, [pc, #96]	@ (80014a0 <HAL_InitTick+0xd4>)
 8001440:	f006 fa30 	bl	80078a4 <HAL_TIM_Base_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800144a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800144e:	2b00      	cmp	r3, #0
 8001450:	d11b      	bne.n	800148a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001452:	4813      	ldr	r0, [pc, #76]	@ (80014a0 <HAL_InitTick+0xd4>)
 8001454:	f006 fa88 	bl	8007968 <HAL_TIM_Base_Start_IT>
 8001458:	4603      	mov	r3, r0
 800145a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800145e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001462:	2b00      	cmp	r3, #0
 8001464:	d111      	bne.n	800148a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001466:	2019      	movs	r0, #25
 8001468:	f001 fe34 	bl	80030d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b0f      	cmp	r3, #15
 8001470:	d808      	bhi.n	8001484 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001472:	2200      	movs	r2, #0
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	2019      	movs	r0, #25
 8001478:	f001 fe10 	bl	800309c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800147c:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <HAL_InitTick+0xdc>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e002      	b.n	800148a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800148a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800148e:	4618      	mov	r0, r3
 8001490:	3730      	adds	r7, #48	@ 0x30
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	431bde83 	.word	0x431bde83
 80014a0:	20000838 	.word	0x20000838
 80014a4:	40012c00 	.word	0x40012c00
 80014a8:	20000010 	.word	0x20000010

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <NMI_Handler+0x4>

080014b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <MemManage_Handler+0x4>

080014c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <DMA1_Channel1_IRQHandler+0x10>)
 80014ea:	f001 fe48 	bl	800317e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000053c 	.word	0x2000053c

080014f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014fc:	4803      	ldr	r0, [pc, #12]	@ (800150c <ADC1_2_IRQHandler+0x14>)
 80014fe:	f000 fd1b 	bl	8001f38 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001502:	4803      	ldr	r0, [pc, #12]	@ (8001510 <ADC1_2_IRQHandler+0x18>)
 8001504:	f000 fd18 	bl	8001f38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200003fc 	.word	0x200003fc
 8001510:	2000044c 	.word	0x2000044c

08001514 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800151a:	f002 fe43 	bl	80041a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200026a4 	.word	0x200026a4

08001528 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800152e:	f006 fa85 	bl	8007a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000838 	.word	0x20000838

0800153c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <ADC3_IRQHandler+0x10>)
 8001542:	f000 fcf9 	bl	8001f38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000049c 	.word	0x2000049c

08001550 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <DMA2_Channel1_IRQHandler+0x10>)
 8001556:	f001 fe12 	bl	800317e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000580 	.word	0x20000580

08001564 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <DMA2_Channel2_IRQHandler+0x10>)
 800156a:	f001 fe08 	bl	800317e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000608 	.word	0x20000608

08001578 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <DMA2_Channel5_IRQHandler+0x10>)
 800157e:	f001 fdfe 	bl	800317e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200005c4 	.word	0x200005c4

0800158c <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 interrupt.
  */
void ADC4_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <ADC4_IRQHandler+0x10>)
 8001592:	f000 fcd1 	bl	8001f38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200004ec 	.word	0x200004ec

080015a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015fc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c8:	f7ff ffea 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	@ (8001600 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	@ (8001604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001608 <LoopForever+0xe>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001610 <LoopForever+0x16>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f2:	f00c fa19 	bl	800da28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015f6:	f7fe fe0d 	bl	8000214 <main>

080015fa <LoopForever>:

LoopForever:
    b LoopForever
 80015fa:	e7fe      	b.n	80015fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001608:	0800e1b4 	.word	0x0800e1b4
  ldr r2, =_sbss
 800160c:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001610:	20002b98 	.word	0x20002b98

08001614 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <CAN_RX1_IRQHandler>

08001616 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af04      	add	r7, sp, #16
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2301      	movs	r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	2200      	movs	r2, #0
 8001640:	2178      	movs	r1, #120	@ 0x78
 8001642:	4803      	ldr	r0, [pc, #12]	@ (8001650 <ssd1306_WriteCommand+0x2c>)
 8001644:	f002 f8a8 	bl	8003798 <HAL_I2C_Mem_Write>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	2000070c 	.word	0x2000070c

08001654 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af04      	add	r7, sp, #16
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	f04f 32ff 	mov.w	r2, #4294967295
 8001666:	9202      	str	r2, [sp, #8]
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	2240      	movs	r2, #64	@ 0x40
 8001672:	2178      	movs	r1, #120	@ 0x78
 8001674:	4803      	ldr	r0, [pc, #12]	@ (8001684 <ssd1306_WriteData+0x30>)
 8001676:	f002 f88f 	bl	8003798 <HAL_I2C_Mem_Write>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000070c 	.word	0x2000070c

08001688 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800168c:	f7ff ffc3 	bl	8001616 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001690:	2064      	movs	r0, #100	@ 0x64
 8001692:	f000 fa2f 	bl	8001af4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001696:	2000      	movs	r0, #0
 8001698:	f000 f9d8 	bl	8001a4c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800169c:	2020      	movs	r0, #32
 800169e:	f7ff ffc1 	bl	8001624 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff ffbe 	bl	8001624 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016a8:	20b0      	movs	r0, #176	@ 0xb0
 80016aa:	f7ff ffbb 	bl	8001624 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 80016ae:	20c0      	movs	r0, #192	@ 0xc0
 80016b0:	f7ff ffb8 	bl	8001624 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff ffb5 	bl	8001624 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80016ba:	2010      	movs	r0, #16
 80016bc:	f7ff ffb2 	bl	8001624 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80016c0:	2040      	movs	r0, #64	@ 0x40
 80016c2:	f7ff ffaf 	bl	8001624 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80016c6:	20ff      	movs	r0, #255	@ 0xff
 80016c8:	f000 f9ac 	bl	8001a24 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80016cc:	20a1      	movs	r0, #161	@ 0xa1
 80016ce:	f7ff ffa9 	bl	8001624 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80016d2:	20a6      	movs	r0, #166	@ 0xa6
 80016d4:	f7ff ffa6 	bl	8001624 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80016d8:	20a8      	movs	r0, #168	@ 0xa8
 80016da:	f7ff ffa3 	bl	8001624 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80016de:	203f      	movs	r0, #63	@ 0x3f
 80016e0:	f7ff ffa0 	bl	8001624 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016e4:	20a4      	movs	r0, #164	@ 0xa4
 80016e6:	f7ff ff9d 	bl	8001624 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80016ea:	20d3      	movs	r0, #211	@ 0xd3
 80016ec:	f7ff ff9a 	bl	8001624 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff ff97 	bl	8001624 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80016f6:	20d5      	movs	r0, #213	@ 0xd5
 80016f8:	f7ff ff94 	bl	8001624 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80016fc:	20f0      	movs	r0, #240	@ 0xf0
 80016fe:	f7ff ff91 	bl	8001624 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001702:	20d9      	movs	r0, #217	@ 0xd9
 8001704:	f7ff ff8e 	bl	8001624 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001708:	2022      	movs	r0, #34	@ 0x22
 800170a:	f7ff ff8b 	bl	8001624 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800170e:	20da      	movs	r0, #218	@ 0xda
 8001710:	f7ff ff88 	bl	8001624 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001714:	2012      	movs	r0, #18
 8001716:	f7ff ff85 	bl	8001624 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800171a:	20db      	movs	r0, #219	@ 0xdb
 800171c:	f7ff ff82 	bl	8001624 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001720:	2020      	movs	r0, #32
 8001722:	f7ff ff7f 	bl	8001624 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001726:	208d      	movs	r0, #141	@ 0x8d
 8001728:	f7ff ff7c 	bl	8001624 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800172c:	2014      	movs	r0, #20
 800172e:	f7ff ff79 	bl	8001624 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001732:	2001      	movs	r0, #1
 8001734:	f000 f98a 	bl	8001a4c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001738:	2000      	movs	r0, #0
 800173a:	f000 f80f 	bl	800175c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800173e:	f000 f825 	bl	800178c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <ssd1306_Init+0xd0>)
 8001744:	2200      	movs	r2, #0
 8001746:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001748:	4b03      	ldr	r3, [pc, #12]	@ (8001758 <ssd1306_Init+0xd0>)
 800174a:	2200      	movs	r2, #0
 800174c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800174e:	4b02      	ldr	r3, [pc, #8]	@ (8001758 <ssd1306_Init+0xd0>)
 8001750:	2201      	movs	r2, #1
 8001752:	711a      	strb	r2, [r3, #4]
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000c84 	.word	0x20000c84

0800175c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <ssd1306_Fill+0x14>
 800176c:	2300      	movs	r3, #0
 800176e:	e000      	b.n	8001772 <ssd1306_Fill+0x16>
 8001770:	23ff      	movs	r3, #255	@ 0xff
 8001772:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001776:	4619      	mov	r1, r3
 8001778:	4803      	ldr	r0, [pc, #12]	@ (8001788 <ssd1306_Fill+0x2c>)
 800177a:	f00c f94d 	bl	800da18 <memset>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000884 	.word	0x20000884

0800178c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001792:	2300      	movs	r3, #0
 8001794:	71fb      	strb	r3, [r7, #7]
 8001796:	e016      	b.n	80017c6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	3b50      	subs	r3, #80	@ 0x50
 800179c:	b2db      	uxtb	r3, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff40 	bl	8001624 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff ff3d 	bl	8001624 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80017aa:	2010      	movs	r0, #16
 80017ac:	f7ff ff3a 	bl	8001624 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	01db      	lsls	r3, r3, #7
 80017b4:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <ssd1306_UpdateScreen+0x4c>)
 80017b6:	4413      	add	r3, r2
 80017b8:	2180      	movs	r1, #128	@ 0x80
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff4a 	bl	8001654 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	3301      	adds	r3, #1
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b07      	cmp	r3, #7
 80017ca:	d9e5      	bls.n	8001798 <ssd1306_UpdateScreen+0xc>
    }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000884 	.word	0x20000884

080017dc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	460b      	mov	r3, r1
 80017e8:	71bb      	strb	r3, [r7, #6]
 80017ea:	4613      	mov	r3, r2
 80017ec:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db3d      	blt.n	8001872 <ssd1306_DrawPixel+0x96>
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80017fa:	d83a      	bhi.n	8001872 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80017fc:	797b      	ldrb	r3, [r7, #5]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d11a      	bne.n	8001838 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001802:	79fa      	ldrb	r2, [r7, #7]
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	08db      	lsrs	r3, r3, #3
 8001808:	b2d8      	uxtb	r0, r3
 800180a:	4603      	mov	r3, r0
 800180c:	01db      	lsls	r3, r3, #7
 800180e:	4413      	add	r3, r2
 8001810:	4a1b      	ldr	r2, [pc, #108]	@ (8001880 <ssd1306_DrawPixel+0xa4>)
 8001812:	5cd3      	ldrb	r3, [r2, r3]
 8001814:	b25a      	sxtb	r2, r3
 8001816:	79bb      	ldrb	r3, [r7, #6]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	b25b      	sxtb	r3, r3
 8001824:	4313      	orrs	r3, r2
 8001826:	b259      	sxtb	r1, r3
 8001828:	79fa      	ldrb	r2, [r7, #7]
 800182a:	4603      	mov	r3, r0
 800182c:	01db      	lsls	r3, r3, #7
 800182e:	4413      	add	r3, r2
 8001830:	b2c9      	uxtb	r1, r1
 8001832:	4a13      	ldr	r2, [pc, #76]	@ (8001880 <ssd1306_DrawPixel+0xa4>)
 8001834:	54d1      	strb	r1, [r2, r3]
 8001836:	e01d      	b.n	8001874 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001838:	79fa      	ldrb	r2, [r7, #7]
 800183a:	79bb      	ldrb	r3, [r7, #6]
 800183c:	08db      	lsrs	r3, r3, #3
 800183e:	b2d8      	uxtb	r0, r3
 8001840:	4603      	mov	r3, r0
 8001842:	01db      	lsls	r3, r3, #7
 8001844:	4413      	add	r3, r2
 8001846:	4a0e      	ldr	r2, [pc, #56]	@ (8001880 <ssd1306_DrawPixel+0xa4>)
 8001848:	5cd3      	ldrb	r3, [r2, r3]
 800184a:	b25a      	sxtb	r2, r3
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	b25b      	sxtb	r3, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	b25b      	sxtb	r3, r3
 800185e:	4013      	ands	r3, r2
 8001860:	b259      	sxtb	r1, r3
 8001862:	79fa      	ldrb	r2, [r7, #7]
 8001864:	4603      	mov	r3, r0
 8001866:	01db      	lsls	r3, r3, #7
 8001868:	4413      	add	r3, r2
 800186a:	b2c9      	uxtb	r1, r1
 800186c:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <ssd1306_DrawPixel+0xa4>)
 800186e:	54d1      	strb	r1, [r2, r3]
 8001870:	e000      	b.n	8001874 <ssd1306_DrawPixel+0x98>
        return;
 8001872:	bf00      	nop
    }
}
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000884 	.word	0x20000884

08001884 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b089      	sub	sp, #36	@ 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	4604      	mov	r4, r0
 800188c:	4638      	mov	r0, r7
 800188e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001892:	4623      	mov	r3, r4
 8001894:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	2b1f      	cmp	r3, #31
 800189a:	d902      	bls.n	80018a2 <ssd1306_WriteChar+0x1e>
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	2b7e      	cmp	r3, #126	@ 0x7e
 80018a0:	d901      	bls.n	80018a6 <ssd1306_WriteChar+0x22>
        return 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e079      	b.n	800199a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <ssd1306_WriteChar+0x34>
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	3b20      	subs	r3, #32
 80018b2:	4413      	add	r3, r2
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	e000      	b.n	80018ba <ssd1306_WriteChar+0x36>
 80018b8:	783b      	ldrb	r3, [r7, #0]
 80018ba:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80018bc:	4b39      	ldr	r3, [pc, #228]	@ (80019a4 <ssd1306_WriteChar+0x120>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
 80018c4:	4413      	add	r3, r2
 80018c6:	2b80      	cmp	r3, #128	@ 0x80
 80018c8:	dc06      	bgt.n	80018d8 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80018ca:	4b36      	ldr	r3, [pc, #216]	@ (80019a4 <ssd1306_WriteChar+0x120>)
 80018cc:	885b      	ldrh	r3, [r3, #2]
 80018ce:	461a      	mov	r2, r3
 80018d0:	787b      	ldrb	r3, [r7, #1]
 80018d2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80018d4:	2b40      	cmp	r3, #64	@ 0x40
 80018d6:	dd01      	ble.n	80018dc <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	e05e      	b.n	800199a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	e04d      	b.n	800197e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	3b20      	subs	r3, #32
 80018e8:	7879      	ldrb	r1, [r7, #1]
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4619      	mov	r1, r3
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	440b      	add	r3, r1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	e036      	b.n	8001970 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d013      	beq.n	800193a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001912:	4b24      	ldr	r3, [pc, #144]	@ (80019a4 <ssd1306_WriteChar+0x120>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4413      	add	r3, r2
 800191e:	b2d8      	uxtb	r0, r3
 8001920:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <ssd1306_WriteChar+0x120>)
 8001922:	885b      	ldrh	r3, [r3, #2]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	4413      	add	r3, r2
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff ff52 	bl	80017dc <ssd1306_DrawPixel>
 8001938:	e017      	b.n	800196a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800193a:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <ssd1306_WriteChar+0x120>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4413      	add	r3, r2
 8001946:	b2d8      	uxtb	r0, r3
 8001948:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <ssd1306_WriteChar+0x120>)
 800194a:	885b      	ldrh	r3, [r3, #2]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b2d9      	uxtb	r1, r3
 8001956:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800195a:	2b00      	cmp	r3, #0
 800195c:	bf0c      	ite	eq
 800195e:	2301      	moveq	r3, #1
 8001960:	2300      	movne	r3, #0
 8001962:	b2db      	uxtb	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	f7ff ff39 	bl	80017dc <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	3301      	adds	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	429a      	cmp	r2, r3
 8001976:	d3c4      	bcc.n	8001902 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	3301      	adds	r3, #1
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	787b      	ldrb	r3, [r7, #1]
 8001980:	461a      	mov	r2, r3
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	4293      	cmp	r3, r2
 8001986:	d3ac      	bcc.n	80018e2 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <ssd1306_WriteChar+0x120>)
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4413      	add	r3, r2
 8001992:	b29a      	uxth	r2, r3
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <ssd1306_WriteChar+0x120>)
 8001996:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	@ 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000c84 	.word	0x20000c84

080019a8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	4638      	mov	r0, r7
 80019b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80019b6:	e013      	b.n	80019e0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	7818      	ldrb	r0, [r3, #0]
 80019bc:	7e3b      	ldrb	r3, [r7, #24]
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	463b      	mov	r3, r7
 80019c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c4:	f7ff ff5e 	bl	8001884 <ssd1306_WriteChar>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d002      	beq.n	80019da <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	e008      	b.n	80019ec <ssd1306_WriteString+0x44>
        }
        str++;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3301      	adds	r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e7      	bne.n	80019b8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	781b      	ldrb	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	460a      	mov	r2, r1
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <ssd1306_SetCursor+0x2c>)
 8001a0a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <ssd1306_SetCursor+0x2c>)
 8001a12:	805a      	strh	r2, [r3, #2]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	20000c84 	.word	0x20000c84

08001a24 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001a2e:	2381      	movs	r3, #129	@ 0x81
 8001a30:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fdf5 	bl	8001624 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fdf1 	bl	8001624 <ssd1306_WriteCommand>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001a5c:	23af      	movs	r3, #175	@ 0xaf
 8001a5e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <ssd1306_SetDisplayOn+0x38>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	715a      	strb	r2, [r3, #5]
 8001a66:	e004      	b.n	8001a72 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001a68:	23ae      	movs	r3, #174	@ 0xae
 8001a6a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <ssd1306_SetDisplayOn+0x38>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fdd5 	bl	8001624 <ssd1306_WriteCommand>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000c84 	.word	0x20000c84

08001a88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HAL_Init+0x28>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a07      	ldr	r2, [pc, #28]	@ (8001ab0 <HAL_Init+0x28>)
 8001a92:	f043 0310 	orr.w	r3, r3, #16
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f001 faf4 	bl	8003086 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9e:	200f      	movs	r0, #15
 8001aa0:	f7ff fc94 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7ff f920 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40022000 	.word	0x40022000

08001ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a04      	ldr	r2, [pc, #16]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000014 	.word	0x20000014
 8001ad8:	20000c8c 	.word	0x20000c8c

08001adc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <HAL_GetTick+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000c8c 	.word	0x20000c8c

08001af4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff ffee 	bl	8001adc <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d005      	beq.n	8001b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_Delay+0x44>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff ffde 	bl	8001adc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d8f7      	bhi.n	8001b1c <HAL_Delay+0x28>
  {
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000014 	.word	0x20000014

08001b3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b09a      	sub	sp, #104	@ 0x68
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e1c9      	b.n	8001f2c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d176      	bne.n	8001c98 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d152      	bne.n	8001c58 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff f8b3 	bl	8000d38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d13b      	bne.n	8001c58 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f001 f893 	bl	8002d0c <ADC_Disable>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d12f      	bne.n	8001c58 <HAL_ADC_Init+0xe0>
 8001bf8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d12b      	bne.n	8001c58 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c08:	f023 0302 	bic.w	r3, r3, #2
 8001c0c:	f043 0202 	orr.w	r2, r3, #2
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c22:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001c32:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c34:	4b86      	ldr	r3, [pc, #536]	@ (8001e50 <HAL_ADC_Init+0x2d8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a86      	ldr	r2, [pc, #536]	@ (8001e54 <HAL_ADC_Init+0x2dc>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	0c9a      	lsrs	r2, r3, #18
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c4a:	e002      	b.n	8001c52 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f9      	bne.n	8001c4c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c74:	d110      	bne.n	8001c98 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f023 0312 	bic.w	r3, r3, #18
 8001c7e:	f043 0210 	orr.w	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 8136 	bne.w	8001f12 <HAL_ADC_Init+0x39a>
 8001ca6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 8131 	bne.w	8001f12 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 8129 	bne.w	8001f12 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001cc8:	f043 0202 	orr.w	r2, r3, #2
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cd8:	d004      	beq.n	8001ce4 <HAL_ADC_Init+0x16c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a5e      	ldr	r2, [pc, #376]	@ (8001e58 <HAL_ADC_Init+0x2e0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADC_Init+0x170>
 8001ce4:	4b5d      	ldr	r3, [pc, #372]	@ (8001e5c <HAL_ADC_Init+0x2e4>)
 8001ce6:	e000      	b.n	8001cea <HAL_ADC_Init+0x172>
 8001ce8:	4b5d      	ldr	r3, [pc, #372]	@ (8001e60 <HAL_ADC_Init+0x2e8>)
 8001cea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cf4:	d102      	bne.n	8001cfc <HAL_ADC_Init+0x184>
 8001cf6:	4b58      	ldr	r3, [pc, #352]	@ (8001e58 <HAL_ADC_Init+0x2e0>)
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e01a      	b.n	8001d32 <HAL_ADC_Init+0x1ba>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a55      	ldr	r2, [pc, #340]	@ (8001e58 <HAL_ADC_Init+0x2e0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d103      	bne.n	8001d0e <HAL_ADC_Init+0x196>
 8001d06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e011      	b.n	8001d32 <HAL_ADC_Init+0x1ba>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a54      	ldr	r2, [pc, #336]	@ (8001e64 <HAL_ADC_Init+0x2ec>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d102      	bne.n	8001d1e <HAL_ADC_Init+0x1a6>
 8001d18:	4b53      	ldr	r3, [pc, #332]	@ (8001e68 <HAL_ADC_Init+0x2f0>)
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	e009      	b.n	8001d32 <HAL_ADC_Init+0x1ba>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a51      	ldr	r2, [pc, #324]	@ (8001e68 <HAL_ADC_Init+0x2f0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d102      	bne.n	8001d2e <HAL_ADC_Init+0x1b6>
 8001d28:	4b4e      	ldr	r3, [pc, #312]	@ (8001e64 <HAL_ADC_Init+0x2ec>)
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e001      	b.n	8001d32 <HAL_ADC_Init+0x1ba>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d108      	bne.n	8001d52 <HAL_ADC_Init+0x1da>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_Init+0x1da>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_ADC_Init+0x1dc>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11c      	bne.n	8001d92 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d010      	beq.n	8001d80 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d107      	bne.n	8001d7a <HAL_ADC_Init+0x202>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_Init+0x202>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_ADC_Init+0x204>
 8001d7a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d108      	bne.n	8001d92 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001d80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d90:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7e5b      	ldrb	r3, [r3, #25]
 8001d96:	035b      	lsls	r3, r3, #13
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d9c:	2a01      	cmp	r2, #1
 8001d9e:	d002      	beq.n	8001da6 <HAL_ADC_Init+0x22e>
 8001da0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001da4:	e000      	b.n	8001da8 <HAL_ADC_Init+0x230>
 8001da6:	2200      	movs	r2, #0
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001db8:	4313      	orrs	r3, r2
 8001dba:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d11b      	bne.n	8001dfe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7e5b      	ldrb	r3, [r3, #25]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	045a      	lsls	r2, r3, #17
 8001dd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dde:	663b      	str	r3, [r7, #96]	@ 0x60
 8001de0:	e00d      	b.n	8001dfe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001dea:	f043 0220 	orr.w	r2, r3, #32
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d03a      	beq.n	8001e7c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a16      	ldr	r2, [pc, #88]	@ (8001e64 <HAL_ADC_Init+0x2ec>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d004      	beq.n	8001e1a <HAL_ADC_Init+0x2a2>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <HAL_ADC_Init+0x2f0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d128      	bne.n	8001e6c <HAL_ADC_Init+0x2f4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001e22:	d012      	beq.n	8001e4a <HAL_ADC_Init+0x2d2>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e2c:	d00a      	beq.n	8001e44 <HAL_ADC_Init+0x2cc>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e32:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001e36:	d002      	beq.n	8001e3e <HAL_ADC_Init+0x2c6>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3c:	e018      	b.n	8001e70 <HAL_ADC_Init+0x2f8>
 8001e3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e42:	e015      	b.n	8001e70 <HAL_ADC_Init+0x2f8>
 8001e44:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001e48:	e012      	b.n	8001e70 <HAL_ADC_Init+0x2f8>
 8001e4a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001e4e:	e00f      	b.n	8001e70 <HAL_ADC_Init+0x2f8>
 8001e50:	2000000c 	.word	0x2000000c
 8001e54:	431bde83 	.word	0x431bde83
 8001e58:	50000100 	.word	0x50000100
 8001e5c:	50000300 	.word	0x50000300
 8001e60:	50000700 	.word	0x50000700
 8001e64:	50000400 	.word	0x50000400
 8001e68:	50000500 	.word	0x50000500
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e74:	4313      	orrs	r3, r2
 8001e76:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d114      	bne.n	8001eb4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e98:	f023 0302 	bic.w	r3, r3, #2
 8001e9c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7e1b      	ldrb	r3, [r3, #24]
 8001ea2:	039a      	lsls	r2, r3, #14
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4313      	orrs	r3, r2
 8001eae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	4b1e      	ldr	r3, [pc, #120]	@ (8001f34 <HAL_ADC_Init+0x3bc>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d10c      	bne.n	8001eea <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f023 010f 	bic.w	r1, r3, #15
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	1e5a      	subs	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ee8:	e007      	b.n	8001efa <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 020f 	bic.w	r2, r2, #15
 8001ef8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	f023 0303 	bic.w	r3, r3, #3
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f10:	e00a      	b.n	8001f28 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f023 0312 	bic.w	r3, r3, #18
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001f22:	2301      	movs	r3, #1
 8001f24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001f28:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3768      	adds	r7, #104	@ 0x68
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	fff0c007 	.word	0xfff0c007

08001f38 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x38>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10b      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80bc 	beq.w	80020f4 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80b6 	beq.w	80020f4 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d105      	bne.n	8001fa0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fa8:	d004      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x7c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a90      	ldr	r2, [pc, #576]	@ (80021f0 <HAL_ADC_IRQHandler+0x2b8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d106      	bne.n	8001fc2 <HAL_ADC_IRQHandler+0x8a>
 8001fb4:	4b8f      	ldr	r3, [pc, #572]	@ (80021f4 <HAL_ADC_IRQHandler+0x2bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d03e      	beq.n	800203e <HAL_ADC_IRQHandler+0x106>
 8001fc0:	e005      	b.n	8001fce <HAL_ADC_IRQHandler+0x96>
 8001fc2:	4b8d      	ldr	r3, [pc, #564]	@ (80021f8 <HAL_ADC_IRQHandler+0x2c0>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d037      	beq.n	800203e <HAL_ADC_IRQHandler+0x106>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fd6:	d004      	beq.n	8001fe2 <HAL_ADC_IRQHandler+0xaa>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a84      	ldr	r2, [pc, #528]	@ (80021f0 <HAL_ADC_IRQHandler+0x2b8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d106      	bne.n	8001ff0 <HAL_ADC_IRQHandler+0xb8>
 8001fe2:	4b84      	ldr	r3, [pc, #528]	@ (80021f4 <HAL_ADC_IRQHandler+0x2bc>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 031f 	and.w	r3, r3, #31
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d027      	beq.n	800203e <HAL_ADC_IRQHandler+0x106>
 8001fee:	e005      	b.n	8001ffc <HAL_ADC_IRQHandler+0xc4>
 8001ff0:	4b81      	ldr	r3, [pc, #516]	@ (80021f8 <HAL_ADC_IRQHandler+0x2c0>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2b05      	cmp	r3, #5
 8001ffa:	d020      	beq.n	800203e <HAL_ADC_IRQHandler+0x106>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002004:	d004      	beq.n	8002010 <HAL_ADC_IRQHandler+0xd8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a79      	ldr	r2, [pc, #484]	@ (80021f0 <HAL_ADC_IRQHandler+0x2b8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d106      	bne.n	800201e <HAL_ADC_IRQHandler+0xe6>
 8002010:	4b78      	ldr	r3, [pc, #480]	@ (80021f4 <HAL_ADC_IRQHandler+0x2bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	2b09      	cmp	r3, #9
 800201a:	d010      	beq.n	800203e <HAL_ADC_IRQHandler+0x106>
 800201c:	e005      	b.n	800202a <HAL_ADC_IRQHandler+0xf2>
 800201e:	4b76      	ldr	r3, [pc, #472]	@ (80021f8 <HAL_ADC_IRQHandler+0x2c0>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2b09      	cmp	r3, #9
 8002028:	d009      	beq.n	800203e <HAL_ADC_IRQHandler+0x106>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002032:	d004      	beq.n	800203e <HAL_ADC_IRQHandler+0x106>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a70      	ldr	r2, [pc, #448]	@ (80021fc <HAL_ADC_IRQHandler+0x2c4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d104      	bne.n	8002048 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	e00f      	b.n	8002068 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002050:	d004      	beq.n	800205c <HAL_ADC_IRQHandler+0x124>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a66      	ldr	r2, [pc, #408]	@ (80021f0 <HAL_ADC_IRQHandler+0x2b8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d102      	bne.n	8002062 <HAL_ADC_IRQHandler+0x12a>
 800205c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002060:	e000      	b.n	8002064 <HAL_ADC_IRQHandler+0x12c>
 8002062:	4b66      	ldr	r3, [pc, #408]	@ (80021fc <HAL_ADC_IRQHandler+0x2c4>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002072:	2b00      	cmp	r3, #0
 8002074:	d137      	bne.n	80020e6 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800207c:	2b00      	cmp	r3, #0
 800207e:	d132      	bne.n	80020e6 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d02d      	beq.n	80020e6 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d11a      	bne.n	80020ce <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 020c 	bic.w	r2, r2, #12
 80020a6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d112      	bne.n	80020e6 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80020cc:	e00b      	b.n	80020e6 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f043 0210 	orr.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fd28 	bl	8001b3c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	220c      	movs	r2, #12
 80020f2:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <HAL_ADC_IRQHandler+0x1d0>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10b      	bne.n	8002120 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8138 	beq.w	8002384 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8132 	beq.w	8002384 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002134:	d004      	beq.n	8002140 <HAL_ADC_IRQHandler+0x208>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a2d      	ldr	r2, [pc, #180]	@ (80021f0 <HAL_ADC_IRQHandler+0x2b8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d106      	bne.n	800214e <HAL_ADC_IRQHandler+0x216>
 8002140:	4b2c      	ldr	r3, [pc, #176]	@ (80021f4 <HAL_ADC_IRQHandler+0x2bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	2b00      	cmp	r3, #0
 800214a:	d03e      	beq.n	80021ca <HAL_ADC_IRQHandler+0x292>
 800214c:	e005      	b.n	800215a <HAL_ADC_IRQHandler+0x222>
 800214e:	4b2a      	ldr	r3, [pc, #168]	@ (80021f8 <HAL_ADC_IRQHandler+0x2c0>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2b00      	cmp	r3, #0
 8002158:	d037      	beq.n	80021ca <HAL_ADC_IRQHandler+0x292>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002162:	d004      	beq.n	800216e <HAL_ADC_IRQHandler+0x236>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a21      	ldr	r2, [pc, #132]	@ (80021f0 <HAL_ADC_IRQHandler+0x2b8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d106      	bne.n	800217c <HAL_ADC_IRQHandler+0x244>
 800216e:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <HAL_ADC_IRQHandler+0x2bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2b05      	cmp	r3, #5
 8002178:	d027      	beq.n	80021ca <HAL_ADC_IRQHandler+0x292>
 800217a:	e005      	b.n	8002188 <HAL_ADC_IRQHandler+0x250>
 800217c:	4b1e      	ldr	r3, [pc, #120]	@ (80021f8 <HAL_ADC_IRQHandler+0x2c0>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	2b05      	cmp	r3, #5
 8002186:	d020      	beq.n	80021ca <HAL_ADC_IRQHandler+0x292>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002190:	d004      	beq.n	800219c <HAL_ADC_IRQHandler+0x264>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a16      	ldr	r2, [pc, #88]	@ (80021f0 <HAL_ADC_IRQHandler+0x2b8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d106      	bne.n	80021aa <HAL_ADC_IRQHandler+0x272>
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <HAL_ADC_IRQHandler+0x2bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2b09      	cmp	r3, #9
 80021a6:	d010      	beq.n	80021ca <HAL_ADC_IRQHandler+0x292>
 80021a8:	e005      	b.n	80021b6 <HAL_ADC_IRQHandler+0x27e>
 80021aa:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <HAL_ADC_IRQHandler+0x2c0>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	2b09      	cmp	r3, #9
 80021b4:	d009      	beq.n	80021ca <HAL_ADC_IRQHandler+0x292>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021be:	d004      	beq.n	80021ca <HAL_ADC_IRQHandler+0x292>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0d      	ldr	r2, [pc, #52]	@ (80021fc <HAL_ADC_IRQHandler+0x2c4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d104      	bne.n	80021d4 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	e018      	b.n	8002206 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021dc:	d004      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x2b0>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a03      	ldr	r2, [pc, #12]	@ (80021f0 <HAL_ADC_IRQHandler+0x2b8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d10b      	bne.n	8002200 <HAL_ADC_IRQHandler+0x2c8>
 80021e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021ec:	e009      	b.n	8002202 <HAL_ADC_IRQHandler+0x2ca>
 80021ee:	bf00      	nop
 80021f0:	50000100 	.word	0x50000100
 80021f4:	50000300 	.word	0x50000300
 80021f8:	50000700 	.word	0x50000700
 80021fc:	50000400 	.word	0x50000400
 8002200:	4b92      	ldr	r3, [pc, #584]	@ (800244c <HAL_ADC_IRQHandler+0x514>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002210:	2b00      	cmp	r3, #0
 8002212:	f040 80b0 	bne.w	8002376 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 80a3 	bne.w	8002376 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 809d 	bne.w	8002376 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8097 	beq.w	8002376 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002250:	d004      	beq.n	800225c <HAL_ADC_IRQHandler+0x324>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a7e      	ldr	r2, [pc, #504]	@ (8002450 <HAL_ADC_IRQHandler+0x518>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d106      	bne.n	800226a <HAL_ADC_IRQHandler+0x332>
 800225c:	4b7d      	ldr	r3, [pc, #500]	@ (8002454 <HAL_ADC_IRQHandler+0x51c>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2b00      	cmp	r3, #0
 8002266:	d03e      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x3ae>
 8002268:	e005      	b.n	8002276 <HAL_ADC_IRQHandler+0x33e>
 800226a:	4b7b      	ldr	r3, [pc, #492]	@ (8002458 <HAL_ADC_IRQHandler+0x520>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2b00      	cmp	r3, #0
 8002274:	d037      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x3ae>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800227e:	d004      	beq.n	800228a <HAL_ADC_IRQHandler+0x352>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a72      	ldr	r2, [pc, #456]	@ (8002450 <HAL_ADC_IRQHandler+0x518>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d106      	bne.n	8002298 <HAL_ADC_IRQHandler+0x360>
 800228a:	4b72      	ldr	r3, [pc, #456]	@ (8002454 <HAL_ADC_IRQHandler+0x51c>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	2b06      	cmp	r3, #6
 8002294:	d027      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x3ae>
 8002296:	e005      	b.n	80022a4 <HAL_ADC_IRQHandler+0x36c>
 8002298:	4b6f      	ldr	r3, [pc, #444]	@ (8002458 <HAL_ADC_IRQHandler+0x520>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2b06      	cmp	r3, #6
 80022a2:	d020      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x3ae>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ac:	d004      	beq.n	80022b8 <HAL_ADC_IRQHandler+0x380>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a67      	ldr	r2, [pc, #412]	@ (8002450 <HAL_ADC_IRQHandler+0x518>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d106      	bne.n	80022c6 <HAL_ADC_IRQHandler+0x38e>
 80022b8:	4b66      	ldr	r3, [pc, #408]	@ (8002454 <HAL_ADC_IRQHandler+0x51c>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	2b07      	cmp	r3, #7
 80022c2:	d010      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x3ae>
 80022c4:	e005      	b.n	80022d2 <HAL_ADC_IRQHandler+0x39a>
 80022c6:	4b64      	ldr	r3, [pc, #400]	@ (8002458 <HAL_ADC_IRQHandler+0x520>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2b07      	cmp	r3, #7
 80022d0:	d009      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x3ae>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022da:	d004      	beq.n	80022e6 <HAL_ADC_IRQHandler+0x3ae>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a5a      	ldr	r2, [pc, #360]	@ (800244c <HAL_ADC_IRQHandler+0x514>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d104      	bne.n	80022f0 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e00f      	b.n	8002310 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022f8:	d004      	beq.n	8002304 <HAL_ADC_IRQHandler+0x3cc>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a54      	ldr	r2, [pc, #336]	@ (8002450 <HAL_ADC_IRQHandler+0x518>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d102      	bne.n	800230a <HAL_ADC_IRQHandler+0x3d2>
 8002304:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002308:	e000      	b.n	800230c <HAL_ADC_IRQHandler+0x3d4>
 800230a:	4b50      	ldr	r3, [pc, #320]	@ (800244c <HAL_ADC_IRQHandler+0x514>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d12d      	bne.n	8002376 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d11a      	bne.n	800235e <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002336:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d112      	bne.n	8002376 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	@ 0x40
 800235c:	e00b      	b.n	8002376 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f043 0210 	orr.w	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f8c4 	bl	8002504 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2260      	movs	r2, #96	@ 0x60
 8002382:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238a:	2b00      	cmp	r3, #0
 800238c:	d011      	beq.n	80023b2 <HAL_ADC_IRQHandler+0x47a>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00c      	beq.n	80023b2 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fbd3 	bl	8001b50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2280      	movs	r2, #128	@ 0x80
 80023b0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d012      	beq.n	80023e2 <HAL_ADC_IRQHandler+0x4aa>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00d      	beq.n	80023e2 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f8aa 	bl	800252c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023e0:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d012      	beq.n	8002412 <HAL_ADC_IRQHandler+0x4da>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00d      	beq.n	8002412 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f89c 	bl	8002540 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002410:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	d04f      	beq.n	80024bc <HAL_ADC_IRQHandler+0x584>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	d04a      	beq.n	80024bc <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242a:	2b01      	cmp	r3, #1
 800242c:	d102      	bne.n	8002434 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 800242e:	2301      	movs	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e02d      	b.n	8002490 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800243c:	d004      	beq.n	8002448 <HAL_ADC_IRQHandler+0x510>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a03      	ldr	r2, [pc, #12]	@ (8002450 <HAL_ADC_IRQHandler+0x518>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d109      	bne.n	800245c <HAL_ADC_IRQHandler+0x524>
 8002448:	4b02      	ldr	r3, [pc, #8]	@ (8002454 <HAL_ADC_IRQHandler+0x51c>)
 800244a:	e008      	b.n	800245e <HAL_ADC_IRQHandler+0x526>
 800244c:	50000400 	.word	0x50000400
 8002450:	50000100 	.word	0x50000100
 8002454:	50000300 	.word	0x50000300
 8002458:	50000700 	.word	0x50000700
 800245c:	4b28      	ldr	r3, [pc, #160]	@ (8002500 <HAL_ADC_IRQHandler+0x5c8>)
 800245e:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d10a      	bne.n	8002490 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800247a:	2301      	movs	r3, #1
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e007      	b.n	8002490 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800248c:	2301      	movs	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10e      	bne.n	80024b4 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	f043 0202 	orr.w	r2, r3, #2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7ff fb58 	bl	8001b64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2210      	movs	r2, #16
 80024ba:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d018      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x5c0>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e0:	f043 0208 	orr.w	r2, r3, #8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f810 	bl	8002518 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80024f8:	bf00      	nop
 80024fa:	3720      	adds	r7, #32
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	50000700 	.word	0x50000700

08002504 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002554:	b480      	push	{r7}
 8002556:	b09b      	sub	sp, #108	@ 0x6c
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x22>
 8002572:	2302      	movs	r3, #2
 8002574:	e2c8      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x5b4>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 82ac 	bne.w	8002ae6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d81c      	bhi.n	80025d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	461a      	mov	r2, r3
 80025aa:	231f      	movs	r3, #31
 80025ac:	4093      	lsls	r3, r2
 80025ae:	43db      	mvns	r3, r3
 80025b0:	4019      	ands	r1, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa00 f203 	lsl.w	r2, r0, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80025ce:	e063      	b.n	8002698 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b09      	cmp	r3, #9
 80025d6:	d81e      	bhi.n	8002616 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	3b1e      	subs	r3, #30
 80025ec:	221f      	movs	r2, #31
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	4019      	ands	r1, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	3b1e      	subs	r3, #30
 8002608:	fa00 f203 	lsl.w	r2, r0, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	635a      	str	r2, [r3, #52]	@ 0x34
 8002614:	e040      	b.n	8002698 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b0e      	cmp	r3, #14
 800261c:	d81e      	bhi.n	800265c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	3b3c      	subs	r3, #60	@ 0x3c
 8002632:	221f      	movs	r2, #31
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	4019      	ands	r1, r3
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	3b3c      	subs	r3, #60	@ 0x3c
 800264e:	fa00 f203 	lsl.w	r2, r0, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	639a      	str	r2, [r3, #56]	@ 0x38
 800265a:	e01d      	b.n	8002698 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	3b5a      	subs	r3, #90	@ 0x5a
 8002670:	221f      	movs	r2, #31
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	4019      	ands	r1, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	3b5a      	subs	r3, #90	@ 0x5a
 800268c:	fa00 f203 	lsl.w	r2, r0, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80e5 	bne.w	8002872 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b09      	cmp	r3, #9
 80026ae:	d91c      	bls.n	80026ea <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6999      	ldr	r1, [r3, #24]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	3b1e      	subs	r3, #30
 80026c2:	2207      	movs	r2, #7
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	4019      	ands	r1, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6898      	ldr	r0, [r3, #8]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	3b1e      	subs	r3, #30
 80026dc:	fa00 f203 	lsl.w	r2, r0, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	619a      	str	r2, [r3, #24]
 80026e8:	e019      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6959      	ldr	r1, [r3, #20]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	2207      	movs	r2, #7
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	4019      	ands	r1, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6898      	ldr	r0, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	fa00 f203 	lsl.w	r2, r0, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	3b01      	subs	r3, #1
 800273c:	2b03      	cmp	r3, #3
 800273e:	d84f      	bhi.n	80027e0 <HAL_ADC_ConfigChannel+0x28c>
 8002740:	a201      	add	r2, pc, #4	@ (adr r2, 8002748 <HAL_ADC_ConfigChannel+0x1f4>)
 8002742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002746:	bf00      	nop
 8002748:	08002759 	.word	0x08002759
 800274c:	0800277b 	.word	0x0800277b
 8002750:	0800279d 	.word	0x0800279d
 8002754:	080027bf 	.word	0x080027bf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800275e:	4b99      	ldr	r3, [pc, #612]	@ (80029c4 <HAL_ADC_ConfigChannel+0x470>)
 8002760:	4013      	ands	r3, r2
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	0691      	lsls	r1, r2, #26
 8002768:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800276a:	430a      	orrs	r2, r1
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002776:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002778:	e07b      	b.n	8002872 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002780:	4b90      	ldr	r3, [pc, #576]	@ (80029c4 <HAL_ADC_ConfigChannel+0x470>)
 8002782:	4013      	ands	r3, r2
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	0691      	lsls	r1, r2, #26
 800278a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800278c:	430a      	orrs	r2, r1
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002798:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800279a:	e06a      	b.n	8002872 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80027a2:	4b88      	ldr	r3, [pc, #544]	@ (80029c4 <HAL_ADC_ConfigChannel+0x470>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	0691      	lsls	r1, r2, #26
 80027ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027ae:	430a      	orrs	r2, r1
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80027ba:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027bc:	e059      	b.n	8002872 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027c4:	4b7f      	ldr	r3, [pc, #508]	@ (80029c4 <HAL_ADC_ConfigChannel+0x470>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	0691      	lsls	r1, r2, #26
 80027ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027d0:	430a      	orrs	r2, r1
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80027dc:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027de:	e048      	b.n	8002872 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	069b      	lsls	r3, r3, #26
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002802:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800280a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	069b      	lsls	r3, r3, #26
 8002814:	429a      	cmp	r2, r3
 8002816:	d107      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002826:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800282e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	069b      	lsls	r3, r3, #26
 8002838:	429a      	cmp	r2, r3
 800283a:	d107      	bne.n	800284c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800284a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002852:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	069b      	lsls	r3, r3, #26
 800285c:	429a      	cmp	r2, r3
 800285e:	d107      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800286e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002870:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d108      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x33e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x33e>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_ADC_ConfigChannel+0x340>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	f040 8131 	bne.w	8002afc <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d00f      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2201      	movs	r2, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43da      	mvns	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	400a      	ands	r2, r1
 80028bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80028c0:	e049      	b.n	8002956 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2201      	movs	r2, #1
 80028d0:	409a      	lsls	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b09      	cmp	r3, #9
 80028e2:	d91c      	bls.n	800291e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6999      	ldr	r1, [r3, #24]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	3b1b      	subs	r3, #27
 80028f6:	2207      	movs	r2, #7
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	4019      	ands	r1, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6898      	ldr	r0, [r3, #8]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	3b1b      	subs	r3, #27
 8002910:	fa00 f203 	lsl.w	r2, r0, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	619a      	str	r2, [r3, #24]
 800291c:	e01b      	b.n	8002956 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6959      	ldr	r1, [r3, #20]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	2207      	movs	r2, #7
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	4019      	ands	r1, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6898      	ldr	r0, [r3, #8]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	fa00 f203 	lsl.w	r2, r0, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800295e:	d004      	beq.n	800296a <HAL_ADC_ConfigChannel+0x416>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a18      	ldr	r2, [pc, #96]	@ (80029c8 <HAL_ADC_ConfigChannel+0x474>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0x41a>
 800296a:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <HAL_ADC_ConfigChannel+0x478>)
 800296c:	e000      	b.n	8002970 <HAL_ADC_ConfigChannel+0x41c>
 800296e:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <HAL_ADC_ConfigChannel+0x47c>)
 8002970:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b10      	cmp	r3, #16
 8002978:	d105      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800297a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002982:	2b00      	cmp	r3, #0
 8002984:	d015      	beq.n	80029b2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800298a:	2b11      	cmp	r3, #17
 800298c:	d105      	bne.n	800299a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800298e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800299e:	2b12      	cmp	r3, #18
 80029a0:	f040 80ac 	bne.w	8002afc <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80029a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 80a5 	bne.w	8002afc <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029ba:	d10b      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x480>
 80029bc:	4b02      	ldr	r3, [pc, #8]	@ (80029c8 <HAL_ADC_ConfigChannel+0x474>)
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e023      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x4b6>
 80029c2:	bf00      	nop
 80029c4:	83fff000 	.word	0x83fff000
 80029c8:	50000100 	.word	0x50000100
 80029cc:	50000300 	.word	0x50000300
 80029d0:	50000700 	.word	0x50000700
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b14 <HAL_ADC_ConfigChannel+0x5c0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d103      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x492>
 80029de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e011      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x4b6>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a4b      	ldr	r2, [pc, #300]	@ (8002b18 <HAL_ADC_ConfigChannel+0x5c4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d102      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x4a2>
 80029f0:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <HAL_ADC_ConfigChannel+0x5c8>)
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e009      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x4b6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a48      	ldr	r2, [pc, #288]	@ (8002b1c <HAL_ADC_ConfigChannel+0x5c8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d102      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x4b2>
 8002a00:	4b45      	ldr	r3, [pc, #276]	@ (8002b18 <HAL_ADC_ConfigChannel+0x5c4>)
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e001      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x4b6>
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d108      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x4d6>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x4d6>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x4d8>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d150      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a30:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d010      	beq.n	8002a58 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d107      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x4fe>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x4fe>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x500>
 8002a52:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d13c      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d11d      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x548>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a68:	d118      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a74:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a76:	4b2a      	ldr	r3, [pc, #168]	@ (8002b20 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b24 <HAL_ADC_ConfigChannel+0x5d0>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	0c9a      	lsrs	r2, r3, #18
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a8c:	e002      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f9      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a9a:	e02e      	b.n	8002afa <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b11      	cmp	r3, #17
 8002aa2:	d10b      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x568>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aac:	d106      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002aae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002aba:	e01e      	b.n	8002afa <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b12      	cmp	r3, #18
 8002ac2:	d11a      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002ac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ace:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ad0:	e013      	b.n	8002afa <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002ae4:	e00a      	b.n	8002afc <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	f043 0220 	orr.w	r2, r3, #32
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002af8:	e000      	b.n	8002afc <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002afa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	376c      	adds	r7, #108	@ 0x6c
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	50000100 	.word	0x50000100
 8002b18:	50000400 	.word	0x50000400
 8002b1c:	50000500 	.word	0x50000500
 8002b20:	2000000c 	.word	0x2000000c
 8002b24:	431bde83 	.word	0x431bde83

08002b28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b099      	sub	sp, #100	@ 0x64
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b40:	d102      	bne.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002b42:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	e01a      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a6a      	ldr	r2, [pc, #424]	@ (8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d103      	bne.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002b52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	e011      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a67      	ldr	r2, [pc, #412]	@ (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d102      	bne.n	8002b6a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b64:	4b66      	ldr	r3, [pc, #408]	@ (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	e009      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a64      	ldr	r2, [pc, #400]	@ (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d102      	bne.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b74:	4b61      	ldr	r3, [pc, #388]	@ (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	e001      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0b0      	b.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0a9      	b.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f040 808d 	bne.w	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 8086 	bne.w	8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bc4:	d004      	beq.n	8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a4b      	ldr	r2, [pc, #300]	@ (8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002bd0:	4b4c      	ldr	r3, [pc, #304]	@ (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002bd2:	e000      	b.n	8002bd6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d040      	beq.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002be0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bf2:	035b      	lsls	r3, r3, #13
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bfa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d108      	bne.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d15c      	bne.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002c3e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d14b      	bne.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c4c:	f023 030f 	bic.w	r3, r3, #15
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	6811      	ldr	r1, [r2, #0]
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	6892      	ldr	r2, [r2, #8]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c5e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c60:	e03c      	b.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c6c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d108      	bne.n	8002c8e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d123      	bne.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d107      	bne.n	8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002cb0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d112      	bne.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002cb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cbe:	f023 030f 	bic.w	r3, r3, #15
 8002cc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cc4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cc6:	e009      	b.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002cda:	e000      	b.n	8002cde <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cdc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002ce6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002cea:	4618      	mov	r0, r3
 8002cec:	3764      	adds	r7, #100	@ 0x64
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	50000100 	.word	0x50000100
 8002cfc:	50000400 	.word	0x50000400
 8002d00:	50000500 	.word	0x50000500
 8002d04:	50000300 	.word	0x50000300
 8002d08:	50000700 	.word	0x50000700

08002d0c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d108      	bne.n	8002d38 <ADC_Disable+0x2c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <ADC_Disable+0x2c>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <ADC_Disable+0x2e>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d047      	beq.n	8002dce <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030d 	and.w	r3, r3, #13
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d10f      	bne.n	8002d6c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0202 	orr.w	r2, r2, #2
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2203      	movs	r2, #3
 8002d62:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002d64:	f7fe feba 	bl	8001adc <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d6a:	e029      	b.n	8002dc0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	f043 0210 	orr.w	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7c:	f043 0201 	orr.w	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e023      	b.n	8002dd0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d88:	f7fe fea8 	bl	8001adc <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d914      	bls.n	8002dc0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d10d      	bne.n	8002dc0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	f043 0210 	orr.w	r2, r3, #16
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e007      	b.n	8002dd0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d0dc      	beq.n	8002d88 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_COMP_Init+0x26>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_COMP_Init+0x2c>
  {
    status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	77fb      	strb	r3, [r7, #31]
 8002e02:	e088      	b.n	8002f16 <HAL_COMP_Init+0x13e>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e04:	4b46      	ldr	r3, [pc, #280]	@ (8002f20 <HAL_COMP_Init+0x148>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4a45      	ldr	r2, [pc, #276]	@ (8002f20 <HAL_COMP_Init+0x148>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6193      	str	r3, [r2, #24]
 8002e10:	4b43      	ldr	r3, [pc, #268]	@ (8002f20 <HAL_COMP_Init+0x148>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7fe f953 	bl	80010c8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e2c:	61bb      	str	r3, [r7, #24]

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d103      	bne.n	8002e42 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0282 	bic.w	r2, r3, #130	@ 0x82
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f023 020c 	bic.w	r2, r3, #12
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	601a      	str	r2, [r3, #0]

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0)) != 0UL) &&
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d016      	beq.n	8002f0e <HAL_COMP_Init+0x136>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d113      	bne.n	8002f0e <HAL_COMP_Init+0x136>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f24 <HAL_COMP_Init+0x14c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	4a0e      	ldr	r2, [pc, #56]	@ (8002f28 <HAL_COMP_Init+0x150>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002f00:	e002      	b.n	8002f08 <HAL_COMP_Init+0x130>
      {
        wait_loop_index--;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f9      	bne.n	8002f02 <HAL_COMP_Init+0x12a>
      }
    }

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  return status;
 8002f16:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	2000000c 	.word	0x2000000c
 8002f28:	053e2d63 	.word	0x053e2d63

08002f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5e:	4a04      	ldr	r2, [pc, #16]	@ (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	60d3      	str	r3, [r2, #12]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f78:	4b04      	ldr	r3, [pc, #16]	@ (8002f8c <__NVIC_GetPriorityGrouping+0x18>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f003 0307 	and.w	r3, r3, #7
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db0b      	blt.n	8002fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	f003 021f 	and.w	r2, r3, #31
 8002fa8:	4907      	ldr	r1, [pc, #28]	@ (8002fc8 <__NVIC_EnableIRQ+0x38>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000e100 	.word	0xe000e100

08002fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	6039      	str	r1, [r7, #0]
 8002fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	db0a      	blt.n	8002ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	490c      	ldr	r1, [pc, #48]	@ (8003018 <__NVIC_SetPriority+0x4c>)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	0112      	lsls	r2, r2, #4
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff4:	e00a      	b.n	800300c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4908      	ldr	r1, [pc, #32]	@ (800301c <__NVIC_SetPriority+0x50>)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	3b04      	subs	r3, #4
 8003004:	0112      	lsls	r2, r2, #4
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	440b      	add	r3, r1
 800300a:	761a      	strb	r2, [r3, #24]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000e100 	.word	0xe000e100
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	@ 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f1c3 0307 	rsb	r3, r3, #7
 800303a:	2b04      	cmp	r3, #4
 800303c:	bf28      	it	cs
 800303e:	2304      	movcs	r3, #4
 8003040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3304      	adds	r3, #4
 8003046:	2b06      	cmp	r3, #6
 8003048:	d902      	bls.n	8003050 <NVIC_EncodePriority+0x30>
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3b03      	subs	r3, #3
 800304e:	e000      	b.n	8003052 <NVIC_EncodePriority+0x32>
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	f04f 32ff 	mov.w	r2, #4294967295
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43da      	mvns	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	401a      	ands	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003068:	f04f 31ff 	mov.w	r1, #4294967295
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	43d9      	mvns	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003078:	4313      	orrs	r3, r2
         );
}
 800307a:	4618      	mov	r0, r3
 800307c:	3724      	adds	r7, #36	@ 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ff4c 	bl	8002f2c <__NVIC_SetPriorityGrouping>
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ae:	f7ff ff61 	bl	8002f74 <__NVIC_GetPriorityGrouping>
 80030b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	6978      	ldr	r0, [r7, #20]
 80030ba:	f7ff ffb1 	bl	8003020 <NVIC_EncodePriority>
 80030be:	4602      	mov	r2, r0
 80030c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff ff80 	bl	8002fcc <__NVIC_SetPriority>
}
 80030cc:	bf00      	nop
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff54 	bl	8002f90 <__NVIC_EnableIRQ>
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e037      	b.n	8003176 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800311c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003120:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800312a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003136:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003142:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f8b3 	bl	80032c4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	2204      	movs	r2, #4
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d024      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x72>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01f      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0204 	bic.w	r2, r2, #4
 80031cc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d6:	2104      	movs	r1, #4
 80031d8:	fa01 f202 	lsl.w	r2, r1, r2
 80031dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d06a      	beq.n	80032bc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031ee:	e065      	b.n	80032bc <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	2202      	movs	r2, #2
 80031f6:	409a      	lsls	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d02c      	beq.n	800325a <HAL_DMA_IRQHandler+0xdc>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d027      	beq.n	800325a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 020a 	bic.w	r2, r2, #10
 8003226:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003238:	2102      	movs	r1, #2
 800323a:	fa01 f202 	lsl.w	r2, r1, r2
 800323e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d035      	beq.n	80032bc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003258:	e030      	b.n	80032bc <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	2208      	movs	r2, #8
 8003260:	409a      	lsls	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d028      	beq.n	80032bc <HAL_DMA_IRQHandler+0x13e>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d023      	beq.n	80032bc <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 020e 	bic.w	r2, r2, #14
 8003282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328c:	2101      	movs	r1, #1
 800328e:	fa01 f202 	lsl.w	r2, r1, r2
 8003292:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d004      	beq.n	80032bc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
    }
  }
}
 80032ba:	e7ff      	b.n	80032bc <HAL_DMA_IRQHandler+0x13e>
 80032bc:	bf00      	nop
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b14      	ldr	r3, [pc, #80]	@ (8003324 <DMA_CalcBaseAndBitshift+0x60>)
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d80f      	bhi.n	80032f8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	461a      	mov	r2, r3
 80032de:	4b12      	ldr	r3, [pc, #72]	@ (8003328 <DMA_CalcBaseAndBitshift+0x64>)
 80032e0:	4413      	add	r3, r2
 80032e2:	4a12      	ldr	r2, [pc, #72]	@ (800332c <DMA_CalcBaseAndBitshift+0x68>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	009a      	lsls	r2, r3, #2
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003330 <DMA_CalcBaseAndBitshift+0x6c>)
 80032f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80032f6:	e00e      	b.n	8003316 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003334 <DMA_CalcBaseAndBitshift+0x70>)
 8003300:	4413      	add	r3, r2
 8003302:	4a0a      	ldr	r2, [pc, #40]	@ (800332c <DMA_CalcBaseAndBitshift+0x68>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	009a      	lsls	r2, r3, #2
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a09      	ldr	r2, [pc, #36]	@ (8003338 <DMA_CalcBaseAndBitshift+0x74>)
 8003314:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40020407 	.word	0x40020407
 8003328:	bffdfff8 	.word	0xbffdfff8
 800332c:	cccccccd 	.word	0xcccccccd
 8003330:	40020000 	.word	0x40020000
 8003334:	bffdfbf8 	.word	0xbffdfbf8
 8003338:	40020400 	.word	0x40020400

0800333c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800334a:	e154      	b.n	80035f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8146 	beq.w	80035f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d005      	beq.n	800337c <HAL_GPIO_Init+0x40>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d130      	bne.n	80033de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033b2:	2201      	movs	r2, #1
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4013      	ands	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	f003 0201 	and.w	r2, r3, #1
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d017      	beq.n	800341a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2203      	movs	r2, #3
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d123      	bne.n	800346e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	08da      	lsrs	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3208      	adds	r2, #8
 800342e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	220f      	movs	r2, #15
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	08da      	lsrs	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3208      	adds	r2, #8
 8003468:	6939      	ldr	r1, [r7, #16]
 800346a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 0203 	and.w	r2, r3, #3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80a0 	beq.w	80035f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b0:	4b58      	ldr	r3, [pc, #352]	@ (8003614 <HAL_GPIO_Init+0x2d8>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	4a57      	ldr	r2, [pc, #348]	@ (8003614 <HAL_GPIO_Init+0x2d8>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6193      	str	r3, [r2, #24]
 80034bc:	4b55      	ldr	r3, [pc, #340]	@ (8003614 <HAL_GPIO_Init+0x2d8>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034c8:	4a53      	ldr	r2, [pc, #332]	@ (8003618 <HAL_GPIO_Init+0x2dc>)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	220f      	movs	r2, #15
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034f2:	d019      	beq.n	8003528 <HAL_GPIO_Init+0x1ec>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a49      	ldr	r2, [pc, #292]	@ (800361c <HAL_GPIO_Init+0x2e0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d013      	beq.n	8003524 <HAL_GPIO_Init+0x1e8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a48      	ldr	r2, [pc, #288]	@ (8003620 <HAL_GPIO_Init+0x2e4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00d      	beq.n	8003520 <HAL_GPIO_Init+0x1e4>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a47      	ldr	r2, [pc, #284]	@ (8003624 <HAL_GPIO_Init+0x2e8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <HAL_GPIO_Init+0x1e0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a46      	ldr	r2, [pc, #280]	@ (8003628 <HAL_GPIO_Init+0x2ec>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d101      	bne.n	8003518 <HAL_GPIO_Init+0x1dc>
 8003514:	2304      	movs	r3, #4
 8003516:	e008      	b.n	800352a <HAL_GPIO_Init+0x1ee>
 8003518:	2305      	movs	r3, #5
 800351a:	e006      	b.n	800352a <HAL_GPIO_Init+0x1ee>
 800351c:	2303      	movs	r3, #3
 800351e:	e004      	b.n	800352a <HAL_GPIO_Init+0x1ee>
 8003520:	2302      	movs	r3, #2
 8003522:	e002      	b.n	800352a <HAL_GPIO_Init+0x1ee>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_GPIO_Init+0x1ee>
 8003528:	2300      	movs	r3, #0
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	f002 0203 	and.w	r2, r2, #3
 8003530:	0092      	lsls	r2, r2, #2
 8003532:	4093      	lsls	r3, r2
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800353a:	4937      	ldr	r1, [pc, #220]	@ (8003618 <HAL_GPIO_Init+0x2dc>)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	3302      	adds	r3, #2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003548:	4b38      	ldr	r3, [pc, #224]	@ (800362c <HAL_GPIO_Init+0x2f0>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	43db      	mvns	r3, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4013      	ands	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800356c:	4a2f      	ldr	r2, [pc, #188]	@ (800362c <HAL_GPIO_Init+0x2f0>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003572:	4b2e      	ldr	r3, [pc, #184]	@ (800362c <HAL_GPIO_Init+0x2f0>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	43db      	mvns	r3, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4013      	ands	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003596:	4a25      	ldr	r2, [pc, #148]	@ (800362c <HAL_GPIO_Init+0x2f0>)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800359c:	4b23      	ldr	r3, [pc, #140]	@ (800362c <HAL_GPIO_Init+0x2f0>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035c0:	4a1a      	ldr	r2, [pc, #104]	@ (800362c <HAL_GPIO_Init+0x2f0>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c6:	4b19      	ldr	r3, [pc, #100]	@ (800362c <HAL_GPIO_Init+0x2f0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4013      	ands	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035ea:	4a10      	ldr	r2, [pc, #64]	@ (800362c <HAL_GPIO_Init+0x2f0>)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	3301      	adds	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f aea3 	bne.w	800334c <HAL_GPIO_Init+0x10>
  }
}
 8003606:	bf00      	nop
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40021000 	.word	0x40021000
 8003618:	40010000 	.word	0x40010000
 800361c:	48000400 	.word	0x48000400
 8003620:	48000800 	.word	0x48000800
 8003624:	48000c00 	.word	0x48000c00
 8003628:	48001000 	.word	0x48001000
 800362c:	40010400 	.word	0x40010400

08003630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	807b      	strh	r3, [r7, #2]
 800363c:	4613      	mov	r3, r2
 800363e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003640:	787b      	ldrb	r3, [r7, #1]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003646:	887a      	ldrh	r2, [r7, #2]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800364c:	e002      	b.n	8003654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e08d      	b.n	800378e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fde6 	bl	8001258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2224      	movs	r2, #36	@ 0x24
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d107      	bne.n	80036da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	e006      	b.n	80036e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d108      	bne.n	8003702 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	e007      	b.n	8003712 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003710:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003724:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003734:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69d9      	ldr	r1, [r3, #28]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1a      	ldr	r2, [r3, #32]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	4608      	mov	r0, r1
 80037a2:	4611      	mov	r1, r2
 80037a4:	461a      	mov	r2, r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	817b      	strh	r3, [r7, #10]
 80037aa:	460b      	mov	r3, r1
 80037ac:	813b      	strh	r3, [r7, #8]
 80037ae:	4613      	mov	r3, r2
 80037b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	f040 80f9 	bne.w	80039b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_I2C_Mem_Write+0x34>
 80037c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0ed      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_I2C_Mem_Write+0x4e>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e0e6      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037ee:	f7fe f975 	bl	8001adc <HAL_GetTick>
 80037f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2319      	movs	r3, #25
 80037fa:	2201      	movs	r2, #1
 80037fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f955 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0d1      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2221      	movs	r2, #33	@ 0x21
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2240      	movs	r2, #64	@ 0x40
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a3a      	ldr	r2, [r7, #32]
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003830:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003838:	88f8      	ldrh	r0, [r7, #6]
 800383a:	893a      	ldrh	r2, [r7, #8]
 800383c:	8979      	ldrh	r1, [r7, #10]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4603      	mov	r3, r0
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f8b9 	bl	80039c0 <I2C_RequestMemoryWrite>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0a9      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2bff      	cmp	r3, #255	@ 0xff
 8003868:	d90e      	bls.n	8003888 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	22ff      	movs	r2, #255	@ 0xff
 800386e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003874:	b2da      	uxtb	r2, r3
 8003876:	8979      	ldrh	r1, [r7, #10]
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fad9 	bl	8003e38 <I2C_TransferConfig>
 8003886:	e00f      	b.n	80038a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	b2da      	uxtb	r2, r3
 8003898:	8979      	ldrh	r1, [r7, #10]
 800389a:	2300      	movs	r3, #0
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fac8 	bl	8003e38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f958 	bl	8003b62 <I2C_WaitOnTXISFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e07b      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d034      	beq.n	8003960 <HAL_I2C_Mem_Write+0x1c8>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d130      	bne.n	8003960 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003904:	2200      	movs	r2, #0
 8003906:	2180      	movs	r1, #128	@ 0x80
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f8d1 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e04d      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2bff      	cmp	r3, #255	@ 0xff
 8003920:	d90e      	bls.n	8003940 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	22ff      	movs	r2, #255	@ 0xff
 8003926:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392c:	b2da      	uxtb	r2, r3
 800392e:	8979      	ldrh	r1, [r7, #10]
 8003930:	2300      	movs	r3, #0
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fa7d 	bl	8003e38 <I2C_TransferConfig>
 800393e:	e00f      	b.n	8003960 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394e:	b2da      	uxtb	r2, r3
 8003950:	8979      	ldrh	r1, [r7, #10]
 8003952:	2300      	movs	r3, #0
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fa6c 	bl	8003e38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d19e      	bne.n	80038a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f93e 	bl	8003bf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e01a      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2220      	movs	r2, #32
 8003984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b0a      	ldr	r3, [pc, #40]	@ (80039bc <HAL_I2C_Mem_Write+0x224>)
 8003992:	400b      	ands	r3, r1
 8003994:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	fe00e800 	.word	0xfe00e800

080039c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	4608      	mov	r0, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	461a      	mov	r2, r3
 80039ce:	4603      	mov	r3, r0
 80039d0:	817b      	strh	r3, [r7, #10]
 80039d2:	460b      	mov	r3, r1
 80039d4:	813b      	strh	r3, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	8979      	ldrh	r1, [r7, #10]
 80039e0:	4b20      	ldr	r3, [pc, #128]	@ (8003a64 <I2C_RequestMemoryWrite+0xa4>)
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fa25 	bl	8003e38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	69b9      	ldr	r1, [r7, #24]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f8b5 	bl	8003b62 <I2C_WaitOnTXISFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e02c      	b.n	8003a5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a08:	893b      	ldrh	r3, [r7, #8]
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a12:	e015      	b.n	8003a40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a14:	893b      	ldrh	r3, [r7, #8]
 8003a16:	0a1b      	lsrs	r3, r3, #8
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	69b9      	ldr	r1, [r7, #24]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f89b 	bl	8003b62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e012      	b.n	8003a5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a36:	893b      	ldrh	r3, [r7, #8]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2200      	movs	r2, #0
 8003a48:	2180      	movs	r1, #128	@ 0x80
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f830 	bl	8003ab0 <I2C_WaitOnFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	80002000 	.word	0x80002000

08003a68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d103      	bne.n	8003a86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2200      	movs	r2, #0
 8003a84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d007      	beq.n	8003aa4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	619a      	str	r2, [r3, #24]
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac0:	e03b      	b.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	6839      	ldr	r1, [r7, #0]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f8d6 	bl	8003c78 <I2C_IsErrorOccurred>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e041      	b.n	8003b5a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d02d      	beq.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7fd fffd 	bl	8001adc <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d122      	bne.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4013      	ands	r3, r2
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d113      	bne.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b16:	f043 0220 	orr.w	r2, r3, #32
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00f      	b.n	8003b5a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4013      	ands	r3, r2
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d0b4      	beq.n	8003ac2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b6e:	e033      	b.n	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f87f 	bl	8003c78 <I2C_IsErrorOccurred>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e031      	b.n	8003be8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	d025      	beq.n	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8c:	f7fd ffa6 	bl	8001adc <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d302      	bcc.n	8003ba2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d11a      	bne.n	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d013      	beq.n	8003bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb4:	f043 0220 	orr.w	r2, r3, #32
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e007      	b.n	8003be8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d1c4      	bne.n	8003b70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bfc:	e02f      	b.n	8003c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f838 	bl	8003c78 <I2C_IsErrorOccurred>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e02d      	b.n	8003c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c12:	f7fd ff63 	bl	8001adc <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d302      	bcc.n	8003c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d11a      	bne.n	8003c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d013      	beq.n	8003c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e007      	b.n	8003c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d1c8      	bne.n	8003bfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	@ 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d068      	beq.n	8003d76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2210      	movs	r2, #16
 8003caa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cac:	e049      	b.n	8003d42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb4:	d045      	beq.n	8003d42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cb6:	f7fd ff11 	bl	8001adc <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <I2C_IsErrorOccurred+0x54>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d13a      	bne.n	8003d42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cee:	d121      	bne.n	8003d34 <I2C_IsErrorOccurred+0xbc>
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cf6:	d01d      	beq.n	8003d34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d01a      	beq.n	8003d34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d0e:	f7fd fee5 	bl	8001adc <HAL_GetTick>
 8003d12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d14:	e00e      	b.n	8003d34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d16:	f7fd fee1 	bl	8001adc <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b19      	cmp	r3, #25
 8003d22:	d907      	bls.n	8003d34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	f043 0320 	orr.w	r3, r3, #32
 8003d2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003d32:	e006      	b.n	8003d42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d1e9      	bne.n	8003d16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d003      	beq.n	8003d58 <I2C_IsErrorOccurred+0xe0>
 8003d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0aa      	beq.n	8003cae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d103      	bne.n	8003d68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2220      	movs	r2, #32
 8003d66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	f043 0304 	orr.w	r3, r3, #4
 8003d6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00b      	beq.n	8003da0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	f043 0308 	orr.w	r3, r3, #8
 8003db0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00b      	beq.n	8003de4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	f043 0302 	orr.w	r3, r3, #2
 8003dd2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ddc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003de4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01c      	beq.n	8003e26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff fe3b 	bl	8003a68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e34 <I2C_IsErrorOccurred+0x1bc>)
 8003dfe:	400b      	ands	r3, r1
 8003e00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003e26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3728      	adds	r7, #40	@ 0x28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	fe00e800 	.word	0xfe00e800

08003e38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	817b      	strh	r3, [r7, #10]
 8003e46:	4613      	mov	r3, r2
 8003e48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e4a:	897b      	ldrh	r3, [r7, #10]
 8003e4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e50:	7a7b      	ldrb	r3, [r7, #9]
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	0d5b      	lsrs	r3, r3, #21
 8003e72:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e76:	4b08      	ldr	r3, [pc, #32]	@ (8003e98 <I2C_TransferConfig+0x60>)
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	ea02 0103 	and.w	r1, r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	03ff63ff 	.word	0x03ff63ff

08003e9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d138      	bne.n	8003f24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e032      	b.n	8003f26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2224      	movs	r2, #36	@ 0x24
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003eee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d139      	bne.n	8003fbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e033      	b.n	8003fbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2224      	movs	r2, #36	@ 0x24
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0201 	bic.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	021b      	lsls	r3, r3, #8
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e000      	b.n	8003fbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0b9      	b.n	8004150 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f009 fa3d 	bl	800d470 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f003 ff15 	bl	8007e32 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004008:	2300      	movs	r3, #0
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e03e      	b.n	800408c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	440b      	add	r3, r1
 800401c:	3311      	adds	r3, #17
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004022:	7bfa      	ldrb	r2, [r7, #15]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	440b      	add	r3, r1
 8004030:	3310      	adds	r3, #16
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	3313      	adds	r3, #19
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	440b      	add	r3, r1
 8004058:	3320      	adds	r3, #32
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	440b      	add	r3, r1
 800406c:	3324      	adds	r3, #36	@ 0x24
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	440b      	add	r3, r1
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	3301      	adds	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	791b      	ldrb	r3, [r3, #4]
 8004090:	7bfa      	ldrb	r2, [r7, #15]
 8004092:	429a      	cmp	r2, r3
 8004094:	d3bb      	bcc.n	800400e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	e044      	b.n	8004126 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	440b      	add	r3, r1
 80040aa:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040b2:	7bfa      	ldrb	r2, [r7, #15]
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040c8:	7bfa      	ldrb	r2, [r7, #15]
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	440b      	add	r3, r1
 80040d6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80040da:	2200      	movs	r2, #0
 80040dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040de:	7bfa      	ldrb	r2, [r7, #15]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	440b      	add	r3, r1
 80040ec:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	440b      	add	r3, r1
 8004102:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800410a:	7bfa      	ldrb	r2, [r7, #15]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	440b      	add	r3, r1
 8004118:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	3301      	adds	r3, #1
 8004124:	73fb      	strb	r3, [r7, #15]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	791b      	ldrb	r3, [r3, #4]
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	429a      	cmp	r2, r3
 800412e:	d3b5      	bcc.n	800409c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	e893 0006 	ldmia.w	r3, {r1, r2}
 800413c:	f003 fe94 	bl	8007e68 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_PCD_Start+0x16>
 800416a:	2302      	movs	r3, #2
 800416c:	e016      	b.n	800419c <HAL_PCD_Start+0x44>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f003 fe42 	bl	8007e04 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004180:	2101      	movs	r1, #1
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f009 fc10 	bl	800d9a8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f006 f8ff 	bl	800a390 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f006 f8f8 	bl	800a3a6 <USB_ReadInterrupts>
 80041b6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fab1 	bl	800472a <PCD_EP_ISR_Handler>

    return;
 80041c8:	e0bd      	b.n	8004346 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d013      	beq.n	80041fc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e6:	b292      	uxth	r2, r2
 80041e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f009 f9e0 	bl	800d5b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80041f2:	2100      	movs	r1, #0
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f8a9 	bl	800434c <HAL_PCD_SetAddress>

    return;
 80041fa:	e0a4      	b.n	8004346 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00c      	beq.n	8004220 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800420e:	b29a      	uxth	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004218:	b292      	uxth	r2, r2
 800421a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800421e:	e092      	b.n	8004346 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800423c:	b292      	uxth	r2, r2
 800423e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004242:	e080      	b.n	8004346 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d027      	beq.n	800429e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0204 	bic.w	r2, r2, #4
 8004260:	b292      	uxth	r2, r2
 8004262:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0208 	bic.w	r2, r2, #8
 8004278:	b292      	uxth	r2, r2
 800427a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f009 f9d0 	bl	800d624 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004296:	b292      	uxth	r2, r2
 8004298:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800429c:	e053      	b.n	8004346 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d027      	beq.n	80042f8 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0208 	orr.w	r2, r2, #8
 80042ba:	b292      	uxth	r2, r2
 80042bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042d2:	b292      	uxth	r2, r2
 80042d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0204 	orr.w	r2, r2, #4
 80042ea:	b292      	uxth	r2, r2
 80042ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f009 f97d 	bl	800d5f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80042f6:	e026      	b.n	8004346 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00f      	beq.n	8004322 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800430a:	b29a      	uxth	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004314:	b292      	uxth	r2, r2
 8004316:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f009 f93b 	bl	800d596 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004320:	e011      	b.n	8004346 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00c      	beq.n	8004346 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800433e:	b292      	uxth	r2, r2
 8004340:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004344:	bf00      	nop
  }
}
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_PCD_SetAddress+0x1a>
 8004362:	2302      	movs	r3, #2
 8004364:	e012      	b.n	800438c <HAL_PCD_SetAddress+0x40>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f005 fff3 	bl	800a368 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	4608      	mov	r0, r1
 800439e:	4611      	mov	r1, r2
 80043a0:	461a      	mov	r2, r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	70fb      	strb	r3, [r7, #3]
 80043a6:	460b      	mov	r3, r1
 80043a8:	803b      	strh	r3, [r7, #0]
 80043aa:	4613      	mov	r3, r2
 80043ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	da0e      	bge.n	80043d8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	f003 0207 	and.w	r2, r3, #7
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	3310      	adds	r3, #16
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	4413      	add	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	705a      	strb	r2, [r3, #1]
 80043d6:	e00e      	b.n	80043f6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	f003 0207 	and.w	r2, r3, #7
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004402:	883a      	ldrh	r2, [r7, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	78ba      	ldrb	r2, [r7, #2]
 800440c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800440e:	78bb      	ldrb	r3, [r7, #2]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d102      	bne.n	800441a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_PCD_EP_Open+0x94>
 8004424:	2302      	movs	r3, #2
 8004426:	e00e      	b.n	8004446 <HAL_PCD_EP_Open+0xb2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68f9      	ldr	r1, [r7, #12]
 8004436:	4618      	mov	r0, r3
 8004438:	f003 fd34 	bl	8007ea4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004444:	7afb      	ldrb	r3, [r7, #11]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	460b      	mov	r3, r1
 8004458:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800445a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800445e:	2b00      	cmp	r3, #0
 8004460:	da0e      	bge.n	8004480 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	f003 0207 	and.w	r2, r3, #7
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	3310      	adds	r3, #16
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	705a      	strb	r2, [r3, #1]
 800447e:	e00e      	b.n	800449e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	f003 0207 	and.w	r2, r3, #7
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_PCD_EP_Close+0x6a>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e00e      	b.n	80044d6 <HAL_PCD_EP_Close+0x88>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68f9      	ldr	r1, [r7, #12]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f004 f8b0 	bl	800862c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
 80044ea:	460b      	mov	r3, r1
 80044ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ee:	7afb      	ldrb	r3, [r7, #11]
 80044f0:	f003 0207 	and.w	r2, r3, #7
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2200      	movs	r2, #0
 800451c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800451e:	7afb      	ldrb	r3, [r7, #11]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	b2da      	uxtb	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	4618      	mov	r0, r3
 8004532:	f004 fa68 	bl	8008a06 <USB_EPStartXfer>

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	f003 0207 	and.w	r2, r3, #7
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	440b      	add	r3, r1
 800455e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	460b      	mov	r3, r1
 800457e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004580:	7afb      	ldrb	r3, [r7, #11]
 8004582:	f003 0207 	and.w	r2, r3, #7
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	3310      	adds	r3, #16
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2201      	movs	r2, #1
 80045ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045bc:	7afb      	ldrb	r3, [r7, #11]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6979      	ldr	r1, [r7, #20]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f004 fa19 	bl	8008a06 <USB_EPStartXfer>

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	460b      	mov	r3, r1
 80045e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045ea:	78fb      	ldrb	r3, [r7, #3]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	7912      	ldrb	r2, [r2, #4]
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e03e      	b.n	800467a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004600:	2b00      	cmp	r3, #0
 8004602:	da0e      	bge.n	8004622 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 0207 	and.w	r2, r3, #7
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	3310      	adds	r3, #16
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4413      	add	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	705a      	strb	r2, [r3, #1]
 8004620:	e00c      	b.n	800463c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004622:	78fa      	ldrb	r2, [r7, #3]
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	4413      	add	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_PCD_EP_SetStall+0x7e>
 8004658:	2302      	movs	r3, #2
 800465a:	e00e      	b.n	800467a <HAL_PCD_EP_SetStall+0x9c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68f9      	ldr	r1, [r7, #12]
 800466a:	4618      	mov	r0, r3
 800466c:	f005 fd7d 	bl	800a16a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	460b      	mov	r3, r1
 800468c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	7912      	ldrb	r2, [r2, #4]
 8004698:	4293      	cmp	r3, r2
 800469a:	d901      	bls.n	80046a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e040      	b.n	8004722 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	da0e      	bge.n	80046c6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	f003 0207 	and.w	r2, r3, #7
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	3310      	adds	r3, #16
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	4413      	add	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	705a      	strb	r2, [r3, #1]
 80046c4:	e00e      	b.n	80046e4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	f003 0207 	and.w	r2, r3, #7
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	4413      	add	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_PCD_EP_ClrStall+0x82>
 8004700:	2302      	movs	r3, #2
 8004702:	e00e      	b.n	8004722 <HAL_PCD_EP_ClrStall+0xa0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68f9      	ldr	r1, [r7, #12]
 8004712:	4618      	mov	r0, r3
 8004714:	f005 fd7a 	bl	800a20c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b096      	sub	sp, #88	@ 0x58
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004732:	e3bb      	b.n	8004eac <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800473c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004740:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 800474e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004752:	2b00      	cmp	r3, #0
 8004754:	f040 8175 	bne.w	8004a42 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004758:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b00      	cmp	r3, #0
 8004762:	d14e      	bne.n	8004802 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004774:	81fb      	strh	r3, [r7, #14]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	89fb      	ldrh	r3, [r7, #14]
 800477c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004784:	b29b      	uxth	r3, r3
 8004786:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3310      	adds	r3, #16
 800478c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004796:	b29b      	uxth	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4413      	add	r3, r2
 80047a2:	3302      	adds	r3, #2
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80047ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	441a      	add	r2, r3
 80047c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80047c8:	2100      	movs	r1, #0
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f008 fec9 	bl	800d562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	7b1b      	ldrb	r3, [r3, #12]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 8368 	beq.w	8004eac <PCD_EP_ISR_Handler+0x782>
 80047dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f040 8363 	bne.w	8004eac <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	7b1b      	ldrb	r3, [r3, #12]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	731a      	strb	r2, [r3, #12]
 8004800:	e354      	b.n	8004eac <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004808:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004814:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800481c:	2b00      	cmp	r3, #0
 800481e:	d034      	beq.n	800488a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004828:	b29b      	uxth	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	4413      	add	r3, r2
 8004834:	3306      	adds	r3, #6
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800484a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004858:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800485a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800485c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800485e:	b29b      	uxth	r3, r3
 8004860:	f005 fdf7 	bl	800a452 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	b29a      	uxth	r2, r3
 800486c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004870:	4013      	ands	r3, r2
 8004872:	823b      	strh	r3, [r7, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	8a3a      	ldrh	r2, [r7, #16]
 800487a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800487e:	b292      	uxth	r2, r2
 8004880:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f008 fe40 	bl	800d508 <HAL_PCD_SetupStageCallback>
 8004888:	e310      	b.n	8004eac <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800488a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800488e:	2b00      	cmp	r3, #0
 8004890:	f280 830c 	bge.w	8004eac <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29a      	uxth	r2, r3
 800489c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80048a0:	4013      	ands	r3, r2
 80048a2:	83fb      	strh	r3, [r7, #30]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	8bfa      	ldrh	r2, [r7, #30]
 80048aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048ae:	b292      	uxth	r2, r2
 80048b0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	3306      	adds	r3, #6
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048dc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80048de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d019      	beq.n	800491a <PCD_EP_ISR_Handler+0x1f0>
 80048e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d015      	beq.n	800491a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f4:	6959      	ldr	r1, [r3, #20]
 80048f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80048fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048fc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f005 fda7 	bl	800a452 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	441a      	add	r2, r3
 800490e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004910:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004912:	2100      	movs	r1, #0
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f008 fe09 	bl	800d52c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004924:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800492c:	2b00      	cmp	r3, #0
 800492e:	f040 82bd 	bne.w	8004eac <PCD_EP_ISR_Handler+0x782>
 8004932:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004936:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800493a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800493e:	f000 82b5 	beq.w	8004eac <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004950:	b29b      	uxth	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	4413      	add	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800496c:	b29a      	uxth	r2, r3
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <PCD_EP_ISR_Handler+0x266>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004988:	b29a      	uxth	r2, r3
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	801a      	strh	r2, [r3, #0]
 800498e:	e039      	b.n	8004a04 <PCD_EP_ISR_Handler+0x2da>
 8004990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b3e      	cmp	r3, #62	@ 0x3e
 8004996:	d818      	bhi.n	80049ca <PCD_EP_ISR_Handler+0x2a0>
 8004998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <PCD_EP_ISR_Handler+0x288>
 80049ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ae:	3301      	adds	r3, #1
 80049b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	029b      	lsls	r3, r3, #10
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4313      	orrs	r3, r2
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	e01c      	b.n	8004a04 <PCD_EP_ISR_Handler+0x2da>
 80049ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <PCD_EP_ISR_Handler+0x2ba>
 80049de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049e0:	3b01      	subs	r3, #1
 80049e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	029b      	lsls	r3, r3, #10
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	4313      	orrs	r3, r2
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a14:	827b      	strh	r3, [r7, #18]
 8004a16:	8a7b      	ldrh	r3, [r7, #18]
 8004a18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a1c:	827b      	strh	r3, [r7, #18]
 8004a1e:	8a7b      	ldrh	r3, [r7, #18]
 8004a20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a24:	827b      	strh	r3, [r7, #18]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	8a7b      	ldrh	r3, [r7, #18]
 8004a2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	8013      	strh	r3, [r2, #0]
 8004a40:	e234      	b.n	8004eac <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a56:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f280 80fc 	bge.w	8004c58 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004a76:	4013      	ands	r3, r2
 8004a78:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8004a8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a92:	b292      	uxth	r2, r2
 8004a94:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004a96:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aae:	7b1b      	ldrb	r3, [r3, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d125      	bne.n	8004b00 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3306      	adds	r3, #6
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004adc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004ae0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8092 	beq.w	8004c0e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004af0:	6959      	ldr	r1, [r3, #20]
 8004af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004af4:	88da      	ldrh	r2, [r3, #6]
 8004af6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004afa:	f005 fcaa 	bl	800a452 <USB_ReadPMA>
 8004afe:	e086      	b.n	8004c0e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b02:	78db      	ldrb	r3, [r3, #3]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d10a      	bne.n	8004b1e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004b08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f9d9 	bl	8004ec8 <HAL_PCD_EP_DB_Receive>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004b1c:	e077      	b.n	8004c0e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b38:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	441a      	add	r2, r3
 8004b4a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d024      	beq.n	8004bc6 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	4413      	add	r3, r2
 8004b90:	3302      	adds	r3, #2
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004ba8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02e      	beq.n	8004c0e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb6:	6959      	ldr	r1, [r3, #20]
 8004bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bba:	891a      	ldrh	r2, [r3, #8]
 8004bbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bc0:	f005 fc47 	bl	800a452 <USB_ReadPMA>
 8004bc4:	e023      	b.n	8004c0e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4413      	add	r3, r2
 8004bda:	3306      	adds	r3, #6
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bee:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004bf2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c00:	6959      	ldr	r1, [r3, #20]
 8004c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c04:	895a      	ldrh	r2, [r3, #10]
 8004c06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c0a:	f005 fc22 	bl	800a452 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c16:	441a      	add	r2, r3
 8004c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004c24:	441a      	add	r2, r3
 8004c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c28:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <PCD_EP_ISR_Handler+0x514>
 8004c32:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d206      	bcs.n	8004c4c <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f008 fc71 	bl	800d52c <HAL_PCD_DataOutStageCallback>
 8004c4a:	e005      	b.n	8004c58 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c52:	4618      	mov	r0, r3
 8004c54:	f003 fed7 	bl	8008a06 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c58:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8123 	beq.w	8004eac <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004c66:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	3310      	adds	r3, #16
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c94:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb8:	78db      	ldrb	r3, [r3, #3]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	f040 80a2 	bne.w	8004e04 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cc8:	7b1b      	ldrb	r3, [r3, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8093 	beq.w	8004df6 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004cd0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d046      	beq.n	8004d6a <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cde:	785b      	ldrb	r3, [r3, #1]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d126      	bne.n	8004d32 <PCD_EP_ISR_Handler+0x608>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	4413      	add	r3, r2
 8004cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	011a      	lsls	r2, r3, #4
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	4413      	add	r3, r2
 8004d06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d0a:	623b      	str	r3, [r7, #32]
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	801a      	strh	r2, [r3, #0]
 8004d30:	e061      	b.n	8004df6 <PCD_EP_ISR_Handler+0x6cc>
 8004d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d34:	785b      	ldrb	r3, [r3, #1]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d15d      	bne.n	8004df6 <PCD_EP_ISR_Handler+0x6cc>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4e:	4413      	add	r3, r2
 8004d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	011a      	lsls	r2, r3, #4
 8004d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d64:	2200      	movs	r2, #0
 8004d66:	801a      	strh	r2, [r3, #0]
 8004d68:	e045      	b.n	8004df6 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d126      	bne.n	8004dc6 <PCD_EP_ISR_Handler+0x69c>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8c:	4413      	add	r3, r2
 8004d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	011a      	lsls	r2, r3, #4
 8004d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d98:	4413      	add	r3, r2
 8004d9a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dae:	801a      	strh	r2, [r3, #0]
 8004db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc2:	801a      	strh	r2, [r3, #0]
 8004dc4:	e017      	b.n	8004df6 <PCD_EP_ISR_Handler+0x6cc>
 8004dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d113      	bne.n	8004df6 <PCD_EP_ISR_Handler+0x6cc>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ddc:	4413      	add	r3, r2
 8004dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	011a      	lsls	r2, r3, #4
 8004de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de8:	4413      	add	r3, r2
 8004dea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df2:	2200      	movs	r2, #0
 8004df4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f008 fbb0 	bl	800d562 <HAL_PCD_DataInStageCallback>
 8004e02:	e053      	b.n	8004eac <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004e04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d146      	bne.n	8004e9e <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4413      	add	r3, r2
 8004e24:	3302      	adds	r3, #2
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e38:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3e:	699a      	ldr	r2, [r3, #24]
 8004e40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d907      	bls.n	8004e58 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e50:	1ad2      	subs	r2, r2, r3
 8004e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e54:	619a      	str	r2, [r3, #24]
 8004e56:	e002      	b.n	8004e5e <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f008 fb78 	bl	800d562 <HAL_PCD_DataInStageCallback>
 8004e72:	e01b      	b.n	8004eac <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e7c:	441a      	add	r2, r3
 8004e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e80:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e84:	69da      	ldr	r2, [r3, #28]
 8004e86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e8a:	441a      	add	r2, r3
 8004e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e8e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e96:	4618      	mov	r0, r3
 8004e98:	f003 fdb5 	bl	8008a06 <USB_EPStartXfer>
 8004e9c:	e006      	b.n	8004eac <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f91b 	bl	80050e2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	b21b      	sxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f6ff ac3b 	blt.w	8004734 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3758      	adds	r7, #88	@ 0x58
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d07e      	beq.n	8004fde <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f08:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	8b7b      	ldrh	r3, [r7, #26]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d306      	bcc.n	8004f22 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	8b7b      	ldrh	r3, [r7, #26]
 8004f1a:	1ad2      	subs	r2, r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	619a      	str	r2, [r3, #24]
 8004f20:	e002      	b.n	8004f28 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2200      	movs	r2, #0
 8004f26:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d123      	bne.n	8004f78 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4a:	833b      	strh	r3, [r7, #24]
 8004f4c:	8b3b      	ldrh	r3, [r7, #24]
 8004f4e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f52:	833b      	strh	r3, [r7, #24]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	8b3b      	ldrh	r3, [r7, #24]
 8004f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01f      	beq.n	8004fc2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f9c:	82fb      	strh	r3, [r7, #22]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	8afb      	ldrh	r3, [r7, #22]
 8004fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004fc2:	8b7b      	ldrh	r3, [r7, #26]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8087 	beq.w	80050d8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6959      	ldr	r1, [r3, #20]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	891a      	ldrh	r2, [r3, #8]
 8004fd6:	8b7b      	ldrh	r3, [r7, #26]
 8004fd8:	f005 fa3b 	bl	800a452 <USB_ReadPMA>
 8004fdc:	e07c      	b.n	80050d8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3306      	adds	r3, #6
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005006:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	699a      	ldr	r2, [r3, #24]
 800500c:	8b7b      	ldrh	r3, [r7, #26]
 800500e:	429a      	cmp	r2, r3
 8005010:	d306      	bcc.n	8005020 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	8b7b      	ldrh	r3, [r7, #26]
 8005018:	1ad2      	subs	r2, r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	619a      	str	r2, [r3, #24]
 800501e:	e002      	b.n	8005026 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2200      	movs	r2, #0
 8005024:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d123      	bne.n	8005076 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005048:	83fb      	strh	r3, [r7, #30]
 800504a:	8bfb      	ldrh	r3, [r7, #30]
 800504c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005050:	83fb      	strh	r3, [r7, #30]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	441a      	add	r2, r3
 8005060:	8bfb      	ldrh	r3, [r7, #30]
 8005062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800506a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800506e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005072:	b29b      	uxth	r3, r3
 8005074:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d11f      	bne.n	80050c0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509a:	83bb      	strh	r3, [r7, #28]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	8bbb      	ldrh	r3, [r7, #28]
 80050ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050bc:	b29b      	uxth	r3, r3
 80050be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80050c0:	8b7b      	ldrh	r3, [r7, #26]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6959      	ldr	r1, [r3, #20]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	895a      	ldrh	r2, [r3, #10]
 80050d2:	8b7b      	ldrh	r3, [r7, #26]
 80050d4:	f005 f9bd 	bl	800a452 <USB_ReadPMA>
    }
  }

  return count;
 80050d8:	8b7b      	ldrh	r3, [r7, #26]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b0a4      	sub	sp, #144	@ 0x90
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	4613      	mov	r3, r2
 80050ee:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 81dd 	beq.w	80054b6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005104:	b29b      	uxth	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	4413      	add	r3, r2
 8005110:	3302      	adds	r3, #2
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005124:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	699a      	ldr	r2, [r3, #24]
 800512c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005130:	429a      	cmp	r2, r3
 8005132:	d907      	bls.n	8005144 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	699a      	ldr	r2, [r3, #24]
 8005138:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800513c:	1ad2      	subs	r2, r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	619a      	str	r2, [r3, #24]
 8005142:	e002      	b.n	800514a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2200      	movs	r2, #0
 8005148:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f040 80b9 	bne.w	80052c6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d126      	bne.n	80051aa <HAL_PCD_EP_DB_Transmit+0xc8>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800516a:	b29b      	uxth	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005170:	4413      	add	r3, r2
 8005172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	011a      	lsls	r2, r3, #4
 800517a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517c:	4413      	add	r3, r2
 800517e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005182:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800518e:	b29a      	uxth	r2, r3
 8005190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	e01a      	b.n	80051e0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	785b      	ldrb	r3, [r3, #1]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d116      	bne.n	80051e0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c6:	4413      	add	r3, r2
 80051c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	011a      	lsls	r2, r3, #4
 80051d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d2:	4413      	add	r3, r2
 80051d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80051da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051dc:	2200      	movs	r2, #0
 80051de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	785b      	ldrb	r3, [r3, #1]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d126      	bne.n	800523c <HAL_PCD_EP_DB_Transmit+0x15a>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	011a      	lsls	r2, r3, #4
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005214:	61bb      	str	r3, [r7, #24]
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005220:	b29a      	uxth	r2, r3
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005234:	b29a      	uxth	r2, r3
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	e017      	b.n	800526c <HAL_PCD_EP_DB_Transmit+0x18a>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d113      	bne.n	800526c <HAL_PCD_EP_DB_Transmit+0x18a>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800524c:	b29b      	uxth	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	4413      	add	r3, r2
 8005254:	627b      	str	r3, [r7, #36]	@ 0x24
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	011a      	lsls	r2, r3, #4
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	4413      	add	r3, r2
 8005260:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005264:	623b      	str	r3, [r7, #32]
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	2200      	movs	r2, #0
 800526a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	4619      	mov	r1, r3
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f008 f975 	bl	800d562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 82fc 	beq.w	800587c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800529a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529e:	82fb      	strh	r3, [r7, #22]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	8afb      	ldrh	r3, [r7, #22]
 80052b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	8013      	strh	r3, [r2, #0]
 80052c4:	e2da      	b.n	800587c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d021      	beq.n	8005314 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	441a      	add	r2, r3
 80052fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005308:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800530c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005310:	b29b      	uxth	r3, r3
 8005312:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800531a:	2b01      	cmp	r3, #1
 800531c:	f040 82ae 	bne.w	800587c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005328:	441a      	add	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	69da      	ldr	r2, [r3, #28]
 8005332:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005336:	441a      	add	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	6a1a      	ldr	r2, [r3, #32]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	429a      	cmp	r2, r3
 8005346:	d30b      	bcc.n	8005360 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	6a1a      	ldr	r2, [r3, #32]
 8005354:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005358:	1ad2      	subs	r2, r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	621a      	str	r2, [r3, #32]
 800535e:	e017      	b.n	8005390 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d108      	bne.n	800537a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005368:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800536c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005378:	e00a      	b.n	8005390 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2200      	movs	r2, #0
 800538e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d165      	bne.n	8005464 <HAL_PCD_EP_DB_Transmit+0x382>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ac:	4413      	add	r3, r2
 80053ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	011a      	lsls	r2, r3, #4
 80053b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b8:	4413      	add	r3, r2
 80053ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ce:	801a      	strh	r2, [r3, #0]
 80053d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <HAL_PCD_EP_DB_Transmit+0x30c>
 80053d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e057      	b.n	800549e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80053ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80053f4:	d818      	bhi.n	8005428 <HAL_PCD_EP_DB_Transmit+0x346>
 80053f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_PCD_EP_DB_Transmit+0x32e>
 800540a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800540c:	3301      	adds	r3, #1
 800540e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29a      	uxth	r2, r3
 8005416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005418:	b29b      	uxth	r3, r3
 800541a:	029b      	lsls	r3, r3, #10
 800541c:	b29b      	uxth	r3, r3
 800541e:	4313      	orrs	r3, r2
 8005420:	b29a      	uxth	r2, r3
 8005422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	e03a      	b.n	800549e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005430:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	2b00      	cmp	r3, #0
 800543a:	d102      	bne.n	8005442 <HAL_PCD_EP_DB_Transmit+0x360>
 800543c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800543e:	3b01      	subs	r3, #1
 8005440:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29a      	uxth	r2, r3
 8005448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800544a:	b29b      	uxth	r3, r3
 800544c:	029b      	lsls	r3, r3, #10
 800544e:	b29b      	uxth	r3, r3
 8005450:	4313      	orrs	r3, r2
 8005452:	b29b      	uxth	r3, r3
 8005454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545c:	b29a      	uxth	r2, r3
 800545e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	e01c      	b.n	800549e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d118      	bne.n	800549e <HAL_PCD_EP_DB_Transmit+0x3bc>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	647b      	str	r3, [r7, #68]	@ 0x44
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800547a:	b29b      	uxth	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005480:	4413      	add	r3, r2
 8005482:	647b      	str	r3, [r7, #68]	@ 0x44
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	011a      	lsls	r2, r3, #4
 800548a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800548c:	4413      	add	r3, r2
 800548e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005492:	643b      	str	r3, [r7, #64]	@ 0x40
 8005494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005498:	b29a      	uxth	r2, r3
 800549a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800549c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6959      	ldr	r1, [r3, #20]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	891a      	ldrh	r2, [r3, #8]
 80054aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f004 ff89 	bl	800a3c6 <USB_WritePMA>
 80054b4:	e1e2      	b.n	800587c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054be:	b29b      	uxth	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	4413      	add	r3, r2
 80054ca:	3306      	adds	r3, #6
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054de:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d307      	bcc.n	80054fe <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80054f6:	1ad2      	subs	r2, r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	619a      	str	r2, [r3, #24]
 80054fc:	e002      	b.n	8005504 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2200      	movs	r2, #0
 8005502:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f040 80c0 	bne.w	800568e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	785b      	ldrb	r3, [r3, #1]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d126      	bne.n	8005564 <HAL_PCD_EP_DB_Transmit+0x482>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005524:	b29b      	uxth	r3, r3
 8005526:	461a      	mov	r2, r3
 8005528:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800552a:	4413      	add	r3, r2
 800552c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	011a      	lsls	r2, r3, #4
 8005534:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005536:	4413      	add	r3, r2
 8005538:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800553c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800553e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005548:	b29a      	uxth	r2, r3
 800554a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800554c:	801a      	strh	r2, [r3, #0]
 800554e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800555c:	b29a      	uxth	r2, r3
 800555e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	e01a      	b.n	800559a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	785b      	ldrb	r3, [r3, #1]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d116      	bne.n	800559a <HAL_PCD_EP_DB_Transmit+0x4b8>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	667b      	str	r3, [r7, #100]	@ 0x64
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800557a:	b29b      	uxth	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005580:	4413      	add	r3, r2
 8005582:	667b      	str	r3, [r7, #100]	@ 0x64
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	011a      	lsls	r2, r3, #4
 800558a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800558c:	4413      	add	r3, r2
 800558e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005592:	663b      	str	r3, [r7, #96]	@ 0x60
 8005594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005596:	2200      	movs	r2, #0
 8005598:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	677b      	str	r3, [r7, #116]	@ 0x74
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	785b      	ldrb	r3, [r3, #1]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d12b      	bne.n	8005600 <HAL_PCD_EP_DB_Transmit+0x51e>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055bc:	4413      	add	r3, r2
 80055be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	011a      	lsls	r2, r3, #4
 80055c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055c8:	4413      	add	r3, r2
 80055ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055de:	b29a      	uxth	r2, r3
 80055e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055e4:	801a      	strh	r2, [r3, #0]
 80055e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	e017      	b.n	8005630 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d113      	bne.n	8005630 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005610:	b29b      	uxth	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005616:	4413      	add	r3, r2
 8005618:	677b      	str	r3, [r7, #116]	@ 0x74
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	011a      	lsls	r2, r3, #4
 8005620:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005622:	4413      	add	r3, r2
 8005624:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005628:	673b      	str	r3, [r7, #112]	@ 0x70
 800562a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800562c:	2200      	movs	r2, #0
 800562e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	4619      	mov	r1, r3
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f007 ff93 	bl	800d562 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800563c:	88fb      	ldrh	r3, [r7, #6]
 800563e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005642:	2b00      	cmp	r3, #0
 8005644:	f040 811a 	bne.w	800587c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800565e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005662:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	441a      	add	r2, r3
 8005674:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800567c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005680:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005688:	b29b      	uxth	r3, r3
 800568a:	8013      	strh	r3, [r2, #0]
 800568c:	e0f6      	b.n	800587c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d121      	bne.n	80056dc <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	441a      	add	r2, r3
 80056c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80056c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d8:	b29b      	uxth	r3, r3
 80056da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	f040 80ca 	bne.w	800587c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	695a      	ldr	r2, [r3, #20]
 80056ec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80056f0:	441a      	add	r2, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	69da      	ldr	r2, [r3, #28]
 80056fa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80056fe:	441a      	add	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6a1a      	ldr	r2, [r3, #32]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	429a      	cmp	r2, r3
 800570e:	d30b      	bcc.n	8005728 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6a1a      	ldr	r2, [r3, #32]
 800571c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005720:	1ad2      	subs	r2, r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	621a      	str	r2, [r3, #32]
 8005726:	e017      	b.n	8005758 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d108      	bne.n	8005742 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005730:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005734:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005740:	e00a      	b.n	8005758 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2200      	movs	r2, #0
 800574e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	657b      	str	r3, [r7, #84]	@ 0x54
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	785b      	ldrb	r3, [r3, #1]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d165      	bne.n	8005832 <HAL_PCD_EP_DB_Transmit+0x750>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005774:	b29b      	uxth	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800577a:	4413      	add	r3, r2
 800577c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	011a      	lsls	r2, r3, #4
 8005784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005786:	4413      	add	r3, r2
 8005788:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800578c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800578e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005798:	b29a      	uxth	r2, r3
 800579a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <HAL_PCD_EP_DB_Transmit+0x6da>
 80057a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057b8:	801a      	strh	r2, [r3, #0]
 80057ba:	e054      	b.n	8005866 <HAL_PCD_EP_DB_Transmit+0x784>
 80057bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80057c2:	d818      	bhi.n	80057f6 <HAL_PCD_EP_DB_Transmit+0x714>
 80057c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_PCD_EP_DB_Transmit+0x6fc>
 80057d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057da:	3301      	adds	r3, #1
 80057dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	029b      	lsls	r3, r3, #10
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	4313      	orrs	r3, r2
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057f2:	801a      	strh	r2, [r3, #0]
 80057f4:	e037      	b.n	8005866 <HAL_PCD_EP_DB_Transmit+0x784>
 80057f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005802:	f003 031f 	and.w	r3, r3, #31
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <HAL_PCD_EP_DB_Transmit+0x72e>
 800580a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800580c:	3b01      	subs	r3, #1
 800580e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29a      	uxth	r2, r3
 8005816:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005818:	b29b      	uxth	r3, r3
 800581a:	029b      	lsls	r3, r3, #10
 800581c:	b29b      	uxth	r3, r3
 800581e:	4313      	orrs	r3, r2
 8005820:	b29b      	uxth	r3, r3
 8005822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800582a:	b29a      	uxth	r2, r3
 800582c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800582e:	801a      	strh	r2, [r3, #0]
 8005830:	e019      	b.n	8005866 <HAL_PCD_EP_DB_Transmit+0x784>
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d115      	bne.n	8005866 <HAL_PCD_EP_DB_Transmit+0x784>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005842:	b29b      	uxth	r3, r3
 8005844:	461a      	mov	r2, r3
 8005846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005848:	4413      	add	r3, r2
 800584a:	657b      	str	r3, [r7, #84]	@ 0x54
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	011a      	lsls	r2, r3, #4
 8005852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005854:	4413      	add	r3, r2
 8005856:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800585a:	653b      	str	r3, [r7, #80]	@ 0x50
 800585c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005860:	b29a      	uxth	r2, r3
 8005862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005864:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6959      	ldr	r1, [r3, #20]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	895a      	ldrh	r2, [r3, #10]
 8005872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005876:	b29b      	uxth	r3, r3
 8005878:	f004 fda5 	bl	800a3c6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29b      	uxth	r3, r3
 800588e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005892:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005896:	82bb      	strh	r3, [r7, #20]
 8005898:	8abb      	ldrh	r3, [r7, #20]
 800589a:	f083 0310 	eor.w	r3, r3, #16
 800589e:	82bb      	strh	r3, [r7, #20]
 80058a0:	8abb      	ldrh	r3, [r7, #20]
 80058a2:	f083 0320 	eor.w	r3, r3, #32
 80058a6:	82bb      	strh	r3, [r7, #20]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	8abb      	ldrh	r3, [r7, #20]
 80058b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3790      	adds	r7, #144	@ 0x90
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b087      	sub	sp, #28
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	607b      	str	r3, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	817b      	strh	r3, [r7, #10]
 80058e4:	4613      	mov	r3, r2
 80058e6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80058e8:	897b      	ldrh	r3, [r7, #10]
 80058ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00b      	beq.n	800590c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f4:	897b      	ldrh	r3, [r7, #10]
 80058f6:	f003 0207 	and.w	r2, r3, #7
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	3310      	adds	r3, #16
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	e009      	b.n	8005920 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800590c:	897a      	ldrh	r2, [r7, #10]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4413      	add	r3, r2
 800591e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005920:	893b      	ldrh	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d107      	bne.n	8005936 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2200      	movs	r2, #0
 800592a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	b29a      	uxth	r2, r3
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	80da      	strh	r2, [r3, #6]
 8005934:	e00b      	b.n	800594e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2201      	movs	r2, #1
 800593a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	b29a      	uxth	r2, r3
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	0c1b      	lsrs	r3, r3, #16
 8005948:	b29a      	uxth	r2, r3
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8005962:	af00      	add	r7, sp, #0
 8005964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005968:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800596c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800596e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005972:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	f001 b823 	b.w	80069c8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005986:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 817d 	beq.w	8005c92 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005998:	4bbc      	ldr	r3, [pc, #752]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f003 030c 	and.w	r3, r3, #12
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d00c      	beq.n	80059be <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80059a4:	4bb9      	ldr	r3, [pc, #740]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f003 030c 	and.w	r3, r3, #12
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d15c      	bne.n	8005a6a <HAL_RCC_OscConfig+0x10e>
 80059b0:	4bb6      	ldr	r3, [pc, #728]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059bc:	d155      	bne.n	8005a6a <HAL_RCC_OscConfig+0x10e>
 80059be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059c2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80059ca:	fa93 f3a3 	rbit	r3, r3
 80059ce:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80059d2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d6:	fab3 f383 	clz	r3, r3
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f043 0301 	orr.w	r3, r3, #1
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d102      	bne.n	80059f0 <HAL_RCC_OscConfig+0x94>
 80059ea:	4ba8      	ldr	r3, [pc, #672]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	e015      	b.n	8005a1c <HAL_RCC_OscConfig+0xc0>
 80059f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059f4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80059fc:	fa93 f3a3 	rbit	r3, r3
 8005a00:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005a04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a08:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005a0c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005a18:	4b9c      	ldr	r3, [pc, #624]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005a20:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005a24:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005a28:	fa92 f2a2 	rbit	r2, r2
 8005a2c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8005a30:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005a34:	fab2 f282 	clz	r2, r2
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	f042 0220 	orr.w	r2, r2, #32
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	f002 021f 	and.w	r2, r2, #31
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 811f 	beq.w	8005c90 <HAL_RCC_OscConfig+0x334>
 8005a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f040 8116 	bne.w	8005c90 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	f000 bfaf 	b.w	80069c8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a7a:	d106      	bne.n	8005a8a <HAL_RCC_OscConfig+0x12e>
 8005a7c:	4b83      	ldr	r3, [pc, #524]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a82      	ldr	r2, [pc, #520]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e036      	b.n	8005af8 <HAL_RCC_OscConfig+0x19c>
 8005a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10c      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x158>
 8005a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a7b      	ldr	r2, [pc, #492]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	4b79      	ldr	r3, [pc, #484]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a78      	ldr	r2, [pc, #480]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005aac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	e021      	b.n	8005af8 <HAL_RCC_OscConfig+0x19c>
 8005ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ab8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x184>
 8005ac6:	4b71      	ldr	r3, [pc, #452]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a70      	ldr	r2, [pc, #448]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a6d      	ldr	r2, [pc, #436]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	e00b      	b.n	8005af8 <HAL_RCC_OscConfig+0x19c>
 8005ae0:	4b6a      	ldr	r3, [pc, #424]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a69      	ldr	r2, [pc, #420]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4b67      	ldr	r3, [pc, #412]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a66      	ldr	r2, [pc, #408]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005af6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005af8:	4b64      	ldr	r3, [pc, #400]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afc:	f023 020f 	bic.w	r2, r3, #15
 8005b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	495f      	ldr	r1, [pc, #380]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d059      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b22:	f7fb ffdb 	bl	8001adc <HAL_GetTick>
 8005b26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b2a:	e00a      	b.n	8005b42 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b2c:	f7fb ffd6 	bl	8001adc <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b64      	cmp	r3, #100	@ 0x64
 8005b3a:	d902      	bls.n	8005b42 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	f000 bf43 	b.w	80069c8 <HAL_RCC_OscConfig+0x106c>
 8005b42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b46:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005b4e:	fa93 f3a3 	rbit	r3, r3
 8005b52:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005b56:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5a:	fab3 f383 	clz	r3, r3
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	095b      	lsrs	r3, r3, #5
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	f043 0301 	orr.w	r3, r3, #1
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d102      	bne.n	8005b74 <HAL_RCC_OscConfig+0x218>
 8005b6e:	4b47      	ldr	r3, [pc, #284]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	e015      	b.n	8005ba0 <HAL_RCC_OscConfig+0x244>
 8005b74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b78:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005b80:	fa93 f3a3 	rbit	r3, r3
 8005b84:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005b88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b8c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005b90:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005b94:	fa93 f3a3 	rbit	r3, r3
 8005b98:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005ba4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005ba8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005bac:	fa92 f2a2 	rbit	r2, r2
 8005bb0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005bb4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005bb8:	fab2 f282 	clz	r2, r2
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	f042 0220 	orr.w	r2, r2, #32
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	f002 021f 	and.w	r2, r2, #31
 8005bc8:	2101      	movs	r1, #1
 8005bca:	fa01 f202 	lsl.w	r2, r1, r2
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ab      	beq.n	8005b2c <HAL_RCC_OscConfig+0x1d0>
 8005bd4:	e05d      	b.n	8005c92 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd6:	f7fb ff81 	bl	8001adc <HAL_GetTick>
 8005bda:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bde:	e00a      	b.n	8005bf6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005be0:	f7fb ff7c 	bl	8001adc <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b64      	cmp	r3, #100	@ 0x64
 8005bee:	d902      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	f000 bee9 	b.w	80069c8 <HAL_RCC_OscConfig+0x106c>
 8005bf6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005bfa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005c02:	fa93 f3a3 	rbit	r3, r3
 8005c06:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005c0a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c0e:	fab3 f383 	clz	r3, r3
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d102      	bne.n	8005c28 <HAL_RCC_OscConfig+0x2cc>
 8005c22:	4b1a      	ldr	r3, [pc, #104]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	e015      	b.n	8005c54 <HAL_RCC_OscConfig+0x2f8>
 8005c28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c2c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c30:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005c34:	fa93 f3a3 	rbit	r3, r3
 8005c38:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005c3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c40:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005c44:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005c48:	fa93 f3a3 	rbit	r3, r3
 8005c4c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8005c50:	4b0e      	ldr	r3, [pc, #56]	@ (8005c8c <HAL_RCC_OscConfig+0x330>)
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005c58:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005c5c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005c60:	fa92 f2a2 	rbit	r2, r2
 8005c64:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005c68:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005c6c:	fab2 f282 	clz	r2, r2
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	f042 0220 	orr.w	r2, r2, #32
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	f002 021f 	and.w	r2, r2, #31
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1ab      	bne.n	8005be0 <HAL_RCC_OscConfig+0x284>
 8005c88:	e003      	b.n	8005c92 <HAL_RCC_OscConfig+0x336>
 8005c8a:	bf00      	nop
 8005c8c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 817d 	beq.w	8005fa2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005ca8:	4ba6      	ldr	r3, [pc, #664]	@ (8005f44 <HAL_RCC_OscConfig+0x5e8>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f003 030c 	and.w	r3, r3, #12
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00b      	beq.n	8005ccc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005cb4:	4ba3      	ldr	r3, [pc, #652]	@ (8005f44 <HAL_RCC_OscConfig+0x5e8>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f003 030c 	and.w	r3, r3, #12
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d172      	bne.n	8005da6 <HAL_RCC_OscConfig+0x44a>
 8005cc0:	4ba0      	ldr	r3, [pc, #640]	@ (8005f44 <HAL_RCC_OscConfig+0x5e8>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d16c      	bne.n	8005da6 <HAL_RCC_OscConfig+0x44a>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005cd6:	fa93 f3a3 	rbit	r3, r3
 8005cda:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005cde:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ce2:	fab3 f383 	clz	r3, r3
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d102      	bne.n	8005cfc <HAL_RCC_OscConfig+0x3a0>
 8005cf6:	4b93      	ldr	r3, [pc, #588]	@ (8005f44 <HAL_RCC_OscConfig+0x5e8>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	e013      	b.n	8005d24 <HAL_RCC_OscConfig+0x3c8>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d02:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005d06:	fa93 f3a3 	rbit	r3, r3
 8005d0a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005d0e:	2302      	movs	r3, #2
 8005d10:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005d14:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005d18:	fa93 f3a3 	rbit	r3, r3
 8005d1c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005d20:	4b88      	ldr	r3, [pc, #544]	@ (8005f44 <HAL_RCC_OscConfig+0x5e8>)
 8005d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d24:	2202      	movs	r2, #2
 8005d26:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8005d2a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005d2e:	fa92 f2a2 	rbit	r2, r2
 8005d32:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8005d36:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005d3a:	fab2 f282 	clz	r2, r2
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	f042 0220 	orr.w	r2, r2, #32
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	f002 021f 	and.w	r2, r2, #31
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_RCC_OscConfig+0x410>
 8005d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d002      	beq.n	8005d6c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f000 be2e 	b.w	80069c8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d6c:	4b75      	ldr	r3, [pc, #468]	@ (8005f44 <HAL_RCC_OscConfig+0x5e8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	21f8      	movs	r1, #248	@ 0xf8
 8005d82:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d86:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005d8a:	fa91 f1a1 	rbit	r1, r1
 8005d8e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8005d92:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8005d96:	fab1 f181 	clz	r1, r1
 8005d9a:	b2c9      	uxtb	r1, r1
 8005d9c:	408b      	lsls	r3, r1
 8005d9e:	4969      	ldr	r1, [pc, #420]	@ (8005f44 <HAL_RCC_OscConfig+0x5e8>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da4:	e0fd      	b.n	8005fa2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005daa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 8088 	beq.w	8005ec8 <HAL_RCC_OscConfig+0x56c>
 8005db8:	2301      	movs	r3, #1
 8005dba:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dbe:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8005dc2:	fa93 f3a3 	rbit	r3, r3
 8005dc6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8005dca:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dce:	fab3 f383 	clz	r3, r3
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005dd8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	461a      	mov	r2, r3
 8005de0:	2301      	movs	r3, #1
 8005de2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de4:	f7fb fe7a 	bl	8001adc <HAL_GetTick>
 8005de8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dec:	e00a      	b.n	8005e04 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dee:	f7fb fe75 	bl	8001adc <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d902      	bls.n	8005e04 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	f000 bde2 	b.w	80069c8 <HAL_RCC_OscConfig+0x106c>
 8005e04:	2302      	movs	r3, #2
 8005e06:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8005e0e:	fa93 f3a3 	rbit	r3, r3
 8005e12:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8005e16:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e1a:	fab3 f383 	clz	r3, r3
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f043 0301 	orr.w	r3, r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d102      	bne.n	8005e34 <HAL_RCC_OscConfig+0x4d8>
 8005e2e:	4b45      	ldr	r3, [pc, #276]	@ (8005f44 <HAL_RCC_OscConfig+0x5e8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	e013      	b.n	8005e5c <HAL_RCC_OscConfig+0x500>
 8005e34:	2302      	movs	r3, #2
 8005e36:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005e3e:	fa93 f3a3 	rbit	r3, r3
 8005e42:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005e46:	2302      	movs	r3, #2
 8005e48:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005e4c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8005e50:	fa93 f3a3 	rbit	r3, r3
 8005e54:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8005e58:	4b3a      	ldr	r3, [pc, #232]	@ (8005f44 <HAL_RCC_OscConfig+0x5e8>)
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8005e62:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8005e66:	fa92 f2a2 	rbit	r2, r2
 8005e6a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8005e6e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8005e72:	fab2 f282 	clz	r2, r2
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	f042 0220 	orr.w	r2, r2, #32
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	f002 021f 	and.w	r2, r2, #31
 8005e82:	2101      	movs	r1, #1
 8005e84:	fa01 f202 	lsl.w	r2, r1, r2
 8005e88:	4013      	ands	r3, r2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0af      	beq.n	8005dee <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f44 <HAL_RCC_OscConfig+0x5e8>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	21f8      	movs	r1, #248	@ 0xf8
 8005ea4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005eac:	fa91 f1a1 	rbit	r1, r1
 8005eb0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005eb4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005eb8:	fab1 f181 	clz	r1, r1
 8005ebc:	b2c9      	uxtb	r1, r1
 8005ebe:	408b      	lsls	r3, r1
 8005ec0:	4920      	ldr	r1, [pc, #128]	@ (8005f44 <HAL_RCC_OscConfig+0x5e8>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	600b      	str	r3, [r1, #0]
 8005ec6:	e06c      	b.n	8005fa2 <HAL_RCC_OscConfig+0x646>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ece:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005ed2:	fa93 f3a3 	rbit	r3, r3
 8005ed6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8005eda:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ede:	fab3 f383 	clz	r3, r3
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005ee8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	461a      	mov	r2, r3
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef4:	f7fb fdf2 	bl	8001adc <HAL_GetTick>
 8005ef8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efc:	e00a      	b.n	8005f14 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005efe:	f7fb fded 	bl	8001adc <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d902      	bls.n	8005f14 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	f000 bd5a 	b.w	80069c8 <HAL_RCC_OscConfig+0x106c>
 8005f14:	2302      	movs	r3, #2
 8005f16:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f1e:	fa93 f3a3 	rbit	r3, r3
 8005f22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8005f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f2a:	fab3 f383 	clz	r3, r3
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f043 0301 	orr.w	r3, r3, #1
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d104      	bne.n	8005f48 <HAL_RCC_OscConfig+0x5ec>
 8005f3e:	4b01      	ldr	r3, [pc, #4]	@ (8005f44 <HAL_RCC_OscConfig+0x5e8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	e015      	b.n	8005f70 <HAL_RCC_OscConfig+0x614>
 8005f44:	40021000 	.word	0x40021000
 8005f48:	2302      	movs	r3, #2
 8005f4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f52:	fa93 f3a3 	rbit	r3, r3
 8005f56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005f60:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f64:	fa93 f3a3 	rbit	r3, r3
 8005f68:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005f6c:	4bc8      	ldr	r3, [pc, #800]	@ (8006290 <HAL_RCC_OscConfig+0x934>)
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	2202      	movs	r2, #2
 8005f72:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8005f76:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005f7a:	fa92 f2a2 	rbit	r2, r2
 8005f7e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8005f82:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005f86:	fab2 f282 	clz	r2, r2
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	f042 0220 	orr.w	r2, r2, #32
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	f002 021f 	and.w	r2, r2, #31
 8005f96:	2101      	movs	r1, #1
 8005f98:	fa01 f202 	lsl.w	r2, r1, r2
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1ad      	bne.n	8005efe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 8110 	beq.w	80061d8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d079      	beq.n	80060bc <HAL_RCC_OscConfig+0x760>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005fd2:	fa93 f3a3 	rbit	r3, r3
 8005fd6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8005fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fde:	fab3 f383 	clz	r3, r3
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4bab      	ldr	r3, [pc, #684]	@ (8006294 <HAL_RCC_OscConfig+0x938>)
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	461a      	mov	r2, r3
 8005fee:	2301      	movs	r3, #1
 8005ff0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff2:	f7fb fd73 	bl	8001adc <HAL_GetTick>
 8005ff6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ffa:	e00a      	b.n	8006012 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ffc:	f7fb fd6e 	bl	8001adc <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d902      	bls.n	8006012 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	f000 bcdb 	b.w	80069c8 <HAL_RCC_OscConfig+0x106c>
 8006012:	2302      	movs	r3, #2
 8006014:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006018:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800601c:	fa93 f3a3 	rbit	r3, r3
 8006020:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006028:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800602c:	2202      	movs	r2, #2
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006034:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	fa93 f2a3 	rbit	r2, r3
 800603e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006042:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800604c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006050:	2202      	movs	r2, #2
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006058:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	fa93 f2a3 	rbit	r2, r3
 8006062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006066:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800606a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800606c:	4b88      	ldr	r3, [pc, #544]	@ (8006290 <HAL_RCC_OscConfig+0x934>)
 800606e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006074:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006078:	2102      	movs	r1, #2
 800607a:	6019      	str	r1, [r3, #0]
 800607c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006080:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	fa93 f1a3 	rbit	r1, r3
 800608a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800608e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006092:	6019      	str	r1, [r3, #0]
  return result;
 8006094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006098:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	fab3 f383 	clz	r3, r3
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	2101      	movs	r1, #1
 80060b0:	fa01 f303 	lsl.w	r3, r1, r3
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0a0      	beq.n	8005ffc <HAL_RCC_OscConfig+0x6a0>
 80060ba:	e08d      	b.n	80061d8 <HAL_RCC_OscConfig+0x87c>
 80060bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060c0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80060c4:	2201      	movs	r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	fa93 f2a3 	rbit	r2, r3
 80060d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80060de:	601a      	str	r2, [r3, #0]
  return result;
 80060e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060e4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80060e8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ea:	fab3 f383 	clz	r3, r3
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b68      	ldr	r3, [pc, #416]	@ (8006294 <HAL_RCC_OscConfig+0x938>)
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	461a      	mov	r2, r3
 80060fa:	2300      	movs	r3, #0
 80060fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060fe:	f7fb fced 	bl	8001adc <HAL_GetTick>
 8006102:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006106:	e00a      	b.n	800611e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006108:	f7fb fce8 	bl	8001adc <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d902      	bls.n	800611e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	f000 bc55 	b.w	80069c8 <HAL_RCC_OscConfig+0x106c>
 800611e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006122:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006126:	2202      	movs	r2, #2
 8006128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800612e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	fa93 f2a3 	rbit	r2, r3
 8006138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800613c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006146:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800614a:	2202      	movs	r2, #2
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006152:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	fa93 f2a3 	rbit	r2, r3
 800615c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006160:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800616a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800616e:	2202      	movs	r2, #2
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006176:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	fa93 f2a3 	rbit	r2, r3
 8006180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006184:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006188:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800618a:	4b41      	ldr	r3, [pc, #260]	@ (8006290 <HAL_RCC_OscConfig+0x934>)
 800618c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800618e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006192:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006196:	2102      	movs	r1, #2
 8006198:	6019      	str	r1, [r3, #0]
 800619a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800619e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	fa93 f1a3 	rbit	r1, r3
 80061a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80061b0:	6019      	str	r1, [r3, #0]
  return result;
 80061b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	fab3 f383 	clz	r3, r3
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2101      	movs	r1, #1
 80061ce:	fa01 f303 	lsl.w	r3, r1, r3
 80061d2:	4013      	ands	r3, r2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d197      	bne.n	8006108 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 81a1 	beq.w	8006530 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061ee:	2300      	movs	r3, #0
 80061f0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061f4:	4b26      	ldr	r3, [pc, #152]	@ (8006290 <HAL_RCC_OscConfig+0x934>)
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d116      	bne.n	800622e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006200:	4b23      	ldr	r3, [pc, #140]	@ (8006290 <HAL_RCC_OscConfig+0x934>)
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	4a22      	ldr	r2, [pc, #136]	@ (8006290 <HAL_RCC_OscConfig+0x934>)
 8006206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800620a:	61d3      	str	r3, [r2, #28]
 800620c:	4b20      	ldr	r3, [pc, #128]	@ (8006290 <HAL_RCC_OscConfig+0x934>)
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006218:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006222:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006226:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006228:	2301      	movs	r3, #1
 800622a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622e:	4b1a      	ldr	r3, [pc, #104]	@ (8006298 <HAL_RCC_OscConfig+0x93c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006236:	2b00      	cmp	r3, #0
 8006238:	d11a      	bne.n	8006270 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800623a:	4b17      	ldr	r3, [pc, #92]	@ (8006298 <HAL_RCC_OscConfig+0x93c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a16      	ldr	r2, [pc, #88]	@ (8006298 <HAL_RCC_OscConfig+0x93c>)
 8006240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006244:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006246:	f7fb fc49 	bl	8001adc <HAL_GetTick>
 800624a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624e:	e009      	b.n	8006264 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006250:	f7fb fc44 	bl	8001adc <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b64      	cmp	r3, #100	@ 0x64
 800625e:	d901      	bls.n	8006264 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e3b1      	b.n	80069c8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006264:	4b0c      	ldr	r3, [pc, #48]	@ (8006298 <HAL_RCC_OscConfig+0x93c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0ef      	beq.n	8006250 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006274:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d10d      	bne.n	800629c <HAL_RCC_OscConfig+0x940>
 8006280:	4b03      	ldr	r3, [pc, #12]	@ (8006290 <HAL_RCC_OscConfig+0x934>)
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	4a02      	ldr	r2, [pc, #8]	@ (8006290 <HAL_RCC_OscConfig+0x934>)
 8006286:	f043 0301 	orr.w	r3, r3, #1
 800628a:	6213      	str	r3, [r2, #32]
 800628c:	e03c      	b.n	8006308 <HAL_RCC_OscConfig+0x9ac>
 800628e:	bf00      	nop
 8006290:	40021000 	.word	0x40021000
 8006294:	10908120 	.word	0x10908120
 8006298:	40007000 	.word	0x40007000
 800629c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10c      	bne.n	80062c6 <HAL_RCC_OscConfig+0x96a>
 80062ac:	4bc1      	ldr	r3, [pc, #772]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	4ac0      	ldr	r2, [pc, #768]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	6213      	str	r3, [r2, #32]
 80062b8:	4bbe      	ldr	r3, [pc, #760]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	4abd      	ldr	r2, [pc, #756]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80062be:	f023 0304 	bic.w	r3, r3, #4
 80062c2:	6213      	str	r3, [r2, #32]
 80062c4:	e020      	b.n	8006308 <HAL_RCC_OscConfig+0x9ac>
 80062c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	2b05      	cmp	r3, #5
 80062d4:	d10c      	bne.n	80062f0 <HAL_RCC_OscConfig+0x994>
 80062d6:	4bb7      	ldr	r3, [pc, #732]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	4ab6      	ldr	r2, [pc, #728]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80062dc:	f043 0304 	orr.w	r3, r3, #4
 80062e0:	6213      	str	r3, [r2, #32]
 80062e2:	4bb4      	ldr	r3, [pc, #720]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	4ab3      	ldr	r2, [pc, #716]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	6213      	str	r3, [r2, #32]
 80062ee:	e00b      	b.n	8006308 <HAL_RCC_OscConfig+0x9ac>
 80062f0:	4bb0      	ldr	r3, [pc, #704]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	4aaf      	ldr	r2, [pc, #700]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80062f6:	f023 0301 	bic.w	r3, r3, #1
 80062fa:	6213      	str	r3, [r2, #32]
 80062fc:	4bad      	ldr	r3, [pc, #692]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	4aac      	ldr	r2, [pc, #688]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 8006302:	f023 0304 	bic.w	r3, r3, #4
 8006306:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800630c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8081 	beq.w	800641c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800631a:	f7fb fbdf 	bl	8001adc <HAL_GetTick>
 800631e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006322:	e00b      	b.n	800633c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006324:	f7fb fbda 	bl	8001adc <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006334:	4293      	cmp	r3, r2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e345      	b.n	80069c8 <HAL_RCC_OscConfig+0x106c>
 800633c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006340:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006344:	2202      	movs	r2, #2
 8006346:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800634c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	fa93 f2a3 	rbit	r2, r3
 8006356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800635a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006364:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006368:	2202      	movs	r2, #2
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006370:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	fa93 f2a3 	rbit	r2, r3
 800637a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800637e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006382:	601a      	str	r2, [r3, #0]
  return result;
 8006384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006388:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800638c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638e:	fab3 f383 	clz	r3, r3
 8006392:	b2db      	uxtb	r3, r3
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	b2db      	uxtb	r3, r3
 8006398:	f043 0302 	orr.w	r3, r3, #2
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d102      	bne.n	80063a8 <HAL_RCC_OscConfig+0xa4c>
 80063a2:	4b84      	ldr	r3, [pc, #528]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	e013      	b.n	80063d0 <HAL_RCC_OscConfig+0xa74>
 80063a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063ac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80063b0:	2202      	movs	r2, #2
 80063b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063b8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	fa93 f2a3 	rbit	r2, r3
 80063c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063c6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	4b79      	ldr	r3, [pc, #484]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80063ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063d4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80063d8:	2102      	movs	r1, #2
 80063da:	6011      	str	r1, [r2, #0]
 80063dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063e0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	fa92 f1a2 	rbit	r1, r2
 80063ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063ee:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80063f2:	6011      	str	r1, [r2, #0]
  return result;
 80063f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063f8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	fab2 f282 	clz	r2, r2
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	f002 021f 	and.w	r2, r2, #31
 800640e:	2101      	movs	r1, #1
 8006410:	fa01 f202 	lsl.w	r2, r1, r2
 8006414:	4013      	ands	r3, r2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d084      	beq.n	8006324 <HAL_RCC_OscConfig+0x9c8>
 800641a:	e07f      	b.n	800651c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800641c:	f7fb fb5e 	bl	8001adc <HAL_GetTick>
 8006420:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006424:	e00b      	b.n	800643e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006426:	f7fb fb59 	bl	8001adc <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006436:	4293      	cmp	r3, r2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e2c4      	b.n	80069c8 <HAL_RCC_OscConfig+0x106c>
 800643e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006442:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006446:	2202      	movs	r2, #2
 8006448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800644a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800644e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	fa93 f2a3 	rbit	r2, r3
 8006458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800645c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006466:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800646a:	2202      	movs	r2, #2
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006472:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	fa93 f2a3 	rbit	r2, r3
 800647c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006480:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006484:	601a      	str	r2, [r3, #0]
  return result;
 8006486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800648a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800648e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006490:	fab3 f383 	clz	r3, r3
 8006494:	b2db      	uxtb	r3, r3
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	b2db      	uxtb	r3, r3
 800649a:	f043 0302 	orr.w	r3, r3, #2
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d102      	bne.n	80064aa <HAL_RCC_OscConfig+0xb4e>
 80064a4:	4b43      	ldr	r3, [pc, #268]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	e013      	b.n	80064d2 <HAL_RCC_OscConfig+0xb76>
 80064aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064ae:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80064b2:	2202      	movs	r2, #2
 80064b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064ba:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	fa93 f2a3 	rbit	r2, r3
 80064c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064c8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	4b39      	ldr	r3, [pc, #228]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064d6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80064da:	2102      	movs	r1, #2
 80064dc:	6011      	str	r1, [r2, #0]
 80064de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064e2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80064e6:	6812      	ldr	r2, [r2, #0]
 80064e8:	fa92 f1a2 	rbit	r1, r2
 80064ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064f0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80064f4:	6011      	str	r1, [r2, #0]
  return result;
 80064f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064fa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	fab2 f282 	clz	r2, r2
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	f002 021f 	and.w	r2, r2, #31
 8006510:	2101      	movs	r1, #1
 8006512:	fa01 f202 	lsl.w	r2, r1, r2
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d184      	bne.n	8006426 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800651c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8006520:	2b01      	cmp	r3, #1
 8006522:	d105      	bne.n	8006530 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006524:	4b23      	ldr	r3, [pc, #140]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	4a22      	ldr	r2, [pc, #136]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 800652a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800652e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006534:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8242 	beq.w	80069c6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006542:	4b1c      	ldr	r3, [pc, #112]	@ (80065b4 <HAL_RCC_OscConfig+0xc58>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f003 030c 	and.w	r3, r3, #12
 800654a:	2b08      	cmp	r3, #8
 800654c:	f000 8213 	beq.w	8006976 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006554:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	2b02      	cmp	r3, #2
 800655e:	f040 8162 	bne.w	8006826 <HAL_RCC_OscConfig+0xeca>
 8006562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006566:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800656a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800656e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006574:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	fa93 f2a3 	rbit	r2, r3
 800657e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006582:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006586:	601a      	str	r2, [r3, #0]
  return result;
 8006588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800658c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006590:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006592:	fab3 f383 	clz	r3, r3
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800659c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	461a      	mov	r2, r3
 80065a4:	2300      	movs	r3, #0
 80065a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a8:	f7fb fa98 	bl	8001adc <HAL_GetTick>
 80065ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065b0:	e00c      	b.n	80065cc <HAL_RCC_OscConfig+0xc70>
 80065b2:	bf00      	nop
 80065b4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b8:	f7fb fa90 	bl	8001adc <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e1fd      	b.n	80069c8 <HAL_RCC_OscConfig+0x106c>
 80065cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065d0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80065d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065de:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	fa93 f2a3 	rbit	r2, r3
 80065e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ec:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80065f0:	601a      	str	r2, [r3, #0]
  return result;
 80065f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065f6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80065fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065fc:	fab3 f383 	clz	r3, r3
 8006600:	b2db      	uxtb	r3, r3
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	b2db      	uxtb	r3, r3
 8006606:	f043 0301 	orr.w	r3, r3, #1
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b01      	cmp	r3, #1
 800660e:	d102      	bne.n	8006616 <HAL_RCC_OscConfig+0xcba>
 8006610:	4bb0      	ldr	r3, [pc, #704]	@ (80068d4 <HAL_RCC_OscConfig+0xf78>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	e027      	b.n	8006666 <HAL_RCC_OscConfig+0xd0a>
 8006616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800661a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800661e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006628:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	fa93 f2a3 	rbit	r2, r3
 8006632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006636:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006640:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006644:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800664e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	fa93 f2a3 	rbit	r2, r3
 8006658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800665c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	4b9c      	ldr	r3, [pc, #624]	@ (80068d4 <HAL_RCC_OscConfig+0xf78>)
 8006664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006666:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800666a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800666e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006672:	6011      	str	r1, [r2, #0]
 8006674:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006678:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800667c:	6812      	ldr	r2, [r2, #0]
 800667e:	fa92 f1a2 	rbit	r1, r2
 8006682:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006686:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800668a:	6011      	str	r1, [r2, #0]
  return result;
 800668c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006690:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006694:	6812      	ldr	r2, [r2, #0]
 8006696:	fab2 f282 	clz	r2, r2
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	f042 0220 	orr.w	r2, r2, #32
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	f002 021f 	and.w	r2, r2, #31
 80066a6:	2101      	movs	r1, #1
 80066a8:	fa01 f202 	lsl.w	r2, r1, r2
 80066ac:	4013      	ands	r3, r2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d182      	bne.n	80065b8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066b2:	4b88      	ldr	r3, [pc, #544]	@ (80068d4 <HAL_RCC_OscConfig+0xf78>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80066ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80066c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	430b      	orrs	r3, r1
 80066d4:	497f      	ldr	r1, [pc, #508]	@ (80068d4 <HAL_RCC_OscConfig+0xf78>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	604b      	str	r3, [r1, #4]
 80066da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066de:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80066e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066ec:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	fa93 f2a3 	rbit	r2, r3
 80066f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066fa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80066fe:	601a      	str	r2, [r3, #0]
  return result;
 8006700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006704:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006708:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800670a:	fab3 f383 	clz	r3, r3
 800670e:	b2db      	uxtb	r3, r3
 8006710:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006714:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	461a      	mov	r2, r3
 800671c:	2301      	movs	r3, #1
 800671e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006720:	f7fb f9dc 	bl	8001adc <HAL_GetTick>
 8006724:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006728:	e009      	b.n	800673e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800672a:	f7fb f9d7 	bl	8001adc <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e144      	b.n	80069c8 <HAL_RCC_OscConfig+0x106c>
 800673e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006742:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006746:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800674a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006750:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	fa93 f2a3 	rbit	r2, r3
 800675a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800675e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006762:	601a      	str	r2, [r3, #0]
  return result;
 8006764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006768:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800676c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800676e:	fab3 f383 	clz	r3, r3
 8006772:	b2db      	uxtb	r3, r3
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f043 0301 	orr.w	r3, r3, #1
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b01      	cmp	r3, #1
 8006780:	d102      	bne.n	8006788 <HAL_RCC_OscConfig+0xe2c>
 8006782:	4b54      	ldr	r3, [pc, #336]	@ (80068d4 <HAL_RCC_OscConfig+0xf78>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	e027      	b.n	80067d8 <HAL_RCC_OscConfig+0xe7c>
 8006788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800678c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006790:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800679a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	fa93 f2a3 	rbit	r2, r3
 80067a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067a8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067b2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80067b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067c0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	fa93 f2a3 	rbit	r2, r3
 80067ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067ce:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	4b3f      	ldr	r3, [pc, #252]	@ (80068d4 <HAL_RCC_OscConfig+0xf78>)
 80067d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067dc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80067e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80067e4:	6011      	str	r1, [r2, #0]
 80067e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067ea:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80067ee:	6812      	ldr	r2, [r2, #0]
 80067f0:	fa92 f1a2 	rbit	r1, r2
 80067f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067f8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80067fc:	6011      	str	r1, [r2, #0]
  return result;
 80067fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006802:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	fab2 f282 	clz	r2, r2
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	f042 0220 	orr.w	r2, r2, #32
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	f002 021f 	and.w	r2, r2, #31
 8006818:	2101      	movs	r1, #1
 800681a:	fa01 f202 	lsl.w	r2, r1, r2
 800681e:	4013      	ands	r3, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d082      	beq.n	800672a <HAL_RCC_OscConfig+0xdce>
 8006824:	e0cf      	b.n	80069c6 <HAL_RCC_OscConfig+0x106a>
 8006826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800682a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800682e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006838:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	fa93 f2a3 	rbit	r2, r3
 8006842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006846:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800684a:	601a      	str	r2, [r3, #0]
  return result;
 800684c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006850:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006854:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006856:	fab3 f383 	clz	r3, r3
 800685a:	b2db      	uxtb	r3, r3
 800685c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006860:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	461a      	mov	r2, r3
 8006868:	2300      	movs	r3, #0
 800686a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800686c:	f7fb f936 	bl	8001adc <HAL_GetTick>
 8006870:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006874:	e009      	b.n	800688a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006876:	f7fb f931 	bl	8001adc <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e09e      	b.n	80069c8 <HAL_RCC_OscConfig+0x106c>
 800688a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800688e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006892:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800689c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	fa93 f2a3 	rbit	r2, r3
 80068a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068aa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80068ae:	601a      	str	r2, [r3, #0]
  return result;
 80068b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068b4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80068b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068ba:	fab3 f383 	clz	r3, r3
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	095b      	lsrs	r3, r3, #5
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d104      	bne.n	80068d8 <HAL_RCC_OscConfig+0xf7c>
 80068ce:	4b01      	ldr	r3, [pc, #4]	@ (80068d4 <HAL_RCC_OscConfig+0xf78>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	e029      	b.n	8006928 <HAL_RCC_OscConfig+0xfcc>
 80068d4:	40021000 	.word	0x40021000
 80068d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068dc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80068e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ea:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	fa93 f2a3 	rbit	r2, r3
 80068f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068f8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006902:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006906:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006910:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	fa93 f2a3 	rbit	r2, r3
 800691a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800691e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	4b2b      	ldr	r3, [pc, #172]	@ (80069d4 <HAL_RCC_OscConfig+0x1078>)
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800692c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006930:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006934:	6011      	str	r1, [r2, #0]
 8006936:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800693a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800693e:	6812      	ldr	r2, [r2, #0]
 8006940:	fa92 f1a2 	rbit	r1, r2
 8006944:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006948:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800694c:	6011      	str	r1, [r2, #0]
  return result;
 800694e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006952:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	fab2 f282 	clz	r2, r2
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	f042 0220 	orr.w	r2, r2, #32
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	f002 021f 	and.w	r2, r2, #31
 8006968:	2101      	movs	r1, #1
 800696a:	fa01 f202 	lsl.w	r2, r1, r2
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d180      	bne.n	8006876 <HAL_RCC_OscConfig+0xf1a>
 8006974:	e027      	b.n	80069c6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800697a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e01e      	b.n	80069c8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800698a:	4b12      	ldr	r3, [pc, #72]	@ (80069d4 <HAL_RCC_OscConfig+0x1078>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006992:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006996:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800699a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800699e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d10b      	bne.n	80069c2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80069aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80069ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80069b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80069be:	429a      	cmp	r2, r3
 80069c0:	d001      	beq.n	80069c6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e000      	b.n	80069c8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40021000 	.word	0x40021000

080069d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b09e      	sub	sp, #120	@ 0x78
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e162      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069f0:	4b90      	ldr	r3, [pc, #576]	@ (8006c34 <HAL_RCC_ClockConfig+0x25c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d910      	bls.n	8006a20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006c34 <HAL_RCC_ClockConfig+0x25c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f023 0207 	bic.w	r2, r3, #7
 8006a06:	498b      	ldr	r1, [pc, #556]	@ (8006c34 <HAL_RCC_ClockConfig+0x25c>)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a0e:	4b89      	ldr	r3, [pc, #548]	@ (8006c34 <HAL_RCC_ClockConfig+0x25c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d001      	beq.n	8006a20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e14a      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d008      	beq.n	8006a3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a2c:	4b82      	ldr	r3, [pc, #520]	@ (8006c38 <HAL_RCC_ClockConfig+0x260>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	497f      	ldr	r1, [pc, #508]	@ (8006c38 <HAL_RCC_ClockConfig+0x260>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80dc 	beq.w	8006c04 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d13c      	bne.n	8006ace <HAL_RCC_ClockConfig+0xf6>
 8006a54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a58:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a5c:	fa93 f3a3 	rbit	r3, r3
 8006a60:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006a62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a64:	fab3 f383 	clz	r3, r3
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	f043 0301 	orr.w	r3, r3, #1
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d102      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xa6>
 8006a78:	4b6f      	ldr	r3, [pc, #444]	@ (8006c38 <HAL_RCC_ClockConfig+0x260>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	e00f      	b.n	8006a9e <HAL_RCC_ClockConfig+0xc6>
 8006a7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a82:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a86:	fa93 f3a3 	rbit	r3, r3
 8006a8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a94:	fa93 f3a3 	rbit	r3, r3
 8006a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a9a:	4b67      	ldr	r3, [pc, #412]	@ (8006c38 <HAL_RCC_ClockConfig+0x260>)
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006aa2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006aa4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006aa6:	fa92 f2a2 	rbit	r2, r2
 8006aaa:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006aac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006aae:	fab2 f282 	clz	r2, r2
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	f042 0220 	orr.w	r2, r2, #32
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	f002 021f 	and.w	r2, r2, #31
 8006abe:	2101      	movs	r1, #1
 8006ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d17b      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e0f3      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d13c      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x178>
 8006ad6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ada:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ade:	fa93 f3a3 	rbit	r3, r3
 8006ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ae6:	fab3 f383 	clz	r3, r3
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d102      	bne.n	8006b00 <HAL_RCC_ClockConfig+0x128>
 8006afa:	4b4f      	ldr	r3, [pc, #316]	@ (8006c38 <HAL_RCC_ClockConfig+0x260>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	e00f      	b.n	8006b20 <HAL_RCC_ClockConfig+0x148>
 8006b00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b08:	fa93 f3a3 	rbit	r3, r3
 8006b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b16:	fa93 f3a3 	rbit	r3, r3
 8006b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b1c:	4b46      	ldr	r3, [pc, #280]	@ (8006c38 <HAL_RCC_ClockConfig+0x260>)
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b24:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006b26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b28:	fa92 f2a2 	rbit	r2, r2
 8006b2c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006b2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b30:	fab2 f282 	clz	r2, r2
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	f042 0220 	orr.w	r2, r2, #32
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	f002 021f 	and.w	r2, r2, #31
 8006b40:	2101      	movs	r1, #1
 8006b42:	fa01 f202 	lsl.w	r2, r1, r2
 8006b46:	4013      	ands	r3, r2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d13a      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0b2      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x2de>
 8006b50:	2302      	movs	r3, #2
 8006b52:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b56:	fa93 f3a3 	rbit	r3, r3
 8006b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b5e:	fab3 f383 	clz	r3, r3
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	095b      	lsrs	r3, r3, #5
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	f043 0301 	orr.w	r3, r3, #1
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d102      	bne.n	8006b78 <HAL_RCC_ClockConfig+0x1a0>
 8006b72:	4b31      	ldr	r3, [pc, #196]	@ (8006c38 <HAL_RCC_ClockConfig+0x260>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	e00d      	b.n	8006b94 <HAL_RCC_ClockConfig+0x1bc>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7e:	fa93 f3a3 	rbit	r3, r3
 8006b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b84:	2302      	movs	r3, #2
 8006b86:	623b      	str	r3, [r7, #32]
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	fa93 f3a3 	rbit	r3, r3
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	4b29      	ldr	r3, [pc, #164]	@ (8006c38 <HAL_RCC_ClockConfig+0x260>)
 8006b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b94:	2202      	movs	r2, #2
 8006b96:	61ba      	str	r2, [r7, #24]
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	fa92 f2a2 	rbit	r2, r2
 8006b9e:	617a      	str	r2, [r7, #20]
  return result;
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	fab2 f282 	clz	r2, r2
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	f042 0220 	orr.w	r2, r2, #32
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	f002 021f 	and.w	r2, r2, #31
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8006bb8:	4013      	ands	r3, r2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e079      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006c38 <HAL_RCC_ClockConfig+0x260>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f023 0203 	bic.w	r2, r3, #3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	491a      	ldr	r1, [pc, #104]	@ (8006c38 <HAL_RCC_ClockConfig+0x260>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bd4:	f7fa ff82 	bl	8001adc <HAL_GetTick>
 8006bd8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bda:	e00a      	b.n	8006bf2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bdc:	f7fa ff7e 	bl	8001adc <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e061      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf2:	4b11      	ldr	r3, [pc, #68]	@ (8006c38 <HAL_RCC_ClockConfig+0x260>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f003 020c 	and.w	r2, r3, #12
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d1eb      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c04:	4b0b      	ldr	r3, [pc, #44]	@ (8006c34 <HAL_RCC_ClockConfig+0x25c>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d214      	bcs.n	8006c3c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c12:	4b08      	ldr	r3, [pc, #32]	@ (8006c34 <HAL_RCC_ClockConfig+0x25c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f023 0207 	bic.w	r2, r3, #7
 8006c1a:	4906      	ldr	r1, [pc, #24]	@ (8006c34 <HAL_RCC_ClockConfig+0x25c>)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c22:	4b04      	ldr	r3, [pc, #16]	@ (8006c34 <HAL_RCC_ClockConfig+0x25c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d005      	beq.n	8006c3c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e040      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x2de>
 8006c34:	40022000 	.word	0x40022000
 8006c38:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d008      	beq.n	8006c5a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c48:	4b1d      	ldr	r3, [pc, #116]	@ (8006cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	491a      	ldr	r1, [pc, #104]	@ (8006cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d009      	beq.n	8006c7a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c66:	4b16      	ldr	r3, [pc, #88]	@ (8006cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4912      	ldr	r1, [pc, #72]	@ (8006cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006c7a:	f000 f829 	bl	8006cd0 <HAL_RCC_GetSysClockFreq>
 8006c7e:	4601      	mov	r1, r0
 8006c80:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc0 <HAL_RCC_ClockConfig+0x2e8>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c88:	22f0      	movs	r2, #240	@ 0xf0
 8006c8a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	fa92 f2a2 	rbit	r2, r2
 8006c92:	60fa      	str	r2, [r7, #12]
  return result;
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	fab2 f282 	clz	r2, r2
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	40d3      	lsrs	r3, r2
 8006c9e:	4a09      	ldr	r2, [pc, #36]	@ (8006cc4 <HAL_RCC_ClockConfig+0x2ec>)
 8006ca0:	5cd3      	ldrb	r3, [r2, r3]
 8006ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8006ca6:	4a08      	ldr	r2, [pc, #32]	@ (8006cc8 <HAL_RCC_ClockConfig+0x2f0>)
 8006ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006caa:	4b08      	ldr	r3, [pc, #32]	@ (8006ccc <HAL_RCC_ClockConfig+0x2f4>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fa fb8c 	bl	80013cc <HAL_InitTick>
  
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3778      	adds	r7, #120	@ 0x78
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	0800db70 	.word	0x0800db70
 8006cc8:	2000000c 	.word	0x2000000c
 8006ccc:	20000010 	.word	0x20000010

08006cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006cea:	4b1e      	ldr	r3, [pc, #120]	@ (8006d64 <HAL_RCC_GetSysClockFreq+0x94>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 030c 	and.w	r3, r3, #12
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d002      	beq.n	8006d00 <HAL_RCC_GetSysClockFreq+0x30>
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d003      	beq.n	8006d06 <HAL_RCC_GetSysClockFreq+0x36>
 8006cfe:	e026      	b.n	8006d4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d00:	4b19      	ldr	r3, [pc, #100]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d02:	613b      	str	r3, [r7, #16]
      break;
 8006d04:	e026      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	0c9b      	lsrs	r3, r3, #18
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	4a17      	ldr	r2, [pc, #92]	@ (8006d6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006d10:	5cd3      	ldrb	r3, [r2, r3]
 8006d12:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006d14:	4b13      	ldr	r3, [pc, #76]	@ (8006d64 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	4a14      	ldr	r2, [pc, #80]	@ (8006d70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006d1e:	5cd3      	ldrb	r3, [r2, r3]
 8006d20:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d008      	beq.n	8006d3e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8006d68 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	fb02 f303 	mul.w	r3, r2, r3
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	e004      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a0c      	ldr	r2, [pc, #48]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006d42:	fb02 f303 	mul.w	r3, r2, r3
 8006d46:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	613b      	str	r3, [r7, #16]
      break;
 8006d4c:	e002      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d78 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006d50:	613b      	str	r3, [r7, #16]
      break;
 8006d52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d54:	693b      	ldr	r3, [r7, #16]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40021000 	.word	0x40021000
 8006d68:	00f42400 	.word	0x00f42400
 8006d6c:	0800e184 	.word	0x0800e184
 8006d70:	0800e194 	.word	0x0800e194
 8006d74:	003d0900 	.word	0x003d0900
 8006d78:	007a1200 	.word	0x007a1200

08006d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d80:	4b03      	ldr	r3, [pc, #12]	@ (8006d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d82:	681b      	ldr	r3, [r3, #0]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	2000000c 	.word	0x2000000c

08006d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006d9a:	f7ff ffef 	bl	8006d7c <HAL_RCC_GetHCLKFreq>
 8006d9e:	4601      	mov	r1, r0
 8006da0:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8006da8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8006dac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	fa92 f2a2 	rbit	r2, r2
 8006db4:	603a      	str	r2, [r7, #0]
  return result;
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	fab2 f282 	clz	r2, r2
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	40d3      	lsrs	r3, r2
 8006dc0:	4a04      	ldr	r2, [pc, #16]	@ (8006dd4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006dc2:	5cd3      	ldrb	r3, [r2, r3]
 8006dc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40021000 	.word	0x40021000
 8006dd4:	0800db80 	.word	0x0800db80

08006dd8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	220f      	movs	r2, #15
 8006de6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006de8:	4b12      	ldr	r3, [pc, #72]	@ (8006e34 <HAL_RCC_GetClockConfig+0x5c>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f003 0203 	and.w	r2, r3, #3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006df4:	4b0f      	ldr	r3, [pc, #60]	@ (8006e34 <HAL_RCC_GetClockConfig+0x5c>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006e00:	4b0c      	ldr	r3, [pc, #48]	@ (8006e34 <HAL_RCC_GetClockConfig+0x5c>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006e0c:	4b09      	ldr	r3, [pc, #36]	@ (8006e34 <HAL_RCC_GetClockConfig+0x5c>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	08db      	lsrs	r3, r3, #3
 8006e12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006e1a:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <HAL_RCC_GetClockConfig+0x60>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0207 	and.w	r2, r3, #7
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	601a      	str	r2, [r3, #0]
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40021000 	.word	0x40021000
 8006e38:	40022000 	.word	0x40022000

08006e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b092      	sub	sp, #72	@ 0x48
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80d4 	beq.w	8007008 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e60:	4b4e      	ldr	r3, [pc, #312]	@ (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10e      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	4a4a      	ldr	r2, [pc, #296]	@ (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e76:	61d3      	str	r3, [r2, #28]
 8006e78:	4b48      	ldr	r3, [pc, #288]	@ (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e80:	60bb      	str	r3, [r7, #8]
 8006e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e84:	2301      	movs	r3, #1
 8006e86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e8a:	4b45      	ldr	r3, [pc, #276]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d118      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e96:	4b42      	ldr	r3, [pc, #264]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a41      	ldr	r2, [pc, #260]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ea0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ea2:	f7fa fe1b 	bl	8001adc <HAL_GetTick>
 8006ea6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ea8:	e008      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eaa:	f7fa fe17 	bl	8001adc <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b64      	cmp	r3, #100	@ 0x64
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e169      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ebc:	4b38      	ldr	r3, [pc, #224]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0f0      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ec8:	4b34      	ldr	r3, [pc, #208]	@ (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8084 	beq.w	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ee2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d07c      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ef2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006ef6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efa:	fa93 f3a3 	rbit	r3, r3
 8006efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f02:	fab3 f383 	clz	r3, r3
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4b26      	ldr	r3, [pc, #152]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	461a      	mov	r2, r3
 8006f12:	2301      	movs	r3, #1
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1e:	fa93 f3a3 	rbit	r3, r3
 8006f22:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f26:	fab3 f383 	clz	r3, r3
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	461a      	mov	r2, r3
 8006f36:	2300      	movs	r3, #0
 8006f38:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006f3a:	4a18      	ldr	r2, [pc, #96]	@ (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f3e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d04b      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f4a:	f7fa fdc7 	bl	8001adc <HAL_GetTick>
 8006f4e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f50:	e00a      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f52:	f7fa fdc3 	bl	8001adc <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e113      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6e:	fa93 f3a3 	rbit	r3, r3
 8006f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f74:	2302      	movs	r3, #2
 8006f76:	623b      	str	r3, [r7, #32]
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	fa93 f3a3 	rbit	r3, r3
 8006f7e:	61fb      	str	r3, [r7, #28]
  return result;
 8006f80:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f82:	fab3 f383 	clz	r3, r3
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	095b      	lsrs	r3, r3, #5
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	f043 0302 	orr.w	r3, r3, #2
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d108      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006f96:	4b01      	ldr	r3, [pc, #4]	@ (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	e00d      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006f9c:	40021000 	.word	0x40021000
 8006fa0:	40007000 	.word	0x40007000
 8006fa4:	10908100 	.word	0x10908100
 8006fa8:	2302      	movs	r3, #2
 8006faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	fa93 f3a3 	rbit	r3, r3
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	4b78      	ldr	r3, [pc, #480]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb8:	2202      	movs	r2, #2
 8006fba:	613a      	str	r2, [r7, #16]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	fa92 f2a2 	rbit	r2, r2
 8006fc2:	60fa      	str	r2, [r7, #12]
  return result;
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	fab2 f282 	clz	r2, r2
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	f002 021f 	and.w	r2, r2, #31
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8006fdc:	4013      	ands	r3, r2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0b7      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	496a      	ldr	r1, [pc, #424]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ff4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d105      	bne.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ffc:	4b66      	ldr	r3, [pc, #408]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	4a65      	ldr	r2, [pc, #404]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007006:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d008      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007014:	4b60      	ldr	r3, [pc, #384]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007018:	f023 0203 	bic.w	r2, r3, #3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	495d      	ldr	r1, [pc, #372]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007022:	4313      	orrs	r3, r2
 8007024:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d008      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007032:	4b59      	ldr	r3, [pc, #356]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007036:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	4956      	ldr	r1, [pc, #344]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007040:	4313      	orrs	r3, r2
 8007042:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d008      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007050:	4b51      	ldr	r3, [pc, #324]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007054:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	494e      	ldr	r1, [pc, #312]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800705e:	4313      	orrs	r3, r2
 8007060:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d008      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800706e:	4b4a      	ldr	r3, [pc, #296]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007072:	f023 0210 	bic.w	r2, r3, #16
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	4947      	ldr	r1, [pc, #284]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800707c:	4313      	orrs	r3, r2
 800707e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d008      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800708c:	4b42      	ldr	r3, [pc, #264]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007098:	493f      	ldr	r1, [pc, #252]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800709a:	4313      	orrs	r3, r2
 800709c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d008      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070aa:	4b3b      	ldr	r3, [pc, #236]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ae:	f023 0220 	bic.w	r2, r3, #32
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	4938      	ldr	r1, [pc, #224]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070c8:	4b33      	ldr	r3, [pc, #204]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	4930      	ldr	r1, [pc, #192]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d008      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070e6:	4b2c      	ldr	r3, [pc, #176]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	4929      	ldr	r1, [pc, #164]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007104:	4b24      	ldr	r3, [pc, #144]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007110:	4921      	ldr	r1, [pc, #132]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007112:	4313      	orrs	r3, r2
 8007114:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007122:	4b1d      	ldr	r3, [pc, #116]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007126:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712e:	491a      	ldr	r1, [pc, #104]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007130:	4313      	orrs	r3, r2
 8007132:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d008      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007140:	4b15      	ldr	r3, [pc, #84]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007144:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714c:	4912      	ldr	r1, [pc, #72]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800714e:	4313      	orrs	r3, r2
 8007150:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d008      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800715e:	4b0e      	ldr	r3, [pc, #56]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007162:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716a:	490b      	ldr	r1, [pc, #44]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800716c:	4313      	orrs	r3, r2
 800716e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d008      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800717c:	4b06      	ldr	r3, [pc, #24]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800717e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007180:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007188:	4903      	ldr	r1, [pc, #12]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800718a:	4313      	orrs	r3, r2
 800718c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3748      	adds	r7, #72	@ 0x48
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	40021000 	.word	0x40021000

0800719c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e09d      	b.n	80072ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d108      	bne.n	80071c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071be:	d009      	beq.n	80071d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	61da      	str	r2, [r3, #28]
 80071c6:	e005      	b.n	80071d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fa f876 	bl	80012e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800720a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007214:	d902      	bls.n	800721c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	e002      	b.n	8007222 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800721c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007220:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800722a:	d007      	beq.n	800723c <HAL_SPI_Init+0xa0>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007234:	d002      	beq.n	800723c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	431a      	orrs	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800727e:	ea42 0103 	orr.w	r1, r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007286:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	0c1b      	lsrs	r3, r3, #16
 8007298:	f003 0204 	and.w	r2, r3, #4
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072aa:	f003 0308 	and.w	r3, r3, #8
 80072ae:	431a      	orrs	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80072b8:	ea42 0103 	orr.w	r1, r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b088      	sub	sp, #32
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	603b      	str	r3, [r7, #0]
 80072fe:	4613      	mov	r3, r2
 8007300:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_SPI_Transmit+0x22>
 8007310:	2302      	movs	r3, #2
 8007312:	e15f      	b.n	80075d4 <HAL_SPI_Transmit+0x2e2>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800731c:	f7fa fbde 	bl	8001adc <HAL_GetTick>
 8007320:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007322:	88fb      	ldrh	r3, [r7, #6]
 8007324:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b01      	cmp	r3, #1
 8007330:	d002      	beq.n	8007338 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007332:	2302      	movs	r3, #2
 8007334:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007336:	e148      	b.n	80075ca <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_SPI_Transmit+0x52>
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d102      	bne.n	800734a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007348:	e13f      	b.n	80075ca <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2203      	movs	r2, #3
 800734e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	88fa      	ldrh	r2, [r7, #6]
 8007362:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	88fa      	ldrh	r2, [r7, #6]
 8007368:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007394:	d10f      	bne.n	80073b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c0:	2b40      	cmp	r3, #64	@ 0x40
 80073c2:	d007      	beq.n	80073d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80073dc:	d94f      	bls.n	800747e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <HAL_SPI_Transmit+0xfa>
 80073e6:	8afb      	ldrh	r3, [r7, #22]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d142      	bne.n	8007472 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f0:	881a      	ldrh	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fc:	1c9a      	adds	r2, r3, #2
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007410:	e02f      	b.n	8007472 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b02      	cmp	r3, #2
 800741e:	d112      	bne.n	8007446 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007424:	881a      	ldrh	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007430:	1c9a      	adds	r2, r3, #2
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800743a:	b29b      	uxth	r3, r3
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007444:	e015      	b.n	8007472 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007446:	f7fa fb49 	bl	8001adc <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d803      	bhi.n	800745e <HAL_SPI_Transmit+0x16c>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d102      	bne.n	8007464 <HAL_SPI_Transmit+0x172>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007470:	e0ab      	b.n	80075ca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1ca      	bne.n	8007412 <HAL_SPI_Transmit+0x120>
 800747c:	e080      	b.n	8007580 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <HAL_SPI_Transmit+0x19a>
 8007486:	8afb      	ldrh	r3, [r7, #22]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d174      	bne.n	8007576 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b01      	cmp	r3, #1
 8007494:	d912      	bls.n	80074bc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749a:	881a      	ldrh	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a6:	1c9a      	adds	r2, r3, #2
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	3b02      	subs	r3, #2
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074ba:	e05c      	b.n	8007576 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	330c      	adds	r3, #12
 80074c6:	7812      	ldrb	r2, [r2, #0]
 80074c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074d8:	b29b      	uxth	r3, r3
 80074da:	3b01      	subs	r3, #1
 80074dc:	b29a      	uxth	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80074e2:	e048      	b.n	8007576 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d12b      	bne.n	800754a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d912      	bls.n	8007522 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007500:	881a      	ldrh	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750c:	1c9a      	adds	r2, r3, #2
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007516:	b29b      	uxth	r3, r3
 8007518:	3b02      	subs	r3, #2
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007520:	e029      	b.n	8007576 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	330c      	adds	r3, #12
 800752c:	7812      	ldrb	r2, [r2, #0]
 800752e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007548:	e015      	b.n	8007576 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800754a:	f7fa fac7 	bl	8001adc <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d803      	bhi.n	8007562 <HAL_SPI_Transmit+0x270>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d102      	bne.n	8007568 <HAL_SPI_Transmit+0x276>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007574:	e029      	b.n	80075ca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1b1      	bne.n	80074e4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f947 	bl	8007818 <SPI_EndRxTxTransaction>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2220      	movs	r2, #32
 8007594:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800759e:	2300      	movs	r3, #0
 80075a0:	613b      	str	r3, [r7, #16]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	613b      	str	r3, [r7, #16]
 80075b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	77fb      	strb	r3, [r7, #31]
 80075c0:	e003      	b.n	80075ca <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80075d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3720      	adds	r7, #32
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	4613      	mov	r3, r2
 80075ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075ec:	f7fa fa76 	bl	8001adc <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4413      	add	r3, r2
 80075fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075fc:	f7fa fa6e 	bl	8001adc <HAL_GetTick>
 8007600:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007602:	4b39      	ldr	r3, [pc, #228]	@ (80076e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	015b      	lsls	r3, r3, #5
 8007608:	0d1b      	lsrs	r3, r3, #20
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	fb02 f303 	mul.w	r3, r2, r3
 8007610:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007612:	e054      	b.n	80076be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761a:	d050      	beq.n	80076be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800761c:	f7fa fa5e 	bl	8001adc <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	429a      	cmp	r2, r3
 800762a:	d902      	bls.n	8007632 <SPI_WaitFlagStateUntilTimeout+0x56>
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d13d      	bne.n	80076ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007640:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800764a:	d111      	bne.n	8007670 <SPI_WaitFlagStateUntilTimeout+0x94>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007654:	d004      	beq.n	8007660 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800765e:	d107      	bne.n	8007670 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800766e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007678:	d10f      	bne.n	800769a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007698:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e017      	b.n	80076de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4013      	ands	r3, r2
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	bf0c      	ite	eq
 80076ce:	2301      	moveq	r3, #1
 80076d0:	2300      	movne	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d19b      	bne.n	8007614 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	2000000c 	.word	0x2000000c

080076ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08a      	sub	sp, #40	@ 0x28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076fe:	f7fa f9ed 	bl	8001adc <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007706:	1a9b      	subs	r3, r3, r2
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	4413      	add	r3, r2
 800770c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800770e:	f7fa f9e5 	bl	8001adc <HAL_GetTick>
 8007712:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800771c:	4b3d      	ldr	r3, [pc, #244]	@ (8007814 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	4613      	mov	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	00da      	lsls	r2, r3, #3
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	0d1b      	lsrs	r3, r3, #20
 800772c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800772e:	fb02 f303 	mul.w	r3, r2, r3
 8007732:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007734:	e060      	b.n	80077f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800773c:	d107      	bne.n	800774e <SPI_WaitFifoStateUntilTimeout+0x62>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d104      	bne.n	800774e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800774c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d050      	beq.n	80077f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007756:	f7fa f9c1 	bl	8001adc <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007762:	429a      	cmp	r2, r3
 8007764:	d902      	bls.n	800776c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d13d      	bne.n	80077e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800777a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007784:	d111      	bne.n	80077aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800778e:	d004      	beq.n	800779a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007798:	d107      	bne.n	80077aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077b2:	d10f      	bne.n	80077d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e010      	b.n	800780a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689a      	ldr	r2, [r3, #8]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4013      	ands	r3, r2
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	429a      	cmp	r2, r3
 8007806:	d196      	bne.n	8007736 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3728      	adds	r7, #40	@ 0x28
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	2000000c 	.word	0x2000000c

08007818 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af02      	add	r7, sp, #8
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2200      	movs	r2, #0
 800782c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7ff ff5b 	bl	80076ec <SPI_WaitFifoStateUntilTimeout>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007840:	f043 0220 	orr.w	r2, r3, #32
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e027      	b.n	800789c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2200      	movs	r2, #0
 8007854:	2180      	movs	r1, #128	@ 0x80
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f7ff fec0 	bl	80075dc <SPI_WaitFlagStateUntilTimeout>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d007      	beq.n	8007872 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007866:	f043 0220 	orr.w	r2, r3, #32
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e014      	b.n	800789c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2200      	movs	r2, #0
 800787a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f7ff ff34 	bl	80076ec <SPI_WaitFifoStateUntilTimeout>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d007      	beq.n	800789a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800788e:	f043 0220 	orr.w	r2, r3, #32
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e000      	b.n	800789c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e049      	b.n	800794a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f841 	bl	8007952 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	3304      	adds	r3, #4
 80078e0:	4619      	mov	r1, r3
 80078e2:	4610      	mov	r0, r2
 80078e4:	f000 f9d4 	bl	8007c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
	...

08007968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b01      	cmp	r3, #1
 800797a:	d001      	beq.n	8007980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e04a      	b.n	8007a16 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a21      	ldr	r2, [pc, #132]	@ (8007a24 <HAL_TIM_Base_Start_IT+0xbc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d018      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x6c>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079aa:	d013      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x6c>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a28 <HAL_TIM_Base_Start_IT+0xc0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00e      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x6c>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1c      	ldr	r2, [pc, #112]	@ (8007a2c <HAL_TIM_Base_Start_IT+0xc4>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d009      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x6c>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1a      	ldr	r2, [pc, #104]	@ (8007a30 <HAL_TIM_Base_Start_IT+0xc8>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d004      	beq.n	80079d4 <HAL_TIM_Base_Start_IT+0x6c>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a19      	ldr	r2, [pc, #100]	@ (8007a34 <HAL_TIM_Base_Start_IT+0xcc>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d115      	bne.n	8007a00 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689a      	ldr	r2, [r3, #8]
 80079da:	4b17      	ldr	r3, [pc, #92]	@ (8007a38 <HAL_TIM_Base_Start_IT+0xd0>)
 80079dc:	4013      	ands	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b06      	cmp	r3, #6
 80079e4:	d015      	beq.n	8007a12 <HAL_TIM_Base_Start_IT+0xaa>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ec:	d011      	beq.n	8007a12 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f042 0201 	orr.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fe:	e008      	b.n	8007a12 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0201 	orr.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	e000      	b.n	8007a14 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40012c00 	.word	0x40012c00
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40000800 	.word	0x40000800
 8007a30:	40013400 	.word	0x40013400
 8007a34:	40014000 	.word	0x40014000
 8007a38:	00010007 	.word	0x00010007

08007a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d020      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01b      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0202 	mvn.w	r2, #2
 8007a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f8e4 	bl	8007c54 <HAL_TIM_IC_CaptureCallback>
 8007a8c:	e005      	b.n	8007a9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f8d6 	bl	8007c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f8e7 	bl	8007c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 0304 	and.w	r3, r3, #4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d020      	beq.n	8007aec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01b      	beq.n	8007aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0204 	mvn.w	r2, #4
 8007abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f8be 	bl	8007c54 <HAL_TIM_IC_CaptureCallback>
 8007ad8:	e005      	b.n	8007ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f8b0 	bl	8007c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f8c1 	bl	8007c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d020      	beq.n	8007b38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f003 0308 	and.w	r3, r3, #8
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d01b      	beq.n	8007b38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0208 	mvn.w	r2, #8
 8007b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2204      	movs	r2, #4
 8007b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f898 	bl	8007c54 <HAL_TIM_IC_CaptureCallback>
 8007b24:	e005      	b.n	8007b32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f88a 	bl	8007c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f89b 	bl	8007c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d020      	beq.n	8007b84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f003 0310 	and.w	r3, r3, #16
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01b      	beq.n	8007b84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f06f 0210 	mvn.w	r2, #16
 8007b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2208      	movs	r2, #8
 8007b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f872 	bl	8007c54 <HAL_TIM_IC_CaptureCallback>
 8007b70:	e005      	b.n	8007b7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f864 	bl	8007c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f875 	bl	8007c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00c      	beq.n	8007ba8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d007      	beq.n	8007ba8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f06f 0201 	mvn.w	r2, #1
 8007ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7f9 f888 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00c      	beq.n	8007bcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d007      	beq.n	8007bcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f908 	bl	8007ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00c      	beq.n	8007bf0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d007      	beq.n	8007bf0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f900 	bl	8007df0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00c      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d007      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f834 	bl	8007c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00c      	beq.n	8007c38 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f003 0320 	and.w	r3, r3, #32
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f06f 0220 	mvn.w	r2, #32
 8007c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f8c8 	bl	8007dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c38:	bf00      	nop
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a42      	ldr	r2, [pc, #264]	@ (8007dac <TIM_Base_SetConfig+0x11c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00f      	beq.n	8007cc8 <TIM_Base_SetConfig+0x38>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cae:	d00b      	beq.n	8007cc8 <TIM_Base_SetConfig+0x38>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8007db0 <TIM_Base_SetConfig+0x120>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d007      	beq.n	8007cc8 <TIM_Base_SetConfig+0x38>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a3e      	ldr	r2, [pc, #248]	@ (8007db4 <TIM_Base_SetConfig+0x124>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d003      	beq.n	8007cc8 <TIM_Base_SetConfig+0x38>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8007db8 <TIM_Base_SetConfig+0x128>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d108      	bne.n	8007cda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a33      	ldr	r2, [pc, #204]	@ (8007dac <TIM_Base_SetConfig+0x11c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d01b      	beq.n	8007d1a <TIM_Base_SetConfig+0x8a>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce8:	d017      	beq.n	8007d1a <TIM_Base_SetConfig+0x8a>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a30      	ldr	r2, [pc, #192]	@ (8007db0 <TIM_Base_SetConfig+0x120>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d013      	beq.n	8007d1a <TIM_Base_SetConfig+0x8a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8007db4 <TIM_Base_SetConfig+0x124>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d00f      	beq.n	8007d1a <TIM_Base_SetConfig+0x8a>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8007db8 <TIM_Base_SetConfig+0x128>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d00b      	beq.n	8007d1a <TIM_Base_SetConfig+0x8a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a2d      	ldr	r2, [pc, #180]	@ (8007dbc <TIM_Base_SetConfig+0x12c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d007      	beq.n	8007d1a <TIM_Base_SetConfig+0x8a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8007dc0 <TIM_Base_SetConfig+0x130>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d003      	beq.n	8007d1a <TIM_Base_SetConfig+0x8a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a2b      	ldr	r2, [pc, #172]	@ (8007dc4 <TIM_Base_SetConfig+0x134>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d108      	bne.n	8007d2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a16      	ldr	r2, [pc, #88]	@ (8007dac <TIM_Base_SetConfig+0x11c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d00f      	beq.n	8007d78 <TIM_Base_SetConfig+0xe8>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a17      	ldr	r2, [pc, #92]	@ (8007db8 <TIM_Base_SetConfig+0x128>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d00b      	beq.n	8007d78 <TIM_Base_SetConfig+0xe8>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a16      	ldr	r2, [pc, #88]	@ (8007dbc <TIM_Base_SetConfig+0x12c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d007      	beq.n	8007d78 <TIM_Base_SetConfig+0xe8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a15      	ldr	r2, [pc, #84]	@ (8007dc0 <TIM_Base_SetConfig+0x130>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d003      	beq.n	8007d78 <TIM_Base_SetConfig+0xe8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a14      	ldr	r2, [pc, #80]	@ (8007dc4 <TIM_Base_SetConfig+0x134>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d103      	bne.n	8007d80 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	691a      	ldr	r2, [r3, #16]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d105      	bne.n	8007d9e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	f023 0201 	bic.w	r2, r3, #1
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	611a      	str	r2, [r3, #16]
  }
}
 8007d9e:	bf00      	nop
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40012c00 	.word	0x40012c00
 8007db0:	40000400 	.word	0x40000400
 8007db4:	40000800 	.word	0x40000800
 8007db8:	40013400 	.word	0x40013400
 8007dbc:	40014000 	.word	0x40014000
 8007dc0:	40014400 	.word	0x40014400
 8007dc4:	40014800 	.word	0x40014800

08007dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e14:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007e18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e3a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8007e3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	43db      	mvns	r3, r3
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	4013      	ands	r3, r2
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	1d3b      	adds	r3, r7, #4
 8007e72:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b09d      	sub	sp, #116	@ 0x74
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	78db      	ldrb	r3, [r3, #3]
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d81f      	bhi.n	8007f16 <USB_ActivateEndpoint+0x72>
 8007ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8007edc <USB_ActivateEndpoint+0x38>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007eed 	.word	0x08007eed
 8007ee0:	08007f09 	.word	0x08007f09
 8007ee4:	08007f1f 	.word	0x08007f1f
 8007ee8:	08007efb 	.word	0x08007efb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007eec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007ef0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ef4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007ef8:	e012      	b.n	8007f20 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007efa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007efe:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007f02:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007f06:	e00b      	b.n	8007f20 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007f08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007f0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007f10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007f14:	e004      	b.n	8007f20 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007f1c:	e000      	b.n	8007f20 <USB_ActivateEndpoint+0x7c>
      break;
 8007f1e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	441a      	add	r2, r3
 8007f2a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007f2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	b21b      	sxth	r3, r3
 8007f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f5a:	b21a      	sxth	r2, r3
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	b21b      	sxth	r3, r3
 8007f62:	4313      	orrs	r3, r2
 8007f64:	b21b      	sxth	r3, r3
 8007f66:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	441a      	add	r2, r3
 8007f74:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007f78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	7b1b      	ldrb	r3, [r3, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f040 8178 	bne.w	8008286 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	785b      	ldrb	r3, [r3, #1]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8084 	beq.w	80080a8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	461a      	mov	r2, r3
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	61bb      	str	r3, [r7, #24]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	011a      	lsls	r2, r3, #4
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	88db      	ldrh	r3, [r3, #6]
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	827b      	strh	r3, [r7, #18]
 8007fe2:	8a7b      	ldrh	r3, [r7, #18]
 8007fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01b      	beq.n	8008024 <USB_ActivateEndpoint+0x180>
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008002:	823b      	strh	r3, [r7, #16]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	441a      	add	r2, r3
 800800e:	8a3b      	ldrh	r3, [r7, #16]
 8008010:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008014:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800801c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008020:	b29b      	uxth	r3, r3
 8008022:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	78db      	ldrb	r3, [r3, #3]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d020      	beq.n	800806e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29b      	uxth	r3, r3
 800803a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800803e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008042:	81bb      	strh	r3, [r7, #12]
 8008044:	89bb      	ldrh	r3, [r7, #12]
 8008046:	f083 0320 	eor.w	r3, r3, #32
 800804a:	81bb      	strh	r3, [r7, #12]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	441a      	add	r2, r3
 8008056:	89bb      	ldrh	r3, [r7, #12]
 8008058:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800805c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008060:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008068:	b29b      	uxth	r3, r3
 800806a:	8013      	strh	r3, [r2, #0]
 800806c:	e2d5      	b.n	800861a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008084:	81fb      	strh	r3, [r7, #14]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	441a      	add	r2, r3
 8008090:	89fb      	ldrh	r3, [r7, #14]
 8008092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800809a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800809e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	8013      	strh	r3, [r2, #0]
 80080a6:	e2b8      	b.n	800861a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	461a      	mov	r2, r3
 80080b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b8:	4413      	add	r3, r2
 80080ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	011a      	lsls	r2, r3, #4
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80080ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	88db      	ldrh	r3, [r3, #6]
 80080d0:	085b      	lsrs	r3, r3, #1
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080da:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ec:	4413      	add	r3, r2
 80080ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	011a      	lsls	r2, r3, #4
 80080f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f8:	4413      	add	r3, r2
 80080fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80080fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	b29b      	uxth	r3, r3
 8008106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800810a:	b29a      	uxth	r2, r3
 800810c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810e:	801a      	strh	r2, [r3, #0]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10a      	bne.n	800812e <USB_ActivateEndpoint+0x28a>
 8008118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008126:	b29a      	uxth	r2, r3
 8008128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812a:	801a      	strh	r2, [r3, #0]
 800812c:	e039      	b.n	80081a2 <USB_ActivateEndpoint+0x2fe>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	2b3e      	cmp	r3, #62	@ 0x3e
 8008134:	d818      	bhi.n	8008168 <USB_ActivateEndpoint+0x2c4>
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	085b      	lsrs	r3, r3, #1
 800813c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <USB_ActivateEndpoint+0x2ac>
 800814a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800814c:	3301      	adds	r3, #1
 800814e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b29a      	uxth	r2, r3
 8008156:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008158:	b29b      	uxth	r3, r3
 800815a:	029b      	lsls	r3, r3, #10
 800815c:	b29b      	uxth	r3, r3
 800815e:	4313      	orrs	r3, r2
 8008160:	b29a      	uxth	r2, r3
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	801a      	strh	r2, [r3, #0]
 8008166:	e01c      	b.n	80081a2 <USB_ActivateEndpoint+0x2fe>
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	095b      	lsrs	r3, r3, #5
 800816e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	f003 031f 	and.w	r3, r3, #31
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <USB_ActivateEndpoint+0x2de>
 800817c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800817e:	3b01      	subs	r3, #1
 8008180:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	b29a      	uxth	r2, r3
 8008188:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800818a:	b29b      	uxth	r3, r3
 800818c:	029b      	lsls	r3, r3, #10
 800818e:	b29b      	uxth	r3, r3
 8008190:	4313      	orrs	r3, r2
 8008192:	b29b      	uxth	r3, r3
 8008194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800819c:	b29a      	uxth	r2, r3
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 80081b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80081b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d01b      	beq.n	80081f2 <USB_ActivateEndpoint+0x34e>
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081d0:	843b      	strh	r3, [r7, #32]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	441a      	add	r2, r3
 80081dc:	8c3b      	ldrh	r3, [r7, #32]
 80081de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d124      	bne.n	8008244 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	b29b      	uxth	r3, r3
 8008208:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800820c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008210:	83bb      	strh	r3, [r7, #28]
 8008212:	8bbb      	ldrh	r3, [r7, #28]
 8008214:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008218:	83bb      	strh	r3, [r7, #28]
 800821a:	8bbb      	ldrh	r3, [r7, #28]
 800821c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008220:	83bb      	strh	r3, [r7, #28]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	441a      	add	r2, r3
 800822c:	8bbb      	ldrh	r3, [r7, #28]
 800822e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800823a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800823e:	b29b      	uxth	r3, r3
 8008240:	8013      	strh	r3, [r2, #0]
 8008242:	e1ea      	b.n	800861a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	b29b      	uxth	r3, r3
 8008252:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800825a:	83fb      	strh	r3, [r7, #30]
 800825c:	8bfb      	ldrh	r3, [r7, #30]
 800825e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008262:	83fb      	strh	r3, [r7, #30]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	441a      	add	r2, r3
 800826e:	8bfb      	ldrh	r3, [r7, #30]
 8008270:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008274:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008278:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800827c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008280:	b29b      	uxth	r3, r3
 8008282:	8013      	strh	r3, [r2, #0]
 8008284:	e1c9      	b.n	800861a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	78db      	ldrb	r3, [r3, #3]
 800828a:	2b02      	cmp	r3, #2
 800828c:	d11e      	bne.n	80082cc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	b29b      	uxth	r3, r3
 800829c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	441a      	add	r2, r3
 80082b2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80082b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082be:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80082c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	8013      	strh	r3, [r2, #0]
 80082ca:	e01d      	b.n	8008308 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80082de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082e2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	441a      	add	r2, r3
 80082f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80082f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008304:	b29b      	uxth	r3, r3
 8008306:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008312:	b29b      	uxth	r3, r3
 8008314:	461a      	mov	r2, r3
 8008316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008318:	4413      	add	r3, r2
 800831a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	011a      	lsls	r2, r3, #4
 8008322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008324:	4413      	add	r3, r2
 8008326:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800832a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	891b      	ldrh	r3, [r3, #8]
 8008330:	085b      	lsrs	r3, r3, #1
 8008332:	b29b      	uxth	r3, r3
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	b29a      	uxth	r2, r3
 8008338:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008346:	b29b      	uxth	r3, r3
 8008348:	461a      	mov	r2, r3
 800834a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800834c:	4413      	add	r3, r2
 800834e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	011a      	lsls	r2, r3, #4
 8008356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008358:	4413      	add	r3, r2
 800835a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800835e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	895b      	ldrh	r3, [r3, #10]
 8008364:	085b      	lsrs	r3, r3, #1
 8008366:	b29b      	uxth	r3, r3
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800836e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	785b      	ldrb	r3, [r3, #1]
 8008374:	2b00      	cmp	r3, #0
 8008376:	f040 8093 	bne.w	80084a0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800838a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800838e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01b      	beq.n	80083ce <USB_ActivateEndpoint+0x52a>
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	441a      	add	r2, r3
 80083b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80083ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80083c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80083dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80083de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d01b      	beq.n	800841e <USB_ActivateEndpoint+0x57a>
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	441a      	add	r2, r3
 8008408:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800840a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800840e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008416:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800841a:	b29b      	uxth	r3, r3
 800841c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	b29b      	uxth	r3, r3
 800842c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008434:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008436:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008438:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800843c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800843e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008440:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008444:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	441a      	add	r2, r3
 8008450:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800845a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800845e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008462:	b29b      	uxth	r3, r3
 8008464:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	b29b      	uxth	r3, r3
 8008474:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800847c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	441a      	add	r2, r3
 8008488:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800848a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800848e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800849a:	b29b      	uxth	r3, r3
 800849c:	8013      	strh	r3, [r2, #0]
 800849e:	e0bc      	b.n	800861a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80084b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80084b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d01d      	beq.n	80084f8 <USB_ActivateEndpoint+0x654>
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084d2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	441a      	add	r2, r3
 80084e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80084e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80084f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008508:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800850c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01d      	beq.n	8008550 <USB_ActivateEndpoint+0x6ac>
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	b29b      	uxth	r3, r3
 8008522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800852a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	441a      	add	r2, r3
 8008538:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800853c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008540:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008548:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800854c:	b29b      	uxth	r3, r3
 800854e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	78db      	ldrb	r3, [r3, #3]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d024      	beq.n	80085a2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	b29b      	uxth	r3, r3
 8008566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800856a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800856e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008572:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008576:	f083 0320 	eor.w	r3, r3, #32
 800857a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	441a      	add	r2, r3
 8008588:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800858c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008590:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800859c:	b29b      	uxth	r3, r3
 800859e:	8013      	strh	r3, [r2, #0]
 80085a0:	e01d      	b.n	80085de <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085b8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	441a      	add	r2, r3
 80085c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80085ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085da:	b29b      	uxth	r3, r3
 80085dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	441a      	add	r2, r3
 8008602:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800860a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800860e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008616:	b29b      	uxth	r3, r3
 8008618:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800861a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800861e:	4618      	mov	r0, r3
 8008620:	3774      	adds	r7, #116	@ 0x74
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop

0800862c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800862c:	b480      	push	{r7}
 800862e:	b08d      	sub	sp, #52	@ 0x34
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	7b1b      	ldrb	r3, [r3, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f040 808e 	bne.w	800875c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	785b      	ldrb	r3, [r3, #1]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d044      	beq.n	80086d2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	81bb      	strh	r3, [r7, #12]
 8008656:	89bb      	ldrh	r3, [r7, #12]
 8008658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d01b      	beq.n	8008698 <USB_DeactivateEndpoint+0x6c>
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b29b      	uxth	r3, r3
 800866e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008676:	817b      	strh	r3, [r7, #10]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	441a      	add	r2, r3
 8008682:	897b      	ldrh	r3, [r7, #10]
 8008684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800868c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008690:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008694:	b29b      	uxth	r3, r3
 8008696:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086ae:	813b      	strh	r3, [r7, #8]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	441a      	add	r2, r3
 80086ba:	893b      	ldrh	r3, [r7, #8]
 80086bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	8013      	strh	r3, [r2, #0]
 80086d0:	e192      	b.n	80089f8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	827b      	strh	r3, [r7, #18]
 80086e0:	8a7b      	ldrh	r3, [r7, #18]
 80086e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d01b      	beq.n	8008722 <USB_DeactivateEndpoint+0xf6>
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008700:	823b      	strh	r3, [r7, #16]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	441a      	add	r2, r3
 800870c:	8a3b      	ldrh	r3, [r7, #16]
 800870e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800871a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800871e:	b29b      	uxth	r3, r3
 8008720:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	b29b      	uxth	r3, r3
 8008730:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008738:	81fb      	strh	r3, [r7, #14]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	441a      	add	r2, r3
 8008744:	89fb      	ldrh	r3, [r7, #14]
 8008746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800874a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800874e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008756:	b29b      	uxth	r3, r3
 8008758:	8013      	strh	r3, [r2, #0]
 800875a:	e14d      	b.n	80089f8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b00      	cmp	r3, #0
 8008762:	f040 80a5 	bne.w	80088b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	843b      	strh	r3, [r7, #32]
 8008774:	8c3b      	ldrh	r3, [r7, #32]
 8008776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d01b      	beq.n	80087b6 <USB_DeactivateEndpoint+0x18a>
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b29b      	uxth	r3, r3
 800878c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008794:	83fb      	strh	r3, [r7, #30]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	441a      	add	r2, r3
 80087a0:	8bfb      	ldrh	r3, [r7, #30]
 80087a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	83bb      	strh	r3, [r7, #28]
 80087c4:	8bbb      	ldrh	r3, [r7, #28]
 80087c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d01b      	beq.n	8008806 <USB_DeactivateEndpoint+0x1da>
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087e4:	837b      	strh	r3, [r7, #26]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	441a      	add	r2, r3
 80087f0:	8b7b      	ldrh	r3, [r7, #26]
 80087f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008802:	b29b      	uxth	r3, r3
 8008804:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	b29b      	uxth	r3, r3
 8008814:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800881c:	833b      	strh	r3, [r7, #24]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	441a      	add	r2, r3
 8008828:	8b3b      	ldrh	r3, [r7, #24]
 800882a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800882e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008836:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800883a:	b29b      	uxth	r3, r3
 800883c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	b29b      	uxth	r3, r3
 800884c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008854:	82fb      	strh	r3, [r7, #22]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	441a      	add	r2, r3
 8008860:	8afb      	ldrh	r3, [r7, #22]
 8008862:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008866:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800886a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800886e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008872:	b29b      	uxth	r3, r3
 8008874:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	b29b      	uxth	r3, r3
 8008884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800888c:	82bb      	strh	r3, [r7, #20]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	441a      	add	r2, r3
 8008898:	8abb      	ldrh	r3, [r7, #20]
 800889a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800889e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	8013      	strh	r3, [r2, #0]
 80088ae:	e0a3      	b.n	80089f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80088be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80088c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d01b      	beq.n	8008900 <USB_DeactivateEndpoint+0x2d4>
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	441a      	add	r2, r3
 80088ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80088ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	881b      	ldrh	r3, [r3, #0]
 800890c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800890e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01b      	beq.n	8008950 <USB_DeactivateEndpoint+0x324>
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	b29b      	uxth	r3, r3
 8008926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800892a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800892e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	441a      	add	r2, r3
 800893a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800893c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008948:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800894c:	b29b      	uxth	r3, r3
 800894e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	b29b      	uxth	r3, r3
 800895e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008966:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	441a      	add	r2, r3
 8008972:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008974:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008978:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800897c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008984:	b29b      	uxth	r3, r3
 8008986:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	b29b      	uxth	r3, r3
 8008996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800899a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800899e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	441a      	add	r2, r3
 80089aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089bc:	b29b      	uxth	r3, r3
 80089be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	441a      	add	r2, r3
 80089e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80089e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3734      	adds	r7, #52	@ 0x34
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b0c2      	sub	sp, #264	@ 0x108
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a14:	6018      	str	r0, [r3, #0]
 8008a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a1e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	785b      	ldrb	r3, [r3, #1]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	f040 86b7 	bne.w	80097a0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699a      	ldr	r2, [r3, #24]
 8008a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d908      	bls.n	8008a60 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008a5e:	e007      	b.n	8008a70 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	7b1b      	ldrb	r3, [r3, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d13a      	bne.n	8008af6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6959      	ldr	r1, [r3, #20]
 8008a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	88da      	ldrh	r2, [r3, #6]
 8008a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008aa2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008aa6:	6800      	ldr	r0, [r0, #0]
 8008aa8:	f001 fc8d 	bl	800a3c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	613b      	str	r3, [r7, #16]
 8008ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	461a      	mov	r2, r3
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	4413      	add	r3, r2
 8008ace:	613b      	str	r3, [r7, #16]
 8008ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	011a      	lsls	r2, r3, #4
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	801a      	strh	r2, [r3, #0]
 8008af2:	f000 be1f 	b.w	8009734 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	78db      	ldrb	r3, [r3, #3]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	f040 8462 	bne.w	80093cc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6a1a      	ldr	r2, [r3, #32]
 8008b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	f240 83df 	bls.w	80092e4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b4c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	441a      	add	r2, r3
 8008b6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b76:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6a1a      	ldr	r2, [r3, #32]
 8008b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b92:	1ad2      	subs	r2, r2, r3
 8008b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ba4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 81c7 	beq.w	8008f56 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	785b      	ldrb	r3, [r3, #1]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d177      	bne.n	8008cd4 <USB_EPStartXfer+0x2ce>
 8008be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	461a      	mov	r2, r3
 8008c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c04:	4413      	add	r3, r2
 8008c06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	011a      	lsls	r2, r3, #4
 8008c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c18:	4413      	add	r3, r2
 8008c1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c22:	881b      	ldrh	r3, [r3, #0]
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2e:	801a      	strh	r2, [r3, #0]
 8008c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <USB_EPStartXfer+0x248>
 8008c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	e067      	b.n	8008d1e <USB_EPStartXfer+0x318>
 8008c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c52:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c54:	d81c      	bhi.n	8008c90 <USB_EPStartXfer+0x28a>
 8008c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c5a:	085b      	lsrs	r3, r3, #1
 8008c5c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d004      	beq.n	8008c76 <USB_EPStartXfer+0x270>
 8008c6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008c70:	3301      	adds	r3, #1
 8008c72:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	029b      	lsls	r3, r3, #10
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	4313      	orrs	r3, r2
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8c:	801a      	strh	r2, [r3, #0]
 8008c8e:	e046      	b.n	8008d1e <USB_EPStartXfer+0x318>
 8008c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c94:	095b      	lsrs	r3, r3, #5
 8008c96:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c9e:	f003 031f 	and.w	r3, r3, #31
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d104      	bne.n	8008cb0 <USB_EPStartXfer+0x2aa>
 8008ca6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008caa:	3b01      	subs	r3, #1
 8008cac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	029b      	lsls	r3, r3, #10
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd0:	801a      	strh	r2, [r3, #0]
 8008cd2:	e024      	b.n	8008d1e <USB_EPStartXfer+0x318>
 8008cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	785b      	ldrb	r3, [r3, #1]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d11c      	bne.n	8008d1e <USB_EPStartXfer+0x318>
 8008ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf8:	4413      	add	r3, r2
 8008cfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	011a      	lsls	r2, r3, #4
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	895b      	ldrh	r3, [r3, #10]
 8008d2a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6959      	ldr	r1, [r3, #20]
 8008d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008d44:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008d48:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008d4c:	6800      	ldr	r0, [r0, #0]
 8008d4e:	f001 fb3a 	bl	800a3c6 <USB_WritePMA>
            ep->xfer_buff += len;
 8008d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	695a      	ldr	r2, [r3, #20]
 8008d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d62:	441a      	add	r2, r3
 8008d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6a1a      	ldr	r2, [r3, #32]
 8008d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d90f      	bls.n	8008dac <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6a1a      	ldr	r2, [r3, #32]
 8008d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d9c:	1ad2      	subs	r2, r2, r3
 8008d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	621a      	str	r2, [r3, #32]
 8008daa:	e00e      	b.n	8008dca <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	785b      	ldrb	r3, [r3, #1]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d177      	bne.n	8008eca <USB_EPStartXfer+0x4c4>
 8008dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	61bb      	str	r3, [r7, #24]
 8008de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	461a      	mov	r2, r3
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	61bb      	str	r3, [r7, #24]
 8008dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	011a      	lsls	r2, r3, #4
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	4413      	add	r3, r2
 8008e10:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	801a      	strh	r2, [r3, #0]
 8008e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <USB_EPStartXfer+0x43e>
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	801a      	strh	r2, [r3, #0]
 8008e42:	e06d      	b.n	8008f20 <USB_EPStartXfer+0x51a>
 8008e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e48:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e4a:	d81c      	bhi.n	8008e86 <USB_EPStartXfer+0x480>
 8008e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e50:	085b      	lsrs	r3, r3, #1
 8008e52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d004      	beq.n	8008e6c <USB_EPStartXfer+0x466>
 8008e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e66:	3301      	adds	r3, #1
 8008e68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	029b      	lsls	r3, r3, #10
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	801a      	strh	r2, [r3, #0]
 8008e84:	e04c      	b.n	8008f20 <USB_EPStartXfer+0x51a>
 8008e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e8a:	095b      	lsrs	r3, r3, #5
 8008e8c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e94:	f003 031f 	and.w	r3, r3, #31
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d104      	bne.n	8008ea6 <USB_EPStartXfer+0x4a0>
 8008e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	029b      	lsls	r3, r3, #10
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	801a      	strh	r2, [r3, #0]
 8008ec8:	e02a      	b.n	8008f20 <USB_EPStartXfer+0x51a>
 8008eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	785b      	ldrb	r3, [r3, #1]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d122      	bne.n	8008f20 <USB_EPStartXfer+0x51a>
 8008eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	623b      	str	r3, [r7, #32]
 8008ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	4413      	add	r3, r2
 8008efc:	623b      	str	r3, [r7, #32]
 8008efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	011a      	lsls	r2, r3, #4
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008f14:	61fb      	str	r3, [r7, #28]
 8008f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	891b      	ldrh	r3, [r3, #8]
 8008f2c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6959      	ldr	r1, [r3, #20]
 8008f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f46:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f4a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f4e:	6800      	ldr	r0, [r0, #0]
 8008f50:	f001 fa39 	bl	800a3c6 <USB_WritePMA>
 8008f54:	e3ee      	b.n	8009734 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	785b      	ldrb	r3, [r3, #1]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d177      	bne.n	8009056 <USB_EPStartXfer+0x650>
 8008f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f86:	4413      	add	r3, r2
 8008f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	011a      	lsls	r2, r3, #4
 8008f98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fb0:	801a      	strh	r2, [r3, #0]
 8008fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10a      	bne.n	8008fd0 <USB_EPStartXfer+0x5ca>
 8008fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fcc:	801a      	strh	r2, [r3, #0]
 8008fce:	e06d      	b.n	80090ac <USB_EPStartXfer+0x6a6>
 8008fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fd6:	d81c      	bhi.n	8009012 <USB_EPStartXfer+0x60c>
 8008fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fdc:	085b      	lsrs	r3, r3, #1
 8008fde:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d004      	beq.n	8008ff8 <USB_EPStartXfer+0x5f2>
 8008fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009002:	b29b      	uxth	r3, r3
 8009004:	029b      	lsls	r3, r3, #10
 8009006:	b29b      	uxth	r3, r3
 8009008:	4313      	orrs	r3, r2
 800900a:	b29a      	uxth	r2, r3
 800900c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800900e:	801a      	strh	r2, [r3, #0]
 8009010:	e04c      	b.n	80090ac <USB_EPStartXfer+0x6a6>
 8009012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009016:	095b      	lsrs	r3, r3, #5
 8009018:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800901c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009020:	f003 031f 	and.w	r3, r3, #31
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <USB_EPStartXfer+0x62c>
 8009028:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800902c:	3b01      	subs	r3, #1
 800902e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	b29a      	uxth	r2, r3
 8009038:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800903c:	b29b      	uxth	r3, r3
 800903e:	029b      	lsls	r3, r3, #10
 8009040:	b29b      	uxth	r3, r3
 8009042:	4313      	orrs	r3, r2
 8009044:	b29b      	uxth	r3, r3
 8009046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800904a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800904e:	b29a      	uxth	r2, r3
 8009050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	e02a      	b.n	80090ac <USB_EPStartXfer+0x6a6>
 8009056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800905a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d122      	bne.n	80090ac <USB_EPStartXfer+0x6a6>
 8009066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800906a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	653b      	str	r3, [r7, #80]	@ 0x50
 8009072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009076:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009080:	b29b      	uxth	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009086:	4413      	add	r3, r2
 8009088:	653b      	str	r3, [r7, #80]	@ 0x50
 800908a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	011a      	lsls	r2, r3, #4
 8009098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800909a:	4413      	add	r3, r2
 800909c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80090a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80090ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	891b      	ldrh	r3, [r3, #8]
 80090b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6959      	ldr	r1, [r3, #20]
 80090c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80090d2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80090d6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80090da:	6800      	ldr	r0, [r0, #0]
 80090dc:	f001 f973 	bl	800a3c6 <USB_WritePMA>
            ep->xfer_buff += len;
 80090e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	695a      	ldr	r2, [r3, #20]
 80090ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090f0:	441a      	add	r2, r3
 80090f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80090fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6a1a      	ldr	r2, [r3, #32]
 800910a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800910e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	429a      	cmp	r2, r3
 8009118:	d90f      	bls.n	800913a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800911a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800911e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6a1a      	ldr	r2, [r3, #32]
 8009126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800912a:	1ad2      	subs	r2, r2, r3
 800912c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	621a      	str	r2, [r3, #32]
 8009138:	e00e      	b.n	8009158 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800913a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800913e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800914a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800914e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2200      	movs	r2, #0
 8009156:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800915c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	643b      	str	r3, [r7, #64]	@ 0x40
 8009164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	785b      	ldrb	r3, [r3, #1]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d177      	bne.n	8009264 <USB_EPStartXfer+0x85e>
 8009174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009178:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800918e:	b29b      	uxth	r3, r3
 8009190:	461a      	mov	r2, r3
 8009192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009194:	4413      	add	r3, r2
 8009196:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800919c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	011a      	lsls	r2, r3, #4
 80091a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a8:	4413      	add	r3, r2
 80091aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80091ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80091b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091be:	801a      	strh	r2, [r3, #0]
 80091c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10a      	bne.n	80091de <USB_EPStartXfer+0x7d8>
 80091c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091da:	801a      	strh	r2, [r3, #0]
 80091dc:	e067      	b.n	80092ae <USB_EPStartXfer+0x8a8>
 80091de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80091e4:	d81c      	bhi.n	8009220 <USB_EPStartXfer+0x81a>
 80091e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ea:	085b      	lsrs	r3, r3, #1
 80091ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80091f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d004      	beq.n	8009206 <USB_EPStartXfer+0x800>
 80091fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009200:	3301      	adds	r3, #1
 8009202:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	b29a      	uxth	r2, r3
 800920c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009210:	b29b      	uxth	r3, r3
 8009212:	029b      	lsls	r3, r3, #10
 8009214:	b29b      	uxth	r3, r3
 8009216:	4313      	orrs	r3, r2
 8009218:	b29a      	uxth	r2, r3
 800921a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800921c:	801a      	strh	r2, [r3, #0]
 800921e:	e046      	b.n	80092ae <USB_EPStartXfer+0x8a8>
 8009220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009224:	095b      	lsrs	r3, r3, #5
 8009226:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800922a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800922e:	f003 031f 	and.w	r3, r3, #31
 8009232:	2b00      	cmp	r3, #0
 8009234:	d104      	bne.n	8009240 <USB_EPStartXfer+0x83a>
 8009236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800923a:	3b01      	subs	r3, #1
 800923c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	b29a      	uxth	r2, r3
 8009246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800924a:	b29b      	uxth	r3, r3
 800924c:	029b      	lsls	r3, r3, #10
 800924e:	b29b      	uxth	r3, r3
 8009250:	4313      	orrs	r3, r2
 8009252:	b29b      	uxth	r3, r3
 8009254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800925c:	b29a      	uxth	r2, r3
 800925e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009260:	801a      	strh	r2, [r3, #0]
 8009262:	e024      	b.n	80092ae <USB_EPStartXfer+0x8a8>
 8009264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	785b      	ldrb	r3, [r3, #1]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d11c      	bne.n	80092ae <USB_EPStartXfer+0x8a8>
 8009274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009282:	b29b      	uxth	r3, r3
 8009284:	461a      	mov	r2, r3
 8009286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009288:	4413      	add	r3, r2
 800928a:	643b      	str	r3, [r7, #64]	@ 0x40
 800928c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	011a      	lsls	r2, r3, #4
 800929a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800929c:	4413      	add	r3, r2
 800929e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80092ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	895b      	ldrh	r3, [r3, #10]
 80092ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6959      	ldr	r1, [r3, #20]
 80092ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80092d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80092d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80092dc:	6800      	ldr	r0, [r0, #0]
 80092de:	f001 f872 	bl	800a3c6 <USB_WritePMA>
 80092e2:	e227      	b.n	8009734 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80092e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6a1b      	ldr	r3, [r3, #32]
 80092f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80092f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	b29b      	uxth	r3, r3
 8009312:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800931a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800931e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800932c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	441a      	add	r2, r3
 8009338:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800933c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009340:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009344:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800934c:	b29b      	uxth	r3, r3
 800934e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800935c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800936a:	b29b      	uxth	r3, r3
 800936c:	461a      	mov	r2, r3
 800936e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009370:	4413      	add	r3, r2
 8009372:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	011a      	lsls	r2, r3, #4
 8009382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009384:	4413      	add	r3, r2
 8009386:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800938a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800938c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009390:	b29a      	uxth	r2, r3
 8009392:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009394:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800939a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	891b      	ldrh	r3, [r3, #8]
 80093a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6959      	ldr	r1, [r3, #20]
 80093b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80093bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80093c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80093c4:	6800      	ldr	r0, [r0, #0]
 80093c6:	f000 fffe 	bl	800a3c6 <USB_WritePMA>
 80093ca:	e1b3      	b.n	8009734 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80093cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6a1a      	ldr	r2, [r3, #32]
 80093d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093dc:	1ad2      	subs	r2, r2, r3
 80093de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80093ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	b29b      	uxth	r3, r3
 8009408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800940c:	2b00      	cmp	r3, #0
 800940e:	f000 80c6 	beq.w	800959e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	673b      	str	r3, [r7, #112]	@ 0x70
 800941e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	785b      	ldrb	r3, [r3, #1]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d177      	bne.n	800951e <USB_EPStartXfer+0xb18>
 800942e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009432:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800943a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800943e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009448:	b29b      	uxth	r3, r3
 800944a:	461a      	mov	r2, r3
 800944c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800944e:	4413      	add	r3, r2
 8009450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	011a      	lsls	r2, r3, #4
 8009460:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009462:	4413      	add	r3, r2
 8009464:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009468:	667b      	str	r3, [r7, #100]	@ 0x64
 800946a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	b29b      	uxth	r3, r3
 8009470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009474:	b29a      	uxth	r2, r3
 8009476:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009478:	801a      	strh	r2, [r3, #0]
 800947a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10a      	bne.n	8009498 <USB_EPStartXfer+0xa92>
 8009482:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	b29b      	uxth	r3, r3
 8009488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800948c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009490:	b29a      	uxth	r2, r3
 8009492:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009494:	801a      	strh	r2, [r3, #0]
 8009496:	e067      	b.n	8009568 <USB_EPStartXfer+0xb62>
 8009498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800949c:	2b3e      	cmp	r3, #62	@ 0x3e
 800949e:	d81c      	bhi.n	80094da <USB_EPStartXfer+0xad4>
 80094a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094a4:	085b      	lsrs	r3, r3, #1
 80094a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80094aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d004      	beq.n	80094c0 <USB_EPStartXfer+0xaba>
 80094b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80094ba:	3301      	adds	r3, #1
 80094bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80094c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	029b      	lsls	r3, r3, #10
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	4313      	orrs	r3, r2
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094d6:	801a      	strh	r2, [r3, #0]
 80094d8:	e046      	b.n	8009568 <USB_EPStartXfer+0xb62>
 80094da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80094e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e8:	f003 031f 	and.w	r3, r3, #31
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d104      	bne.n	80094fa <USB_EPStartXfer+0xaf4>
 80094f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80094f4:	3b01      	subs	r3, #1
 80094f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80094fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	b29a      	uxth	r2, r3
 8009500:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009504:	b29b      	uxth	r3, r3
 8009506:	029b      	lsls	r3, r3, #10
 8009508:	b29b      	uxth	r3, r3
 800950a:	4313      	orrs	r3, r2
 800950c:	b29b      	uxth	r3, r3
 800950e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009516:	b29a      	uxth	r2, r3
 8009518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800951a:	801a      	strh	r2, [r3, #0]
 800951c:	e024      	b.n	8009568 <USB_EPStartXfer+0xb62>
 800951e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	785b      	ldrb	r3, [r3, #1]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d11c      	bne.n	8009568 <USB_EPStartXfer+0xb62>
 800952e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800953c:	b29b      	uxth	r3, r3
 800953e:	461a      	mov	r2, r3
 8009540:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009542:	4413      	add	r3, r2
 8009544:	673b      	str	r3, [r7, #112]	@ 0x70
 8009546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800954a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	011a      	lsls	r2, r3, #4
 8009554:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009556:	4413      	add	r3, r2
 8009558:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800955c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800955e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009562:	b29a      	uxth	r2, r3
 8009564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009566:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800956c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	895b      	ldrh	r3, [r3, #10]
 8009574:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800957c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6959      	ldr	r1, [r3, #20]
 8009584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009588:	b29b      	uxth	r3, r3
 800958a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800958e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009592:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009596:	6800      	ldr	r0, [r0, #0]
 8009598:	f000 ff15 	bl	800a3c6 <USB_WritePMA>
 800959c:	e0ca      	b.n	8009734 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800959e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	785b      	ldrb	r3, [r3, #1]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d177      	bne.n	800969e <USB_EPStartXfer+0xc98>
 80095ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80095ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	461a      	mov	r2, r3
 80095cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80095ce:	4413      	add	r3, r2
 80095d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80095d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	011a      	lsls	r2, r3, #4
 80095e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80095e2:	4413      	add	r3, r2
 80095e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80095e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80095ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095f8:	801a      	strh	r2, [r3, #0]
 80095fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10a      	bne.n	8009618 <USB_EPStartXfer+0xc12>
 8009602:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	b29b      	uxth	r3, r3
 8009608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800960c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009610:	b29a      	uxth	r2, r3
 8009612:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009614:	801a      	strh	r2, [r3, #0]
 8009616:	e073      	b.n	8009700 <USB_EPStartXfer+0xcfa>
 8009618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800961c:	2b3e      	cmp	r3, #62	@ 0x3e
 800961e:	d81c      	bhi.n	800965a <USB_EPStartXfer+0xc54>
 8009620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009624:	085b      	lsrs	r3, r3, #1
 8009626:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800962a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d004      	beq.n	8009640 <USB_EPStartXfer+0xc3a>
 8009636:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800963a:	3301      	adds	r3, #1
 800963c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	b29a      	uxth	r2, r3
 8009646:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800964a:	b29b      	uxth	r3, r3
 800964c:	029b      	lsls	r3, r3, #10
 800964e:	b29b      	uxth	r3, r3
 8009650:	4313      	orrs	r3, r2
 8009652:	b29a      	uxth	r2, r3
 8009654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009656:	801a      	strh	r2, [r3, #0]
 8009658:	e052      	b.n	8009700 <USB_EPStartXfer+0xcfa>
 800965a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800965e:	095b      	lsrs	r3, r3, #5
 8009660:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009668:	f003 031f 	and.w	r3, r3, #31
 800966c:	2b00      	cmp	r3, #0
 800966e:	d104      	bne.n	800967a <USB_EPStartXfer+0xc74>
 8009670:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009674:	3b01      	subs	r3, #1
 8009676:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800967a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	b29a      	uxth	r2, r3
 8009680:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009684:	b29b      	uxth	r3, r3
 8009686:	029b      	lsls	r3, r3, #10
 8009688:	b29b      	uxth	r3, r3
 800968a:	4313      	orrs	r3, r2
 800968c:	b29b      	uxth	r3, r3
 800968e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009696:	b29a      	uxth	r2, r3
 8009698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800969a:	801a      	strh	r2, [r3, #0]
 800969c:	e030      	b.n	8009700 <USB_EPStartXfer+0xcfa>
 800969e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	785b      	ldrb	r3, [r3, #1]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d128      	bne.n	8009700 <USB_EPStartXfer+0xcfa>
 80096ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	461a      	mov	r2, r3
 80096ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096d2:	4413      	add	r3, r2
 80096d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	011a      	lsls	r2, r3, #4
 80096e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096ea:	4413      	add	r3, r2
 80096ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80096f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80096f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80096fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	891b      	ldrh	r3, [r3, #8]
 800970c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6959      	ldr	r1, [r3, #20]
 800971c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009720:	b29b      	uxth	r3, r3
 8009722:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009726:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800972a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800972e:	6800      	ldr	r0, [r0, #0]
 8009730:	f000 fe49 	bl	800a3c6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009742:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	b29b      	uxth	r3, r3
 8009752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800975a:	817b      	strh	r3, [r7, #10]
 800975c:	897b      	ldrh	r3, [r7, #10]
 800975e:	f083 0310 	eor.w	r3, r3, #16
 8009762:	817b      	strh	r3, [r7, #10]
 8009764:	897b      	ldrh	r3, [r7, #10]
 8009766:	f083 0320 	eor.w	r3, r3, #32
 800976a:	817b      	strh	r3, [r7, #10]
 800976c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009770:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800977a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	441a      	add	r2, r3
 8009786:	897b      	ldrh	r3, [r7, #10]
 8009788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800978c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009798:	b29b      	uxth	r3, r3
 800979a:	8013      	strh	r3, [r2, #0]
 800979c:	f000 bcdf 	b.w	800a15e <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80097a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	7b1b      	ldrb	r3, [r3, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f040 80bc 	bne.w	800992a <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80097b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	699a      	ldr	r2, [r3, #24]
 80097be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d917      	bls.n	80097fe <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80097ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80097de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699a      	ldr	r2, [r3, #24]
 80097ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ee:	1ad2      	subs	r2, r2, r3
 80097f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	619a      	str	r2, [r3, #24]
 80097fc:	e00e      	b.n	800981c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80097fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800980e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2200      	movs	r2, #0
 800981a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800981c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009820:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800982a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800982e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009838:	b29b      	uxth	r3, r3
 800983a:	461a      	mov	r2, r3
 800983c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009840:	4413      	add	r3, r2
 8009842:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800984a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	011a      	lsls	r2, r3, #4
 8009854:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009858:	4413      	add	r3, r2
 800985a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800985e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	b29b      	uxth	r3, r3
 800986a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800986e:	b29a      	uxth	r2, r3
 8009870:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009874:	801a      	strh	r2, [r3, #0]
 8009876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10d      	bne.n	800989a <USB_EPStartXfer+0xe94>
 800987e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	b29b      	uxth	r3, r3
 8009886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800988a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800988e:	b29a      	uxth	r2, r3
 8009890:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009894:	801a      	strh	r2, [r3, #0]
 8009896:	f000 bc28 	b.w	800a0ea <USB_EPStartXfer+0x16e4>
 800989a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800989e:	2b3e      	cmp	r3, #62	@ 0x3e
 80098a0:	d81f      	bhi.n	80098e2 <USB_EPStartXfer+0xedc>
 80098a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a6:	085b      	lsrs	r3, r3, #1
 80098a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80098ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d004      	beq.n	80098c2 <USB_EPStartXfer+0xebc>
 80098b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80098bc:	3301      	adds	r3, #1
 80098be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80098c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	029b      	lsls	r3, r3, #10
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	4313      	orrs	r3, r2
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098dc:	801a      	strh	r2, [r3, #0]
 80098de:	f000 bc04 	b.w	800a0ea <USB_EPStartXfer+0x16e4>
 80098e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e6:	095b      	lsrs	r3, r3, #5
 80098e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80098ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f0:	f003 031f 	and.w	r3, r3, #31
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d104      	bne.n	8009902 <USB_EPStartXfer+0xefc>
 80098f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80098fc:	3b01      	subs	r3, #1
 80098fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	b29a      	uxth	r2, r3
 800990a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800990e:	b29b      	uxth	r3, r3
 8009910:	029b      	lsls	r3, r3, #10
 8009912:	b29b      	uxth	r3, r3
 8009914:	4313      	orrs	r3, r2
 8009916:	b29b      	uxth	r3, r3
 8009918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800991c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009920:	b29a      	uxth	r2, r3
 8009922:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009926:	801a      	strh	r2, [r3, #0]
 8009928:	e3df      	b.n	800a0ea <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800992a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800992e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	78db      	ldrb	r3, [r3, #3]
 8009936:	2b02      	cmp	r3, #2
 8009938:	f040 8218 	bne.w	8009d6c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800993c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	785b      	ldrb	r3, [r3, #1]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f040 809d 	bne.w	8009a88 <USB_EPStartXfer+0x1082>
 800994e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009952:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800995c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009960:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800996a:	b29b      	uxth	r3, r3
 800996c:	461a      	mov	r2, r3
 800996e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009972:	4413      	add	r3, r2
 8009974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	011a      	lsls	r2, r3, #4
 8009986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800998a:	4413      	add	r3, r2
 800998c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009990:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	b29b      	uxth	r3, r3
 800999c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80099a6:	801a      	strh	r2, [r3, #0]
 80099a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10c      	bne.n	80099d2 <USB_EPStartXfer+0xfcc>
 80099b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80099ce:	801a      	strh	r2, [r3, #0]
 80099d0:	e08f      	b.n	8009af2 <USB_EPStartXfer+0x10ec>
 80099d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	2b3e      	cmp	r3, #62	@ 0x3e
 80099e0:	d826      	bhi.n	8009a30 <USB_EPStartXfer+0x102a>
 80099e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	085b      	lsrs	r3, r3, #1
 80099f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80099f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d004      	beq.n	8009a12 <USB_EPStartXfer+0x100c>
 8009a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	029b      	lsls	r3, r3, #10
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	4313      	orrs	r3, r2
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a2c:	801a      	strh	r2, [r3, #0]
 8009a2e:	e060      	b.n	8009af2 <USB_EPStartXfer+0x10ec>
 8009a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	095b      	lsrs	r3, r3, #5
 8009a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f003 031f 	and.w	r3, r3, #31
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d104      	bne.n	8009a60 <USB_EPStartXfer+0x105a>
 8009a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	029b      	lsls	r3, r3, #10
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	4313      	orrs	r3, r2
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a84:	801a      	strh	r2, [r3, #0]
 8009a86:	e034      	b.n	8009af2 <USB_EPStartXfer+0x10ec>
 8009a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	785b      	ldrb	r3, [r3, #1]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d12c      	bne.n	8009af2 <USB_EPStartXfer+0x10ec>
 8009a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009abc:	4413      	add	r3, r2
 8009abe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	011a      	lsls	r2, r3, #4
 8009ad0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009ada:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009af0:	801a      	strh	r2, [r3, #0]
 8009af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	785b      	ldrb	r3, [r3, #1]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f040 809d 	bne.w	8009c4c <USB_EPStartXfer+0x1246>
 8009b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	461a      	mov	r2, r3
 8009b32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b36:	4413      	add	r3, r2
 8009b38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	011a      	lsls	r2, r3, #4
 8009b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b4e:	4413      	add	r3, r2
 8009b50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b6a:	801a      	strh	r2, [r3, #0]
 8009b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10c      	bne.n	8009b96 <USB_EPStartXfer+0x1190>
 8009b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009b92:	801a      	strh	r2, [r3, #0]
 8009b94:	e088      	b.n	8009ca8 <USB_EPStartXfer+0x12a2>
 8009b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ba4:	d826      	bhi.n	8009bf4 <USB_EPStartXfer+0x11ee>
 8009ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	085b      	lsrs	r3, r3, #1
 8009bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d004      	beq.n	8009bd6 <USB_EPStartXfer+0x11d0>
 8009bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009bd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	029b      	lsls	r3, r3, #10
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	4313      	orrs	r3, r2
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009bf0:	801a      	strh	r2, [r3, #0]
 8009bf2:	e059      	b.n	8009ca8 <USB_EPStartXfer+0x12a2>
 8009bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	095b      	lsrs	r3, r3, #5
 8009c02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	f003 031f 	and.w	r3, r3, #31
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d104      	bne.n	8009c24 <USB_EPStartXfer+0x121e>
 8009c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c28:	881b      	ldrh	r3, [r3, #0]
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	029b      	lsls	r3, r3, #10
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	4313      	orrs	r3, r2
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c48:	801a      	strh	r2, [r3, #0]
 8009c4a:	e02d      	b.n	8009ca8 <USB_EPStartXfer+0x12a2>
 8009c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	785b      	ldrb	r3, [r3, #1]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d125      	bne.n	8009ca8 <USB_EPStartXfer+0x12a2>
 8009c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c72:	4413      	add	r3, r2
 8009c74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	011a      	lsls	r2, r3, #4
 8009c86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009c90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ca6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 8218 	beq.w	800a0ea <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009cda:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d005      	beq.n	8009cf2 <USB_EPStartXfer+0x12ec>
 8009ce6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10d      	bne.n	8009d0e <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009cf2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f040 81f5 	bne.w	800a0ea <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009d00:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f040 81ee 	bne.w	800a0ea <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d34:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	441a      	add	r2, r3
 8009d52:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009d56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	8013      	strh	r3, [r2, #0]
 8009d6a:	e1be      	b.n	800a0ea <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	78db      	ldrb	r3, [r3, #3]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	f040 81b4 	bne.w	800a0e6 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	699a      	ldr	r2, [r3, #24]
 8009d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d917      	bls.n	8009dca <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8009d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	699a      	ldr	r2, [r3, #24]
 8009db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dba:	1ad2      	subs	r2, r2, r3
 8009dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	619a      	str	r2, [r3, #24]
 8009dc8:	e00e      	b.n	8009de8 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8009dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2200      	movs	r2, #0
 8009de6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	785b      	ldrb	r3, [r3, #1]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f040 8085 	bne.w	8009f04 <USB_EPStartXfer+0x14fe>
 8009dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	461a      	mov	r2, r3
 8009e1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009e1e:	4413      	add	r3, r2
 8009e20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	011a      	lsls	r2, r3, #4
 8009e32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009e36:	4413      	add	r3, r2
 8009e38:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e52:	801a      	strh	r2, [r3, #0]
 8009e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10c      	bne.n	8009e76 <USB_EPStartXfer+0x1470>
 8009e5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e72:	801a      	strh	r2, [r3, #0]
 8009e74:	e077      	b.n	8009f66 <USB_EPStartXfer+0x1560>
 8009e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e7c:	d81e      	bhi.n	8009ebc <USB_EPStartXfer+0x14b6>
 8009e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e82:	085b      	lsrs	r3, r3, #1
 8009e84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e8c:	f003 0301 	and.w	r3, r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d004      	beq.n	8009e9e <USB_EPStartXfer+0x1498>
 8009e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e98:	3301      	adds	r3, #1
 8009e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	029b      	lsls	r3, r3, #10
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009eb8:	801a      	strh	r2, [r3, #0]
 8009eba:	e054      	b.n	8009f66 <USB_EPStartXfer+0x1560>
 8009ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec0:	095b      	lsrs	r3, r3, #5
 8009ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eca:	f003 031f 	and.w	r3, r3, #31
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d104      	bne.n	8009edc <USB_EPStartXfer+0x14d6>
 8009ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009edc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	029b      	lsls	r3, r3, #10
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f00:	801a      	strh	r2, [r3, #0]
 8009f02:	e030      	b.n	8009f66 <USB_EPStartXfer+0x1560>
 8009f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	785b      	ldrb	r3, [r3, #1]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d128      	bne.n	8009f66 <USB_EPStartXfer+0x1560>
 8009f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	461a      	mov	r2, r3
 8009f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009f38:	4413      	add	r3, r2
 8009f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	011a      	lsls	r2, r3, #4
 8009f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009f50:	4413      	add	r3, r2
 8009f52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009f56:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009f64:	801a      	strh	r2, [r3, #0]
 8009f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	785b      	ldrb	r3, [r3, #1]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f040 8085 	bne.w	800a090 <USB_EPStartXfer+0x168a>
 8009f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009faa:	4413      	add	r3, r2
 8009fac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	011a      	lsls	r2, r3, #4
 8009fbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009fcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009fde:	801a      	strh	r2, [r3, #0]
 8009fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10c      	bne.n	800a002 <USB_EPStartXfer+0x15fc>
 8009fe8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009fec:	881b      	ldrh	r3, [r3, #0]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ffe:	801a      	strh	r2, [r3, #0]
 800a000:	e073      	b.n	800a0ea <USB_EPStartXfer+0x16e4>
 800a002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a006:	2b3e      	cmp	r3, #62	@ 0x3e
 800a008:	d81e      	bhi.n	800a048 <USB_EPStartXfer+0x1642>
 800a00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00e:	085b      	lsrs	r3, r3, #1
 800a010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d004      	beq.n	800a02a <USB_EPStartXfer+0x1624>
 800a020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a024:	3301      	adds	r3, #1
 800a026:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a02a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	b29a      	uxth	r2, r3
 800a032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a036:	b29b      	uxth	r3, r3
 800a038:	029b      	lsls	r3, r3, #10
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	4313      	orrs	r3, r2
 800a03e:	b29a      	uxth	r2, r3
 800a040:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a044:	801a      	strh	r2, [r3, #0]
 800a046:	e050      	b.n	800a0ea <USB_EPStartXfer+0x16e4>
 800a048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a04c:	095b      	lsrs	r3, r3, #5
 800a04e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a056:	f003 031f 	and.w	r3, r3, #31
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d104      	bne.n	800a068 <USB_EPStartXfer+0x1662>
 800a05e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a062:	3b01      	subs	r3, #1
 800a064:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a06c:	881b      	ldrh	r3, [r3, #0]
 800a06e:	b29a      	uxth	r2, r3
 800a070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a074:	b29b      	uxth	r3, r3
 800a076:	029b      	lsls	r3, r3, #10
 800a078:	b29b      	uxth	r3, r3
 800a07a:	4313      	orrs	r3, r2
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a086:	b29a      	uxth	r2, r3
 800a088:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a08c:	801a      	strh	r2, [r3, #0]
 800a08e:	e02c      	b.n	800a0ea <USB_EPStartXfer+0x16e4>
 800a090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	785b      	ldrb	r3, [r3, #1]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d124      	bne.n	800a0ea <USB_EPStartXfer+0x16e4>
 800a0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a0bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	011a      	lsls	r2, r3, #4
 800a0ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a0d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a0e2:	801a      	strh	r2, [r3, #0]
 800a0e4:	e001      	b.n	800a0ea <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e03a      	b.n	800a160 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	881b      	ldrh	r3, [r3, #0]
 800a106:	b29b      	uxth	r3, r3
 800a108:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a10c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a110:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a114:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a118:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a11c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a120:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a124:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a128:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a130:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a13a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	441a      	add	r2, r3
 800a146:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a14a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a14e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a16a:	b480      	push	{r7}
 800a16c:	b085      	sub	sp, #20
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
 800a172:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	785b      	ldrb	r3, [r3, #1]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d020      	beq.n	800a1be <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	b29b      	uxth	r3, r3
 800a18a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a18e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a192:	81bb      	strh	r3, [r7, #12]
 800a194:	89bb      	ldrh	r3, [r7, #12]
 800a196:	f083 0310 	eor.w	r3, r3, #16
 800a19a:	81bb      	strh	r3, [r7, #12]
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	441a      	add	r2, r3
 800a1a6:	89bb      	ldrh	r3, [r7, #12]
 800a1a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	8013      	strh	r3, [r2, #0]
 800a1bc:	e01f      	b.n	800a1fe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	4413      	add	r3, r2
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1d4:	81fb      	strh	r3, [r7, #14]
 800a1d6:	89fb      	ldrh	r3, [r7, #14]
 800a1d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a1dc:	81fb      	strh	r3, [r7, #14]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	441a      	add	r2, r3
 800a1e8:	89fb      	ldrh	r3, [r7, #14]
 800a1ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3714      	adds	r7, #20
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	7b1b      	ldrb	r3, [r3, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f040 809d 	bne.w	800a35a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	785b      	ldrb	r3, [r3, #1]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d04c      	beq.n	800a2c2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	823b      	strh	r3, [r7, #16]
 800a236:	8a3b      	ldrh	r3, [r7, #16]
 800a238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d01b      	beq.n	800a278 <USB_EPClearStall+0x6c>
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	881b      	ldrh	r3, [r3, #0]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a256:	81fb      	strh	r3, [r7, #14]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	441a      	add	r2, r3
 800a262:	89fb      	ldrh	r3, [r7, #14]
 800a264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a26c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a270:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a274:	b29b      	uxth	r3, r3
 800a276:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	78db      	ldrb	r3, [r3, #3]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d06c      	beq.n	800a35a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a296:	81bb      	strh	r3, [r7, #12]
 800a298:	89bb      	ldrh	r3, [r7, #12]
 800a29a:	f083 0320 	eor.w	r3, r3, #32
 800a29e:	81bb      	strh	r3, [r7, #12]
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	441a      	add	r2, r3
 800a2aa:	89bb      	ldrh	r3, [r7, #12]
 800a2ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	8013      	strh	r3, [r2, #0]
 800a2c0:	e04b      	b.n	800a35a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	881b      	ldrh	r3, [r3, #0]
 800a2ce:	82fb      	strh	r3, [r7, #22]
 800a2d0:	8afb      	ldrh	r3, [r7, #22]
 800a2d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d01b      	beq.n	800a312 <USB_EPClearStall+0x106>
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2f0:	82bb      	strh	r3, [r7, #20]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	441a      	add	r2, r3
 800a2fc:	8abb      	ldrh	r3, [r7, #20]
 800a2fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a302:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a306:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a30a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a30e:	b29b      	uxth	r3, r3
 800a310:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	4413      	add	r3, r2
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a328:	827b      	strh	r3, [r7, #18]
 800a32a:	8a7b      	ldrh	r3, [r7, #18]
 800a32c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a330:	827b      	strh	r3, [r7, #18]
 800a332:	8a7b      	ldrh	r3, [r7, #18]
 800a334:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a338:	827b      	strh	r3, [r7, #18]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	441a      	add	r2, r3
 800a344:	8a7b      	ldrh	r3, [r7, #18]
 800a346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a34a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a34e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a356:	b29b      	uxth	r3, r3
 800a358:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	371c      	adds	r7, #28
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	460b      	mov	r3, r1
 800a372:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a374:	78fb      	ldrb	r3, [r7, #3]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d103      	bne.n	800a382 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2280      	movs	r2, #128	@ 0x80
 800a37e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b085      	sub	sp, #20
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b08b      	sub	sp, #44	@ 0x2c
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	80fb      	strh	r3, [r7, #6]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a3dc:	88bb      	ldrh	r3, [r7, #4]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	085b      	lsrs	r3, r3, #1
 800a3e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a3ec:	88fb      	ldrh	r3, [r7, #6]
 800a3ee:	005a      	lsls	r2, r3, #1
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3fe:	e01e      	b.n	800a43e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	3301      	adds	r3, #1
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	b21a      	sxth	r2, r3
 800a410:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a414:	4313      	orrs	r3, r2
 800a416:	b21b      	sxth	r3, r3
 800a418:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	8a7a      	ldrh	r2, [r7, #18]
 800a41e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	3302      	adds	r3, #2
 800a424:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	3302      	adds	r3, #2
 800a42a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	3301      	adds	r3, #1
 800a430:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	3301      	adds	r3, #1
 800a436:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43a:	3b01      	subs	r3, #1
 800a43c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1dd      	bne.n	800a400 <USB_WritePMA+0x3a>
  }
}
 800a444:	bf00      	nop
 800a446:	bf00      	nop
 800a448:	372c      	adds	r7, #44	@ 0x2c
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a452:	b480      	push	{r7}
 800a454:	b08b      	sub	sp, #44	@ 0x2c
 800a456:	af00      	add	r7, sp, #0
 800a458:	60f8      	str	r0, [r7, #12]
 800a45a:	60b9      	str	r1, [r7, #8]
 800a45c:	4611      	mov	r1, r2
 800a45e:	461a      	mov	r2, r3
 800a460:	460b      	mov	r3, r1
 800a462:	80fb      	strh	r3, [r7, #6]
 800a464:	4613      	mov	r3, r2
 800a466:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a468:	88bb      	ldrh	r3, [r7, #4]
 800a46a:	085b      	lsrs	r3, r3, #1
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a478:	88fb      	ldrh	r3, [r7, #6]
 800a47a:	005a      	lsls	r2, r3, #1
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a484:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	627b      	str	r3, [r7, #36]	@ 0x24
 800a48a:	e01b      	b.n	800a4c4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a48c:	6a3b      	ldr	r3, [r7, #32]
 800a48e:	881b      	ldrh	r3, [r3, #0]
 800a490:	b29b      	uxth	r3, r3
 800a492:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	3302      	adds	r3, #2
 800a498:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	0a1b      	lsrs	r3, r3, #8
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	3302      	adds	r3, #2
 800a4bc:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1e0      	bne.n	800a48c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a4ca:	88bb      	ldrh	r3, [r7, #4]
 800a4cc:	f003 0301 	and.w	r3, r3, #1
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d007      	beq.n	800a4e6 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	701a      	strb	r2, [r3, #0]
  }
}
 800a4e6:	bf00      	nop
 800a4e8:	372c      	adds	r7, #44	@ 0x2c
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a4fe:	2300      	movs	r3, #0
 800a500:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	7c1b      	ldrb	r3, [r3, #16]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d115      	bne.n	800a536 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a50a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a50e:	2202      	movs	r2, #2
 800a510:	2181      	movs	r1, #129	@ 0x81
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f003 f909 	bl	800d72a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a51e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a522:	2202      	movs	r2, #2
 800a524:	2101      	movs	r1, #1
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f003 f8ff 	bl	800d72a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800a534:	e012      	b.n	800a55c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a536:	2340      	movs	r3, #64	@ 0x40
 800a538:	2202      	movs	r2, #2
 800a53a:	2181      	movs	r1, #129	@ 0x81
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f003 f8f4 	bl	800d72a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2201      	movs	r2, #1
 800a546:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a548:	2340      	movs	r3, #64	@ 0x40
 800a54a:	2202      	movs	r2, #2
 800a54c:	2101      	movs	r1, #1
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f003 f8eb 	bl	800d72a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a55c:	2308      	movs	r3, #8
 800a55e:	2203      	movs	r2, #3
 800a560:	2182      	movs	r1, #130	@ 0x82
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f003 f8e1 	bl	800d72a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a56e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a572:	f003 fa01 	bl	800d978 <USBD_static_malloc>
 800a576:	4602      	mov	r2, r0
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a584:	2b00      	cmp	r3, #0
 800a586:	d102      	bne.n	800a58e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a588:	2301      	movs	r3, #1
 800a58a:	73fb      	strb	r3, [r7, #15]
 800a58c:	e026      	b.n	800a5dc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a594:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	7c1b      	ldrb	r3, [r3, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d109      	bne.n	800a5cc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a5be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f003 f9a1 	bl	800d90c <USBD_LL_PrepareReceive>
 800a5ca:	e007      	b.n	800a5dc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a5d2:	2340      	movs	r3, #64	@ 0x40
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f003 f998 	bl	800d90c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a5f6:	2181      	movs	r1, #129	@ 0x81
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f003 f8bc 	bl	800d776 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a604:	2101      	movs	r1, #1
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f003 f8b5 	bl	800d776 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a614:	2182      	movs	r1, #130	@ 0x82
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f003 f8ad 	bl	800d776 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00e      	beq.n	800a64a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a63c:	4618      	mov	r0, r3
 800a63e:	f003 f9a9 	bl	800d994 <USBD_static_free>
    pdev->pClassData = NULL;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a664:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a66a:	2300      	movs	r3, #0
 800a66c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d039      	beq.n	800a6f2 <USBD_CDC_Setup+0x9e>
 800a67e:	2b20      	cmp	r3, #32
 800a680:	d17f      	bne.n	800a782 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	88db      	ldrh	r3, [r3, #6]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d029      	beq.n	800a6de <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	b25b      	sxtb	r3, r3
 800a690:	2b00      	cmp	r3, #0
 800a692:	da11      	bge.n	800a6b8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a6a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	88d2      	ldrh	r2, [r2, #6]
 800a6a6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a6a8:	6939      	ldr	r1, [r7, #16]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	88db      	ldrh	r3, [r3, #6]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f001 fa0f 	bl	800bad4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a6b6:	e06b      	b.n	800a790 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	785a      	ldrb	r2, [r3, #1]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	88db      	ldrh	r3, [r3, #6]
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a6ce:	6939      	ldr	r1, [r7, #16]
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	88db      	ldrh	r3, [r3, #6]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f001 fa2a 	bl	800bb30 <USBD_CtlPrepareRx>
      break;
 800a6dc:	e058      	b.n	800a790 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	7850      	ldrb	r0, [r2, #1]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	4798      	blx	r3
      break;
 800a6f0:	e04e      	b.n	800a790 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	785b      	ldrb	r3, [r3, #1]
 800a6f6:	2b0b      	cmp	r3, #11
 800a6f8:	d02e      	beq.n	800a758 <USBD_CDC_Setup+0x104>
 800a6fa:	2b0b      	cmp	r3, #11
 800a6fc:	dc38      	bgt.n	800a770 <USBD_CDC_Setup+0x11c>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d002      	beq.n	800a708 <USBD_CDC_Setup+0xb4>
 800a702:	2b0a      	cmp	r3, #10
 800a704:	d014      	beq.n	800a730 <USBD_CDC_Setup+0xdc>
 800a706:	e033      	b.n	800a770 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d107      	bne.n	800a722 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a712:	f107 030c 	add.w	r3, r7, #12
 800a716:	2202      	movs	r2, #2
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f001 f9da 	bl	800bad4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a720:	e02e      	b.n	800a780 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f001 f96a 	bl	800b9fe <USBD_CtlError>
            ret = USBD_FAIL;
 800a72a:	2302      	movs	r3, #2
 800a72c:	75fb      	strb	r3, [r7, #23]
          break;
 800a72e:	e027      	b.n	800a780 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a736:	2b03      	cmp	r3, #3
 800a738:	d107      	bne.n	800a74a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a73a:	f107 030f 	add.w	r3, r7, #15
 800a73e:	2201      	movs	r2, #1
 800a740:	4619      	mov	r1, r3
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f001 f9c6 	bl	800bad4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a748:	e01a      	b.n	800a780 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f001 f956 	bl	800b9fe <USBD_CtlError>
            ret = USBD_FAIL;
 800a752:	2302      	movs	r3, #2
 800a754:	75fb      	strb	r3, [r7, #23]
          break;
 800a756:	e013      	b.n	800a780 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d00d      	beq.n	800a77e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 f94a 	bl	800b9fe <USBD_CtlError>
            ret = USBD_FAIL;
 800a76a:	2302      	movs	r3, #2
 800a76c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a76e:	e006      	b.n	800a77e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 f943 	bl	800b9fe <USBD_CtlError>
          ret = USBD_FAIL;
 800a778:	2302      	movs	r3, #2
 800a77a:	75fb      	strb	r3, [r7, #23]
          break;
 800a77c:	e000      	b.n	800a780 <USBD_CDC_Setup+0x12c>
          break;
 800a77e:	bf00      	nop
      }
      break;
 800a780:	e006      	b.n	800a790 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f001 f93a 	bl	800b9fe <USBD_CtlError>
      ret = USBD_FAIL;
 800a78a:	2302      	movs	r3, #2
 800a78c:	75fb      	strb	r3, [r7, #23]
      break;
 800a78e:	bf00      	nop
  }

  return ret;
 800a790:	7dfb      	ldrb	r3, [r7, #23]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b084      	sub	sp, #16
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7ac:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7b4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d03a      	beq.n	800a836 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a7c0:	78fa      	ldrb	r2, [r7, #3]
 800a7c2:	6879      	ldr	r1, [r7, #4]
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	4413      	add	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	440b      	add	r3, r1
 800a7ce:	331c      	adds	r3, #28
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d029      	beq.n	800a82a <USBD_CDC_DataIn+0x90>
 800a7d6:	78fa      	ldrb	r2, [r7, #3]
 800a7d8:	6879      	ldr	r1, [r7, #4]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	440b      	add	r3, r1
 800a7e4:	331c      	adds	r3, #28
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	78f9      	ldrb	r1, [r7, #3]
 800a7ea:	68b8      	ldr	r0, [r7, #8]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	440b      	add	r3, r1
 800a7f2:	00db      	lsls	r3, r3, #3
 800a7f4:	4403      	add	r3, r0
 800a7f6:	3320      	adds	r3, #32
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	fbb2 f1f3 	udiv	r1, r2, r3
 800a7fe:	fb01 f303 	mul.w	r3, r1, r3
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	2b00      	cmp	r3, #0
 800a806:	d110      	bne.n	800a82a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a808:	78fa      	ldrb	r2, [r7, #3]
 800a80a:	6879      	ldr	r1, [r7, #4]
 800a80c:	4613      	mov	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4413      	add	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	440b      	add	r3, r1
 800a816:	331c      	adds	r3, #28
 800a818:	2200      	movs	r2, #0
 800a81a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a81c:	78f9      	ldrb	r1, [r7, #3]
 800a81e:	2300      	movs	r3, #0
 800a820:	2200      	movs	r2, #0
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f003 f84f 	bl	800d8c6 <USBD_LL_Transmit>
 800a828:	e003      	b.n	800a832 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800a832:	2300      	movs	r3, #0
 800a834:	e000      	b.n	800a838 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a836:	2302      	movs	r3, #2
  }
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	460b      	mov	r3, r1
 800a84a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a852:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	4619      	mov	r1, r3
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f003 f87a 	bl	800d952 <USBD_LL_GetRxDataSize>
 800a85e:	4602      	mov	r2, r0
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00d      	beq.n	800a88c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a884:	4611      	mov	r1, r2
 800a886:	4798      	blx	r3

    return USBD_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	e000      	b.n	800a88e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a88c:	2302      	movs	r3, #2
  }
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8a4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d014      	beq.n	800a8da <USBD_CDC_EP0_RxReady+0x44>
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a8b6:	2bff      	cmp	r3, #255	@ 0xff
 800a8b8:	d00f      	beq.n	800a8da <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a8c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a8d0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	22ff      	movs	r2, #255	@ 0xff
 800a8d6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2243      	movs	r2, #67	@ 0x43
 800a8f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a8f2:	4b03      	ldr	r3, [pc, #12]	@ (800a900 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	200000a0 	.word	0x200000a0

0800a904 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2243      	movs	r2, #67	@ 0x43
 800a910:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a912:	4b03      	ldr	r3, [pc, #12]	@ (800a920 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	2000005c 	.word	0x2000005c

0800a924 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2243      	movs	r2, #67	@ 0x43
 800a930:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a932:	4b03      	ldr	r3, [pc, #12]	@ (800a940 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a934:	4618      	mov	r0, r3
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	200000e4 	.word	0x200000e4

0800a944 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	220a      	movs	r2, #10
 800a950:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a952:	4b03      	ldr	r3, [pc, #12]	@ (800a960 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a954:	4618      	mov	r0, r3
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	20000018 	.word	0x20000018

0800a964 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a96e:	2302      	movs	r3, #2
 800a970:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d005      	beq.n	800a984 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a984:	7bfb      	ldrb	r3, [r7, #15]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a992:	b480      	push	{r7}
 800a994:	b087      	sub	sp, #28
 800a996:	af00      	add	r7, sp, #0
 800a998:	60f8      	str	r0, [r7, #12]
 800a99a:	60b9      	str	r1, [r7, #8]
 800a99c:	4613      	mov	r3, r2
 800a99e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9a6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a9b0:	88fa      	ldrh	r2, [r7, #6]
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	371c      	adds	r7, #28
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b085      	sub	sp, #20
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9d6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d01c      	beq.n	800aa42 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d115      	bne.n	800aa3e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	2181      	movs	r1, #129	@ 0x81
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f002 ff46 	bl	800d8c6 <USBD_LL_Transmit>

      return USBD_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	e002      	b.n	800aa44 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e000      	b.n	800aa44 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800aa42:	2302      	movs	r3, #2
  }
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d017      	beq.n	800aa96 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	7c1b      	ldrb	r3, [r3, #16]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d109      	bne.n	800aa82 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa78:	2101      	movs	r1, #1
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f002 ff46 	bl	800d90c <USBD_LL_PrepareReceive>
 800aa80:	e007      	b.n	800aa92 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa88:	2340      	movs	r3, #64	@ 0x40
 800aa8a:	2101      	movs	r1, #1
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f002 ff3d 	bl	800d90c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	e000      	b.n	800aa98 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800aa96:	2302      	movs	r3, #2
  }
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aab4:	2302      	movs	r3, #2
 800aab6:	e01a      	b.n	800aaee <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d003      	beq.n	800aad8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	79fa      	ldrb	r2, [r7, #7]
 800aae4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f002 fdaa 	bl	800d640 <USBD_LL_Init>

  return USBD_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d006      	beq.n	800ab18 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	73fb      	strb	r3, [r7, #15]
 800ab16:	e001      	b.n	800ab1c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ab18:	2302      	movs	r3, #2
 800ab1a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f002 fdde 	bl	800d6f4 <USBD_LL_Start>

  return USBD_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ab64:	2302      	movs	r3, #2
 800ab66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00c      	beq.n	800ab8c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	78fa      	ldrb	r2, [r7, #3]
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	4798      	blx	r3
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d101      	bne.n	800ab8c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b082      	sub	sp, #8
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	460b      	mov	r3, r1
 800aba0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	78fa      	ldrb	r2, [r7, #3]
 800abac:	4611      	mov	r1, r2
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	4798      	blx	r3

  return USBD_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 fedb 	bl	800b98a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800abe2:	461a      	mov	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800abf0:	f003 031f 	and.w	r3, r3, #31
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d016      	beq.n	800ac26 <USBD_LL_SetupStage+0x6a>
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	d81c      	bhi.n	800ac36 <USBD_LL_SetupStage+0x7a>
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <USBD_LL_SetupStage+0x4a>
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d008      	beq.n	800ac16 <USBD_LL_SetupStage+0x5a>
 800ac04:	e017      	b.n	800ac36 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f9ce 	bl	800afb0 <USBD_StdDevReq>
      break;
 800ac14:	e01a      	b.n	800ac4c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fa30 	bl	800b084 <USBD_StdItfReq>
      break;
 800ac24:	e012      	b.n	800ac4c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fa70 	bl	800b114 <USBD_StdEPReq>
      break;
 800ac34:	e00a      	b.n	800ac4c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800ac3c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f002 fdb5 	bl	800d7b4 <USBD_LL_StallEP>
      break;
 800ac4a:	bf00      	nop
  }

  return USBD_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b086      	sub	sp, #24
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	460b      	mov	r3, r1
 800ac60:	607a      	str	r2, [r7, #4]
 800ac62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ac64:	7afb      	ldrb	r3, [r7, #11]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d14b      	bne.n	800ad02 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ac70:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d134      	bne.n	800ace6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	68da      	ldr	r2, [r3, #12]
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d919      	bls.n	800acbc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	68da      	ldr	r2, [r3, #12]
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	1ad2      	subs	r2, r2, r3
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	68da      	ldr	r2, [r3, #12]
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d203      	bcs.n	800acaa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	e002      	b.n	800acb0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800acae:	b29b      	uxth	r3, r3
 800acb0:	461a      	mov	r2, r3
 800acb2:	6879      	ldr	r1, [r7, #4]
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f000 ff59 	bl	800bb6c <USBD_CtlContinueRx>
 800acba:	e038      	b.n	800ad2e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00a      	beq.n	800acde <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d105      	bne.n	800acde <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	68f8      	ldr	r0, [r7, #12]
 800acdc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f000 ff56 	bl	800bb90 <USBD_CtlSendStatus>
 800ace4:	e023      	b.n	800ad2e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800acec:	2b05      	cmp	r3, #5
 800acee:	d11e      	bne.n	800ad2e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800acf8:	2100      	movs	r1, #0
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f002 fd5a 	bl	800d7b4 <USBD_LL_StallEP>
 800ad00:	e015      	b.n	800ad2e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00d      	beq.n	800ad2a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ad14:	2b03      	cmp	r3, #3
 800ad16:	d108      	bne.n	800ad2a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	7afa      	ldrb	r2, [r7, #11]
 800ad22:	4611      	mov	r1, r2
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	4798      	blx	r3
 800ad28:	e001      	b.n	800ad2e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ad2a:	2302      	movs	r3, #2
 800ad2c:	e000      	b.n	800ad30 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3718      	adds	r7, #24
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	460b      	mov	r3, r1
 800ad42:	607a      	str	r2, [r7, #4]
 800ad44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ad46:	7afb      	ldrb	r3, [r7, #11]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d17f      	bne.n	800ae4c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	3314      	adds	r3, #20
 800ad50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d15c      	bne.n	800ae16 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	68da      	ldr	r2, [r3, #12]
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d915      	bls.n	800ad94 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	68da      	ldr	r2, [r3, #12]
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	1ad2      	subs	r2, r2, r3
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	6879      	ldr	r1, [r7, #4]
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 fec3 	bl	800bb0c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad86:	2300      	movs	r3, #0
 800ad88:	2200      	movs	r2, #0
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f002 fdbd 	bl	800d90c <USBD_LL_PrepareReceive>
 800ad92:	e04e      	b.n	800ae32 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	6912      	ldr	r2, [r2, #16]
 800ad9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ada0:	fb01 f202 	mul.w	r2, r1, r2
 800ada4:	1a9b      	subs	r3, r3, r2
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d11c      	bne.n	800ade4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	689a      	ldr	r2, [r3, #8]
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d316      	bcc.n	800ade4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	689a      	ldr	r2, [r3, #8]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d20f      	bcs.n	800ade4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800adc4:	2200      	movs	r2, #0
 800adc6:	2100      	movs	r1, #0
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 fe9f 	bl	800bb0c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800add6:	2300      	movs	r3, #0
 800add8:	2200      	movs	r2, #0
 800adda:	2100      	movs	r1, #0
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f002 fd95 	bl	800d90c <USBD_LL_PrepareReceive>
 800ade2:	e026      	b.n	800ae32 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00a      	beq.n	800ae06 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d105      	bne.n	800ae06 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ae06:	2180      	movs	r1, #128	@ 0x80
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f002 fcd3 	bl	800d7b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f000 fed1 	bl	800bbb6 <USBD_CtlReceiveStatus>
 800ae14:	e00d      	b.n	800ae32 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ae1c:	2b04      	cmp	r3, #4
 800ae1e:	d004      	beq.n	800ae2a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d103      	bne.n	800ae32 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ae2a:	2180      	movs	r1, #128	@ 0x80
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f002 fcc1 	bl	800d7b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d11d      	bne.n	800ae78 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f7ff fe80 	bl	800ab42 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ae4a:	e015      	b.n	800ae78 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae52:	695b      	ldr	r3, [r3, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00d      	beq.n	800ae74 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae5e:	2b03      	cmp	r3, #3
 800ae60:	d108      	bne.n	800ae74 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	7afa      	ldrb	r2, [r7, #11]
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	4798      	blx	r3
 800ae72:	e001      	b.n	800ae78 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ae74:	2302      	movs	r3, #2
 800ae76:	e000      	b.n	800ae7a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3718      	adds	r7, #24
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b082      	sub	sp, #8
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae8a:	2340      	movs	r3, #64	@ 0x40
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	2100      	movs	r1, #0
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f002 fc4a 	bl	800d72a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2240      	movs	r2, #64	@ 0x40
 800aea2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aea6:	2340      	movs	r3, #64	@ 0x40
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2180      	movs	r1, #128	@ 0x80
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f002 fc3c 	bl	800d72a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2240      	movs	r2, #64	@ 0x40
 800aebc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d009      	beq.n	800aefa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	6852      	ldr	r2, [r2, #4]
 800aef2:	b2d2      	uxtb	r2, r2
 800aef4:	4611      	mov	r1, r2
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	4798      	blx	r3
  }

  return USBD_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	460b      	mov	r3, r1
 800af0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	78fa      	ldrb	r2, [r7, #3]
 800af14:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2204      	movs	r2, #4
 800af3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800af4e:	b480      	push	{r7}
 800af50:	b083      	sub	sp, #12
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af5c:	2b04      	cmp	r3, #4
 800af5e:	d105      	bne.n	800af6c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b082      	sub	sp, #8
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af88:	2b03      	cmp	r3, #3
 800af8a:	d10b      	bne.n	800afa4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af92:	69db      	ldr	r3, [r3, #28]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d005      	beq.n	800afa4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af9e:	69db      	ldr	r3, [r3, #28]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
	...

0800afb0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800afc6:	2b40      	cmp	r3, #64	@ 0x40
 800afc8:	d005      	beq.n	800afd6 <USBD_StdDevReq+0x26>
 800afca:	2b40      	cmp	r3, #64	@ 0x40
 800afcc:	d84f      	bhi.n	800b06e <USBD_StdDevReq+0xbe>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d009      	beq.n	800afe6 <USBD_StdDevReq+0x36>
 800afd2:	2b20      	cmp	r3, #32
 800afd4:	d14b      	bne.n	800b06e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	4798      	blx	r3
      break;
 800afe4:	e048      	b.n	800b078 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	785b      	ldrb	r3, [r3, #1]
 800afea:	2b09      	cmp	r3, #9
 800afec:	d839      	bhi.n	800b062 <USBD_StdDevReq+0xb2>
 800afee:	a201      	add	r2, pc, #4	@ (adr r2, 800aff4 <USBD_StdDevReq+0x44>)
 800aff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff4:	0800b045 	.word	0x0800b045
 800aff8:	0800b059 	.word	0x0800b059
 800affc:	0800b063 	.word	0x0800b063
 800b000:	0800b04f 	.word	0x0800b04f
 800b004:	0800b063 	.word	0x0800b063
 800b008:	0800b027 	.word	0x0800b027
 800b00c:	0800b01d 	.word	0x0800b01d
 800b010:	0800b063 	.word	0x0800b063
 800b014:	0800b03b 	.word	0x0800b03b
 800b018:	0800b031 	.word	0x0800b031
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f9dc 	bl	800b3dc <USBD_GetDescriptor>
          break;
 800b024:	e022      	b.n	800b06c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fb3f 	bl	800b6ac <USBD_SetAddress>
          break;
 800b02e:	e01d      	b.n	800b06c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fb7e 	bl	800b734 <USBD_SetConfig>
          break;
 800b038:	e018      	b.n	800b06c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b03a:	6839      	ldr	r1, [r7, #0]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 fc07 	bl	800b850 <USBD_GetConfig>
          break;
 800b042:	e013      	b.n	800b06c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fc37 	bl	800b8ba <USBD_GetStatus>
          break;
 800b04c:	e00e      	b.n	800b06c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fc65 	bl	800b920 <USBD_SetFeature>
          break;
 800b056:	e009      	b.n	800b06c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 fc74 	bl	800b948 <USBD_ClrFeature>
          break;
 800b060:	e004      	b.n	800b06c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b062:	6839      	ldr	r1, [r7, #0]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 fcca 	bl	800b9fe <USBD_CtlError>
          break;
 800b06a:	bf00      	nop
      }
      break;
 800b06c:	e004      	b.n	800b078 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fcc4 	bl	800b9fe <USBD_CtlError>
      break;
 800b076:	bf00      	nop
  }

  return ret;
 800b078:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop

0800b084 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b08e:	2300      	movs	r3, #0
 800b090:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b09a:	2b40      	cmp	r3, #64	@ 0x40
 800b09c:	d005      	beq.n	800b0aa <USBD_StdItfReq+0x26>
 800b09e:	2b40      	cmp	r3, #64	@ 0x40
 800b0a0:	d82e      	bhi.n	800b100 <USBD_StdItfReq+0x7c>
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <USBD_StdItfReq+0x26>
 800b0a6:	2b20      	cmp	r3, #32
 800b0a8:	d12a      	bne.n	800b100 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d81d      	bhi.n	800b0f2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	889b      	ldrh	r3, [r3, #4]
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d813      	bhi.n	800b0e8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	4798      	blx	r3
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	88db      	ldrh	r3, [r3, #6]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d110      	bne.n	800b0fc <USBD_StdItfReq+0x78>
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10d      	bne.n	800b0fc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fd55 	bl	800bb90 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b0e6:	e009      	b.n	800b0fc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fc87 	bl	800b9fe <USBD_CtlError>
          break;
 800b0f0:	e004      	b.n	800b0fc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fc82 	bl	800b9fe <USBD_CtlError>
          break;
 800b0fa:	e000      	b.n	800b0fe <USBD_StdItfReq+0x7a>
          break;
 800b0fc:	bf00      	nop
      }
      break;
 800b0fe:	e004      	b.n	800b10a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fc7b 	bl	800b9fe <USBD_CtlError>
      break;
 800b108:	bf00      	nop
  }

  return USBD_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	889b      	ldrh	r3, [r3, #4]
 800b126:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b130:	2b40      	cmp	r3, #64	@ 0x40
 800b132:	d007      	beq.n	800b144 <USBD_StdEPReq+0x30>
 800b134:	2b40      	cmp	r3, #64	@ 0x40
 800b136:	f200 8146 	bhi.w	800b3c6 <USBD_StdEPReq+0x2b2>
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00a      	beq.n	800b154 <USBD_StdEPReq+0x40>
 800b13e:	2b20      	cmp	r3, #32
 800b140:	f040 8141 	bne.w	800b3c6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	4798      	blx	r3
      break;
 800b152:	e13d      	b.n	800b3d0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b15c:	2b20      	cmp	r3, #32
 800b15e:	d10a      	bne.n	800b176 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	4798      	blx	r3
 800b16e:	4603      	mov	r3, r0
 800b170:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	e12d      	b.n	800b3d2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	785b      	ldrb	r3, [r3, #1]
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d007      	beq.n	800b18e <USBD_StdEPReq+0x7a>
 800b17e:	2b03      	cmp	r3, #3
 800b180:	f300 811b 	bgt.w	800b3ba <USBD_StdEPReq+0x2a6>
 800b184:	2b00      	cmp	r3, #0
 800b186:	d072      	beq.n	800b26e <USBD_StdEPReq+0x15a>
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d03a      	beq.n	800b202 <USBD_StdEPReq+0xee>
 800b18c:	e115      	b.n	800b3ba <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b194:	2b02      	cmp	r3, #2
 800b196:	d002      	beq.n	800b19e <USBD_StdEPReq+0x8a>
 800b198:	2b03      	cmp	r3, #3
 800b19a:	d015      	beq.n	800b1c8 <USBD_StdEPReq+0xb4>
 800b19c:	e02b      	b.n	800b1f6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d00c      	beq.n	800b1be <USBD_StdEPReq+0xaa>
 800b1a4:	7bbb      	ldrb	r3, [r7, #14]
 800b1a6:	2b80      	cmp	r3, #128	@ 0x80
 800b1a8:	d009      	beq.n	800b1be <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b1aa:	7bbb      	ldrb	r3, [r7, #14]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f002 fb00 	bl	800d7b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b1b4:	2180      	movs	r1, #128	@ 0x80
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f002 fafc 	bl	800d7b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1bc:	e020      	b.n	800b200 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 fc1c 	bl	800b9fe <USBD_CtlError>
              break;
 800b1c6:	e01b      	b.n	800b200 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	885b      	ldrh	r3, [r3, #2]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10e      	bne.n	800b1ee <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b1d0:	7bbb      	ldrb	r3, [r7, #14]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00b      	beq.n	800b1ee <USBD_StdEPReq+0xda>
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
 800b1d8:	2b80      	cmp	r3, #128	@ 0x80
 800b1da:	d008      	beq.n	800b1ee <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	88db      	ldrh	r3, [r3, #6]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d104      	bne.n	800b1ee <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b1e4:	7bbb      	ldrb	r3, [r7, #14]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f002 fae3 	bl	800d7b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fcce 	bl	800bb90 <USBD_CtlSendStatus>

              break;
 800b1f4:	e004      	b.n	800b200 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 fc00 	bl	800b9fe <USBD_CtlError>
              break;
 800b1fe:	bf00      	nop
          }
          break;
 800b200:	e0e0      	b.n	800b3c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d002      	beq.n	800b212 <USBD_StdEPReq+0xfe>
 800b20c:	2b03      	cmp	r3, #3
 800b20e:	d015      	beq.n	800b23c <USBD_StdEPReq+0x128>
 800b210:	e026      	b.n	800b260 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b212:	7bbb      	ldrb	r3, [r7, #14]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00c      	beq.n	800b232 <USBD_StdEPReq+0x11e>
 800b218:	7bbb      	ldrb	r3, [r7, #14]
 800b21a:	2b80      	cmp	r3, #128	@ 0x80
 800b21c:	d009      	beq.n	800b232 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b21e:	7bbb      	ldrb	r3, [r7, #14]
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f002 fac6 	bl	800d7b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b228:	2180      	movs	r1, #128	@ 0x80
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f002 fac2 	bl	800d7b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b230:	e01c      	b.n	800b26c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b232:	6839      	ldr	r1, [r7, #0]
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fbe2 	bl	800b9fe <USBD_CtlError>
              break;
 800b23a:	e017      	b.n	800b26c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	885b      	ldrh	r3, [r3, #2]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d112      	bne.n	800b26a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b244:	7bbb      	ldrb	r3, [r7, #14]
 800b246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d004      	beq.n	800b258 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b24e:	7bbb      	ldrb	r3, [r7, #14]
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f002 facd 	bl	800d7f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fc99 	bl	800bb90 <USBD_CtlSendStatus>
              }
              break;
 800b25e:	e004      	b.n	800b26a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fbcb 	bl	800b9fe <USBD_CtlError>
              break;
 800b268:	e000      	b.n	800b26c <USBD_StdEPReq+0x158>
              break;
 800b26a:	bf00      	nop
          }
          break;
 800b26c:	e0aa      	b.n	800b3c4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b274:	2b02      	cmp	r3, #2
 800b276:	d002      	beq.n	800b27e <USBD_StdEPReq+0x16a>
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d032      	beq.n	800b2e2 <USBD_StdEPReq+0x1ce>
 800b27c:	e097      	b.n	800b3ae <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b27e:	7bbb      	ldrb	r3, [r7, #14]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d007      	beq.n	800b294 <USBD_StdEPReq+0x180>
 800b284:	7bbb      	ldrb	r3, [r7, #14]
 800b286:	2b80      	cmp	r3, #128	@ 0x80
 800b288:	d004      	beq.n	800b294 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fbb6 	bl	800b9fe <USBD_CtlError>
                break;
 800b292:	e091      	b.n	800b3b8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b294:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	da0b      	bge.n	800b2b4 <USBD_StdEPReq+0x1a0>
 800b29c:	7bbb      	ldrb	r3, [r7, #14]
 800b29e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	3310      	adds	r3, #16
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	3304      	adds	r3, #4
 800b2b2:	e00b      	b.n	800b2cc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2b4:	7bbb      	ldrb	r3, [r7, #14]
 800b2b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fbfa 	bl	800bad4 <USBD_CtlSendData>
              break;
 800b2e0:	e06a      	b.n	800b3b8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b2e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	da11      	bge.n	800b30e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b2ea:	7bbb      	ldrb	r3, [r7, #14]
 800b2ec:	f003 020f 	and.w	r2, r3, #15
 800b2f0:	6879      	ldr	r1, [r7, #4]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	440b      	add	r3, r1
 800b2fc:	3318      	adds	r3, #24
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d117      	bne.n	800b334 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fb79 	bl	800b9fe <USBD_CtlError>
                  break;
 800b30c:	e054      	b.n	800b3b8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b30e:	7bbb      	ldrb	r3, [r7, #14]
 800b310:	f003 020f 	and.w	r2, r3, #15
 800b314:	6879      	ldr	r1, [r7, #4]
 800b316:	4613      	mov	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	4413      	add	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	440b      	add	r3, r1
 800b320:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d104      	bne.n	800b334 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fb66 	bl	800b9fe <USBD_CtlError>
                  break;
 800b332:	e041      	b.n	800b3b8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	da0b      	bge.n	800b354 <USBD_StdEPReq+0x240>
 800b33c:	7bbb      	ldrb	r3, [r7, #14]
 800b33e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b342:	4613      	mov	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	3310      	adds	r3, #16
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	4413      	add	r3, r2
 800b350:	3304      	adds	r3, #4
 800b352:	e00b      	b.n	800b36c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b354:	7bbb      	ldrb	r3, [r7, #14]
 800b356:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b35a:	4613      	mov	r3, r2
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	4413      	add	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	4413      	add	r3, r2
 800b36a:	3304      	adds	r3, #4
 800b36c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b36e:	7bbb      	ldrb	r3, [r7, #14]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <USBD_StdEPReq+0x266>
 800b374:	7bbb      	ldrb	r3, [r7, #14]
 800b376:	2b80      	cmp	r3, #128	@ 0x80
 800b378:	d103      	bne.n	800b382 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	2200      	movs	r2, #0
 800b37e:	601a      	str	r2, [r3, #0]
 800b380:	e00e      	b.n	800b3a0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b382:	7bbb      	ldrb	r3, [r7, #14]
 800b384:	4619      	mov	r1, r3
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f002 fa52 	bl	800d830 <USBD_LL_IsStallEP>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d003      	beq.n	800b39a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2201      	movs	r2, #1
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	e002      	b.n	800b3a0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fb94 	bl	800bad4 <USBD_CtlSendData>
              break;
 800b3ac:	e004      	b.n	800b3b8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fb24 	bl	800b9fe <USBD_CtlError>
              break;
 800b3b6:	bf00      	nop
          }
          break;
 800b3b8:	e004      	b.n	800b3c4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fb1e 	bl	800b9fe <USBD_CtlError>
          break;
 800b3c2:	bf00      	nop
      }
      break;
 800b3c4:	e004      	b.n	800b3d0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fb18 	bl	800b9fe <USBD_CtlError>
      break;
 800b3ce:	bf00      	nop
  }

  return ret;
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
	...

0800b3dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	885b      	ldrh	r3, [r3, #2]
 800b3f6:	0a1b      	lsrs	r3, r3, #8
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	2b06      	cmp	r3, #6
 800b3fe:	f200 8128 	bhi.w	800b652 <USBD_GetDescriptor+0x276>
 800b402:	a201      	add	r2, pc, #4	@ (adr r2, 800b408 <USBD_GetDescriptor+0x2c>)
 800b404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b408:	0800b425 	.word	0x0800b425
 800b40c:	0800b43d 	.word	0x0800b43d
 800b410:	0800b47d 	.word	0x0800b47d
 800b414:	0800b653 	.word	0x0800b653
 800b418:	0800b653 	.word	0x0800b653
 800b41c:	0800b5f3 	.word	0x0800b5f3
 800b420:	0800b61f 	.word	0x0800b61f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	7c12      	ldrb	r2, [r2, #16]
 800b430:	f107 0108 	add.w	r1, r7, #8
 800b434:	4610      	mov	r0, r2
 800b436:	4798      	blx	r3
 800b438:	60f8      	str	r0, [r7, #12]
      break;
 800b43a:	e112      	b.n	800b662 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	7c1b      	ldrb	r3, [r3, #16]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10d      	bne.n	800b460 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b44c:	f107 0208 	add.w	r2, r7, #8
 800b450:	4610      	mov	r0, r2
 800b452:	4798      	blx	r3
 800b454:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	3301      	adds	r3, #1
 800b45a:	2202      	movs	r2, #2
 800b45c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b45e:	e100      	b.n	800b662 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b468:	f107 0208 	add.w	r2, r7, #8
 800b46c:	4610      	mov	r0, r2
 800b46e:	4798      	blx	r3
 800b470:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	3301      	adds	r3, #1
 800b476:	2202      	movs	r2, #2
 800b478:	701a      	strb	r2, [r3, #0]
      break;
 800b47a:	e0f2      	b.n	800b662 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	885b      	ldrh	r3, [r3, #2]
 800b480:	b2db      	uxtb	r3, r3
 800b482:	2b05      	cmp	r3, #5
 800b484:	f200 80ac 	bhi.w	800b5e0 <USBD_GetDescriptor+0x204>
 800b488:	a201      	add	r2, pc, #4	@ (adr r2, 800b490 <USBD_GetDescriptor+0xb4>)
 800b48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48e:	bf00      	nop
 800b490:	0800b4a9 	.word	0x0800b4a9
 800b494:	0800b4dd 	.word	0x0800b4dd
 800b498:	0800b511 	.word	0x0800b511
 800b49c:	0800b545 	.word	0x0800b545
 800b4a0:	0800b579 	.word	0x0800b579
 800b4a4:	0800b5ad 	.word	0x0800b5ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00b      	beq.n	800b4cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	7c12      	ldrb	r2, [r2, #16]
 800b4c0:	f107 0108 	add.w	r1, r7, #8
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	4798      	blx	r3
 800b4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ca:	e091      	b.n	800b5f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fa95 	bl	800b9fe <USBD_CtlError>
            err++;
 800b4d4:	7afb      	ldrb	r3, [r7, #11]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4da:	e089      	b.n	800b5f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00b      	beq.n	800b500 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	7c12      	ldrb	r2, [r2, #16]
 800b4f4:	f107 0108 	add.w	r1, r7, #8
 800b4f8:	4610      	mov	r0, r2
 800b4fa:	4798      	blx	r3
 800b4fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4fe:	e077      	b.n	800b5f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fa7b 	bl	800b9fe <USBD_CtlError>
            err++;
 800b508:	7afb      	ldrb	r3, [r7, #11]
 800b50a:	3301      	adds	r3, #1
 800b50c:	72fb      	strb	r3, [r7, #11]
          break;
 800b50e:	e06f      	b.n	800b5f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	7c12      	ldrb	r2, [r2, #16]
 800b528:	f107 0108 	add.w	r1, r7, #8
 800b52c:	4610      	mov	r0, r2
 800b52e:	4798      	blx	r3
 800b530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b532:	e05d      	b.n	800b5f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fa61 	bl	800b9fe <USBD_CtlError>
            err++;
 800b53c:	7afb      	ldrb	r3, [r7, #11]
 800b53e:	3301      	adds	r3, #1
 800b540:	72fb      	strb	r3, [r7, #11]
          break;
 800b542:	e055      	b.n	800b5f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00b      	beq.n	800b568 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	7c12      	ldrb	r2, [r2, #16]
 800b55c:	f107 0108 	add.w	r1, r7, #8
 800b560:	4610      	mov	r0, r2
 800b562:	4798      	blx	r3
 800b564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b566:	e043      	b.n	800b5f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fa47 	bl	800b9fe <USBD_CtlError>
            err++;
 800b570:	7afb      	ldrb	r3, [r7, #11]
 800b572:	3301      	adds	r3, #1
 800b574:	72fb      	strb	r3, [r7, #11]
          break;
 800b576:	e03b      	b.n	800b5f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00b      	beq.n	800b59c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b58a:	695b      	ldr	r3, [r3, #20]
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	7c12      	ldrb	r2, [r2, #16]
 800b590:	f107 0108 	add.w	r1, r7, #8
 800b594:	4610      	mov	r0, r2
 800b596:	4798      	blx	r3
 800b598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b59a:	e029      	b.n	800b5f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fa2d 	bl	800b9fe <USBD_CtlError>
            err++;
 800b5a4:	7afb      	ldrb	r3, [r7, #11]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5aa:	e021      	b.n	800b5f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00b      	beq.n	800b5d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b5be:	699b      	ldr	r3, [r3, #24]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	7c12      	ldrb	r2, [r2, #16]
 800b5c4:	f107 0108 	add.w	r1, r7, #8
 800b5c8:	4610      	mov	r0, r2
 800b5ca:	4798      	blx	r3
 800b5cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5ce:	e00f      	b.n	800b5f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fa13 	bl	800b9fe <USBD_CtlError>
            err++;
 800b5d8:	7afb      	ldrb	r3, [r7, #11]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b5de:	e007      	b.n	800b5f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa0b 	bl	800b9fe <USBD_CtlError>
          err++;
 800b5e8:	7afb      	ldrb	r3, [r7, #11]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b5ee:	e038      	b.n	800b662 <USBD_GetDescriptor+0x286>
 800b5f0:	e037      	b.n	800b662 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	7c1b      	ldrb	r3, [r3, #16]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d109      	bne.n	800b60e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b602:	f107 0208 	add.w	r2, r7, #8
 800b606:	4610      	mov	r0, r2
 800b608:	4798      	blx	r3
 800b60a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b60c:	e029      	b.n	800b662 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b60e:	6839      	ldr	r1, [r7, #0]
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f9f4 	bl	800b9fe <USBD_CtlError>
        err++;
 800b616:	7afb      	ldrb	r3, [r7, #11]
 800b618:	3301      	adds	r3, #1
 800b61a:	72fb      	strb	r3, [r7, #11]
      break;
 800b61c:	e021      	b.n	800b662 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	7c1b      	ldrb	r3, [r3, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10d      	bne.n	800b642 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b62c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b62e:	f107 0208 	add.w	r2, r7, #8
 800b632:	4610      	mov	r0, r2
 800b634:	4798      	blx	r3
 800b636:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	3301      	adds	r3, #1
 800b63c:	2207      	movs	r2, #7
 800b63e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b640:	e00f      	b.n	800b662 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f9da 	bl	800b9fe <USBD_CtlError>
        err++;
 800b64a:	7afb      	ldrb	r3, [r7, #11]
 800b64c:	3301      	adds	r3, #1
 800b64e:	72fb      	strb	r3, [r7, #11]
      break;
 800b650:	e007      	b.n	800b662 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f9d2 	bl	800b9fe <USBD_CtlError>
      err++;
 800b65a:	7afb      	ldrb	r3, [r7, #11]
 800b65c:	3301      	adds	r3, #1
 800b65e:	72fb      	strb	r3, [r7, #11]
      break;
 800b660:	bf00      	nop
  }

  if (err != 0U)
 800b662:	7afb      	ldrb	r3, [r7, #11]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d11c      	bne.n	800b6a2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b668:	893b      	ldrh	r3, [r7, #8]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d011      	beq.n	800b692 <USBD_GetDescriptor+0x2b6>
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	88db      	ldrh	r3, [r3, #6]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00d      	beq.n	800b692 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	88da      	ldrh	r2, [r3, #6]
 800b67a:	893b      	ldrh	r3, [r7, #8]
 800b67c:	4293      	cmp	r3, r2
 800b67e:	bf28      	it	cs
 800b680:	4613      	movcs	r3, r2
 800b682:	b29b      	uxth	r3, r3
 800b684:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b686:	893b      	ldrh	r3, [r7, #8]
 800b688:	461a      	mov	r2, r3
 800b68a:	68f9      	ldr	r1, [r7, #12]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fa21 	bl	800bad4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	88db      	ldrh	r3, [r3, #6]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d104      	bne.n	800b6a4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fa78 	bl	800bb90 <USBD_CtlSendStatus>
 800b6a0:	e000      	b.n	800b6a4 <USBD_GetDescriptor+0x2c8>
    return;
 800b6a2:	bf00      	nop
    }
  }
}
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop

0800b6ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	889b      	ldrh	r3, [r3, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d130      	bne.n	800b720 <USBD_SetAddress+0x74>
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	88db      	ldrh	r3, [r3, #6]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d12c      	bne.n	800b720 <USBD_SetAddress+0x74>
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	885b      	ldrh	r3, [r3, #2]
 800b6ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800b6cc:	d828      	bhi.n	800b720 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	885b      	ldrh	r3, [r3, #2]
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6e0:	2b03      	cmp	r3, #3
 800b6e2:	d104      	bne.n	800b6ee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f989 	bl	800b9fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ec:	e01d      	b.n	800b72a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	7bfa      	ldrb	r2, [r7, #15]
 800b6f2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b6f6:	7bfb      	ldrb	r3, [r7, #15]
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f002 f8c4 	bl	800d888 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fa45 	bl	800bb90 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b706:	7bfb      	ldrb	r3, [r7, #15]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d004      	beq.n	800b716 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2202      	movs	r2, #2
 800b710:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b714:	e009      	b.n	800b72a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b71e:	e004      	b.n	800b72a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b720:	6839      	ldr	r1, [r7, #0]
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f96b 	bl	800b9fe <USBD_CtlError>
  }
}
 800b728:	bf00      	nop
 800b72a:	bf00      	nop
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
	...

0800b734 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	885b      	ldrh	r3, [r3, #2]
 800b742:	b2da      	uxtb	r2, r3
 800b744:	4b41      	ldr	r3, [pc, #260]	@ (800b84c <USBD_SetConfig+0x118>)
 800b746:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b748:	4b40      	ldr	r3, [pc, #256]	@ (800b84c <USBD_SetConfig+0x118>)
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d904      	bls.n	800b75a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b750:	6839      	ldr	r1, [r7, #0]
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f953 	bl	800b9fe <USBD_CtlError>
 800b758:	e075      	b.n	800b846 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b760:	2b02      	cmp	r3, #2
 800b762:	d002      	beq.n	800b76a <USBD_SetConfig+0x36>
 800b764:	2b03      	cmp	r3, #3
 800b766:	d023      	beq.n	800b7b0 <USBD_SetConfig+0x7c>
 800b768:	e062      	b.n	800b830 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b76a:	4b38      	ldr	r3, [pc, #224]	@ (800b84c <USBD_SetConfig+0x118>)
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d01a      	beq.n	800b7a8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b772:	4b36      	ldr	r3, [pc, #216]	@ (800b84c <USBD_SetConfig+0x118>)
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2203      	movs	r2, #3
 800b780:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b784:	4b31      	ldr	r3, [pc, #196]	@ (800b84c <USBD_SetConfig+0x118>)
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	4619      	mov	r1, r3
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7ff f9e4 	bl	800ab58 <USBD_SetClassConfig>
 800b790:	4603      	mov	r3, r0
 800b792:	2b02      	cmp	r3, #2
 800b794:	d104      	bne.n	800b7a0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f930 	bl	800b9fe <USBD_CtlError>
            return;
 800b79e:	e052      	b.n	800b846 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f9f5 	bl	800bb90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b7a6:	e04e      	b.n	800b846 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f9f1 	bl	800bb90 <USBD_CtlSendStatus>
        break;
 800b7ae:	e04a      	b.n	800b846 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b7b0:	4b26      	ldr	r3, [pc, #152]	@ (800b84c <USBD_SetConfig+0x118>)
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d112      	bne.n	800b7de <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800b7c0:	4b22      	ldr	r3, [pc, #136]	@ (800b84c <USBD_SetConfig+0x118>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b7ca:	4b20      	ldr	r3, [pc, #128]	@ (800b84c <USBD_SetConfig+0x118>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7ff f9e0 	bl	800ab96 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f9da 	bl	800bb90 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b7dc:	e033      	b.n	800b846 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b7de:	4b1b      	ldr	r3, [pc, #108]	@ (800b84c <USBD_SetConfig+0x118>)
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d01d      	beq.n	800b828 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7ff f9ce 	bl	800ab96 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b7fa:	4b14      	ldr	r3, [pc, #80]	@ (800b84c <USBD_SetConfig+0x118>)
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b804:	4b11      	ldr	r3, [pc, #68]	@ (800b84c <USBD_SetConfig+0x118>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	4619      	mov	r1, r3
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f7ff f9a4 	bl	800ab58 <USBD_SetClassConfig>
 800b810:	4603      	mov	r3, r0
 800b812:	2b02      	cmp	r3, #2
 800b814:	d104      	bne.n	800b820 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 f8f0 	bl	800b9fe <USBD_CtlError>
            return;
 800b81e:	e012      	b.n	800b846 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 f9b5 	bl	800bb90 <USBD_CtlSendStatus>
        break;
 800b826:	e00e      	b.n	800b846 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f9b1 	bl	800bb90 <USBD_CtlSendStatus>
        break;
 800b82e:	e00a      	b.n	800b846 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b830:	6839      	ldr	r1, [r7, #0]
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f8e3 	bl	800b9fe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b838:	4b04      	ldr	r3, [pc, #16]	@ (800b84c <USBD_SetConfig+0x118>)
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff f9a9 	bl	800ab96 <USBD_ClrClassConfig>
        break;
 800b844:	bf00      	nop
    }
  }
}
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	20000c90 	.word	0x20000c90

0800b850 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	88db      	ldrh	r3, [r3, #6]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d004      	beq.n	800b86c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f8ca 	bl	800b9fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b86a:	e022      	b.n	800b8b2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b872:	2b02      	cmp	r3, #2
 800b874:	dc02      	bgt.n	800b87c <USBD_GetConfig+0x2c>
 800b876:	2b00      	cmp	r3, #0
 800b878:	dc03      	bgt.n	800b882 <USBD_GetConfig+0x32>
 800b87a:	e015      	b.n	800b8a8 <USBD_GetConfig+0x58>
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d00b      	beq.n	800b898 <USBD_GetConfig+0x48>
 800b880:	e012      	b.n	800b8a8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3308      	adds	r3, #8
 800b88c:	2201      	movs	r2, #1
 800b88e:	4619      	mov	r1, r3
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f91f 	bl	800bad4 <USBD_CtlSendData>
        break;
 800b896:	e00c      	b.n	800b8b2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3304      	adds	r3, #4
 800b89c:	2201      	movs	r2, #1
 800b89e:	4619      	mov	r1, r3
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 f917 	bl	800bad4 <USBD_CtlSendData>
        break;
 800b8a6:	e004      	b.n	800b8b2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f8a7 	bl	800b9fe <USBD_CtlError>
        break;
 800b8b0:	bf00      	nop
}
 800b8b2:	bf00      	nop
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b082      	sub	sp, #8
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d81e      	bhi.n	800b90e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	88db      	ldrh	r3, [r3, #6]
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	d004      	beq.n	800b8e2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f88f 	bl	800b9fe <USBD_CtlError>
        break;
 800b8e0:	e01a      	b.n	800b918 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d005      	beq.n	800b8fe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	f043 0202 	orr.w	r2, r3, #2
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	330c      	adds	r3, #12
 800b902:	2202      	movs	r2, #2
 800b904:	4619      	mov	r1, r3
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f8e4 	bl	800bad4 <USBD_CtlSendData>
      break;
 800b90c:	e004      	b.n	800b918 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 f874 	bl	800b9fe <USBD_CtlError>
      break;
 800b916:	bf00      	nop
  }
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	885b      	ldrh	r3, [r3, #2]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d106      	bne.n	800b940 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2201      	movs	r2, #1
 800b936:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f928 	bl	800bb90 <USBD_CtlSendStatus>
  }
}
 800b940:	bf00      	nop
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b958:	3b01      	subs	r3, #1
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d80b      	bhi.n	800b976 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	885b      	ldrh	r3, [r3, #2]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d10c      	bne.n	800b980 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f90e 	bl	800bb90 <USBD_CtlSendStatus>
      }
      break;
 800b974:	e004      	b.n	800b980 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b976:	6839      	ldr	r1, [r7, #0]
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 f840 	bl	800b9fe <USBD_CtlError>
      break;
 800b97e:	e000      	b.n	800b982 <USBD_ClrFeature+0x3a>
      break;
 800b980:	bf00      	nop
  }
}
 800b982:	bf00      	nop
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b98a:	b480      	push	{r7}
 800b98c:	b083      	sub	sp, #12
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	781a      	ldrb	r2, [r3, #0]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	785a      	ldrb	r2, [r3, #1]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	3302      	adds	r3, #2
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	3303      	adds	r3, #3
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	021b      	lsls	r3, r3, #8
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	4413      	add	r3, r2
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	3305      	adds	r3, #5
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	021b      	lsls	r3, r3, #8
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	4413      	add	r3, r2
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	3306      	adds	r3, #6
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	3307      	adds	r3, #7
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	021b      	lsls	r3, r3, #8
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	4413      	add	r3, r2
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	80da      	strh	r2, [r3, #6]

}
 800b9f2:	bf00      	nop
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b082      	sub	sp, #8
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ba08:	2180      	movs	r1, #128	@ 0x80
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f001 fed2 	bl	800d7b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ba10:	2100      	movs	r1, #0
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f001 fece 	bl	800d7b4 <USBD_LL_StallEP>
}
 800ba18:	bf00      	nop
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b086      	sub	sp, #24
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d032      	beq.n	800ba9c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f000 f834 	bl	800baa4 <USBD_GetLen>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	3301      	adds	r3, #1
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	005b      	lsls	r3, r3, #1
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ba4a:	7dfb      	ldrb	r3, [r7, #23]
 800ba4c:	1c5a      	adds	r2, r3, #1
 800ba4e:	75fa      	strb	r2, [r7, #23]
 800ba50:	461a      	mov	r2, r3
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	4413      	add	r3, r2
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	7812      	ldrb	r2, [r2, #0]
 800ba5a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	1c5a      	adds	r2, r3, #1
 800ba60:	75fa      	strb	r2, [r7, #23]
 800ba62:	461a      	mov	r2, r3
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	4413      	add	r3, r2
 800ba68:	2203      	movs	r2, #3
 800ba6a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ba6c:	e012      	b.n	800ba94 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	60fa      	str	r2, [r7, #12]
 800ba74:	7dfa      	ldrb	r2, [r7, #23]
 800ba76:	1c51      	adds	r1, r2, #1
 800ba78:	75f9      	strb	r1, [r7, #23]
 800ba7a:	4611      	mov	r1, r2
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	440a      	add	r2, r1
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ba84:	7dfb      	ldrb	r3, [r7, #23]
 800ba86:	1c5a      	adds	r2, r3, #1
 800ba88:	75fa      	strb	r2, [r7, #23]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	4413      	add	r3, r2
 800ba90:	2200      	movs	r2, #0
 800ba92:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1e8      	bne.n	800ba6e <USBD_GetString+0x4e>
    }
  }
}
 800ba9c:	bf00      	nop
 800ba9e:	3718      	adds	r7, #24
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bab0:	e005      	b.n	800babe <USBD_GetLen+0x1a>
  {
    len++;
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
 800bab4:	3301      	adds	r3, #1
 800bab6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	3301      	adds	r3, #1
 800babc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1f5      	bne.n	800bab2 <USBD_GetLen+0xe>
  }

  return len;
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	4613      	mov	r3, r2
 800bae0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2202      	movs	r2, #2
 800bae6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800baea:	88fa      	ldrh	r2, [r7, #6]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800baf0:	88fa      	ldrh	r2, [r7, #6]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800baf6:	88fb      	ldrh	r3, [r7, #6]
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	2100      	movs	r1, #0
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f001 fee2 	bl	800d8c6 <USBD_LL_Transmit>

  return USBD_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	4613      	mov	r3, r2
 800bb18:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb1a:	88fb      	ldrh	r3, [r7, #6]
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	2100      	movs	r1, #0
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f001 fed0 	bl	800d8c6 <USBD_LL_Transmit>

  return USBD_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2203      	movs	r2, #3
 800bb42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bb46:	88fa      	ldrh	r2, [r7, #6]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bb4e:	88fa      	ldrh	r2, [r7, #6]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb56:	88fb      	ldrh	r3, [r7, #6]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f001 fed5 	bl	800d90c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	4613      	mov	r3, r2
 800bb78:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb7a:	88fb      	ldrh	r3, [r7, #6]
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	2100      	movs	r1, #0
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f001 fec3 	bl	800d90c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2204      	movs	r2, #4
 800bb9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bba0:	2300      	movs	r3, #0
 800bba2:	2200      	movs	r2, #0
 800bba4:	2100      	movs	r1, #0
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f001 fe8d 	bl	800d8c6 <USBD_LL_Transmit>

  return USBD_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b082      	sub	sp, #8
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2205      	movs	r2, #5
 800bbc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	2200      	movs	r2, #0
 800bbca:	2100      	movs	r1, #0
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f001 fe9d 	bl	800d90c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bbea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbee:	2b84      	cmp	r3, #132	@ 0x84
 800bbf0:	d005      	beq.n	800bbfe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bbf2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	3303      	adds	r3, #3
 800bbfc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bc10:	f000 fadc 	bl	800c1cc <vTaskStartScheduler>
  
  return osOK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bc1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc1c:	b089      	sub	sp, #36	@ 0x24
 800bc1e:	af04      	add	r7, sp, #16
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	695b      	ldr	r3, [r3, #20]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d020      	beq.n	800bc6e <osThreadCreate+0x54>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d01c      	beq.n	800bc6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685c      	ldr	r4, [r3, #4]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	691e      	ldr	r6, [r3, #16]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7ff ffc8 	bl	800bbdc <makeFreeRtosPriority>
 800bc4c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc56:	9202      	str	r2, [sp, #8]
 800bc58:	9301      	str	r3, [sp, #4]
 800bc5a:	9100      	str	r1, [sp, #0]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	4632      	mov	r2, r6
 800bc60:	4629      	mov	r1, r5
 800bc62:	4620      	mov	r0, r4
 800bc64:	f000 f8ed 	bl	800be42 <xTaskCreateStatic>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e01c      	b.n	800bca8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	685c      	ldr	r4, [r3, #4]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc7a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff ffaa 	bl	800bbdc <makeFreeRtosPriority>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	f107 030c 	add.w	r3, r7, #12
 800bc8e:	9301      	str	r3, [sp, #4]
 800bc90:	9200      	str	r2, [sp, #0]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	4632      	mov	r2, r6
 800bc96:	4629      	mov	r1, r5
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f000 f931 	bl	800bf00 <xTaskCreate>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d001      	beq.n	800bca8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bca4:	2300      	movs	r3, #0
 800bca6:	e000      	b.n	800bcaa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bca8:	68fb      	ldr	r3, [r7, #12]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3714      	adds	r7, #20
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bcb2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b084      	sub	sp, #16
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d001      	beq.n	800bcc8 <osDelay+0x16>
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	e000      	b.n	800bcca <osDelay+0x18>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 fa48 	bl	800c160 <vTaskDelay>
  
  return osOK;
 800bcd0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f103 0208 	add.w	r2, r3, #8
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f103 0208 	add.w	r2, r3, #8
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f103 0208 	add.w	r2, r3, #8
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bd0e:	bf00      	nop
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b083      	sub	sp, #12
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bd28:	bf00      	nop
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	689a      	ldr	r2, [r3, #8]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	601a      	str	r2, [r3, #0]
}
 800bd70:	bf00      	nop
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd92:	d103      	bne.n	800bd9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	60fb      	str	r3, [r7, #12]
 800bd9a:	e00c      	b.n	800bdb6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3308      	adds	r3, #8
 800bda0:	60fb      	str	r3, [r7, #12]
 800bda2:	e002      	b.n	800bdaa <vListInsert+0x2e>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	60fb      	str	r3, [r7, #12]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d2f6      	bcs.n	800bda4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	685a      	ldr	r2, [r3, #4]
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	1c5a      	adds	r2, r3, #1
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	601a      	str	r2, [r3, #0]
}
 800bde2:	bf00      	nop
 800bde4:	3714      	adds	r7, #20
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b085      	sub	sp, #20
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	6892      	ldr	r2, [r2, #8]
 800be04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	6852      	ldr	r2, [r2, #4]
 800be0e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	429a      	cmp	r2, r3
 800be18:	d103      	bne.n	800be22 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	689a      	ldr	r2, [r3, #8]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	1e5a      	subs	r2, r3, #1
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3714      	adds	r7, #20
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be42:	b580      	push	{r7, lr}
 800be44:	b08e      	sub	sp, #56	@ 0x38
 800be46:	af04      	add	r7, sp, #16
 800be48:	60f8      	str	r0, [r7, #12]
 800be4a:	60b9      	str	r1, [r7, #8]
 800be4c:	607a      	str	r2, [r7, #4]
 800be4e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10b      	bne.n	800be6e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800be56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800be68:	bf00      	nop
 800be6a:	bf00      	nop
 800be6c:	e7fd      	b.n	800be6a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800be6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10b      	bne.n	800be8c <xTaskCreateStatic+0x4a>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	61fb      	str	r3, [r7, #28]
}
 800be86:	bf00      	nop
 800be88:	bf00      	nop
 800be8a:	e7fd      	b.n	800be88 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be8c:	2354      	movs	r3, #84	@ 0x54
 800be8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	2b54      	cmp	r3, #84	@ 0x54
 800be94:	d00b      	beq.n	800beae <xTaskCreateStatic+0x6c>
	__asm volatile
 800be96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	61bb      	str	r3, [r7, #24]
}
 800bea8:	bf00      	nop
 800beaa:	bf00      	nop
 800beac:	e7fd      	b.n	800beaa <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800beae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d01e      	beq.n	800bef2 <xTaskCreateStatic+0xb0>
 800beb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d01b      	beq.n	800bef2 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800beba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bebc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bec2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec6:	2202      	movs	r2, #2
 800bec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800becc:	2300      	movs	r3, #0
 800bece:	9303      	str	r3, [sp, #12]
 800bed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed2:	9302      	str	r3, [sp, #8]
 800bed4:	f107 0314 	add.w	r3, r7, #20
 800bed8:	9301      	str	r3, [sp, #4]
 800beda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	68b9      	ldr	r1, [r7, #8]
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f000 f850 	bl	800bf8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800beea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800beec:	f000 f8ce 	bl	800c08c <prvAddNewTaskToReadyList>
 800bef0:	e001      	b.n	800bef6 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800bef2:	2300      	movs	r3, #0
 800bef4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bef6:	697b      	ldr	r3, [r7, #20]
	}
 800bef8:	4618      	mov	r0, r3
 800befa:	3728      	adds	r7, #40	@ 0x28
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08c      	sub	sp, #48	@ 0x30
 800bf04:	af04      	add	r7, sp, #16
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	603b      	str	r3, [r7, #0]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf10:	88fb      	ldrh	r3, [r7, #6]
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4618      	mov	r0, r3
 800bf16:	f000 fed7 	bl	800ccc8 <pvPortMalloc>
 800bf1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00e      	beq.n	800bf40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800bf22:	2054      	movs	r0, #84	@ 0x54
 800bf24:	f000 fed0 	bl	800ccc8 <pvPortMalloc>
 800bf28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d003      	beq.n	800bf38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	697a      	ldr	r2, [r7, #20]
 800bf34:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf36:	e005      	b.n	800bf44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf38:	6978      	ldr	r0, [r7, #20]
 800bf3a:	f000 ff8d 	bl	800ce58 <vPortFree>
 800bf3e:	e001      	b.n	800bf44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf40:	2300      	movs	r3, #0
 800bf42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d017      	beq.n	800bf7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf52:	88fa      	ldrh	r2, [r7, #6]
 800bf54:	2300      	movs	r3, #0
 800bf56:	9303      	str	r3, [sp, #12]
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	9302      	str	r3, [sp, #8]
 800bf5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf5e:	9301      	str	r3, [sp, #4]
 800bf60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	68b9      	ldr	r1, [r7, #8]
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f000 f80e 	bl	800bf8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf6e:	69f8      	ldr	r0, [r7, #28]
 800bf70:	f000 f88c 	bl	800c08c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf74:	2301      	movs	r3, #1
 800bf76:	61bb      	str	r3, [r7, #24]
 800bf78:	e002      	b.n	800bf80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf7a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf80:	69bb      	ldr	r3, [r7, #24]
	}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3720      	adds	r7, #32
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b088      	sub	sp, #32
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	60f8      	str	r0, [r7, #12]
 800bf92:	60b9      	str	r1, [r7, #8]
 800bf94:	607a      	str	r2, [r7, #4]
 800bf96:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800bf98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	4413      	add	r3, r2
 800bfa8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	f023 0307 	bic.w	r3, r3, #7
 800bfb0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	f003 0307 	and.w	r3, r3, #7
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00b      	beq.n	800bfd4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800bfbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc0:	f383 8811 	msr	BASEPRI, r3
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	617b      	str	r3, [r7, #20]
}
 800bfce:	bf00      	nop
 800bfd0:	bf00      	nop
 800bfd2:	e7fd      	b.n	800bfd0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	61fb      	str	r3, [r7, #28]
 800bfd8:	e012      	b.n	800c000 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	4413      	add	r3, r2
 800bfe0:	7819      	ldrb	r1, [r3, #0]
 800bfe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	3334      	adds	r3, #52	@ 0x34
 800bfea:	460a      	mov	r2, r1
 800bfec:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	4413      	add	r3, r2
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d006      	beq.n	800c008 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	3301      	adds	r3, #1
 800bffe:	61fb      	str	r3, [r7, #28]
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	2b0f      	cmp	r3, #15
 800c004:	d9e9      	bls.n	800bfda <prvInitialiseNewTask+0x50>
 800c006:	e000      	b.n	800c00a <prvInitialiseNewTask+0x80>
		{
			break;
 800c008:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c014:	2b06      	cmp	r3, #6
 800c016:	d901      	bls.n	800c01c <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c018:	2306      	movs	r3, #6
 800c01a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c020:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c026:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c02a:	2200      	movs	r2, #0
 800c02c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c030:	3304      	adds	r3, #4
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff fe71 	bl	800bd1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c03a:	3318      	adds	r3, #24
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff fe6c 	bl	800bd1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c046:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c04a:	f1c3 0207 	rsb	r2, r3, #7
 800c04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c050:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c056:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c05a:	2200      	movs	r2, #0
 800c05c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c060:	2200      	movs	r2, #0
 800c062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	68f9      	ldr	r1, [r7, #12]
 800c06a:	69b8      	ldr	r0, [r7, #24]
 800c06c:	f000 fc18 	bl	800c8a0 <pxPortInitialiseStack>
 800c070:	4602      	mov	r2, r0
 800c072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c074:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d002      	beq.n	800c082 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c07e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c082:	bf00      	nop
 800c084:	3720      	adds	r7, #32
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
	...

0800c08c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c094:	f000 fd38 	bl	800cb08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c098:	4b2a      	ldr	r3, [pc, #168]	@ (800c144 <prvAddNewTaskToReadyList+0xb8>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	3301      	adds	r3, #1
 800c09e:	4a29      	ldr	r2, [pc, #164]	@ (800c144 <prvAddNewTaskToReadyList+0xb8>)
 800c0a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c0a2:	4b29      	ldr	r3, [pc, #164]	@ (800c148 <prvAddNewTaskToReadyList+0xbc>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d109      	bne.n	800c0be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c0aa:	4a27      	ldr	r2, [pc, #156]	@ (800c148 <prvAddNewTaskToReadyList+0xbc>)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c0b0:	4b24      	ldr	r3, [pc, #144]	@ (800c144 <prvAddNewTaskToReadyList+0xb8>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d110      	bne.n	800c0da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c0b8:	f000 fac8 	bl	800c64c <prvInitialiseTaskLists>
 800c0bc:	e00d      	b.n	800c0da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c0be:	4b23      	ldr	r3, [pc, #140]	@ (800c14c <prvAddNewTaskToReadyList+0xc0>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d109      	bne.n	800c0da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0c6:	4b20      	ldr	r3, [pc, #128]	@ (800c148 <prvAddNewTaskToReadyList+0xbc>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d802      	bhi.n	800c0da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0d4:	4a1c      	ldr	r2, [pc, #112]	@ (800c148 <prvAddNewTaskToReadyList+0xbc>)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0da:	4b1d      	ldr	r3, [pc, #116]	@ (800c150 <prvAddNewTaskToReadyList+0xc4>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	3301      	adds	r3, #1
 800c0e0:	4a1b      	ldr	r2, [pc, #108]	@ (800c150 <prvAddNewTaskToReadyList+0xc4>)
 800c0e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	409a      	lsls	r2, r3
 800c0ec:	4b19      	ldr	r3, [pc, #100]	@ (800c154 <prvAddNewTaskToReadyList+0xc8>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	4a18      	ldr	r2, [pc, #96]	@ (800c154 <prvAddNewTaskToReadyList+0xc8>)
 800c0f4:	6013      	str	r3, [r2, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	4413      	add	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4a15      	ldr	r2, [pc, #84]	@ (800c158 <prvAddNewTaskToReadyList+0xcc>)
 800c104:	441a      	add	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	3304      	adds	r3, #4
 800c10a:	4619      	mov	r1, r3
 800c10c:	4610      	mov	r0, r2
 800c10e:	f7ff fe11 	bl	800bd34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c112:	f000 fd2b 	bl	800cb6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c116:	4b0d      	ldr	r3, [pc, #52]	@ (800c14c <prvAddNewTaskToReadyList+0xc0>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00e      	beq.n	800c13c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c11e:	4b0a      	ldr	r3, [pc, #40]	@ (800c148 <prvAddNewTaskToReadyList+0xbc>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c128:	429a      	cmp	r2, r3
 800c12a:	d207      	bcs.n	800c13c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c12c:	4b0b      	ldr	r3, [pc, #44]	@ (800c15c <prvAddNewTaskToReadyList+0xd0>)
 800c12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c13c:	bf00      	nop
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	20000d94 	.word	0x20000d94
 800c148:	20000c94 	.word	0x20000c94
 800c14c:	20000da0 	.word	0x20000da0
 800c150:	20000db0 	.word	0x20000db0
 800c154:	20000d9c 	.word	0x20000d9c
 800c158:	20000c98 	.word	0x20000c98
 800c15c:	e000ed04 	.word	0xe000ed04

0800c160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c168:	2300      	movs	r3, #0
 800c16a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d018      	beq.n	800c1a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c172:	4b14      	ldr	r3, [pc, #80]	@ (800c1c4 <vTaskDelay+0x64>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00b      	beq.n	800c192 <vTaskDelay+0x32>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c17e:	f383 8811 	msr	BASEPRI, r3
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	60bb      	str	r3, [r7, #8]
}
 800c18c:	bf00      	nop
 800c18e:	bf00      	nop
 800c190:	e7fd      	b.n	800c18e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c192:	f000 f87d 	bl	800c290 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c196:	2100      	movs	r1, #0
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fb1b 	bl	800c7d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c19e:	f000 f885 	bl	800c2ac <xTaskResumeAll>
 800c1a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d107      	bne.n	800c1ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c1aa:	4b07      	ldr	r3, [pc, #28]	@ (800c1c8 <vTaskDelay+0x68>)
 800c1ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1b0:	601a      	str	r2, [r3, #0]
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1ba:	bf00      	nop
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20000dbc 	.word	0x20000dbc
 800c1c8:	e000ed04 	.word	0xe000ed04

0800c1cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08a      	sub	sp, #40	@ 0x28
 800c1d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c1da:	463a      	mov	r2, r7
 800c1dc:	1d39      	adds	r1, r7, #4
 800c1de:	f107 0308 	add.w	r3, r7, #8
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7f3 fffc 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	9202      	str	r2, [sp, #8]
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	460a      	mov	r2, r1
 800c1fa:	491f      	ldr	r1, [pc, #124]	@ (800c278 <vTaskStartScheduler+0xac>)
 800c1fc:	481f      	ldr	r0, [pc, #124]	@ (800c27c <vTaskStartScheduler+0xb0>)
 800c1fe:	f7ff fe20 	bl	800be42 <xTaskCreateStatic>
 800c202:	4603      	mov	r3, r0
 800c204:	4a1e      	ldr	r2, [pc, #120]	@ (800c280 <vTaskStartScheduler+0xb4>)
 800c206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c208:	4b1d      	ldr	r3, [pc, #116]	@ (800c280 <vTaskStartScheduler+0xb4>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d002      	beq.n	800c216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c210:	2301      	movs	r3, #1
 800c212:	617b      	str	r3, [r7, #20]
 800c214:	e001      	b.n	800c21a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c216:	2300      	movs	r3, #0
 800c218:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d116      	bne.n	800c24e <vTaskStartScheduler+0x82>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	613b      	str	r3, [r7, #16]
}
 800c232:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c234:	4b13      	ldr	r3, [pc, #76]	@ (800c284 <vTaskStartScheduler+0xb8>)
 800c236:	f04f 32ff 	mov.w	r2, #4294967295
 800c23a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c23c:	4b12      	ldr	r3, [pc, #72]	@ (800c288 <vTaskStartScheduler+0xbc>)
 800c23e:	2201      	movs	r2, #1
 800c240:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c242:	4b12      	ldr	r3, [pc, #72]	@ (800c28c <vTaskStartScheduler+0xc0>)
 800c244:	2200      	movs	r2, #0
 800c246:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c248:	f000 fbba 	bl	800c9c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c24c:	e00f      	b.n	800c26e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c254:	d10b      	bne.n	800c26e <vTaskStartScheduler+0xa2>
	__asm volatile
 800c256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	60fb      	str	r3, [r7, #12]
}
 800c268:	bf00      	nop
 800c26a:	bf00      	nop
 800c26c:	e7fd      	b.n	800c26a <vTaskStartScheduler+0x9e>
}
 800c26e:	bf00      	nop
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	0800db20 	.word	0x0800db20
 800c27c:	0800c61d 	.word	0x0800c61d
 800c280:	20000db8 	.word	0x20000db8
 800c284:	20000db4 	.word	0x20000db4
 800c288:	20000da0 	.word	0x20000da0
 800c28c:	20000d98 	.word	0x20000d98

0800c290 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c290:	b480      	push	{r7}
 800c292:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c294:	4b04      	ldr	r3, [pc, #16]	@ (800c2a8 <vTaskSuspendAll+0x18>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3301      	adds	r3, #1
 800c29a:	4a03      	ldr	r2, [pc, #12]	@ (800c2a8 <vTaskSuspendAll+0x18>)
 800c29c:	6013      	str	r3, [r2, #0]
}
 800c29e:	bf00      	nop
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr
 800c2a8:	20000dbc 	.word	0x20000dbc

0800c2ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c2ba:	4b42      	ldr	r3, [pc, #264]	@ (800c3c4 <xTaskResumeAll+0x118>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d10b      	bne.n	800c2da <xTaskResumeAll+0x2e>
	__asm volatile
 800c2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	603b      	str	r3, [r7, #0]
}
 800c2d4:	bf00      	nop
 800c2d6:	bf00      	nop
 800c2d8:	e7fd      	b.n	800c2d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c2da:	f000 fc15 	bl	800cb08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c2de:	4b39      	ldr	r3, [pc, #228]	@ (800c3c4 <xTaskResumeAll+0x118>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	4a37      	ldr	r2, [pc, #220]	@ (800c3c4 <xTaskResumeAll+0x118>)
 800c2e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2e8:	4b36      	ldr	r3, [pc, #216]	@ (800c3c4 <xTaskResumeAll+0x118>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d161      	bne.n	800c3b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c2f0:	4b35      	ldr	r3, [pc, #212]	@ (800c3c8 <xTaskResumeAll+0x11c>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d05d      	beq.n	800c3b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2f8:	e02e      	b.n	800c358 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c2fa:	4b34      	ldr	r3, [pc, #208]	@ (800c3cc <xTaskResumeAll+0x120>)
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	3318      	adds	r3, #24
 800c306:	4618      	mov	r0, r3
 800c308:	f7ff fd71 	bl	800bdee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	3304      	adds	r3, #4
 800c310:	4618      	mov	r0, r3
 800c312:	f7ff fd6c 	bl	800bdee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c31a:	2201      	movs	r2, #1
 800c31c:	409a      	lsls	r2, r3
 800c31e:	4b2c      	ldr	r3, [pc, #176]	@ (800c3d0 <xTaskResumeAll+0x124>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4313      	orrs	r3, r2
 800c324:	4a2a      	ldr	r2, [pc, #168]	@ (800c3d0 <xTaskResumeAll+0x124>)
 800c326:	6013      	str	r3, [r2, #0]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c32c:	4613      	mov	r3, r2
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4413      	add	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4a27      	ldr	r2, [pc, #156]	@ (800c3d4 <xTaskResumeAll+0x128>)
 800c336:	441a      	add	r2, r3
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	3304      	adds	r3, #4
 800c33c:	4619      	mov	r1, r3
 800c33e:	4610      	mov	r0, r2
 800c340:	f7ff fcf8 	bl	800bd34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c348:	4b23      	ldr	r3, [pc, #140]	@ (800c3d8 <xTaskResumeAll+0x12c>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c34e:	429a      	cmp	r2, r3
 800c350:	d302      	bcc.n	800c358 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c352:	4b22      	ldr	r3, [pc, #136]	@ (800c3dc <xTaskResumeAll+0x130>)
 800c354:	2201      	movs	r2, #1
 800c356:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c358:	4b1c      	ldr	r3, [pc, #112]	@ (800c3cc <xTaskResumeAll+0x120>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1cc      	bne.n	800c2fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d001      	beq.n	800c36a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c366:	f000 fa0f 	bl	800c788 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c36a:	4b1d      	ldr	r3, [pc, #116]	@ (800c3e0 <xTaskResumeAll+0x134>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d010      	beq.n	800c398 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c376:	f000 f837 	bl	800c3e8 <xTaskIncrementTick>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c380:	4b16      	ldr	r3, [pc, #88]	@ (800c3dc <xTaskResumeAll+0x130>)
 800c382:	2201      	movs	r2, #1
 800c384:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	3b01      	subs	r3, #1
 800c38a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d1f1      	bne.n	800c376 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800c392:	4b13      	ldr	r3, [pc, #76]	@ (800c3e0 <xTaskResumeAll+0x134>)
 800c394:	2200      	movs	r2, #0
 800c396:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c398:	4b10      	ldr	r3, [pc, #64]	@ (800c3dc <xTaskResumeAll+0x130>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d009      	beq.n	800c3b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c3a4:	4b0f      	ldr	r3, [pc, #60]	@ (800c3e4 <xTaskResumeAll+0x138>)
 800c3a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3aa:	601a      	str	r2, [r3, #0]
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3b4:	f000 fbda 	bl	800cb6c <vPortExitCritical>

	return xAlreadyYielded;
 800c3b8:	68bb      	ldr	r3, [r7, #8]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	20000dbc 	.word	0x20000dbc
 800c3c8:	20000d94 	.word	0x20000d94
 800c3cc:	20000d54 	.word	0x20000d54
 800c3d0:	20000d9c 	.word	0x20000d9c
 800c3d4:	20000c98 	.word	0x20000c98
 800c3d8:	20000c94 	.word	0x20000c94
 800c3dc:	20000da8 	.word	0x20000da8
 800c3e0:	20000da4 	.word	0x20000da4
 800c3e4:	e000ed04 	.word	0xe000ed04

0800c3e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3f2:	4b51      	ldr	r3, [pc, #324]	@ (800c538 <xTaskIncrementTick+0x150>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f040 808e 	bne.w	800c518 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c3fc:	4b4f      	ldr	r3, [pc, #316]	@ (800c53c <xTaskIncrementTick+0x154>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	3301      	adds	r3, #1
 800c402:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c404:	4a4d      	ldr	r2, [pc, #308]	@ (800c53c <xTaskIncrementTick+0x154>)
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d121      	bne.n	800c454 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c410:	4b4b      	ldr	r3, [pc, #300]	@ (800c540 <xTaskIncrementTick+0x158>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00b      	beq.n	800c432 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	603b      	str	r3, [r7, #0]
}
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
 800c430:	e7fd      	b.n	800c42e <xTaskIncrementTick+0x46>
 800c432:	4b43      	ldr	r3, [pc, #268]	@ (800c540 <xTaskIncrementTick+0x158>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	60fb      	str	r3, [r7, #12]
 800c438:	4b42      	ldr	r3, [pc, #264]	@ (800c544 <xTaskIncrementTick+0x15c>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a40      	ldr	r2, [pc, #256]	@ (800c540 <xTaskIncrementTick+0x158>)
 800c43e:	6013      	str	r3, [r2, #0]
 800c440:	4a40      	ldr	r2, [pc, #256]	@ (800c544 <xTaskIncrementTick+0x15c>)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	6013      	str	r3, [r2, #0]
 800c446:	4b40      	ldr	r3, [pc, #256]	@ (800c548 <xTaskIncrementTick+0x160>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	3301      	adds	r3, #1
 800c44c:	4a3e      	ldr	r2, [pc, #248]	@ (800c548 <xTaskIncrementTick+0x160>)
 800c44e:	6013      	str	r3, [r2, #0]
 800c450:	f000 f99a 	bl	800c788 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c454:	4b3d      	ldr	r3, [pc, #244]	@ (800c54c <xTaskIncrementTick+0x164>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	693a      	ldr	r2, [r7, #16]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d34d      	bcc.n	800c4fa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c45e:	4b38      	ldr	r3, [pc, #224]	@ (800c540 <xTaskIncrementTick+0x158>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d101      	bne.n	800c46c <xTaskIncrementTick+0x84>
 800c468:	2301      	movs	r3, #1
 800c46a:	e000      	b.n	800c46e <xTaskIncrementTick+0x86>
 800c46c:	2300      	movs	r3, #0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d004      	beq.n	800c47c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c472:	4b36      	ldr	r3, [pc, #216]	@ (800c54c <xTaskIncrementTick+0x164>)
 800c474:	f04f 32ff 	mov.w	r2, #4294967295
 800c478:	601a      	str	r2, [r3, #0]
					break;
 800c47a:	e03e      	b.n	800c4fa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c47c:	4b30      	ldr	r3, [pc, #192]	@ (800c540 <xTaskIncrementTick+0x158>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c48c:	693a      	ldr	r2, [r7, #16]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	429a      	cmp	r2, r3
 800c492:	d203      	bcs.n	800c49c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c494:	4a2d      	ldr	r2, [pc, #180]	@ (800c54c <xTaskIncrementTick+0x164>)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6013      	str	r3, [r2, #0]
						break;
 800c49a:	e02e      	b.n	800c4fa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	3304      	adds	r3, #4
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7ff fca4 	bl	800bdee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d004      	beq.n	800c4b8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	3318      	adds	r3, #24
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7ff fc9b 	bl	800bdee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4bc:	2201      	movs	r2, #1
 800c4be:	409a      	lsls	r2, r3
 800c4c0:	4b23      	ldr	r3, [pc, #140]	@ (800c550 <xTaskIncrementTick+0x168>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	4a22      	ldr	r2, [pc, #136]	@ (800c550 <xTaskIncrementTick+0x168>)
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	4413      	add	r3, r2
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	4a1f      	ldr	r2, [pc, #124]	@ (800c554 <xTaskIncrementTick+0x16c>)
 800c4d8:	441a      	add	r2, r3
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	3304      	adds	r3, #4
 800c4de:	4619      	mov	r1, r3
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	f7ff fc27 	bl	800bd34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c558 <xTaskIncrementTick+0x170>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d3b4      	bcc.n	800c45e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4f8:	e7b1      	b.n	800c45e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c4fa:	4b17      	ldr	r3, [pc, #92]	@ (800c558 <xTaskIncrementTick+0x170>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c500:	4914      	ldr	r1, [pc, #80]	@ (800c554 <xTaskIncrementTick+0x16c>)
 800c502:	4613      	mov	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	440b      	add	r3, r1
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d907      	bls.n	800c522 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c512:	2301      	movs	r3, #1
 800c514:	617b      	str	r3, [r7, #20]
 800c516:	e004      	b.n	800c522 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c518:	4b10      	ldr	r3, [pc, #64]	@ (800c55c <xTaskIncrementTick+0x174>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	3301      	adds	r3, #1
 800c51e:	4a0f      	ldr	r2, [pc, #60]	@ (800c55c <xTaskIncrementTick+0x174>)
 800c520:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c522:	4b0f      	ldr	r3, [pc, #60]	@ (800c560 <xTaskIncrementTick+0x178>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d001      	beq.n	800c52e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800c52a:	2301      	movs	r3, #1
 800c52c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c52e:	697b      	ldr	r3, [r7, #20]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3718      	adds	r7, #24
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	20000dbc 	.word	0x20000dbc
 800c53c:	20000d98 	.word	0x20000d98
 800c540:	20000d4c 	.word	0x20000d4c
 800c544:	20000d50 	.word	0x20000d50
 800c548:	20000dac 	.word	0x20000dac
 800c54c:	20000db4 	.word	0x20000db4
 800c550:	20000d9c 	.word	0x20000d9c
 800c554:	20000c98 	.word	0x20000c98
 800c558:	20000c94 	.word	0x20000c94
 800c55c:	20000da4 	.word	0x20000da4
 800c560:	20000da8 	.word	0x20000da8

0800c564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c564:	b480      	push	{r7}
 800c566:	b087      	sub	sp, #28
 800c568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c56a:	4b27      	ldr	r3, [pc, #156]	@ (800c608 <vTaskSwitchContext+0xa4>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d003      	beq.n	800c57a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c572:	4b26      	ldr	r3, [pc, #152]	@ (800c60c <vTaskSwitchContext+0xa8>)
 800c574:	2201      	movs	r2, #1
 800c576:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c578:	e040      	b.n	800c5fc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c57a:	4b24      	ldr	r3, [pc, #144]	@ (800c60c <vTaskSwitchContext+0xa8>)
 800c57c:	2200      	movs	r2, #0
 800c57e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c580:	4b23      	ldr	r3, [pc, #140]	@ (800c610 <vTaskSwitchContext+0xac>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	fab3 f383 	clz	r3, r3
 800c58c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c58e:	7afb      	ldrb	r3, [r7, #11]
 800c590:	f1c3 031f 	rsb	r3, r3, #31
 800c594:	617b      	str	r3, [r7, #20]
 800c596:	491f      	ldr	r1, [pc, #124]	@ (800c614 <vTaskSwitchContext+0xb0>)
 800c598:	697a      	ldr	r2, [r7, #20]
 800c59a:	4613      	mov	r3, r2
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	4413      	add	r3, r2
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	440b      	add	r3, r1
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d10b      	bne.n	800c5c2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800c5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ae:	f383 8811 	msr	BASEPRI, r3
 800c5b2:	f3bf 8f6f 	isb	sy
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	607b      	str	r3, [r7, #4]
}
 800c5bc:	bf00      	nop
 800c5be:	bf00      	nop
 800c5c0:	e7fd      	b.n	800c5be <vTaskSwitchContext+0x5a>
 800c5c2:	697a      	ldr	r2, [r7, #20]
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4a11      	ldr	r2, [pc, #68]	@ (800c614 <vTaskSwitchContext+0xb0>)
 800c5ce:	4413      	add	r3, r2
 800c5d0:	613b      	str	r3, [r7, #16]
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	685a      	ldr	r2, [r3, #4]
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	605a      	str	r2, [r3, #4]
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	685a      	ldr	r2, [r3, #4]
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	3308      	adds	r3, #8
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d104      	bne.n	800c5f2 <vTaskSwitchContext+0x8e>
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	685a      	ldr	r2, [r3, #4]
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	605a      	str	r2, [r3, #4]
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	4a07      	ldr	r2, [pc, #28]	@ (800c618 <vTaskSwitchContext+0xb4>)
 800c5fa:	6013      	str	r3, [r2, #0]
}
 800c5fc:	bf00      	nop
 800c5fe:	371c      	adds	r7, #28
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	20000dbc 	.word	0x20000dbc
 800c60c:	20000da8 	.word	0x20000da8
 800c610:	20000d9c 	.word	0x20000d9c
 800c614:	20000c98 	.word	0x20000c98
 800c618:	20000c94 	.word	0x20000c94

0800c61c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c624:	f000 f852 	bl	800c6cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c628:	4b06      	ldr	r3, [pc, #24]	@ (800c644 <prvIdleTask+0x28>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d9f9      	bls.n	800c624 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c630:	4b05      	ldr	r3, [pc, #20]	@ (800c648 <prvIdleTask+0x2c>)
 800c632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c640:	e7f0      	b.n	800c624 <prvIdleTask+0x8>
 800c642:	bf00      	nop
 800c644:	20000c98 	.word	0x20000c98
 800c648:	e000ed04 	.word	0xe000ed04

0800c64c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c652:	2300      	movs	r3, #0
 800c654:	607b      	str	r3, [r7, #4]
 800c656:	e00c      	b.n	800c672 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	4613      	mov	r3, r2
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	4413      	add	r3, r2
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4a12      	ldr	r2, [pc, #72]	@ (800c6ac <prvInitialiseTaskLists+0x60>)
 800c664:	4413      	add	r3, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f7ff fb37 	bl	800bcda <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	3301      	adds	r3, #1
 800c670:	607b      	str	r3, [r7, #4]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b06      	cmp	r3, #6
 800c676:	d9ef      	bls.n	800c658 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c678:	480d      	ldr	r0, [pc, #52]	@ (800c6b0 <prvInitialiseTaskLists+0x64>)
 800c67a:	f7ff fb2e 	bl	800bcda <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c67e:	480d      	ldr	r0, [pc, #52]	@ (800c6b4 <prvInitialiseTaskLists+0x68>)
 800c680:	f7ff fb2b 	bl	800bcda <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c684:	480c      	ldr	r0, [pc, #48]	@ (800c6b8 <prvInitialiseTaskLists+0x6c>)
 800c686:	f7ff fb28 	bl	800bcda <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c68a:	480c      	ldr	r0, [pc, #48]	@ (800c6bc <prvInitialiseTaskLists+0x70>)
 800c68c:	f7ff fb25 	bl	800bcda <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c690:	480b      	ldr	r0, [pc, #44]	@ (800c6c0 <prvInitialiseTaskLists+0x74>)
 800c692:	f7ff fb22 	bl	800bcda <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c696:	4b0b      	ldr	r3, [pc, #44]	@ (800c6c4 <prvInitialiseTaskLists+0x78>)
 800c698:	4a05      	ldr	r2, [pc, #20]	@ (800c6b0 <prvInitialiseTaskLists+0x64>)
 800c69a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c69c:	4b0a      	ldr	r3, [pc, #40]	@ (800c6c8 <prvInitialiseTaskLists+0x7c>)
 800c69e:	4a05      	ldr	r2, [pc, #20]	@ (800c6b4 <prvInitialiseTaskLists+0x68>)
 800c6a0:	601a      	str	r2, [r3, #0]
}
 800c6a2:	bf00      	nop
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	20000c98 	.word	0x20000c98
 800c6b0:	20000d24 	.word	0x20000d24
 800c6b4:	20000d38 	.word	0x20000d38
 800c6b8:	20000d54 	.word	0x20000d54
 800c6bc:	20000d68 	.word	0x20000d68
 800c6c0:	20000d80 	.word	0x20000d80
 800c6c4:	20000d4c 	.word	0x20000d4c
 800c6c8:	20000d50 	.word	0x20000d50

0800c6cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6d2:	e019      	b.n	800c708 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c6d4:	f000 fa18 	bl	800cb08 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c6d8:	4b10      	ldr	r3, [pc, #64]	@ (800c71c <prvCheckTasksWaitingTermination+0x50>)
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	3304      	adds	r3, #4
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7ff fb82 	bl	800bdee <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c6ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c720 <prvCheckTasksWaitingTermination+0x54>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	4a0b      	ldr	r2, [pc, #44]	@ (800c720 <prvCheckTasksWaitingTermination+0x54>)
 800c6f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c6f4:	4b0b      	ldr	r3, [pc, #44]	@ (800c724 <prvCheckTasksWaitingTermination+0x58>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	4a0a      	ldr	r2, [pc, #40]	@ (800c724 <prvCheckTasksWaitingTermination+0x58>)
 800c6fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c6fe:	f000 fa35 	bl	800cb6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 f810 	bl	800c728 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c708:	4b06      	ldr	r3, [pc, #24]	@ (800c724 <prvCheckTasksWaitingTermination+0x58>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1e1      	bne.n	800c6d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c710:	bf00      	nop
 800c712:	bf00      	nop
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20000d68 	.word	0x20000d68
 800c720:	20000d94 	.word	0x20000d94
 800c724:	20000d7c 	.word	0x20000d7c

0800c728 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c736:	2b00      	cmp	r3, #0
 800c738:	d108      	bne.n	800c74c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c73e:	4618      	mov	r0, r3
 800c740:	f000 fb8a 	bl	800ce58 <vPortFree>
				vPortFree( pxTCB );
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 fb87 	bl	800ce58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c74a:	e019      	b.n	800c780 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c752:	2b01      	cmp	r3, #1
 800c754:	d103      	bne.n	800c75e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 fb7e 	bl	800ce58 <vPortFree>
	}
 800c75c:	e010      	b.n	800c780 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c764:	2b02      	cmp	r3, #2
 800c766:	d00b      	beq.n	800c780 <prvDeleteTCB+0x58>
	__asm volatile
 800c768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76c:	f383 8811 	msr	BASEPRI, r3
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	60fb      	str	r3, [r7, #12]
}
 800c77a:	bf00      	nop
 800c77c:	bf00      	nop
 800c77e:	e7fd      	b.n	800c77c <prvDeleteTCB+0x54>
	}
 800c780:	bf00      	nop
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c78e:	4b0f      	ldr	r3, [pc, #60]	@ (800c7cc <prvResetNextTaskUnblockTime+0x44>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d101      	bne.n	800c79c <prvResetNextTaskUnblockTime+0x14>
 800c798:	2301      	movs	r3, #1
 800c79a:	e000      	b.n	800c79e <prvResetNextTaskUnblockTime+0x16>
 800c79c:	2300      	movs	r3, #0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d004      	beq.n	800c7ac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800c7d0 <prvResetNextTaskUnblockTime+0x48>)
 800c7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c7aa:	e008      	b.n	800c7be <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c7ac:	4b07      	ldr	r3, [pc, #28]	@ (800c7cc <prvResetNextTaskUnblockTime+0x44>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	4a05      	ldr	r2, [pc, #20]	@ (800c7d0 <prvResetNextTaskUnblockTime+0x48>)
 800c7bc:	6013      	str	r3, [r2, #0]
}
 800c7be:	bf00      	nop
 800c7c0:	370c      	adds	r7, #12
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	20000d4c 	.word	0x20000d4c
 800c7d0:	20000db4 	.word	0x20000db4

0800c7d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c7de:	4b29      	ldr	r3, [pc, #164]	@ (800c884 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7e4:	4b28      	ldr	r3, [pc, #160]	@ (800c888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7ff faff 	bl	800bdee <uxListRemove>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10b      	bne.n	800c80e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c7f6:	4b24      	ldr	r3, [pc, #144]	@ (800c888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c802:	43da      	mvns	r2, r3
 800c804:	4b21      	ldr	r3, [pc, #132]	@ (800c88c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4013      	ands	r3, r2
 800c80a:	4a20      	ldr	r2, [pc, #128]	@ (800c88c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c80c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c814:	d10a      	bne.n	800c82c <prvAddCurrentTaskToDelayedList+0x58>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d007      	beq.n	800c82c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c81c:	4b1a      	ldr	r3, [pc, #104]	@ (800c888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3304      	adds	r3, #4
 800c822:	4619      	mov	r1, r3
 800c824:	481a      	ldr	r0, [pc, #104]	@ (800c890 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c826:	f7ff fa85 	bl	800bd34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c82a:	e026      	b.n	800c87a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4413      	add	r3, r2
 800c832:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c834:	4b14      	ldr	r3, [pc, #80]	@ (800c888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	429a      	cmp	r2, r3
 800c842:	d209      	bcs.n	800c858 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c844:	4b13      	ldr	r3, [pc, #76]	@ (800c894 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	4b0f      	ldr	r3, [pc, #60]	@ (800c888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	3304      	adds	r3, #4
 800c84e:	4619      	mov	r1, r3
 800c850:	4610      	mov	r0, r2
 800c852:	f7ff fa93 	bl	800bd7c <vListInsert>
}
 800c856:	e010      	b.n	800c87a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c858:	4b0f      	ldr	r3, [pc, #60]	@ (800c898 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	4b0a      	ldr	r3, [pc, #40]	@ (800c888 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	3304      	adds	r3, #4
 800c862:	4619      	mov	r1, r3
 800c864:	4610      	mov	r0, r2
 800c866:	f7ff fa89 	bl	800bd7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c86a:	4b0c      	ldr	r3, [pc, #48]	@ (800c89c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68ba      	ldr	r2, [r7, #8]
 800c870:	429a      	cmp	r2, r3
 800c872:	d202      	bcs.n	800c87a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c874:	4a09      	ldr	r2, [pc, #36]	@ (800c89c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	6013      	str	r3, [r2, #0]
}
 800c87a:	bf00      	nop
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	20000d98 	.word	0x20000d98
 800c888:	20000c94 	.word	0x20000c94
 800c88c:	20000d9c 	.word	0x20000d9c
 800c890:	20000d80 	.word	0x20000d80
 800c894:	20000d50 	.word	0x20000d50
 800c898:	20000d4c 	.word	0x20000d4c
 800c89c:	20000db4 	.word	0x20000db4

0800c8a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3b04      	subs	r3, #4
 800c8b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c8b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	3b04      	subs	r3, #4
 800c8be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	f023 0201 	bic.w	r2, r3, #1
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	3b04      	subs	r3, #4
 800c8ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8d0:	4a0c      	ldr	r2, [pc, #48]	@ (800c904 <pxPortInitialiseStack+0x64>)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	3b14      	subs	r3, #20
 800c8da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	3b04      	subs	r3, #4
 800c8e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f06f 0202 	mvn.w	r2, #2
 800c8ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	3b20      	subs	r3, #32
 800c8f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3714      	adds	r7, #20
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr
 800c904:	0800c909 	.word	0x0800c909

0800c908 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c90e:	2300      	movs	r3, #0
 800c910:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c912:	4b13      	ldr	r3, [pc, #76]	@ (800c960 <prvTaskExitError+0x58>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91a:	d00b      	beq.n	800c934 <prvTaskExitError+0x2c>
	__asm volatile
 800c91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c920:	f383 8811 	msr	BASEPRI, r3
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	60fb      	str	r3, [r7, #12]
}
 800c92e:	bf00      	nop
 800c930:	bf00      	nop
 800c932:	e7fd      	b.n	800c930 <prvTaskExitError+0x28>
	__asm volatile
 800c934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	60bb      	str	r3, [r7, #8]
}
 800c946:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c948:	bf00      	nop
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d0fc      	beq.n	800c94a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c950:	bf00      	nop
 800c952:	bf00      	nop
 800c954:	3714      	adds	r7, #20
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	20000128 	.word	0x20000128
	...

0800c970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c970:	4b07      	ldr	r3, [pc, #28]	@ (800c990 <pxCurrentTCBConst2>)
 800c972:	6819      	ldr	r1, [r3, #0]
 800c974:	6808      	ldr	r0, [r1, #0]
 800c976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97a:	f380 8809 	msr	PSP, r0
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f04f 0000 	mov.w	r0, #0
 800c986:	f380 8811 	msr	BASEPRI, r0
 800c98a:	4770      	bx	lr
 800c98c:	f3af 8000 	nop.w

0800c990 <pxCurrentTCBConst2>:
 800c990:	20000c94 	.word	0x20000c94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop

0800c998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c998:	4808      	ldr	r0, [pc, #32]	@ (800c9bc <prvPortStartFirstTask+0x24>)
 800c99a:	6800      	ldr	r0, [r0, #0]
 800c99c:	6800      	ldr	r0, [r0, #0]
 800c99e:	f380 8808 	msr	MSP, r0
 800c9a2:	f04f 0000 	mov.w	r0, #0
 800c9a6:	f380 8814 	msr	CONTROL, r0
 800c9aa:	b662      	cpsie	i
 800c9ac:	b661      	cpsie	f
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	df00      	svc	0
 800c9b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c9ba:	bf00      	nop
 800c9bc:	e000ed08 	.word	0xe000ed08

0800c9c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c9c6:	4b47      	ldr	r3, [pc, #284]	@ (800cae4 <xPortStartScheduler+0x124>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a47      	ldr	r2, [pc, #284]	@ (800cae8 <xPortStartScheduler+0x128>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d10b      	bne.n	800c9e8 <xPortStartScheduler+0x28>
	__asm volatile
 800c9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d4:	f383 8811 	msr	BASEPRI, r3
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	613b      	str	r3, [r7, #16]
}
 800c9e2:	bf00      	nop
 800c9e4:	bf00      	nop
 800c9e6:	e7fd      	b.n	800c9e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c9e8:	4b3e      	ldr	r3, [pc, #248]	@ (800cae4 <xPortStartScheduler+0x124>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a3f      	ldr	r2, [pc, #252]	@ (800caec <xPortStartScheduler+0x12c>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d10b      	bne.n	800ca0a <xPortStartScheduler+0x4a>
	__asm volatile
 800c9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f6:	f383 8811 	msr	BASEPRI, r3
 800c9fa:	f3bf 8f6f 	isb	sy
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	60fb      	str	r3, [r7, #12]
}
 800ca04:	bf00      	nop
 800ca06:	bf00      	nop
 800ca08:	e7fd      	b.n	800ca06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca0a:	4b39      	ldr	r3, [pc, #228]	@ (800caf0 <xPortStartScheduler+0x130>)
 800ca0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	22ff      	movs	r2, #255	@ 0xff
 800ca1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca24:	78fb      	ldrb	r3, [r7, #3]
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	4b31      	ldr	r3, [pc, #196]	@ (800caf4 <xPortStartScheduler+0x134>)
 800ca30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca32:	4b31      	ldr	r3, [pc, #196]	@ (800caf8 <xPortStartScheduler+0x138>)
 800ca34:	2207      	movs	r2, #7
 800ca36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca38:	e009      	b.n	800ca4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ca3a:	4b2f      	ldr	r3, [pc, #188]	@ (800caf8 <xPortStartScheduler+0x138>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	4a2d      	ldr	r2, [pc, #180]	@ (800caf8 <xPortStartScheduler+0x138>)
 800ca42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca44:	78fb      	ldrb	r3, [r7, #3]
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca4e:	78fb      	ldrb	r3, [r7, #3]
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca56:	2b80      	cmp	r3, #128	@ 0x80
 800ca58:	d0ef      	beq.n	800ca3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca5a:	4b27      	ldr	r3, [pc, #156]	@ (800caf8 <xPortStartScheduler+0x138>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f1c3 0307 	rsb	r3, r3, #7
 800ca62:	2b04      	cmp	r3, #4
 800ca64:	d00b      	beq.n	800ca7e <xPortStartScheduler+0xbe>
	__asm volatile
 800ca66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	60bb      	str	r3, [r7, #8]
}
 800ca78:	bf00      	nop
 800ca7a:	bf00      	nop
 800ca7c:	e7fd      	b.n	800ca7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca7e:	4b1e      	ldr	r3, [pc, #120]	@ (800caf8 <xPortStartScheduler+0x138>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	021b      	lsls	r3, r3, #8
 800ca84:	4a1c      	ldr	r2, [pc, #112]	@ (800caf8 <xPortStartScheduler+0x138>)
 800ca86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca88:	4b1b      	ldr	r3, [pc, #108]	@ (800caf8 <xPortStartScheduler+0x138>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ca90:	4a19      	ldr	r2, [pc, #100]	@ (800caf8 <xPortStartScheduler+0x138>)
 800ca92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	b2da      	uxtb	r2, r3
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca9c:	4b17      	ldr	r3, [pc, #92]	@ (800cafc <xPortStartScheduler+0x13c>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a16      	ldr	r2, [pc, #88]	@ (800cafc <xPortStartScheduler+0x13c>)
 800caa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800caa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800caa8:	4b14      	ldr	r3, [pc, #80]	@ (800cafc <xPortStartScheduler+0x13c>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a13      	ldr	r2, [pc, #76]	@ (800cafc <xPortStartScheduler+0x13c>)
 800caae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cab2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cab4:	f000 f8da 	bl	800cc6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cab8:	4b11      	ldr	r3, [pc, #68]	@ (800cb00 <xPortStartScheduler+0x140>)
 800caba:	2200      	movs	r2, #0
 800cabc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cabe:	f000 f8f9 	bl	800ccb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cac2:	4b10      	ldr	r3, [pc, #64]	@ (800cb04 <xPortStartScheduler+0x144>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a0f      	ldr	r2, [pc, #60]	@ (800cb04 <xPortStartScheduler+0x144>)
 800cac8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cacc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cace:	f7ff ff63 	bl	800c998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cad2:	f7ff fd47 	bl	800c564 <vTaskSwitchContext>
	prvTaskExitError();
 800cad6:	f7ff ff17 	bl	800c908 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3718      	adds	r7, #24
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	e000ed00 	.word	0xe000ed00
 800cae8:	410fc271 	.word	0x410fc271
 800caec:	410fc270 	.word	0x410fc270
 800caf0:	e000e400 	.word	0xe000e400
 800caf4:	20000dc0 	.word	0x20000dc0
 800caf8:	20000dc4 	.word	0x20000dc4
 800cafc:	e000ed20 	.word	0xe000ed20
 800cb00:	20000128 	.word	0x20000128
 800cb04:	e000ef34 	.word	0xe000ef34

0800cb08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	607b      	str	r3, [r7, #4]
}
 800cb20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb22:	4b10      	ldr	r3, [pc, #64]	@ (800cb64 <vPortEnterCritical+0x5c>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	3301      	adds	r3, #1
 800cb28:	4a0e      	ldr	r2, [pc, #56]	@ (800cb64 <vPortEnterCritical+0x5c>)
 800cb2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb2c:	4b0d      	ldr	r3, [pc, #52]	@ (800cb64 <vPortEnterCritical+0x5c>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d110      	bne.n	800cb56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb34:	4b0c      	ldr	r3, [pc, #48]	@ (800cb68 <vPortEnterCritical+0x60>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d00b      	beq.n	800cb56 <vPortEnterCritical+0x4e>
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	603b      	str	r3, [r7, #0]
}
 800cb50:	bf00      	nop
 800cb52:	bf00      	nop
 800cb54:	e7fd      	b.n	800cb52 <vPortEnterCritical+0x4a>
	}
}
 800cb56:	bf00      	nop
 800cb58:	370c      	adds	r7, #12
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	20000128 	.word	0x20000128
 800cb68:	e000ed04 	.word	0xe000ed04

0800cb6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb72:	4b12      	ldr	r3, [pc, #72]	@ (800cbbc <vPortExitCritical+0x50>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10b      	bne.n	800cb92 <vPortExitCritical+0x26>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	607b      	str	r3, [r7, #4]
}
 800cb8c:	bf00      	nop
 800cb8e:	bf00      	nop
 800cb90:	e7fd      	b.n	800cb8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cb92:	4b0a      	ldr	r3, [pc, #40]	@ (800cbbc <vPortExitCritical+0x50>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	3b01      	subs	r3, #1
 800cb98:	4a08      	ldr	r2, [pc, #32]	@ (800cbbc <vPortExitCritical+0x50>)
 800cb9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb9c:	4b07      	ldr	r3, [pc, #28]	@ (800cbbc <vPortExitCritical+0x50>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d105      	bne.n	800cbb0 <vPortExitCritical+0x44>
 800cba4:	2300      	movs	r3, #0
 800cba6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cbae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	20000128 	.word	0x20000128

0800cbc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cbc0:	f3ef 8009 	mrs	r0, PSP
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	4b15      	ldr	r3, [pc, #84]	@ (800cc20 <pxCurrentTCBConst>)
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	f01e 0f10 	tst.w	lr, #16
 800cbd0:	bf08      	it	eq
 800cbd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cbd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbda:	6010      	str	r0, [r2, #0]
 800cbdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cbe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cbe4:	f380 8811 	msr	BASEPRI, r0
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f7ff fcb8 	bl	800c564 <vTaskSwitchContext>
 800cbf4:	f04f 0000 	mov.w	r0, #0
 800cbf8:	f380 8811 	msr	BASEPRI, r0
 800cbfc:	bc09      	pop	{r0, r3}
 800cbfe:	6819      	ldr	r1, [r3, #0]
 800cc00:	6808      	ldr	r0, [r1, #0]
 800cc02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc06:	f01e 0f10 	tst.w	lr, #16
 800cc0a:	bf08      	it	eq
 800cc0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc10:	f380 8809 	msr	PSP, r0
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	f3af 8000 	nop.w

0800cc20 <pxCurrentTCBConst>:
 800cc20:	20000c94 	.word	0x20000c94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc24:	bf00      	nop
 800cc26:	bf00      	nop

0800cc28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	607b      	str	r3, [r7, #4]
}
 800cc40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc42:	f7ff fbd1 	bl	800c3e8 <xTaskIncrementTick>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d003      	beq.n	800cc54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc4c:	4b06      	ldr	r3, [pc, #24]	@ (800cc68 <SysTick_Handler+0x40>)
 800cc4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	2300      	movs	r3, #0
 800cc56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	f383 8811 	msr	BASEPRI, r3
}
 800cc5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc60:	bf00      	nop
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	e000ed04 	.word	0xe000ed04

0800cc6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc70:	4b0b      	ldr	r3, [pc, #44]	@ (800cca0 <vPortSetupTimerInterrupt+0x34>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc76:	4b0b      	ldr	r3, [pc, #44]	@ (800cca4 <vPortSetupTimerInterrupt+0x38>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800cca8 <vPortSetupTimerInterrupt+0x3c>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a0a      	ldr	r2, [pc, #40]	@ (800ccac <vPortSetupTimerInterrupt+0x40>)
 800cc82:	fba2 2303 	umull	r2, r3, r2, r3
 800cc86:	099b      	lsrs	r3, r3, #6
 800cc88:	4a09      	ldr	r2, [pc, #36]	@ (800ccb0 <vPortSetupTimerInterrupt+0x44>)
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc8e:	4b04      	ldr	r3, [pc, #16]	@ (800cca0 <vPortSetupTimerInterrupt+0x34>)
 800cc90:	2207      	movs	r2, #7
 800cc92:	601a      	str	r2, [r3, #0]
}
 800cc94:	bf00      	nop
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	e000e010 	.word	0xe000e010
 800cca4:	e000e018 	.word	0xe000e018
 800cca8:	2000000c 	.word	0x2000000c
 800ccac:	10624dd3 	.word	0x10624dd3
 800ccb0:	e000e014 	.word	0xe000e014

0800ccb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ccb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ccc4 <vPortEnableVFP+0x10>
 800ccb8:	6801      	ldr	r1, [r0, #0]
 800ccba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ccbe:	6001      	str	r1, [r0, #0]
 800ccc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ccc2:	bf00      	nop
 800ccc4:	e000ed88 	.word	0xe000ed88

0800ccc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08a      	sub	sp, #40	@ 0x28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ccd4:	f7ff fadc 	bl	800c290 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ccd8:	4b5a      	ldr	r3, [pc, #360]	@ (800ce44 <pvPortMalloc+0x17c>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d101      	bne.n	800cce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cce0:	f000 f916 	bl	800cf10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cce4:	4b58      	ldr	r3, [pc, #352]	@ (800ce48 <pvPortMalloc+0x180>)
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4013      	ands	r3, r2
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f040 8090 	bne.w	800ce12 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d01e      	beq.n	800cd36 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ccf8:	2208      	movs	r2, #8
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f003 0307 	and.w	r3, r3, #7
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d015      	beq.n	800cd36 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f023 0307 	bic.w	r3, r3, #7
 800cd10:	3308      	adds	r3, #8
 800cd12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f003 0307 	and.w	r3, r3, #7
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00b      	beq.n	800cd36 <pvPortMalloc+0x6e>
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	617b      	str	r3, [r7, #20]
}
 800cd30:	bf00      	nop
 800cd32:	bf00      	nop
 800cd34:	e7fd      	b.n	800cd32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d06a      	beq.n	800ce12 <pvPortMalloc+0x14a>
 800cd3c:	4b43      	ldr	r3, [pc, #268]	@ (800ce4c <pvPortMalloc+0x184>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d865      	bhi.n	800ce12 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd46:	4b42      	ldr	r3, [pc, #264]	@ (800ce50 <pvPortMalloc+0x188>)
 800cd48:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd4a:	4b41      	ldr	r3, [pc, #260]	@ (800ce50 <pvPortMalloc+0x188>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd50:	e004      	b.n	800cd5c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd54:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d903      	bls.n	800cd6e <pvPortMalloc+0xa6>
 800cd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1f1      	bne.n	800cd52 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd6e:	4b35      	ldr	r3, [pc, #212]	@ (800ce44 <pvPortMalloc+0x17c>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d04c      	beq.n	800ce12 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd78:	6a3b      	ldr	r3, [r7, #32]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2208      	movs	r2, #8
 800cd7e:	4413      	add	r3, r2
 800cd80:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	6a3b      	ldr	r3, [r7, #32]
 800cd88:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8c:	685a      	ldr	r2, [r3, #4]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	1ad2      	subs	r2, r2, r3
 800cd92:	2308      	movs	r3, #8
 800cd94:	005b      	lsls	r3, r3, #1
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d920      	bls.n	800cddc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4413      	add	r3, r2
 800cda0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	f003 0307 	and.w	r3, r3, #7
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00b      	beq.n	800cdc4 <pvPortMalloc+0xfc>
	__asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	613b      	str	r3, [r7, #16]
}
 800cdbe:	bf00      	nop
 800cdc0:	bf00      	nop
 800cdc2:	e7fd      	b.n	800cdc0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc6:	685a      	ldr	r2, [r3, #4]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	1ad2      	subs	r2, r2, r3
 800cdcc:	69bb      	ldr	r3, [r7, #24]
 800cdce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cdd6:	69b8      	ldr	r0, [r7, #24]
 800cdd8:	f000 f8fc 	bl	800cfd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cddc:	4b1b      	ldr	r3, [pc, #108]	@ (800ce4c <pvPortMalloc+0x184>)
 800cdde:	681a      	ldr	r2, [r3, #0]
 800cde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	1ad3      	subs	r3, r2, r3
 800cde6:	4a19      	ldr	r2, [pc, #100]	@ (800ce4c <pvPortMalloc+0x184>)
 800cde8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdea:	4b18      	ldr	r3, [pc, #96]	@ (800ce4c <pvPortMalloc+0x184>)
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	4b19      	ldr	r3, [pc, #100]	@ (800ce54 <pvPortMalloc+0x18c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d203      	bcs.n	800cdfe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cdf6:	4b15      	ldr	r3, [pc, #84]	@ (800ce4c <pvPortMalloc+0x184>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4a16      	ldr	r2, [pc, #88]	@ (800ce54 <pvPortMalloc+0x18c>)
 800cdfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce00:	685a      	ldr	r2, [r3, #4]
 800ce02:	4b11      	ldr	r3, [pc, #68]	@ (800ce48 <pvPortMalloc+0x180>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	431a      	orrs	r2, r3
 800ce08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0e:	2200      	movs	r2, #0
 800ce10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce12:	f7ff fa4b 	bl	800c2ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	f003 0307 	and.w	r3, r3, #7
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00b      	beq.n	800ce38 <pvPortMalloc+0x170>
	__asm volatile
 800ce20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce24:	f383 8811 	msr	BASEPRI, r3
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	60fb      	str	r3, [r7, #12]
}
 800ce32:	bf00      	nop
 800ce34:	bf00      	nop
 800ce36:	e7fd      	b.n	800ce34 <pvPortMalloc+0x16c>
	return pvReturn;
 800ce38:	69fb      	ldr	r3, [r7, #28]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3728      	adds	r7, #40	@ 0x28
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	200019d0 	.word	0x200019d0
 800ce48:	200019dc 	.word	0x200019dc
 800ce4c:	200019d4 	.word	0x200019d4
 800ce50:	200019c8 	.word	0x200019c8
 800ce54:	200019d8 	.word	0x200019d8

0800ce58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b086      	sub	sp, #24
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d04a      	beq.n	800cf00 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce6a:	2308      	movs	r3, #8
 800ce6c:	425b      	negs	r3, r3
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	4413      	add	r3, r2
 800ce72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	685a      	ldr	r2, [r3, #4]
 800ce7c:	4b22      	ldr	r3, [pc, #136]	@ (800cf08 <vPortFree+0xb0>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4013      	ands	r3, r2
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d10b      	bne.n	800ce9e <vPortFree+0x46>
	__asm volatile
 800ce86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8a:	f383 8811 	msr	BASEPRI, r3
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	f3bf 8f4f 	dsb	sy
 800ce96:	60fb      	str	r3, [r7, #12]
}
 800ce98:	bf00      	nop
 800ce9a:	bf00      	nop
 800ce9c:	e7fd      	b.n	800ce9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00b      	beq.n	800cebe <vPortFree+0x66>
	__asm volatile
 800cea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	60bb      	str	r3, [r7, #8]
}
 800ceb8:	bf00      	nop
 800ceba:	bf00      	nop
 800cebc:	e7fd      	b.n	800ceba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	685a      	ldr	r2, [r3, #4]
 800cec2:	4b11      	ldr	r3, [pc, #68]	@ (800cf08 <vPortFree+0xb0>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4013      	ands	r3, r2
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d019      	beq.n	800cf00 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d115      	bne.n	800cf00 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	4b0b      	ldr	r3, [pc, #44]	@ (800cf08 <vPortFree+0xb0>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	43db      	mvns	r3, r3
 800cede:	401a      	ands	r2, r3
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cee4:	f7ff f9d4 	bl	800c290 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	4b07      	ldr	r3, [pc, #28]	@ (800cf0c <vPortFree+0xb4>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4413      	add	r3, r2
 800cef2:	4a06      	ldr	r2, [pc, #24]	@ (800cf0c <vPortFree+0xb4>)
 800cef4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cef6:	6938      	ldr	r0, [r7, #16]
 800cef8:	f000 f86c 	bl	800cfd4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cefc:	f7ff f9d6 	bl	800c2ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf00:	bf00      	nop
 800cf02:	3718      	adds	r7, #24
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	200019dc 	.word	0x200019dc
 800cf0c:	200019d4 	.word	0x200019d4

0800cf10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800cf1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf1c:	4b27      	ldr	r3, [pc, #156]	@ (800cfbc <prvHeapInit+0xac>)
 800cf1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f003 0307 	and.w	r3, r3, #7
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00c      	beq.n	800cf44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3307      	adds	r3, #7
 800cf2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f023 0307 	bic.w	r3, r3, #7
 800cf36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	1ad3      	subs	r3, r2, r3
 800cf3e:	4a1f      	ldr	r2, [pc, #124]	@ (800cfbc <prvHeapInit+0xac>)
 800cf40:	4413      	add	r3, r2
 800cf42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf48:	4a1d      	ldr	r2, [pc, #116]	@ (800cfc0 <prvHeapInit+0xb0>)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf4e:	4b1c      	ldr	r3, [pc, #112]	@ (800cfc0 <prvHeapInit+0xb0>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	68ba      	ldr	r2, [r7, #8]
 800cf58:	4413      	add	r3, r2
 800cf5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf5c:	2208      	movs	r2, #8
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	1a9b      	subs	r3, r3, r2
 800cf62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f023 0307 	bic.w	r3, r3, #7
 800cf6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	4a15      	ldr	r2, [pc, #84]	@ (800cfc4 <prvHeapInit+0xb4>)
 800cf70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf72:	4b14      	ldr	r3, [pc, #80]	@ (800cfc4 <prvHeapInit+0xb4>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2200      	movs	r2, #0
 800cf78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf7a:	4b12      	ldr	r3, [pc, #72]	@ (800cfc4 <prvHeapInit+0xb4>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	1ad2      	subs	r2, r2, r3
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf90:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc4 <prvHeapInit+0xb4>)
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	4a0a      	ldr	r2, [pc, #40]	@ (800cfc8 <prvHeapInit+0xb8>)
 800cf9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	4a09      	ldr	r2, [pc, #36]	@ (800cfcc <prvHeapInit+0xbc>)
 800cfa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cfa8:	4b09      	ldr	r3, [pc, #36]	@ (800cfd0 <prvHeapInit+0xc0>)
 800cfaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cfae:	601a      	str	r2, [r3, #0]
}
 800cfb0:	bf00      	nop
 800cfb2:	3714      	adds	r7, #20
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr
 800cfbc:	20000dc8 	.word	0x20000dc8
 800cfc0:	200019c8 	.word	0x200019c8
 800cfc4:	200019d0 	.word	0x200019d0
 800cfc8:	200019d8 	.word	0x200019d8
 800cfcc:	200019d4 	.word	0x200019d4
 800cfd0:	200019dc 	.word	0x200019dc

0800cfd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cfdc:	4b28      	ldr	r3, [pc, #160]	@ (800d080 <prvInsertBlockIntoFreeList+0xac>)
 800cfde:	60fb      	str	r3, [r7, #12]
 800cfe0:	e002      	b.n	800cfe8 <prvInsertBlockIntoFreeList+0x14>
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	60fb      	str	r3, [r7, #12]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d8f7      	bhi.n	800cfe2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	4413      	add	r3, r2
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	429a      	cmp	r2, r3
 800d002:	d108      	bne.n	800d016 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	685a      	ldr	r2, [r3, #4]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	441a      	add	r2, r3
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	441a      	add	r2, r3
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	429a      	cmp	r2, r3
 800d028:	d118      	bne.n	800d05c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	4b15      	ldr	r3, [pc, #84]	@ (800d084 <prvInsertBlockIntoFreeList+0xb0>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	429a      	cmp	r2, r3
 800d034:	d00d      	beq.n	800d052 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	685a      	ldr	r2, [r3, #4]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	441a      	add	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	601a      	str	r2, [r3, #0]
 800d050:	e008      	b.n	800d064 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d052:	4b0c      	ldr	r3, [pc, #48]	@ (800d084 <prvInsertBlockIntoFreeList+0xb0>)
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	601a      	str	r2, [r3, #0]
 800d05a:	e003      	b.n	800d064 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d002      	beq.n	800d072 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d072:	bf00      	nop
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	200019c8 	.word	0x200019c8
 800d084:	200019d0 	.word	0x200019d0

0800d088 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d08c:	2200      	movs	r2, #0
 800d08e:	4912      	ldr	r1, [pc, #72]	@ (800d0d8 <MX_USB_DEVICE_Init+0x50>)
 800d090:	4812      	ldr	r0, [pc, #72]	@ (800d0dc <MX_USB_DEVICE_Init+0x54>)
 800d092:	f7fd fd05 	bl	800aaa0 <USBD_Init>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d001      	beq.n	800d0a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d09c:	f7f3 fe1e 	bl	8000cdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d0a0:	490f      	ldr	r1, [pc, #60]	@ (800d0e0 <MX_USB_DEVICE_Init+0x58>)
 800d0a2:	480e      	ldr	r0, [pc, #56]	@ (800d0dc <MX_USB_DEVICE_Init+0x54>)
 800d0a4:	f7fd fd27 	bl	800aaf6 <USBD_RegisterClass>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d001      	beq.n	800d0b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d0ae:	f7f3 fe15 	bl	8000cdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d0b2:	490c      	ldr	r1, [pc, #48]	@ (800d0e4 <MX_USB_DEVICE_Init+0x5c>)
 800d0b4:	4809      	ldr	r0, [pc, #36]	@ (800d0dc <MX_USB_DEVICE_Init+0x54>)
 800d0b6:	f7fd fc55 	bl	800a964 <USBD_CDC_RegisterInterface>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d001      	beq.n	800d0c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d0c0:	f7f3 fe0c 	bl	8000cdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d0c4:	4805      	ldr	r0, [pc, #20]	@ (800d0dc <MX_USB_DEVICE_Init+0x54>)
 800d0c6:	f7fd fd30 	bl	800ab2a <USBD_Start>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d001      	beq.n	800d0d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d0d0:	f7f3 fe04 	bl	8000cdc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d0d4:	bf00      	nop
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	2000013c 	.word	0x2000013c
 800d0dc:	200019e0 	.word	0x200019e0
 800d0e0:	20000024 	.word	0x20000024
 800d0e4:	2000012c 	.word	0x2000012c

0800d0e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	4905      	ldr	r1, [pc, #20]	@ (800d104 <CDC_Init_FS+0x1c>)
 800d0f0:	4805      	ldr	r0, [pc, #20]	@ (800d108 <CDC_Init_FS+0x20>)
 800d0f2:	f7fd fc4e 	bl	800a992 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d0f6:	4905      	ldr	r1, [pc, #20]	@ (800d10c <CDC_Init_FS+0x24>)
 800d0f8:	4803      	ldr	r0, [pc, #12]	@ (800d108 <CDC_Init_FS+0x20>)
 800d0fa:	f7fd fc64 	bl	800a9c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d0fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d100:	4618      	mov	r0, r3
 800d102:	bd80      	pop	{r7, pc}
 800d104:	200020a4 	.word	0x200020a4
 800d108:	200019e0 	.word	0x200019e0
 800d10c:	20001ca4 	.word	0x20001ca4

0800d110 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d110:	b480      	push	{r7}
 800d112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d114:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d116:	4618      	mov	r0, r3
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	4603      	mov	r3, r0
 800d128:	6039      	str	r1, [r7, #0]
 800d12a:	71fb      	strb	r3, [r7, #7]
 800d12c:	4613      	mov	r3, r2
 800d12e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d130:	79fb      	ldrb	r3, [r7, #7]
 800d132:	2b23      	cmp	r3, #35	@ 0x23
 800d134:	d84a      	bhi.n	800d1cc <CDC_Control_FS+0xac>
 800d136:	a201      	add	r2, pc, #4	@ (adr r2, 800d13c <CDC_Control_FS+0x1c>)
 800d138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d13c:	0800d1cd 	.word	0x0800d1cd
 800d140:	0800d1cd 	.word	0x0800d1cd
 800d144:	0800d1cd 	.word	0x0800d1cd
 800d148:	0800d1cd 	.word	0x0800d1cd
 800d14c:	0800d1cd 	.word	0x0800d1cd
 800d150:	0800d1cd 	.word	0x0800d1cd
 800d154:	0800d1cd 	.word	0x0800d1cd
 800d158:	0800d1cd 	.word	0x0800d1cd
 800d15c:	0800d1cd 	.word	0x0800d1cd
 800d160:	0800d1cd 	.word	0x0800d1cd
 800d164:	0800d1cd 	.word	0x0800d1cd
 800d168:	0800d1cd 	.word	0x0800d1cd
 800d16c:	0800d1cd 	.word	0x0800d1cd
 800d170:	0800d1cd 	.word	0x0800d1cd
 800d174:	0800d1cd 	.word	0x0800d1cd
 800d178:	0800d1cd 	.word	0x0800d1cd
 800d17c:	0800d1cd 	.word	0x0800d1cd
 800d180:	0800d1cd 	.word	0x0800d1cd
 800d184:	0800d1cd 	.word	0x0800d1cd
 800d188:	0800d1cd 	.word	0x0800d1cd
 800d18c:	0800d1cd 	.word	0x0800d1cd
 800d190:	0800d1cd 	.word	0x0800d1cd
 800d194:	0800d1cd 	.word	0x0800d1cd
 800d198:	0800d1cd 	.word	0x0800d1cd
 800d19c:	0800d1cd 	.word	0x0800d1cd
 800d1a0:	0800d1cd 	.word	0x0800d1cd
 800d1a4:	0800d1cd 	.word	0x0800d1cd
 800d1a8:	0800d1cd 	.word	0x0800d1cd
 800d1ac:	0800d1cd 	.word	0x0800d1cd
 800d1b0:	0800d1cd 	.word	0x0800d1cd
 800d1b4:	0800d1cd 	.word	0x0800d1cd
 800d1b8:	0800d1cd 	.word	0x0800d1cd
 800d1bc:	0800d1cd 	.word	0x0800d1cd
 800d1c0:	0800d1cd 	.word	0x0800d1cd
 800d1c4:	0800d1cd 	.word	0x0800d1cd
 800d1c8:	0800d1cd 	.word	0x0800d1cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d1cc:	bf00      	nop
  }

  return (USBD_OK);
 800d1ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d1e6:	6879      	ldr	r1, [r7, #4]
 800d1e8:	4805      	ldr	r0, [pc, #20]	@ (800d200 <CDC_Receive_FS+0x24>)
 800d1ea:	f7fd fbec 	bl	800a9c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d1ee:	4804      	ldr	r0, [pc, #16]	@ (800d200 <CDC_Receive_FS+0x24>)
 800d1f0:	f7fd fc2c 	bl	800aa4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d1f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	200019e0 	.word	0x200019e0

0800d204 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	460b      	mov	r3, r1
 800d20e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d210:	2300      	movs	r3, #0
 800d212:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d214:	4b0d      	ldr	r3, [pc, #52]	@ (800d24c <CDC_Transmit_FS+0x48>)
 800d216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d21a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d226:	2301      	movs	r3, #1
 800d228:	e00b      	b.n	800d242 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d22a:	887b      	ldrh	r3, [r7, #2]
 800d22c:	461a      	mov	r2, r3
 800d22e:	6879      	ldr	r1, [r7, #4]
 800d230:	4806      	ldr	r0, [pc, #24]	@ (800d24c <CDC_Transmit_FS+0x48>)
 800d232:	f7fd fbae 	bl	800a992 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d236:	4805      	ldr	r0, [pc, #20]	@ (800d24c <CDC_Transmit_FS+0x48>)
 800d238:	f7fd fbd9 	bl	800a9ee <USBD_CDC_TransmitPacket>
 800d23c:	4603      	mov	r3, r0
 800d23e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d240:	7bfb      	ldrb	r3, [r7, #15]
}
 800d242:	4618      	mov	r0, r3
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	200019e0 	.word	0x200019e0

0800d250 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	4603      	mov	r3, r0
 800d258:	6039      	str	r1, [r7, #0]
 800d25a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	2212      	movs	r2, #18
 800d260:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d262:	4b03      	ldr	r3, [pc, #12]	@ (800d270 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d264:	4618      	mov	r0, r3
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr
 800d270:	20000158 	.word	0x20000158

0800d274 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	4603      	mov	r3, r0
 800d27c:	6039      	str	r1, [r7, #0]
 800d27e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	2204      	movs	r2, #4
 800d284:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d286:	4b03      	ldr	r3, [pc, #12]	@ (800d294 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d288:	4618      	mov	r0, r3
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr
 800d294:	2000016c 	.word	0x2000016c

0800d298 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	4603      	mov	r3, r0
 800d2a0:	6039      	str	r1, [r7, #0]
 800d2a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d2a4:	79fb      	ldrb	r3, [r7, #7]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d105      	bne.n	800d2b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2aa:	683a      	ldr	r2, [r7, #0]
 800d2ac:	4907      	ldr	r1, [pc, #28]	@ (800d2cc <USBD_FS_ProductStrDescriptor+0x34>)
 800d2ae:	4808      	ldr	r0, [pc, #32]	@ (800d2d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d2b0:	f7fe fbb6 	bl	800ba20 <USBD_GetString>
 800d2b4:	e004      	b.n	800d2c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2b6:	683a      	ldr	r2, [r7, #0]
 800d2b8:	4904      	ldr	r1, [pc, #16]	@ (800d2cc <USBD_FS_ProductStrDescriptor+0x34>)
 800d2ba:	4805      	ldr	r0, [pc, #20]	@ (800d2d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d2bc:	f7fe fbb0 	bl	800ba20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2c0:	4b02      	ldr	r3, [pc, #8]	@ (800d2cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3708      	adds	r7, #8
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	200024a4 	.word	0x200024a4
 800d2d0:	0800db28 	.word	0x0800db28

0800d2d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	4603      	mov	r3, r0
 800d2dc:	6039      	str	r1, [r7, #0]
 800d2de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d2e0:	683a      	ldr	r2, [r7, #0]
 800d2e2:	4904      	ldr	r1, [pc, #16]	@ (800d2f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d2e4:	4804      	ldr	r0, [pc, #16]	@ (800d2f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d2e6:	f7fe fb9b 	bl	800ba20 <USBD_GetString>
  return USBD_StrDesc;
 800d2ea:	4b02      	ldr	r3, [pc, #8]	@ (800d2f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	200024a4 	.word	0x200024a4
 800d2f8:	0800db40 	.word	0x0800db40

0800d2fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	4603      	mov	r3, r0
 800d304:	6039      	str	r1, [r7, #0]
 800d306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	221a      	movs	r2, #26
 800d30c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d30e:	f000 f843 	bl	800d398 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d312:	4b02      	ldr	r3, [pc, #8]	@ (800d31c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d314:	4618      	mov	r0, r3
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	20000170 	.word	0x20000170

0800d320 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	4603      	mov	r3, r0
 800d328:	6039      	str	r1, [r7, #0]
 800d32a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d32c:	79fb      	ldrb	r3, [r7, #7]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d105      	bne.n	800d33e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d332:	683a      	ldr	r2, [r7, #0]
 800d334:	4907      	ldr	r1, [pc, #28]	@ (800d354 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d336:	4808      	ldr	r0, [pc, #32]	@ (800d358 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d338:	f7fe fb72 	bl	800ba20 <USBD_GetString>
 800d33c:	e004      	b.n	800d348 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d33e:	683a      	ldr	r2, [r7, #0]
 800d340:	4904      	ldr	r1, [pc, #16]	@ (800d354 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d342:	4805      	ldr	r0, [pc, #20]	@ (800d358 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d344:	f7fe fb6c 	bl	800ba20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d348:	4b02      	ldr	r3, [pc, #8]	@ (800d354 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	200024a4 	.word	0x200024a4
 800d358:	0800db54 	.word	0x0800db54

0800d35c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	4603      	mov	r3, r0
 800d364:	6039      	str	r1, [r7, #0]
 800d366:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d368:	79fb      	ldrb	r3, [r7, #7]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d105      	bne.n	800d37a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d36e:	683a      	ldr	r2, [r7, #0]
 800d370:	4907      	ldr	r1, [pc, #28]	@ (800d390 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d372:	4808      	ldr	r0, [pc, #32]	@ (800d394 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d374:	f7fe fb54 	bl	800ba20 <USBD_GetString>
 800d378:	e004      	b.n	800d384 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	4904      	ldr	r1, [pc, #16]	@ (800d390 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d37e:	4805      	ldr	r0, [pc, #20]	@ (800d394 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d380:	f7fe fb4e 	bl	800ba20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d384:	4b02      	ldr	r3, [pc, #8]	@ (800d390 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d386:	4618      	mov	r0, r3
 800d388:	3708      	adds	r7, #8
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	200024a4 	.word	0x200024a4
 800d394:	0800db60 	.word	0x0800db60

0800d398 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d39e:	4b0f      	ldr	r3, [pc, #60]	@ (800d3dc <Get_SerialNum+0x44>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d3a4:	4b0e      	ldr	r3, [pc, #56]	@ (800d3e0 <Get_SerialNum+0x48>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d3aa:	4b0e      	ldr	r3, [pc, #56]	@ (800d3e4 <Get_SerialNum+0x4c>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d009      	beq.n	800d3d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d3be:	2208      	movs	r2, #8
 800d3c0:	4909      	ldr	r1, [pc, #36]	@ (800d3e8 <Get_SerialNum+0x50>)
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f000 f814 	bl	800d3f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d3c8:	2204      	movs	r2, #4
 800d3ca:	4908      	ldr	r1, [pc, #32]	@ (800d3ec <Get_SerialNum+0x54>)
 800d3cc:	68b8      	ldr	r0, [r7, #8]
 800d3ce:	f000 f80f 	bl	800d3f0 <IntToUnicode>
  }
}
 800d3d2:	bf00      	nop
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	1ffff7ac 	.word	0x1ffff7ac
 800d3e0:	1ffff7b0 	.word	0x1ffff7b0
 800d3e4:	1ffff7b4 	.word	0x1ffff7b4
 800d3e8:	20000172 	.word	0x20000172
 800d3ec:	20000182 	.word	0x20000182

0800d3f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b087      	sub	sp, #28
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d3fe:	2300      	movs	r3, #0
 800d400:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d402:	2300      	movs	r3, #0
 800d404:	75fb      	strb	r3, [r7, #23]
 800d406:	e027      	b.n	800d458 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	0f1b      	lsrs	r3, r3, #28
 800d40c:	2b09      	cmp	r3, #9
 800d40e:	d80b      	bhi.n	800d428 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	0f1b      	lsrs	r3, r3, #28
 800d414:	b2da      	uxtb	r2, r3
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	005b      	lsls	r3, r3, #1
 800d41a:	4619      	mov	r1, r3
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	440b      	add	r3, r1
 800d420:	3230      	adds	r2, #48	@ 0x30
 800d422:	b2d2      	uxtb	r2, r2
 800d424:	701a      	strb	r2, [r3, #0]
 800d426:	e00a      	b.n	800d43e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	0f1b      	lsrs	r3, r3, #28
 800d42c:	b2da      	uxtb	r2, r3
 800d42e:	7dfb      	ldrb	r3, [r7, #23]
 800d430:	005b      	lsls	r3, r3, #1
 800d432:	4619      	mov	r1, r3
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	440b      	add	r3, r1
 800d438:	3237      	adds	r2, #55	@ 0x37
 800d43a:	b2d2      	uxtb	r2, r2
 800d43c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	011b      	lsls	r3, r3, #4
 800d442:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d444:	7dfb      	ldrb	r3, [r7, #23]
 800d446:	005b      	lsls	r3, r3, #1
 800d448:	3301      	adds	r3, #1
 800d44a:	68ba      	ldr	r2, [r7, #8]
 800d44c:	4413      	add	r3, r2
 800d44e:	2200      	movs	r2, #0
 800d450:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d452:	7dfb      	ldrb	r3, [r7, #23]
 800d454:	3301      	adds	r3, #1
 800d456:	75fb      	strb	r3, [r7, #23]
 800d458:	7dfa      	ldrb	r2, [r7, #23]
 800d45a:	79fb      	ldrb	r3, [r7, #7]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d3d3      	bcc.n	800d408 <IntToUnicode+0x18>
  }
}
 800d460:	bf00      	nop
 800d462:	bf00      	nop
 800d464:	371c      	adds	r7, #28
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr
	...

0800d470 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b08a      	sub	sp, #40	@ 0x28
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d478:	f107 0314 	add.w	r3, r7, #20
 800d47c:	2200      	movs	r2, #0
 800d47e:	601a      	str	r2, [r3, #0]
 800d480:	605a      	str	r2, [r3, #4]
 800d482:	609a      	str	r2, [r3, #8]
 800d484:	60da      	str	r2, [r3, #12]
 800d486:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a1c      	ldr	r2, [pc, #112]	@ (800d500 <HAL_PCD_MspInit+0x90>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d131      	bne.n	800d4f6 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d492:	4b1c      	ldr	r3, [pc, #112]	@ (800d504 <HAL_PCD_MspInit+0x94>)
 800d494:	695b      	ldr	r3, [r3, #20]
 800d496:	4a1b      	ldr	r2, [pc, #108]	@ (800d504 <HAL_PCD_MspInit+0x94>)
 800d498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d49c:	6153      	str	r3, [r2, #20]
 800d49e:	4b19      	ldr	r3, [pc, #100]	@ (800d504 <HAL_PCD_MspInit+0x94>)
 800d4a0:	695b      	ldr	r3, [r3, #20]
 800d4a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d4a6:	613b      	str	r3, [r7, #16]
 800d4a8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d4aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d4ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4b0:	2302      	movs	r3, #2
 800d4b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d4b8:	2303      	movs	r3, #3
 800d4ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800d4bc:	230e      	movs	r3, #14
 800d4be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4c0:	f107 0314 	add.w	r3, r7, #20
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d4ca:	f7f5 ff37 	bl	800333c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d504 <HAL_PCD_MspInit+0x94>)
 800d4d0:	69db      	ldr	r3, [r3, #28]
 800d4d2:	4a0c      	ldr	r2, [pc, #48]	@ (800d504 <HAL_PCD_MspInit+0x94>)
 800d4d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d4d8:	61d3      	str	r3, [r2, #28]
 800d4da:	4b0a      	ldr	r3, [pc, #40]	@ (800d504 <HAL_PCD_MspInit+0x94>)
 800d4dc:	69db      	ldr	r3, [r3, #28]
 800d4de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4e2:	60fb      	str	r3, [r7, #12]
 800d4e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	2105      	movs	r1, #5
 800d4ea:	2014      	movs	r0, #20
 800d4ec:	f7f5 fdd6 	bl	800309c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800d4f0:	2014      	movs	r0, #20
 800d4f2:	f7f5 fdef 	bl	80030d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d4f6:	bf00      	nop
 800d4f8:	3728      	adds	r7, #40	@ 0x28
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	40005c00 	.word	0x40005c00
 800d504:	40021000 	.word	0x40021000

0800d508 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d51c:	4619      	mov	r1, r3
 800d51e:	4610      	mov	r0, r2
 800d520:	f7fd fb4c 	bl	800abbc <USBD_LL_SetupStage>
}
 800d524:	bf00      	nop
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	460b      	mov	r3, r1
 800d536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800d53e:	78fa      	ldrb	r2, [r7, #3]
 800d540:	6879      	ldr	r1, [r7, #4]
 800d542:	4613      	mov	r3, r2
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	4413      	add	r3, r2
 800d548:	00db      	lsls	r3, r3, #3
 800d54a:	440b      	add	r3, r1
 800d54c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	78fb      	ldrb	r3, [r7, #3]
 800d554:	4619      	mov	r1, r3
 800d556:	f7fd fb7e 	bl	800ac56 <USBD_LL_DataOutStage>
}
 800d55a:	bf00      	nop
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b082      	sub	sp, #8
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	460b      	mov	r3, r1
 800d56c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800d574:	78fa      	ldrb	r2, [r7, #3]
 800d576:	6879      	ldr	r1, [r7, #4]
 800d578:	4613      	mov	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	00db      	lsls	r3, r3, #3
 800d580:	440b      	add	r3, r1
 800d582:	3324      	adds	r3, #36	@ 0x24
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	78fb      	ldrb	r3, [r7, #3]
 800d588:	4619      	mov	r1, r3
 800d58a:	f7fd fbd5 	bl	800ad38 <USBD_LL_DataInStage>
}
 800d58e:	bf00      	nop
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7fd fce8 	bl	800af7a <USBD_LL_SOF>
}
 800d5aa:	bf00      	nop
 800d5ac:	3708      	adds	r7, #8
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5b2:	b580      	push	{r7, lr}
 800d5b4:	b084      	sub	sp, #16
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	795b      	ldrb	r3, [r3, #5]
 800d5c2:	2b02      	cmp	r3, #2
 800d5c4:	d001      	beq.n	800d5ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d5c6:	f7f3 fb89 	bl	8000cdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d5d0:	7bfa      	ldrb	r2, [r7, #15]
 800d5d2:	4611      	mov	r1, r2
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7fd fc95 	bl	800af04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fd fc4e 	bl	800ae82 <USBD_LL_Reset>
}
 800d5e6:	bf00      	nop
 800d5e8:	3710      	adds	r7, #16
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7fd fc90 	bl	800af24 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	7a5b      	ldrb	r3, [r3, #9]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d005      	beq.n	800d618 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d60c:	4b04      	ldr	r3, [pc, #16]	@ (800d620 <HAL_PCD_SuspendCallback+0x30>)
 800d60e:	691b      	ldr	r3, [r3, #16]
 800d610:	4a03      	ldr	r2, [pc, #12]	@ (800d620 <HAL_PCD_SuspendCallback+0x30>)
 800d612:	f043 0306 	orr.w	r3, r3, #6
 800d616:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d618:	bf00      	nop
 800d61a:	3708      	adds	r7, #8
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	e000ed00 	.word	0xe000ed00

0800d624 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d632:	4618      	mov	r0, r3
 800d634:	f7fd fc8b 	bl	800af4e <USBD_LL_Resume>
}
 800d638:	bf00      	nop
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d648:	4a28      	ldr	r2, [pc, #160]	@ (800d6ec <USBD_LL_Init+0xac>)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	4a26      	ldr	r2, [pc, #152]	@ (800d6ec <USBD_LL_Init+0xac>)
 800d654:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d658:	4b24      	ldr	r3, [pc, #144]	@ (800d6ec <USBD_LL_Init+0xac>)
 800d65a:	4a25      	ldr	r2, [pc, #148]	@ (800d6f0 <USBD_LL_Init+0xb0>)
 800d65c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d65e:	4b23      	ldr	r3, [pc, #140]	@ (800d6ec <USBD_LL_Init+0xac>)
 800d660:	2208      	movs	r2, #8
 800d662:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d664:	4b21      	ldr	r3, [pc, #132]	@ (800d6ec <USBD_LL_Init+0xac>)
 800d666:	2202      	movs	r2, #2
 800d668:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d66a:	4b20      	ldr	r3, [pc, #128]	@ (800d6ec <USBD_LL_Init+0xac>)
 800d66c:	2202      	movs	r2, #2
 800d66e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d670:	4b1e      	ldr	r3, [pc, #120]	@ (800d6ec <USBD_LL_Init+0xac>)
 800d672:	2200      	movs	r2, #0
 800d674:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d676:	4b1d      	ldr	r3, [pc, #116]	@ (800d6ec <USBD_LL_Init+0xac>)
 800d678:	2200      	movs	r2, #0
 800d67a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d67c:	481b      	ldr	r0, [pc, #108]	@ (800d6ec <USBD_LL_Init+0xac>)
 800d67e:	f7f6 fca4 	bl	8003fca <HAL_PCD_Init>
 800d682:	4603      	mov	r3, r0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d001      	beq.n	800d68c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d688:	f7f3 fb28 	bl	8000cdc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d692:	2318      	movs	r3, #24
 800d694:	2200      	movs	r2, #0
 800d696:	2100      	movs	r1, #0
 800d698:	f7f8 f91d 	bl	80058d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d6a2:	2358      	movs	r3, #88	@ 0x58
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2180      	movs	r1, #128	@ 0x80
 800d6a8:	f7f8 f915 	bl	80058d6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d6b2:	23c0      	movs	r3, #192	@ 0xc0
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	2181      	movs	r1, #129	@ 0x81
 800d6b8:	f7f8 f90d 	bl	80058d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d6c2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	2101      	movs	r1, #1
 800d6ca:	f7f8 f904 	bl	80058d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d6d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d6d8:	2200      	movs	r2, #0
 800d6da:	2182      	movs	r1, #130	@ 0x82
 800d6dc:	f7f8 f8fb 	bl	80058d6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3708      	adds	r7, #8
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	200026a4 	.word	0x200026a4
 800d6f0:	40005c00 	.word	0x40005c00

0800d6f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d700:	2300      	movs	r3, #0
 800d702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7f6 fd24 	bl	8004158 <HAL_PCD_Start>
 800d710:	4603      	mov	r3, r0
 800d712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d714:	7bfb      	ldrb	r3, [r7, #15]
 800d716:	4618      	mov	r0, r3
 800d718:	f000 f952 	bl	800d9c0 <USBD_Get_USB_Status>
 800d71c:	4603      	mov	r3, r0
 800d71e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d720:	7bbb      	ldrb	r3, [r7, #14]
}
 800d722:	4618      	mov	r0, r3
 800d724:	3710      	adds	r7, #16
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
 800d732:	4608      	mov	r0, r1
 800d734:	4611      	mov	r1, r2
 800d736:	461a      	mov	r2, r3
 800d738:	4603      	mov	r3, r0
 800d73a:	70fb      	strb	r3, [r7, #3]
 800d73c:	460b      	mov	r3, r1
 800d73e:	70bb      	strb	r3, [r7, #2]
 800d740:	4613      	mov	r3, r2
 800d742:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d748:	2300      	movs	r3, #0
 800d74a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d752:	78bb      	ldrb	r3, [r7, #2]
 800d754:	883a      	ldrh	r2, [r7, #0]
 800d756:	78f9      	ldrb	r1, [r7, #3]
 800d758:	f7f6 fe1c 	bl	8004394 <HAL_PCD_EP_Open>
 800d75c:	4603      	mov	r3, r0
 800d75e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d760:	7bfb      	ldrb	r3, [r7, #15]
 800d762:	4618      	mov	r0, r3
 800d764:	f000 f92c 	bl	800d9c0 <USBD_Get_USB_Status>
 800d768:	4603      	mov	r3, r0
 800d76a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b084      	sub	sp, #16
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
 800d77e:	460b      	mov	r3, r1
 800d780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d782:	2300      	movs	r3, #0
 800d784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d786:	2300      	movs	r3, #0
 800d788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d790:	78fa      	ldrb	r2, [r7, #3]
 800d792:	4611      	mov	r1, r2
 800d794:	4618      	mov	r0, r3
 800d796:	f7f6 fe5a 	bl	800444e <HAL_PCD_EP_Close>
 800d79a:	4603      	mov	r3, r0
 800d79c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 f90d 	bl	800d9c0 <USBD_Get_USB_Status>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d7ce:	78fa      	ldrb	r2, [r7, #3]
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7f6 ff03 	bl	80045de <HAL_PCD_EP_SetStall>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 f8ee 	bl	800d9c0 <USBD_Get_USB_Status>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b084      	sub	sp, #16
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7fe:	2300      	movs	r3, #0
 800d800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d80c:	78fa      	ldrb	r2, [r7, #3]
 800d80e:	4611      	mov	r1, r2
 800d810:	4618      	mov	r0, r3
 800d812:	f7f6 ff36 	bl	8004682 <HAL_PCD_EP_ClrStall>
 800d816:	4603      	mov	r3, r0
 800d818:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d81a:	7bfb      	ldrb	r3, [r7, #15]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f000 f8cf 	bl	800d9c0 <USBD_Get_USB_Status>
 800d822:	4603      	mov	r3, r0
 800d824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d826:	7bbb      	ldrb	r3, [r7, #14]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3710      	adds	r7, #16
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d830:	b480      	push	{r7}
 800d832:	b085      	sub	sp, #20
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	460b      	mov	r3, r1
 800d83a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d842:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	da0b      	bge.n	800d864 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d84c:	78fb      	ldrb	r3, [r7, #3]
 800d84e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d852:	68f9      	ldr	r1, [r7, #12]
 800d854:	4613      	mov	r3, r2
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4413      	add	r3, r2
 800d85a:	00db      	lsls	r3, r3, #3
 800d85c:	440b      	add	r3, r1
 800d85e:	3312      	adds	r3, #18
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	e00b      	b.n	800d87c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d864:	78fb      	ldrb	r3, [r7, #3]
 800d866:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d86a:	68f9      	ldr	r1, [r7, #12]
 800d86c:	4613      	mov	r3, r2
 800d86e:	009b      	lsls	r3, r3, #2
 800d870:	4413      	add	r3, r2
 800d872:	00db      	lsls	r3, r3, #3
 800d874:	440b      	add	r3, r1
 800d876:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d87a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3714      	adds	r7, #20
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	460b      	mov	r3, r1
 800d892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d894:	2300      	movs	r3, #0
 800d896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d898:	2300      	movs	r3, #0
 800d89a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d8a2:	78fa      	ldrb	r2, [r7, #3]
 800d8a4:	4611      	mov	r1, r2
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7f6 fd50 	bl	800434c <HAL_PCD_SetAddress>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f000 f884 	bl	800d9c0 <USBD_Get_USB_Status>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b086      	sub	sp, #24
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	60f8      	str	r0, [r7, #12]
 800d8ce:	607a      	str	r2, [r7, #4]
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	72fb      	strb	r3, [r7, #11]
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d8e8:	893b      	ldrh	r3, [r7, #8]
 800d8ea:	7af9      	ldrb	r1, [r7, #11]
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	f7f6 fe3f 	bl	8004570 <HAL_PCD_EP_Transmit>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8f6:	7dfb      	ldrb	r3, [r7, #23]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 f861 	bl	800d9c0 <USBD_Get_USB_Status>
 800d8fe:	4603      	mov	r3, r0
 800d900:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d902:	7dbb      	ldrb	r3, [r7, #22]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3718      	adds	r7, #24
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	607a      	str	r2, [r7, #4]
 800d916:	461a      	mov	r2, r3
 800d918:	460b      	mov	r3, r1
 800d91a:	72fb      	strb	r3, [r7, #11]
 800d91c:	4613      	mov	r3, r2
 800d91e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d920:	2300      	movs	r3, #0
 800d922:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d924:	2300      	movs	r3, #0
 800d926:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d92e:	893b      	ldrh	r3, [r7, #8]
 800d930:	7af9      	ldrb	r1, [r7, #11]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	f7f6 fdd3 	bl	80044de <HAL_PCD_EP_Receive>
 800d938:	4603      	mov	r3, r0
 800d93a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d93c:	7dfb      	ldrb	r3, [r7, #23]
 800d93e:	4618      	mov	r0, r3
 800d940:	f000 f83e 	bl	800d9c0 <USBD_Get_USB_Status>
 800d944:	4603      	mov	r3, r0
 800d946:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d948:	7dbb      	ldrb	r3, [r7, #22]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3718      	adds	r7, #24
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d952:	b580      	push	{r7, lr}
 800d954:	b082      	sub	sp, #8
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
 800d95a:	460b      	mov	r3, r1
 800d95c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d964:	78fa      	ldrb	r2, [r7, #3]
 800d966:	4611      	mov	r1, r2
 800d968:	4618      	mov	r0, r3
 800d96a:	f7f6 fde9 	bl	8004540 <HAL_PCD_EP_GetRxCount>
 800d96e:	4603      	mov	r3, r0
}
 800d970:	4618      	mov	r0, r3
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d980:	4b03      	ldr	r3, [pc, #12]	@ (800d990 <USBD_static_malloc+0x18>)
}
 800d982:	4618      	mov	r0, r3
 800d984:	370c      	adds	r7, #12
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	20002978 	.word	0x20002978

0800d994 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]

}
 800d99c:	bf00      	nop
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d9b4:	bf00      	nop
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b085      	sub	sp, #20
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d9ce:	79fb      	ldrb	r3, [r7, #7]
 800d9d0:	2b03      	cmp	r3, #3
 800d9d2:	d817      	bhi.n	800da04 <USBD_Get_USB_Status+0x44>
 800d9d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d9dc <USBD_Get_USB_Status+0x1c>)
 800d9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9da:	bf00      	nop
 800d9dc:	0800d9ed 	.word	0x0800d9ed
 800d9e0:	0800d9f3 	.word	0x0800d9f3
 800d9e4:	0800d9f9 	.word	0x0800d9f9
 800d9e8:	0800d9ff 	.word	0x0800d9ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d9f0:	e00b      	b.n	800da0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9f2:	2302      	movs	r3, #2
 800d9f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d9f6:	e008      	b.n	800da0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d9fc:	e005      	b.n	800da0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d9fe:	2302      	movs	r3, #2
 800da00:	73fb      	strb	r3, [r7, #15]
    break;
 800da02:	e002      	b.n	800da0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800da04:	2302      	movs	r3, #2
 800da06:	73fb      	strb	r3, [r7, #15]
    break;
 800da08:	bf00      	nop
  }
  return usb_status;
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3714      	adds	r7, #20
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <memset>:
 800da18:	4402      	add	r2, r0
 800da1a:	4603      	mov	r3, r0
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d100      	bne.n	800da22 <memset+0xa>
 800da20:	4770      	bx	lr
 800da22:	f803 1b01 	strb.w	r1, [r3], #1
 800da26:	e7f9      	b.n	800da1c <memset+0x4>

0800da28 <__libc_init_array>:
 800da28:	b570      	push	{r4, r5, r6, lr}
 800da2a:	4d0d      	ldr	r5, [pc, #52]	@ (800da60 <__libc_init_array+0x38>)
 800da2c:	4c0d      	ldr	r4, [pc, #52]	@ (800da64 <__libc_init_array+0x3c>)
 800da2e:	1b64      	subs	r4, r4, r5
 800da30:	10a4      	asrs	r4, r4, #2
 800da32:	2600      	movs	r6, #0
 800da34:	42a6      	cmp	r6, r4
 800da36:	d109      	bne.n	800da4c <__libc_init_array+0x24>
 800da38:	4d0b      	ldr	r5, [pc, #44]	@ (800da68 <__libc_init_array+0x40>)
 800da3a:	4c0c      	ldr	r4, [pc, #48]	@ (800da6c <__libc_init_array+0x44>)
 800da3c:	f000 f818 	bl	800da70 <_init>
 800da40:	1b64      	subs	r4, r4, r5
 800da42:	10a4      	asrs	r4, r4, #2
 800da44:	2600      	movs	r6, #0
 800da46:	42a6      	cmp	r6, r4
 800da48:	d105      	bne.n	800da56 <__libc_init_array+0x2e>
 800da4a:	bd70      	pop	{r4, r5, r6, pc}
 800da4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800da50:	4798      	blx	r3
 800da52:	3601      	adds	r6, #1
 800da54:	e7ee      	b.n	800da34 <__libc_init_array+0xc>
 800da56:	f855 3b04 	ldr.w	r3, [r5], #4
 800da5a:	4798      	blx	r3
 800da5c:	3601      	adds	r6, #1
 800da5e:	e7f2      	b.n	800da46 <__libc_init_array+0x1e>
 800da60:	0800e1ac 	.word	0x0800e1ac
 800da64:	0800e1ac 	.word	0x0800e1ac
 800da68:	0800e1ac 	.word	0x0800e1ac
 800da6c:	0800e1b0 	.word	0x0800e1b0

0800da70 <_init>:
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	bf00      	nop
 800da74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da76:	bc08      	pop	{r3}
 800da78:	469e      	mov	lr, r3
 800da7a:	4770      	bx	lr

0800da7c <_fini>:
 800da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7e:	bf00      	nop
 800da80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da82:	bc08      	pop	{r3}
 800da84:	469e      	mov	lr, r3
 800da86:	4770      	bx	lr
