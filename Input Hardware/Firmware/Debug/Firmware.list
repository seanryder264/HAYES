
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dba8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800dd38  0800dd38  0000ed38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e478  0800e478  0001018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e478  0800e478  0000f478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e480  0800e480  0001018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e480  0800e480  0000f480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e484  0800e484  0000f484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  0800e488  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001018c  2**0
                  CONTENTS
 10 .bss          00002a2c  2000018c  2000018c  0001018c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002bb8  20002bb8  0001018c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022055  00000000  00000000  000101bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005457  00000000  00000000  00032211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e88  00000000  00000000  00037668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000176f  00000000  00000000  000394f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025270  00000000  00000000  0003ac5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002991c  00000000  00000000  0005fecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3359  00000000  00000000  000897eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015cb44  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f20  00000000  00000000  0015cb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00164aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd20 	.word	0x0800dd20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	0800dd20 	.word	0x0800dd20

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	@ (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	@ (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	@ 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	200001a8 	.word	0x200001a8
 8000210:	200001fc 	.word	0x200001fc

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b098      	sub	sp, #96	@ 0x60
 8000218:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f001 fd7b 	bl	8001d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f87b 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 fc2d 	bl	8000a80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000226:	f000 fbe9 	bl	80009fc <MX_DMA_Init>
  MX_ADC3_Init();
 800022a:	f000 f9a3 	bl	8000574 <MX_ADC3_Init>
  MX_COMP3_Init();
 800022e:	f000 fa71 	bl	8000714 <MX_COMP3_Init>
  MX_COMP4_Init();
 8000232:	f000 fa9d 	bl	8000770 <MX_COMP4_Init>
  MX_COMP5_Init();
 8000236:	f000 fac9 	bl	80007cc <MX_COMP5_Init>
  MX_COMP6_Init();
 800023a:	f000 faf5 	bl	8000828 <MX_COMP6_Init>
  MX_ADC1_Init();
 800023e:	f000 f8cb 	bl	80003d8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000242:	f000 f939 	bl	80004b8 <MX_ADC2_Init>
  MX_ADC4_Init();
 8000246:	f000 fa07 	bl	8000658 <MX_ADC4_Init>
  MX_I2C2_Init();
 800024a:	f000 fb1b 	bl	8000884 <MX_I2C2_Init>
  MX_SPI1_Init();
 800024e:	f000 fb59 	bl	8000904 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000252:	f000 fb95 	bl	8000980 <MX_SPI3_Init>





  ssd1306_Init();
 8000256:	f001 fb5d 	bl	8001914 <ssd1306_Init>
  ssd1306_Fill(White);
 800025a:	2001      	movs	r0, #1
 800025c:	f001 fbc4 	bl	80019e8 <ssd1306_Fill>
  ssd1306_SetCursor(6, 20);
 8000260:	2114      	movs	r1, #20
 8000262:	2006      	movs	r0, #6
 8000264:	f001 fd0c 	bl	8001c80 <ssd1306_SetCursor>
  ssd1306_WriteString(startupmessage, Font_6x8, Black);
 8000268:	4b23      	ldr	r3, [pc, #140]	@ (80002f8 <main+0xe4>)
 800026a:	6818      	ldr	r0, [r3, #0]
 800026c:	4b23      	ldr	r3, [pc, #140]	@ (80002fc <main+0xe8>)
 800026e:	2200      	movs	r2, #0
 8000270:	9200      	str	r2, [sp, #0]
 8000272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000274:	f001 fcde 	bl	8001c34 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000278:	f001 fbce 	bl	8001a18 <ssd1306_UpdateScreen>

  MX_USB_DEVICE_Init();
 800027c:	f00d f85c 	bl	800d338 <MX_USB_DEVICE_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of USB_Transmit */
  osThreadDef(USB_Transmit, StartUSB_Transmit, osPriorityNormal, 0, 128);
 8000280:	4b1f      	ldr	r3, [pc, #124]	@ (8000300 <main+0xec>)
 8000282:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000286:	461d      	mov	r5, r3
 8000288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_TransmitHandle = osThreadCreate(osThread(USB_Transmit), NULL);
 8000294:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f00b fe1b 	bl	800bed6 <osThreadCreate>
 80002a0:	4603      	mov	r3, r0
 80002a2:	4a18      	ldr	r2, [pc, #96]	@ (8000304 <main+0xf0>)
 80002a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_Write */
  osThreadDef(LED_Write, StartLED_Write, osPriorityLow, 0, 128);
 80002a6:	4b18      	ldr	r3, [pc, #96]	@ (8000308 <main+0xf4>)
 80002a8:	f107 0420 	add.w	r4, r7, #32
 80002ac:	461d      	mov	r5, r3
 80002ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_WriteHandle = osThreadCreate(osThread(LED_Write), NULL);
 80002ba:	f107 0320 	add.w	r3, r7, #32
 80002be:	2100      	movs	r1, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	f00b fe08 	bl	800bed6 <osThreadCreate>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a10      	ldr	r2, [pc, #64]	@ (800030c <main+0xf8>)
 80002ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of UI_Read */
  osThreadDef(UI_Read, StartUI_Read, osPriorityLow, 0, 128);
 80002cc:	4b10      	ldr	r3, [pc, #64]	@ (8000310 <main+0xfc>)
 80002ce:	1d3c      	adds	r4, r7, #4
 80002d0:	461d      	mov	r5, r3
 80002d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UI_ReadHandle = osThreadCreate(osThread(UI_Read), NULL);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f00b fdf7 	bl	800bed6 <osThreadCreate>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000314 <main+0x100>)
 80002ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002ee:	f00b fdeb 	bl	800bec8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f2:	bf00      	nop
 80002f4:	e7fd      	b.n	80002f2 <main+0xde>
 80002f6:	bf00      	nop
 80002f8:	20000004 	.word	0x20000004
 80002fc:	0800e44c 	.word	0x0800e44c
 8000300:	0800dd68 	.word	0x0800dd68
 8000304:	20000828 	.word	0x20000828
 8000308:	0800dd90 	.word	0x0800dd90
 800030c:	2000082c 	.word	0x2000082c
 8000310:	0800ddb4 	.word	0x0800ddb4
 8000314:	20000830 	.word	0x20000830

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b09e      	sub	sp, #120	@ 0x78
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000322:	2228      	movs	r2, #40	@ 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f00d fcce 	bl	800dcc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	463b      	mov	r3, r7
 800033e:	223c      	movs	r2, #60	@ 0x3c
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f00d fcc0 	bl	800dcc8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000348:	2303      	movs	r3, #3
 800034a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800034c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000350:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000352:	2301      	movs	r3, #1
 8000354:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035a:	2310      	movs	r3, #16
 800035c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035e:	2302      	movs	r3, #2
 8000360:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000362:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000366:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000368:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800036c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000372:	4618      	mov	r0, r3
 8000374:	f005 fc50 	bl	8005c18 <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800037e:	f000 fdf3 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	2302      	movs	r3, #2
 8000388:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000392:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000398:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f006 fc78 	bl	8006c94 <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003aa:	f000 fddd 	bl	8000f68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C2;
 80003ae:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <SystemClock_Config+0xbc>)
 80003b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80003b2:	2300      	movs	r3, #0
 80003b4:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003b6:	2300      	movs	r3, #0
 80003b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ba:	463b      	mov	r3, r7
 80003bc:	4618      	mov	r0, r3
 80003be:	f006 fe9b 	bl	80070f8 <HAL_RCCEx_PeriphCLKConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003c8:	f000 fdce 	bl	8000f68 <Error_Handler>
  }
}
 80003cc:	bf00      	nop
 80003ce:	3778      	adds	r7, #120	@ 0x78
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	00020040 	.word	0x00020040

080003d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	@ 0x28
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003de:	f107 031c 	add.w	r3, r7, #28
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
 80003f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003fa:	4b2e      	ldr	r3, [pc, #184]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 80003fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000400:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000402:	4b2c      	ldr	r3, [pc, #176]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000404:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000408:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040a:	4b2a      	ldr	r3, [pc, #168]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000410:	4b28      	ldr	r3, [pc, #160]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000416:	4b27      	ldr	r3, [pc, #156]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000418:	2200      	movs	r2, #0
 800041a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800041c:	4b25      	ldr	r3, [pc, #148]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 800041e:	2200      	movs	r2, #0
 8000420:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000424:	4b23      	ldr	r3, [pc, #140]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000426:	2200      	movs	r2, #0
 8000428:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800042a:	4b22      	ldr	r3, [pc, #136]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 800042c:	2201      	movs	r2, #1
 800042e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000430:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000436:	4b1f      	ldr	r3, [pc, #124]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000438:	2201      	movs	r2, #1
 800043a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800043c:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 800043e:	2200      	movs	r2, #0
 8000440:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000446:	2204      	movs	r2, #4
 8000448:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 800044c:	2200      	movs	r2, #0
 800044e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000450:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000452:	2200      	movs	r2, #0
 8000454:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000456:	4817      	ldr	r0, [pc, #92]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000458:	f001 fcd4 	bl	8001e04 <HAL_ADC_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000462:	f000 fd81 	bl	8000f68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800046a:	f107 031c 	add.w	r3, r7, #28
 800046e:	4619      	mov	r1, r3
 8000470:	4810      	ldr	r0, [pc, #64]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 8000472:	f002 fc9f 	bl	8002db4 <HAL_ADCEx_MultiModeConfigChannel>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800047c:	f000 fd74 	bl	8000f68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000480:	2305      	movs	r3, #5
 8000482:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000484:	2301      	movs	r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <MX_ADC1_Init+0xdc>)
 800049e:	f002 f99f 	bl	80027e0 <HAL_ADC_ConfigChannel>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80004a8:	f000 fd5e 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3728      	adds	r7, #40	@ 0x28
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	200003fc 	.word	0x200003fc

080004b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
 80004cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80004ce:	4b27      	ldr	r3, [pc, #156]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004d0:	4a27      	ldr	r2, [pc, #156]	@ (8000570 <MX_ADC2_Init+0xb8>)
 80004d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004d4:	4b25      	ldr	r3, [pc, #148]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004dc:	4b23      	ldr	r3, [pc, #140]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004e2:	4b22      	ldr	r3, [pc, #136]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004e8:	4b20      	ldr	r3, [pc, #128]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004ee:	4b1f      	ldr	r3, [pc, #124]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f6:	4b1d      	ldr	r3, [pc, #116]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <MX_ADC2_Init+0xb4>)
 80004fe:	2201      	movs	r2, #1
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000502:	4b1a      	ldr	r3, [pc, #104]	@ (800056c <MX_ADC2_Init+0xb4>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000508:	4b18      	ldr	r3, [pc, #96]	@ (800056c <MX_ADC2_Init+0xb4>)
 800050a:	2201      	movs	r2, #1
 800050c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800050e:	4b17      	ldr	r3, [pc, #92]	@ (800056c <MX_ADC2_Init+0xb4>)
 8000510:	2200      	movs	r2, #0
 8000512:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000516:	4b15      	ldr	r3, [pc, #84]	@ (800056c <MX_ADC2_Init+0xb4>)
 8000518:	2204      	movs	r2, #4
 800051a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800051c:	4b13      	ldr	r3, [pc, #76]	@ (800056c <MX_ADC2_Init+0xb4>)
 800051e:	2200      	movs	r2, #0
 8000520:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000522:	4b12      	ldr	r3, [pc, #72]	@ (800056c <MX_ADC2_Init+0xb4>)
 8000524:	2200      	movs	r2, #0
 8000526:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000528:	4810      	ldr	r0, [pc, #64]	@ (800056c <MX_ADC2_Init+0xb4>)
 800052a:	f001 fc6b 	bl	8001e04 <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000534:	f000 fd18 	bl	8000f68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000538:	2303      	movs	r3, #3
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	4619      	mov	r1, r3
 8000554:	4805      	ldr	r0, [pc, #20]	@ (800056c <MX_ADC2_Init+0xb4>)
 8000556:	f002 f943 	bl	80027e0 <HAL_ADC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000560:	f000 fd02 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000044c 	.word	0x2000044c
 8000570:	50000100 	.word	0x50000100

08000574 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	@ 0x28
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
 8000594:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000596:	4b2e      	ldr	r3, [pc, #184]	@ (8000650 <MX_ADC3_Init+0xdc>)
 8000598:	4a2e      	ldr	r2, [pc, #184]	@ (8000654 <MX_ADC3_Init+0xe0>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800059c:	4b2c      	ldr	r3, [pc, #176]	@ (8000650 <MX_ADC3_Init+0xdc>)
 800059e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005aa:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005b0:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005b6:	4b26      	ldr	r3, [pc, #152]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005be:	4b24      	ldr	r3, [pc, #144]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c4:	4b22      	ldr	r3, [pc, #136]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ca:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005f0:	4817      	ldr	r0, [pc, #92]	@ (8000650 <MX_ADC3_Init+0xdc>)
 80005f2:	f001 fc07 	bl	8001e04 <HAL_ADC_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 80005fc:	f000 fcb4 	bl	8000f68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4619      	mov	r1, r3
 800060a:	4811      	ldr	r0, [pc, #68]	@ (8000650 <MX_ADC3_Init+0xdc>)
 800060c:	f002 fbd2 	bl	8002db4 <HAL_ADCEx_MultiModeConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 8000616:	f000 fca7 	bl	8000f68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800061a:	2301      	movs	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061e:	2301      	movs	r3, #1
 8000620:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	@ (8000650 <MX_ADC3_Init+0xdc>)
 8000638:	f002 f8d2 	bl	80027e0 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000642:	f000 fc91 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	@ 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000049c 	.word	0x2000049c
 8000654:	50000400 	.word	0x50000400

08000658 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800066e:	4b27      	ldr	r3, [pc, #156]	@ (800070c <MX_ADC4_Init+0xb4>)
 8000670:	4a27      	ldr	r2, [pc, #156]	@ (8000710 <MX_ADC4_Init+0xb8>)
 8000672:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000674:	4b25      	ldr	r3, [pc, #148]	@ (800070c <MX_ADC4_Init+0xb4>)
 8000676:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800067a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800067c:	4b23      	ldr	r3, [pc, #140]	@ (800070c <MX_ADC4_Init+0xb4>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000682:	4b22      	ldr	r3, [pc, #136]	@ (800070c <MX_ADC4_Init+0xb4>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000688:	4b20      	ldr	r3, [pc, #128]	@ (800070c <MX_ADC4_Init+0xb4>)
 800068a:	2200      	movs	r2, #0
 800068c:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800068e:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <MX_ADC4_Init+0xb4>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000696:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <MX_ADC4_Init+0xb4>)
 8000698:	2200      	movs	r2, #0
 800069a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069c:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <MX_ADC4_Init+0xb4>)
 800069e:	2201      	movs	r2, #1
 80006a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80006a8:	4b18      	ldr	r3, [pc, #96]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80006ae:	4b17      	ldr	r3, [pc, #92]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b15      	ldr	r3, [pc, #84]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80006c8:	4810      	ldr	r0, [pc, #64]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006ca:	f001 fb9b 	bl	8001e04 <HAL_ADC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 80006d4:	f000 fc48 	bl	8000f68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006d8:	2303      	movs	r3, #3
 80006da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006dc:	2301      	movs	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_ADC4_Init+0xb4>)
 80006f6:	f002 f873 	bl	80027e0 <HAL_ADC_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 8000700:	f000 fc32 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200004ec 	.word	0x200004ec
 8000710:	50000500 	.word	0x50000500

08000714 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_COMP3_Init+0x54>)
 800071a:	4a14      	ldr	r2, [pc, #80]	@ (800076c <MX_COMP3_Init+0x58>)
 800071c:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000720:	2240      	movs	r2, #64	@ 0x40
 8000722:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000724:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_COMP3_Init+0x54>)
 800072c:	227f      	movs	r2, #127	@ 0x7f
 800072e:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000730:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_COMP3_Init+0x54>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  hcomp3.Init.Mode = COMP_MODE_HIGHSPEED;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hcomp3.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_COMP3_Init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_COMP3_Init+0x54>)
 8000756:	f002 fc85 	bl	8003064 <HAL_COMP_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_COMP3_Init+0x50>
  {
    Error_Handler();
 8000760:	f000 fc02 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000064c 	.word	0x2000064c
 800076c:	40010024 	.word	0x40010024

08000770 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <MX_COMP4_Init+0x54>)
 8000776:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <MX_COMP4_Init+0x58>)
 8000778:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_COMP4_Init+0x54>)
 800077c:	2270      	movs	r2, #112	@ 0x70
 800077e:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_COMP4_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_NONE;
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_COMP4_Init+0x54>)
 8000788:	227f      	movs	r2, #127	@ 0x7f
 800078a:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <MX_COMP4_Init+0x54>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_COMP4_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_COMP4_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_COMP4_Init+0x54>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <MX_COMP4_Init+0x54>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_COMP4_Init+0x54>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_COMP4_Init+0x54>)
 80007b2:	f002 fc57 	bl	8003064 <HAL_COMP_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_COMP4_Init+0x50>
  {
    Error_Handler();
 80007bc:	f000 fbd4 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000067c 	.word	0x2000067c
 80007c8:	40010028 	.word	0x40010028

080007cc <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 80007d0:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007d2:	4a14      	ldr	r2, [pc, #80]	@ (8000824 <MX_COMP5_Init+0x58>)
 80007d4:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH2;
 80007d6:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007d8:	2250      	movs	r2, #80	@ 0x50
 80007da:	605a      	str	r2, [r3, #4]
  hcomp5.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 80007dc:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007de:	2280      	movs	r2, #128	@ 0x80
 80007e0:	609a      	str	r2, [r3, #8]
  hcomp5.Init.Output = COMP_OUTPUT_NONE;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007e4:	227f      	movs	r2, #127	@ 0x7f
 80007e6:	60da      	str	r2, [r3, #12]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hcomp5.Init.Mode = COMP_MODE_HIGHSPEED;
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_COMP5_Init+0x54>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hcomp5.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <MX_COMP5_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_COMP5_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_COMP5_Init+0x54>)
 800080e:	f002 fc29 	bl	8003064 <HAL_COMP_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_COMP5_Init+0x50>
  {
    Error_Handler();
 8000818:	f000 fba6 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200006ac 	.word	0x200006ac
 8000824:	4001002c 	.word	0x4001002c

08000828 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 800082c:	4b13      	ldr	r3, [pc, #76]	@ (800087c <MX_COMP6_Init+0x54>)
 800082e:	4a14      	ldr	r2, [pc, #80]	@ (8000880 <MX_COMP6_Init+0x58>)
 8000830:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_COMP6_Init+0x54>)
 8000834:	2270      	movs	r2, #112	@ 0x70
 8000836:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8000838:	4b10      	ldr	r3, [pc, #64]	@ (800087c <MX_COMP6_Init+0x54>)
 800083a:	2280      	movs	r2, #128	@ 0x80
 800083c:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_NONE;
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_COMP6_Init+0x54>)
 8000840:	227f      	movs	r2, #127	@ 0x7f
 8000842:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000844:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <MX_COMP6_Init+0x54>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_COMP6_Init+0x54>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <MX_COMP6_Init+0x54>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hcomp6.Init.Mode = COMP_MODE_HIGHSPEED;
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_COMP6_Init+0x54>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hcomp6.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	@ (800087c <MX_COMP6_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_COMP6_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	@ (800087c <MX_COMP6_Init+0x54>)
 800086a:	f002 fbfb 	bl	8003064 <HAL_COMP_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_COMP6_Init+0x50>
  {
    Error_Handler();
 8000874:	f000 fb78 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200006dc 	.word	0x200006dc
 8000880:	40010030 	.word	0x40010030

08000884 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000888:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_I2C2_Init+0x74>)
 800088a:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <MX_I2C2_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 800088e:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <MX_I2C2_Init+0x74>)
 8000890:	4a1b      	ldr	r2, [pc, #108]	@ (8000900 <MX_I2C2_Init+0x7c>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_I2C2_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <MX_I2C2_Init+0x74>)
 800089c:	2201      	movs	r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008be:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008c0:	f003 f82c 	bl	800391c <HAL_I2C_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ca:	f000 fb4d 	bl	8000f68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4809      	ldr	r0, [pc, #36]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008d2:	f003 fc41 	bl	8004158 <HAL_I2CEx_ConfigAnalogFilter>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008dc:	f000 fb44 	bl	8000f68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_I2C2_Init+0x74>)
 80008e4:	f003 fc83 	bl	80041ee <HAL_I2CEx_ConfigDigitalFilter>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f000 fb3b 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000070c 	.word	0x2000070c
 80008fc:	40005800 	.word	0x40005800
 8000900:	00201d2b 	.word	0x00201d2b

08000904 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_SPI1_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <MX_SPI1_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000910:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000914:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800091c:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_SPI1_Init+0x74>)
 800091e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000922:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092a:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_SPI1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000936:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_SPI1_Init+0x74>)
 800093a:	2208      	movs	r2, #8
 800093c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_SPI1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000952:	2207      	movs	r2, #7
 8000954:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_SPI1_Init+0x74>)
 800095e:	2208      	movs	r2, #8
 8000960:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_SPI1_Init+0x74>)
 8000964:	f006 fd78 	bl	8007458 <HAL_SPI_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 fafb 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000760 	.word	0x20000760
 800097c:	40013000 	.word	0x40013000

08000980 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000984:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <MX_SPI3_Init+0x74>)
 8000986:	4a1c      	ldr	r2, [pc, #112]	@ (80009f8 <MX_SPI3_Init+0x78>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800098a:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <MX_SPI3_Init+0x74>)
 800098c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000990:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_SPI3_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <MX_SPI3_Init+0x74>)
 800099a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800099e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a6:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009b6:	2220      	movs	r2, #32
 80009b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009ce:	2207      	movs	r2, #7
 80009d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009da:	2208      	movs	r2, #8
 80009dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_SPI3_Init+0x74>)
 80009e0:	f006 fd3a 	bl	8007458 <HAL_SPI_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 fabd 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200007c4 	.word	0x200007c4
 80009f8:	40003c00 	.word	0x40003c00

080009fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_DMA_Init+0x80>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	4a1d      	ldr	r2, [pc, #116]	@ (8000a7c <MX_DMA_Init+0x80>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6153      	str	r3, [r2, #20]
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_DMA_Init+0x80>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_DMA_Init+0x80>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	4a17      	ldr	r2, [pc, #92]	@ (8000a7c <MX_DMA_Init+0x80>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6153      	str	r3, [r2, #20]
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_DMA_Init+0x80>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2105      	movs	r1, #5
 8000a36:	200b      	movs	r0, #11
 8000a38:	f002 fc76 	bl	8003328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a3c:	200b      	movs	r0, #11
 8000a3e:	f002 fc8f 	bl	8003360 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2105      	movs	r1, #5
 8000a46:	2038      	movs	r0, #56	@ 0x38
 8000a48:	f002 fc6e 	bl	8003328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000a4c:	2038      	movs	r0, #56	@ 0x38
 8000a4e:	f002 fc87 	bl	8003360 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2105      	movs	r1, #5
 8000a56:	2039      	movs	r0, #57	@ 0x39
 8000a58:	f002 fc66 	bl	8003328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000a5c:	2039      	movs	r0, #57	@ 0x39
 8000a5e:	f002 fc7f 	bl	8003360 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2105      	movs	r1, #5
 8000a66:	203c      	movs	r0, #60	@ 0x3c
 8000a68:	f002 fc5e 	bl	8003328 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000a6c:	203c      	movs	r0, #60	@ 0x3c
 8000a6e:	f002 fc77 	bl	8003360 <HAL_NVIC_EnableIRQ>

}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	4b58      	ldr	r3, [pc, #352]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a57      	ldr	r2, [pc, #348]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000a9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b55      	ldr	r3, [pc, #340]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aae:	4b52      	ldr	r3, [pc, #328]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a51      	ldr	r2, [pc, #324]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000ab4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ab8:	6153      	str	r3, [r2, #20]
 8000aba:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b4c      	ldr	r3, [pc, #304]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	4a4b      	ldr	r2, [pc, #300]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad0:	6153      	str	r3, [r2, #20]
 8000ad2:	4b49      	ldr	r3, [pc, #292]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b46      	ldr	r3, [pc, #280]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	4a45      	ldr	r2, [pc, #276]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ae8:	6153      	str	r3, [r2, #20]
 8000aea:	4b43      	ldr	r3, [pc, #268]	@ (8000bf8 <MX_GPIO_Init+0x178>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_COM_GPIO_Port, INPUT_COM_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2102      	movs	r1, #2
 8000afa:	4840      	ldr	r0, [pc, #256]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000afc:	f002 fef6 	bl	80038ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OFFSET_COM_Pin|TP906_Pin|TP907_Pin|MUX_A_Pin
 8000b00:	2200      	movs	r2, #0
 8000b02:	f640 31f1 	movw	r1, #3057	@ 0xbf1
 8000b06:	483e      	ldr	r0, [pc, #248]	@ (8000c00 <MX_GPIO_Init+0x180>)
 8000b08:	f002 fef0 	bl	80038ec <HAL_GPIO_WritePin>
                          |MUX_B_Pin|MUX_C_Pin|MUX_INHIBIT_Pin|UI_RCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP908_Pin|TX_SLEEP_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b16:	f002 fee9 	bl	80038ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP909_Pin|PUSH_2_Pin|TX_RCLK_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000b20:	4838      	ldr	r0, [pc, #224]	@ (8000c04 <MX_GPIO_Init+0x184>)
 8000b22:	f002 fee3 	bl	80038ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OFFSET_CENTER_Pin OFFSET_RIGHT_Pin OFFSET_UP_Pin SCALE_B_Pin
                           SCALE_A_Pin SCALE_PUSH_Pin */
  GPIO_InitStruct.Pin = OFFSET_CENTER_Pin|OFFSET_RIGHT_Pin|OFFSET_UP_Pin|SCALE_B_Pin
 8000b26:	f24e 030e 	movw	r3, #57358	@ 0xe00e
 8000b2a:	617b      	str	r3, [r7, #20]
                          |SCALE_A_Pin|SCALE_PUSH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4831      	ldr	r0, [pc, #196]	@ (8000c00 <MX_GPIO_Init+0x180>)
 8000b3c:	f002 fd44 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_COM_Pin */
  GPIO_InitStruct.Pin = INPUT_COM_Pin;
 8000b40:	2302      	movs	r3, #2
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_COM_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4829      	ldr	r0, [pc, #164]	@ (8000bfc <MX_GPIO_Init+0x17c>)
 8000b58:	f002 fd36 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OFFSET_COM_Pin TP906_Pin TP907_Pin MUX_A_Pin
                           MUX_B_Pin MUX_C_Pin MUX_INHIBIT_Pin UI_RCLK_Pin */
  GPIO_InitStruct.Pin = OFFSET_COM_Pin|TP906_Pin|TP907_Pin|MUX_A_Pin
 8000b5c:	f640 33f1 	movw	r3, #3057	@ 0xbf1
 8000b60:	617b      	str	r3, [r7, #20]
                          |MUX_B_Pin|MUX_C_Pin|MUX_INHIBIT_Pin|UI_RCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4822      	ldr	r0, [pc, #136]	@ (8000c00 <MX_GPIO_Init+0x180>)
 8000b76:	f002 fd27 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP908_Pin TX_SLEEP_Pin */
  GPIO_InitStruct.Pin = TP908_Pin|TX_SLEEP_Pin;
 8000b7a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b96:	f002 fd17 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP909_Pin PUSH_2_Pin TX_RCLK_Pin */
  GPIO_InitStruct.Pin = TP909_Pin|PUSH_2_Pin|TX_RCLK_Pin;
 8000b9a:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4814      	ldr	r0, [pc, #80]	@ (8000c04 <MX_GPIO_Init+0x184>)
 8000bb4:	f002 fd08 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_1_Pin */
  GPIO_InitStruct.Pin = PUSH_1_Pin;
 8000bb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_1_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd0:	f002 fcfa 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_3_Pin OFFSET_LEFT_Pin OFFSET_DOWN_Pin */
  GPIO_InitStruct.Pin = PUSH_3_Pin|OFFSET_LEFT_Pin|OFFSET_DOWN_Pin;
 8000bd4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4806      	ldr	r0, [pc, #24]	@ (8000c04 <MX_GPIO_Init+0x184>)
 8000bea:	f002 fced 	bl	80035c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	@ 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48001400 	.word	0x48001400
 8000c00:	48000800 	.word	0x48000800
 8000c04:	48000400 	.word	0x48000400

08000c08 <StartUSB_Transmit>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUSB_Transmit */
void StartUSB_Transmit(void const * argument)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c10:	f00c fb92 	bl	800d338 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  osDelay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f00b f9aa 	bl	800bf6e <osDelay>
  for(;;)
  {
	  osDelay(1);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f00b f9a7 	bl	800bf6e <osDelay>
	  if (CDC_Transmit_FS((uint8_t *) usbdata, strlen(usbdata)) != USBD_OK) {
 8000c20:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <StartUSB_Transmit+0x7c>)
 8000c22:	681c      	ldr	r4, [r3, #0]
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <StartUSB_Transmit+0x7c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fad1 	bl	80001d0 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4619      	mov	r1, r3
 8000c34:	4620      	mov	r0, r4
 8000c36:	f00c fc3d 	bl	800d4b4 <CDC_Transmit_FS>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d010      	beq.n	8000c62 <StartUSB_Transmit+0x5a>
		  ssd1306_Fill(White);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f000 fed1 	bl	80019e8 <ssd1306_Fill>
	  	  ssd1306_SetCursor(6, 20);
 8000c46:	2114      	movs	r1, #20
 8000c48:	2006      	movs	r0, #6
 8000c4a:	f001 f819 	bl	8001c80 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("COM not established", Font_6x8, Black);
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <StartUSB_Transmit+0x80>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	9200      	str	r2, [sp, #0]
 8000c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c56:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <StartUSB_Transmit+0x84>)
 8000c58:	f000 ffec 	bl	8001c34 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8000c5c:	f000 fedc 	bl	8001a18 <ssd1306_UpdateScreen>
 8000c60:	e7db      	b.n	8000c1a <StartUSB_Transmit+0x12>
	  }
	  else {
		  ssd1306_Fill(White);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f000 fec0 	bl	80019e8 <ssd1306_Fill>
	  	  ssd1306_SetCursor(6, 20);
 8000c68:	2114      	movs	r1, #20
 8000c6a:	2006      	movs	r0, #6
 8000c6c:	f001 f808 	bl	8001c80 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("COM established", Font_6x8, Black);
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <StartUSB_Transmit+0x80>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	9200      	str	r2, [sp, #0]
 8000c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c78:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <StartUSB_Transmit+0x88>)
 8000c7a:	f000 ffdb 	bl	8001c34 <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8000c7e:	f000 fecb 	bl	8001a18 <ssd1306_UpdateScreen>
	  osDelay(1);
 8000c82:	e7ca      	b.n	8000c1a <StartUSB_Transmit+0x12>
 8000c84:	20000000 	.word	0x20000000
 8000c88:	0800e44c 	.word	0x0800e44c
 8000c8c:	0800ddd0 	.word	0x0800ddd0
 8000c90:	0800dde4 	.word	0x0800dde4

08000c94 <StartLED_Write>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED_Write */
void StartLED_Write(void const * argument)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED_Write */
  /* Infinite loop */
  for(;;)
  {
	uint8_t current_leds = led_status & 0b11110000;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <StartLED_Write+0x48>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	f023 030f 	bic.w	r3, r3, #15
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi3, &current_leds, 1, HAL_MAX_DELAY);
 8000ca8:	f107 010f 	add.w	r1, r7, #15
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <StartLED_Write+0x4c>)
 8000cb4:	f006 fc7b 	bl	80075ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, UI_RCLK_Pin, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cbe:	4809      	ldr	r0, [pc, #36]	@ (8000ce4 <StartLED_Write+0x50>)
 8000cc0:	f002 fe14 	bl	80038ec <HAL_GPIO_WritePin>
    osDelay(1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f00b f952 	bl	800bf6e <osDelay>
	HAL_GPIO_WritePin(GPIOC, UI_RCLK_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <StartLED_Write+0x50>)
 8000cd2:	f002 fe0b 	bl	80038ec <HAL_GPIO_WritePin>
  {
 8000cd6:	bf00      	nop
 8000cd8:	e7e0      	b.n	8000c9c <StartLED_Write+0x8>
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	200007c4 	.word	0x200007c4
 8000ce4:	48000800 	.word	0x48000800

08000ce8 <StartUI_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUI_Read */
void StartUI_Read(void const * argument)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUI_Read */
  HAL_GPIO_WritePin(GPIOC, OFFSET_COM_Pin, GPIO_PIN_SET);  // Encoder 1 COM
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	487b      	ldr	r0, [pc, #492]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000cf6:	f002 fdf9 	bl	80038ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, INPUT_COM_Pin, GPIO_PIN_SET);  // Encoder 2 COM
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	487a      	ldr	r0, [pc, #488]	@ (8000ee8 <StartUI_Read+0x200>)
 8000d00:	f002 fdf4 	bl	80038ec <HAL_GPIO_WritePin>

  /* Infinite loop */
  for(;;)
  {
      /* --- Rotary Encoder 1 --- */
      HAL_GPIO_WritePin(GPIOC, OFFSET_COM_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2101      	movs	r1, #1
 8000d08:	4876      	ldr	r0, [pc, #472]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000d0a:	f002 fdef 	bl	80038ec <HAL_GPIO_WritePin>
      osDelay(1);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f00b f92d 	bl	800bf6e <osDelay>
      a1 = HAL_GPIO_ReadPin(GPIOC, SCALE_A_Pin);
 8000d14:	2104      	movs	r1, #4
 8000d16:	4873      	ldr	r0, [pc, #460]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000d18:	f002 fdd0 	bl	80038bc <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b72      	ldr	r3, [pc, #456]	@ (8000eec <StartUI_Read+0x204>)
 8000d22:	701a      	strb	r2, [r3, #0]
      b1 = HAL_GPIO_ReadPin(GPIOC, SCALE_B_Pin);
 8000d24:	2102      	movs	r1, #2
 8000d26:	486f      	ldr	r0, [pc, #444]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000d28:	f002 fdc8 	bl	80038bc <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b6f      	ldr	r3, [pc, #444]	@ (8000ef0 <StartUI_Read+0x208>)
 8000d32:	701a      	strb	r2, [r3, #0]
      encoder1_button_state = HAL_GPIO_ReadPin(GPIOC, SCALE_PUSH_Pin); // Example button pin
 8000d34:	2108      	movs	r1, #8
 8000d36:	486b      	ldr	r0, [pc, #428]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000d38:	f002 fdc0 	bl	80038bc <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b6c      	ldr	r3, [pc, #432]	@ (8000ef4 <StartUI_Read+0x20c>)
 8000d42:	701a      	strb	r2, [r3, #0]

      if(a1 != last_a_encoder1) {
 8000d44:	4b69      	ldr	r3, [pc, #420]	@ (8000eec <StartUI_Read+0x204>)
 8000d46:	781a      	ldrb	r2, [r3, #0]
 8000d48:	4b6b      	ldr	r3, [pc, #428]	@ (8000ef8 <StartUI_Read+0x210>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d00e      	beq.n	8000d6e <StartUI_Read+0x86>
        encoder1_count += (b1 != a1) ? 1 : -1;
 8000d50:	4b67      	ldr	r3, [pc, #412]	@ (8000ef0 <StartUI_Read+0x208>)
 8000d52:	781a      	ldrb	r2, [r3, #0]
 8000d54:	4b65      	ldr	r3, [pc, #404]	@ (8000eec <StartUI_Read+0x204>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d001      	beq.n	8000d60 <StartUI_Read+0x78>
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	e001      	b.n	8000d64 <StartUI_Read+0x7c>
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	4b65      	ldr	r3, [pc, #404]	@ (8000efc <StartUI_Read+0x214>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a64      	ldr	r2, [pc, #400]	@ (8000efc <StartUI_Read+0x214>)
 8000d6c:	6013      	str	r3, [r2, #0]
      }
      last_a_encoder1 = a1;
 8000d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000eec <StartUI_Read+0x204>)
 8000d70:	781a      	ldrb	r2, [r3, #0]
 8000d72:	4b61      	ldr	r3, [pc, #388]	@ (8000ef8 <StartUI_Read+0x210>)
 8000d74:	701a      	strb	r2, [r3, #0]

      /* --- D-Pad 2 --- */
      dpad2_up = HAL_GPIO_ReadPin(GPIOC, OFFSET_UP_Pin);
 8000d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d7a:	485a      	ldr	r0, [pc, #360]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000d7c:	f002 fd9e 	bl	80038bc <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b5e      	ldr	r3, [pc, #376]	@ (8000f00 <StartUI_Read+0x218>)
 8000d86:	701a      	strb	r2, [r3, #0]
      dpad2_down = HAL_GPIO_ReadPin(GPIOB, OFFSET_DOWN_Pin);
 8000d88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8c:	485d      	ldr	r0, [pc, #372]	@ (8000f04 <StartUI_Read+0x21c>)
 8000d8e:	f002 fd95 	bl	80038bc <HAL_GPIO_ReadPin>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b5c      	ldr	r3, [pc, #368]	@ (8000f08 <StartUI_Read+0x220>)
 8000d98:	701a      	strb	r2, [r3, #0]
      dpad2_left = HAL_GPIO_ReadPin(GPIOB, OFFSET_LEFT_Pin);
 8000d9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d9e:	4859      	ldr	r0, [pc, #356]	@ (8000f04 <StartUI_Read+0x21c>)
 8000da0:	f002 fd8c 	bl	80038bc <HAL_GPIO_ReadPin>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b58      	ldr	r3, [pc, #352]	@ (8000f0c <StartUI_Read+0x224>)
 8000daa:	701a      	strb	r2, [r3, #0]
      dpad2_right = HAL_GPIO_ReadPin(GPIOC, OFFSET_RIGHT_Pin);
 8000dac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000db0:	484c      	ldr	r0, [pc, #304]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000db2:	f002 fd83 	bl	80038bc <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b55      	ldr	r3, [pc, #340]	@ (8000f10 <StartUI_Read+0x228>)
 8000dbc:	701a      	strb	r2, [r3, #0]
      dpad2_button = HAL_GPIO_ReadPin(GPIOC, OFFSET_CENTER_Pin);
 8000dbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dc2:	4848      	ldr	r0, [pc, #288]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000dc4:	f002 fd7a 	bl	80038bc <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b51      	ldr	r3, [pc, #324]	@ (8000f14 <StartUI_Read+0x22c>)
 8000dce:	701a      	strb	r2, [r3, #0]

      HAL_GPIO_WritePin(GPIOC, OFFSET_COM_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4843      	ldr	r0, [pc, #268]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000dd6:	f002 fd89 	bl	80038ec <HAL_GPIO_WritePin>
      osDelay(1);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f00b f8c7 	bl	800bf6e <osDelay>

      /* --- Rotary Encoder 2 --- */
      HAL_GPIO_WritePin(GPIOF, INPUT_COM_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2102      	movs	r1, #2
 8000de4:	4840      	ldr	r0, [pc, #256]	@ (8000ee8 <StartUI_Read+0x200>)
 8000de6:	f002 fd81 	bl	80038ec <HAL_GPIO_WritePin>
      osDelay(1);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f00b f8bf 	bl	800bf6e <osDelay>
      uint8_t a2 = HAL_GPIO_ReadPin(GPIOC, SCALE_A_Pin);
 8000df0:	2104      	movs	r1, #4
 8000df2:	483c      	ldr	r0, [pc, #240]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000df4:	f002 fd62 	bl	80038bc <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	73fb      	strb	r3, [r7, #15]
      uint8_t b2 = HAL_GPIO_ReadPin(GPIOC, SCALE_B_Pin);
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	4839      	ldr	r0, [pc, #228]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000e00:	f002 fd5c 	bl	80038bc <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73bb      	strb	r3, [r7, #14]
      encoder2_button_state = HAL_GPIO_ReadPin(GPIOC, SCALE_PUSH_Pin); // Example button pin
 8000e08:	2108      	movs	r1, #8
 8000e0a:	4836      	ldr	r0, [pc, #216]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000e0c:	f002 fd56 	bl	80038bc <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <StartUI_Read+0x230>)
 8000e16:	701a      	strb	r2, [r3, #0]

      if(a2 != last_a_encoder2) {
 8000e18:	4b40      	ldr	r3, [pc, #256]	@ (8000f1c <StartUI_Read+0x234>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d00c      	beq.n	8000e3c <StartUI_Read+0x154>
        encoder2_count += (b2 != a2) ? 1 : -1;
 8000e22:	7bba      	ldrb	r2, [r7, #14]
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d001      	beq.n	8000e2e <StartUI_Read+0x146>
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	e001      	b.n	8000e32 <StartUI_Read+0x14a>
 8000e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e32:	4b3b      	ldr	r3, [pc, #236]	@ (8000f20 <StartUI_Read+0x238>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a39      	ldr	r2, [pc, #228]	@ (8000f20 <StartUI_Read+0x238>)
 8000e3a:	6013      	str	r3, [r2, #0]
      }
      last_a_encoder2 = a2;
 8000e3c:	4a37      	ldr	r2, [pc, #220]	@ (8000f1c <StartUI_Read+0x234>)
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	7013      	strb	r3, [r2, #0]

      /* --- D-Pad 1 --- */
      dpad1_up = HAL_GPIO_ReadPin(GPIOC, OFFSET_UP_Pin);
 8000e42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e46:	4827      	ldr	r0, [pc, #156]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000e48:	f002 fd38 	bl	80038bc <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b34      	ldr	r3, [pc, #208]	@ (8000f24 <StartUI_Read+0x23c>)
 8000e52:	701a      	strb	r2, [r3, #0]
      dpad1_down = HAL_GPIO_ReadPin(GPIOB, OFFSET_DOWN_Pin);
 8000e54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e58:	482a      	ldr	r0, [pc, #168]	@ (8000f04 <StartUI_Read+0x21c>)
 8000e5a:	f002 fd2f 	bl	80038bc <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b31      	ldr	r3, [pc, #196]	@ (8000f28 <StartUI_Read+0x240>)
 8000e64:	701a      	strb	r2, [r3, #0]
      dpad1_left = HAL_GPIO_ReadPin(GPIOB, OFFSET_LEFT_Pin);
 8000e66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e6a:	4826      	ldr	r0, [pc, #152]	@ (8000f04 <StartUI_Read+0x21c>)
 8000e6c:	f002 fd26 	bl	80038bc <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b2d      	ldr	r3, [pc, #180]	@ (8000f2c <StartUI_Read+0x244>)
 8000e76:	701a      	strb	r2, [r3, #0]
      dpad1_right = HAL_GPIO_ReadPin(GPIOC, OFFSET_RIGHT_Pin);
 8000e78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e7c:	4819      	ldr	r0, [pc, #100]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000e7e:	f002 fd1d 	bl	80038bc <HAL_GPIO_ReadPin>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b2a      	ldr	r3, [pc, #168]	@ (8000f30 <StartUI_Read+0x248>)
 8000e88:	701a      	strb	r2, [r3, #0]
      dpad1_button = HAL_GPIO_ReadPin(GPIOC, OFFSET_CENTER_Pin);
 8000e8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e8e:	4815      	ldr	r0, [pc, #84]	@ (8000ee4 <StartUI_Read+0x1fc>)
 8000e90:	f002 fd14 	bl	80038bc <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <StartUI_Read+0x24c>)
 8000e9a:	701a      	strb	r2, [r3, #0]

      HAL_GPIO_WritePin(GPIOF, INPUT_COM_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	4811      	ldr	r0, [pc, #68]	@ (8000ee8 <StartUI_Read+0x200>)
 8000ea2:	f002 fd23 	bl	80038ec <HAL_GPIO_WritePin>
      osDelay(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f00b f861 	bl	800bf6e <osDelay>

      /* --- Standalone Buttons --- */
      button1_state = HAL_GPIO_ReadPin(GPIOA, PUSH_1_Pin);
 8000eac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb4:	f002 fd02 	bl	80038bc <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <StartUI_Read+0x250>)
 8000ebe:	701a      	strb	r2, [r3, #0]
      button2_state = HAL_GPIO_ReadPin(GPIOB, PUSH_2_Pin);
 8000ec0:	2110      	movs	r1, #16
 8000ec2:	4810      	ldr	r0, [pc, #64]	@ (8000f04 <StartUI_Read+0x21c>)
 8000ec4:	f002 fcfa 	bl	80038bc <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <StartUI_Read+0x254>)
 8000ece:	701a      	strb	r2, [r3, #0]
      button3_state = HAL_GPIO_ReadPin(GPIOB, PUSH_3_Pin);
 8000ed0:	2180      	movs	r1, #128	@ 0x80
 8000ed2:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <StartUI_Read+0x21c>)
 8000ed4:	f002 fcf2 	bl	80038bc <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <StartUI_Read+0x258>)
 8000ede:	701a      	strb	r2, [r3, #0]
  {
 8000ee0:	e710      	b.n	8000d04 <StartUI_Read+0x1c>
 8000ee2:	bf00      	nop
 8000ee4:	48000800 	.word	0x48000800
 8000ee8:	48001400 	.word	0x48001400
 8000eec:	2000084d 	.word	0x2000084d
 8000ef0:	2000084e 	.word	0x2000084e
 8000ef4:	20000841 	.word	0x20000841
 8000ef8:	2000083c 	.word	0x2000083c
 8000efc:	20000834 	.word	0x20000834
 8000f00:	20000848 	.word	0x20000848
 8000f04:	48000400 	.word	0x48000400
 8000f08:	20000849 	.word	0x20000849
 8000f0c:	2000084a 	.word	0x2000084a
 8000f10:	2000084b 	.word	0x2000084b
 8000f14:	2000084c 	.word	0x2000084c
 8000f18:	20000842 	.word	0x20000842
 8000f1c:	2000083d 	.word	0x2000083d
 8000f20:	20000838 	.word	0x20000838
 8000f24:	20000843 	.word	0x20000843
 8000f28:	20000844 	.word	0x20000844
 8000f2c:	20000845 	.word	0x20000845
 8000f30:	20000846 	.word	0x20000846
 8000f34:	20000847 	.word	0x20000847
 8000f38:	2000083e 	.word	0x2000083e
 8000f3c:	2000083f 	.word	0x2000083f
 8000f40:	20000840 	.word	0x20000840

08000f44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f56:	f000 fef3 	bl	8001d40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40012c00 	.word	0x40012c00

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <Error_Handler+0x8>

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a10      	ldr	r2, [pc, #64]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	61d3      	str	r3, [r2, #28]
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <HAL_MspInit+0x4c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	210f      	movs	r1, #15
 8000fae:	f06f 0001 	mvn.w	r0, #1
 8000fb2:	f002 f9b9 	bl	8003328 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b090      	sub	sp, #64	@ 0x40
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fe4:	d15e      	bne.n	80010a4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fe6:	4b94      	ldr	r3, [pc, #592]	@ (8001238 <HAL_ADC_MspInit+0x274>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	3301      	adds	r3, #1
 8000fec:	4a92      	ldr	r2, [pc, #584]	@ (8001238 <HAL_ADC_MspInit+0x274>)
 8000fee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ff0:	4b91      	ldr	r3, [pc, #580]	@ (8001238 <HAL_ADC_MspInit+0x274>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d10b      	bne.n	8001010 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ff8:	4b90      	ldr	r3, [pc, #576]	@ (800123c <HAL_ADC_MspInit+0x278>)
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	4a8f      	ldr	r2, [pc, #572]	@ (800123c <HAL_ADC_MspInit+0x278>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001002:	6153      	str	r3, [r2, #20]
 8001004:	4b8d      	ldr	r3, [pc, #564]	@ (800123c <HAL_ADC_MspInit+0x278>)
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800100e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001010:	4b8a      	ldr	r3, [pc, #552]	@ (800123c <HAL_ADC_MspInit+0x278>)
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	4a89      	ldr	r2, [pc, #548]	@ (800123c <HAL_ADC_MspInit+0x278>)
 8001016:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800101a:	6153      	str	r3, [r2, #20]
 800101c:	4b87      	ldr	r3, [pc, #540]	@ (800123c <HAL_ADC_MspInit+0x278>)
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = RX1_ADC_Pin;
 8001028:	2310      	movs	r3, #16
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102c:	2303      	movs	r3, #3
 800102e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX1_ADC_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001038:	4619      	mov	r1, r3
 800103a:	4881      	ldr	r0, [pc, #516]	@ (8001240 <HAL_ADC_MspInit+0x27c>)
 800103c:	f002 fac4 	bl	80035c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001040:	4b80      	ldr	r3, [pc, #512]	@ (8001244 <HAL_ADC_MspInit+0x280>)
 8001042:	4a81      	ldr	r2, [pc, #516]	@ (8001248 <HAL_ADC_MspInit+0x284>)
 8001044:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001046:	4b7f      	ldr	r3, [pc, #508]	@ (8001244 <HAL_ADC_MspInit+0x280>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104c:	4b7d      	ldr	r3, [pc, #500]	@ (8001244 <HAL_ADC_MspInit+0x280>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001052:	4b7c      	ldr	r3, [pc, #496]	@ (8001244 <HAL_ADC_MspInit+0x280>)
 8001054:	2280      	movs	r2, #128	@ 0x80
 8001056:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001058:	4b7a      	ldr	r3, [pc, #488]	@ (8001244 <HAL_ADC_MspInit+0x280>)
 800105a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800105e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001060:	4b78      	ldr	r3, [pc, #480]	@ (8001244 <HAL_ADC_MspInit+0x280>)
 8001062:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001066:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001068:	4b76      	ldr	r3, [pc, #472]	@ (8001244 <HAL_ADC_MspInit+0x280>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800106e:	4b75      	ldr	r3, [pc, #468]	@ (8001244 <HAL_ADC_MspInit+0x280>)
 8001070:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001074:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001076:	4873      	ldr	r0, [pc, #460]	@ (8001244 <HAL_ADC_MspInit+0x280>)
 8001078:	f002 f980 	bl	800337c <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001082:	f7ff ff71 	bl	8000f68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a6e      	ldr	r2, [pc, #440]	@ (8001244 <HAL_ADC_MspInit+0x280>)
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
 800108c:	4a6d      	ldr	r2, [pc, #436]	@ (8001244 <HAL_ADC_MspInit+0x280>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2105      	movs	r1, #5
 8001096:	2012      	movs	r0, #18
 8001098:	f002 f946 	bl	8003328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800109c:	2012      	movs	r0, #18
 800109e:	f002 f95f 	bl	8003360 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80010a2:	e147      	b.n	8001334 <HAL_ADC_MspInit+0x370>
  else if(hadc->Instance==ADC2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a68      	ldr	r2, [pc, #416]	@ (800124c <HAL_ADC_MspInit+0x288>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d15f      	bne.n	800116e <HAL_ADC_MspInit+0x1aa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80010ae:	4b62      	ldr	r3, [pc, #392]	@ (8001238 <HAL_ADC_MspInit+0x274>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a60      	ldr	r2, [pc, #384]	@ (8001238 <HAL_ADC_MspInit+0x274>)
 80010b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80010b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001238 <HAL_ADC_MspInit+0x274>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10b      	bne.n	80010d8 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010c0:	4b5e      	ldr	r3, [pc, #376]	@ (800123c <HAL_ADC_MspInit+0x278>)
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	4a5d      	ldr	r2, [pc, #372]	@ (800123c <HAL_ADC_MspInit+0x278>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	6153      	str	r3, [r2, #20]
 80010cc:	4b5b      	ldr	r3, [pc, #364]	@ (800123c <HAL_ADC_MspInit+0x278>)
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	623b      	str	r3, [r7, #32]
 80010d6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b58      	ldr	r3, [pc, #352]	@ (800123c <HAL_ADC_MspInit+0x278>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	4a57      	ldr	r2, [pc, #348]	@ (800123c <HAL_ADC_MspInit+0x278>)
 80010de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e2:	6153      	str	r3, [r2, #20]
 80010e4:	4b55      	ldr	r3, [pc, #340]	@ (800123c <HAL_ADC_MspInit+0x278>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = RX3_ADC_Pin;
 80010f0:	2340      	movs	r3, #64	@ 0x40
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f4:	2303      	movs	r3, #3
 80010f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX3_ADC_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001106:	f002 fa5f 	bl	80035c8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 800110a:	4b51      	ldr	r3, [pc, #324]	@ (8001250 <HAL_ADC_MspInit+0x28c>)
 800110c:	4a51      	ldr	r2, [pc, #324]	@ (8001254 <HAL_ADC_MspInit+0x290>)
 800110e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001110:	4b4f      	ldr	r3, [pc, #316]	@ (8001250 <HAL_ADC_MspInit+0x28c>)
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001116:	4b4e      	ldr	r3, [pc, #312]	@ (8001250 <HAL_ADC_MspInit+0x28c>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800111c:	4b4c      	ldr	r3, [pc, #304]	@ (8001250 <HAL_ADC_MspInit+0x28c>)
 800111e:	2280      	movs	r2, #128	@ 0x80
 8001120:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001122:	4b4b      	ldr	r3, [pc, #300]	@ (8001250 <HAL_ADC_MspInit+0x28c>)
 8001124:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001128:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800112a:	4b49      	ldr	r3, [pc, #292]	@ (8001250 <HAL_ADC_MspInit+0x28c>)
 800112c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001130:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001132:	4b47      	ldr	r3, [pc, #284]	@ (8001250 <HAL_ADC_MspInit+0x28c>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001138:	4b45      	ldr	r3, [pc, #276]	@ (8001250 <HAL_ADC_MspInit+0x28c>)
 800113a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800113e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001140:	4843      	ldr	r0, [pc, #268]	@ (8001250 <HAL_ADC_MspInit+0x28c>)
 8001142:	f002 f91b 	bl	800337c <HAL_DMA_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 800114c:	f7ff ff0c 	bl	8000f68 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3f      	ldr	r2, [pc, #252]	@ (8001250 <HAL_ADC_MspInit+0x28c>)
 8001154:	639a      	str	r2, [r3, #56]	@ 0x38
 8001156:	4a3e      	ldr	r2, [pc, #248]	@ (8001250 <HAL_ADC_MspInit+0x28c>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2105      	movs	r1, #5
 8001160:	2012      	movs	r0, #18
 8001162:	f002 f8e1 	bl	8003328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001166:	2012      	movs	r0, #18
 8001168:	f002 f8fa 	bl	8003360 <HAL_NVIC_EnableIRQ>
}
 800116c:	e0e2      	b.n	8001334 <HAL_ADC_MspInit+0x370>
  else if(hadc->Instance==ADC3)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a39      	ldr	r2, [pc, #228]	@ (8001258 <HAL_ADC_MspInit+0x294>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d179      	bne.n	800126c <HAL_ADC_MspInit+0x2a8>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8001178:	4b38      	ldr	r3, [pc, #224]	@ (800125c <HAL_ADC_MspInit+0x298>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a37      	ldr	r2, [pc, #220]	@ (800125c <HAL_ADC_MspInit+0x298>)
 8001180:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001182:	4b36      	ldr	r3, [pc, #216]	@ (800125c <HAL_ADC_MspInit+0x298>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d10b      	bne.n	80011a2 <HAL_ADC_MspInit+0x1de>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800118a:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <HAL_ADC_MspInit+0x278>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	4a2b      	ldr	r2, [pc, #172]	@ (800123c <HAL_ADC_MspInit+0x278>)
 8001190:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001194:	6153      	str	r3, [r2, #20]
 8001196:	4b29      	ldr	r3, [pc, #164]	@ (800123c <HAL_ADC_MspInit+0x278>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b26      	ldr	r3, [pc, #152]	@ (800123c <HAL_ADC_MspInit+0x278>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4a25      	ldr	r2, [pc, #148]	@ (800123c <HAL_ADC_MspInit+0x278>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ac:	6153      	str	r3, [r2, #20]
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <HAL_ADC_MspInit+0x278>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RX2_ADC_Pin;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011be:	2303      	movs	r3, #3
 80011c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX2_ADC_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ca:	4619      	mov	r1, r3
 80011cc:	4824      	ldr	r0, [pc, #144]	@ (8001260 <HAL_ADC_MspInit+0x29c>)
 80011ce:	f002 f9fb 	bl	80035c8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 80011d2:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <HAL_ADC_MspInit+0x2a0>)
 80011d4:	4a24      	ldr	r2, [pc, #144]	@ (8001268 <HAL_ADC_MspInit+0x2a4>)
 80011d6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d8:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <HAL_ADC_MspInit+0x2a0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80011de:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <HAL_ADC_MspInit+0x2a0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <HAL_ADC_MspInit+0x2a0>)
 80011e6:	2280      	movs	r2, #128	@ 0x80
 80011e8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <HAL_ADC_MspInit+0x2a0>)
 80011ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011f0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <HAL_ADC_MspInit+0x2a0>)
 80011f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011f8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <HAL_ADC_MspInit+0x2a0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001200:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_ADC_MspInit+0x2a0>)
 8001202:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001206:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001208:	4816      	ldr	r0, [pc, #88]	@ (8001264 <HAL_ADC_MspInit+0x2a0>)
 800120a:	f002 f8b7 	bl	800337c <HAL_DMA_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_ADC_MspInit+0x254>
      Error_Handler();
 8001214:	f7ff fea8 	bl	8000f68 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <HAL_ADC_MspInit+0x2a0>)
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38
 800121e:	4a11      	ldr	r2, [pc, #68]	@ (8001264 <HAL_ADC_MspInit+0x2a0>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 5, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2105      	movs	r1, #5
 8001228:	202f      	movs	r0, #47	@ 0x2f
 800122a:	f002 f87d 	bl	8003328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800122e:	202f      	movs	r0, #47	@ 0x2f
 8001230:	f002 f896 	bl	8003360 <HAL_NVIC_EnableIRQ>
}
 8001234:	e07e      	b.n	8001334 <HAL_ADC_MspInit+0x370>
 8001236:	bf00      	nop
 8001238:	20000850 	.word	0x20000850
 800123c:	40021000 	.word	0x40021000
 8001240:	48001400 	.word	0x48001400
 8001244:	2000053c 	.word	0x2000053c
 8001248:	40020008 	.word	0x40020008
 800124c:	50000100 	.word	0x50000100
 8001250:	20000580 	.word	0x20000580
 8001254:	40020408 	.word	0x40020408
 8001258:	50000400 	.word	0x50000400
 800125c:	20000854 	.word	0x20000854
 8001260:	48000400 	.word	0x48000400
 8001264:	200005c4 	.word	0x200005c4
 8001268:	40020458 	.word	0x40020458
  else if(hadc->Instance==ADC4)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a32      	ldr	r2, [pc, #200]	@ (800133c <HAL_ADC_MspInit+0x378>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d15e      	bne.n	8001334 <HAL_ADC_MspInit+0x370>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8001276:	4b32      	ldr	r3, [pc, #200]	@ (8001340 <HAL_ADC_MspInit+0x37c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a30      	ldr	r2, [pc, #192]	@ (8001340 <HAL_ADC_MspInit+0x37c>)
 800127e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8001280:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <HAL_ADC_MspInit+0x37c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10b      	bne.n	80012a0 <HAL_ADC_MspInit+0x2dc>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8001288:	4b2e      	ldr	r3, [pc, #184]	@ (8001344 <HAL_ADC_MspInit+0x380>)
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	4a2d      	ldr	r2, [pc, #180]	@ (8001344 <HAL_ADC_MspInit+0x380>)
 800128e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001292:	6153      	str	r3, [r2, #20]
 8001294:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <HAL_ADC_MspInit+0x380>)
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <HAL_ADC_MspInit+0x380>)
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	4a27      	ldr	r2, [pc, #156]	@ (8001344 <HAL_ADC_MspInit+0x380>)
 80012a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012aa:	6153      	str	r3, [r2, #20]
 80012ac:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <HAL_ADC_MspInit+0x380>)
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX4_ADC_Pin;
 80012b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012be:	2303      	movs	r3, #3
 80012c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX4_ADC_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ca:	4619      	mov	r1, r3
 80012cc:	481e      	ldr	r0, [pc, #120]	@ (8001348 <HAL_ADC_MspInit+0x384>)
 80012ce:	f002 f97b 	bl	80035c8 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <HAL_ADC_MspInit+0x388>)
 80012d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001350 <HAL_ADC_MspInit+0x38c>)
 80012d6:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <HAL_ADC_MspInit+0x388>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80012de:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <HAL_ADC_MspInit+0x388>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80012e4:	4b19      	ldr	r3, [pc, #100]	@ (800134c <HAL_ADC_MspInit+0x388>)
 80012e6:	2280      	movs	r2, #128	@ 0x80
 80012e8:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ea:	4b18      	ldr	r3, [pc, #96]	@ (800134c <HAL_ADC_MspInit+0x388>)
 80012ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012f0:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012f2:	4b16      	ldr	r3, [pc, #88]	@ (800134c <HAL_ADC_MspInit+0x388>)
 80012f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012f8:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_ADC_MspInit+0x388>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_ADC_MspInit+0x388>)
 8001302:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001306:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001308:	4810      	ldr	r0, [pc, #64]	@ (800134c <HAL_ADC_MspInit+0x388>)
 800130a:	f002 f837 	bl	800337c <HAL_DMA_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_ADC_MspInit+0x354>
      Error_Handler();
 8001314:	f7ff fe28 	bl	8000f68 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a0c      	ldr	r2, [pc, #48]	@ (800134c <HAL_ADC_MspInit+0x388>)
 800131c:	639a      	str	r2, [r3, #56]	@ 0x38
 800131e:	4a0b      	ldr	r2, [pc, #44]	@ (800134c <HAL_ADC_MspInit+0x388>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC4_IRQn, 5, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2105      	movs	r1, #5
 8001328:	203d      	movs	r0, #61	@ 0x3d
 800132a:	f001 fffd 	bl	8003328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 800132e:	203d      	movs	r0, #61	@ 0x3d
 8001330:	f002 f816 	bl	8003360 <HAL_NVIC_EnableIRQ>
}
 8001334:	bf00      	nop
 8001336:	3740      	adds	r7, #64	@ 0x40
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	50000500 	.word	0x50000500
 8001340:	20000854 	.word	0x20000854
 8001344:	40021000 	.word	0x40021000
 8001348:	48000400 	.word	0x48000400
 800134c:	20000608 	.word	0x20000608
 8001350:	4002041c 	.word	0x4002041c

08001354 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	@ 0x38
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a56      	ldr	r2, [pc, #344]	@ (80014cc <HAL_COMP_MspInit+0x178>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d132      	bne.n	80013dc <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b56      	ldr	r3, [pc, #344]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	4a55      	ldr	r2, [pc, #340]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 800137c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001380:	6153      	str	r3, [r2, #20]
 8001382:	4b53      	ldr	r3, [pc, #332]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	623b      	str	r3, [r7, #32]
 800138c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b50      	ldr	r3, [pc, #320]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	4a4f      	ldr	r2, [pc, #316]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 8001394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001398:	6153      	str	r3, [r2, #20]
 800139a:	4b4d      	ldr	r3, [pc, #308]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	69fb      	ldr	r3, [r7, #28]
    /**COMP3 GPIO Configuration
    PA4     ------> COMP3_INM
    PB14     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = RX1_COMP_Pin;
 80013a6:	2310      	movs	r3, #16
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2303      	movs	r3, #3
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RX1_COMP_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013bc:	f002 f904 	bl	80035c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VREFB14_Pin;
 80013c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VREFB14_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	483f      	ldr	r0, [pc, #252]	@ (80014d4 <HAL_COMP_MspInit+0x180>)
 80013d6:	f002 f8f7 	bl	80035c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 80013da:	e073      	b.n	80014c4 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP4)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a3d      	ldr	r2, [pc, #244]	@ (80014d8 <HAL_COMP_MspInit+0x184>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d118      	bne.n	8001418 <HAL_COMP_MspInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b3a      	ldr	r3, [pc, #232]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a39      	ldr	r2, [pc, #228]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013f0:	6153      	str	r3, [r2, #20]
 80013f2:	4b37      	ldr	r3, [pc, #220]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RX2_COMP_Pin|VREF_Pin;
 80013fe:	2305      	movs	r3, #5
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	2303      	movs	r3, #3
 8001404:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	4830      	ldr	r0, [pc, #192]	@ (80014d4 <HAL_COMP_MspInit+0x180>)
 8001412:	f002 f8d9 	bl	80035c8 <HAL_GPIO_Init>
}
 8001416:	e055      	b.n	80014c4 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP5)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a2f      	ldr	r2, [pc, #188]	@ (80014dc <HAL_COMP_MspInit+0x188>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d132      	bne.n	8001488 <HAL_COMP_MspInit+0x134>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b2b      	ldr	r3, [pc, #172]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	4a2a      	ldr	r2, [pc, #168]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 8001428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142c:	6153      	str	r3, [r2, #20]
 800142e:	4b28      	ldr	r3, [pc, #160]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a24      	ldr	r2, [pc, #144]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b22      	ldr	r3, [pc, #136]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_COMP_Pin;
 8001452:	2320      	movs	r3, #32
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001456:	2303      	movs	r3, #3
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RX3_COMP_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001468:	f002 f8ae 	bl	80035c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VREFB13_Pin;
 800146c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001472:	2303      	movs	r3, #3
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VREFB13_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147e:	4619      	mov	r1, r3
 8001480:	4814      	ldr	r0, [pc, #80]	@ (80014d4 <HAL_COMP_MspInit+0x180>)
 8001482:	f002 f8a1 	bl	80035c8 <HAL_GPIO_Init>
}
 8001486:	e01d      	b.n	80014c4 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP6)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a14      	ldr	r2, [pc, #80]	@ (80014e0 <HAL_COMP_MspInit+0x18c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d118      	bne.n	80014c4 <HAL_COMP_MspInit+0x170>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	4a0e      	ldr	r2, [pc, #56]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800149c:	6153      	str	r3, [r2, #20]
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <HAL_COMP_MspInit+0x17c>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX4_COMP_Pin|VREFB15_Pin;
 80014aa:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b0:	2303      	movs	r3, #3
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <HAL_COMP_MspInit+0x180>)
 80014c0:	f002 f882 	bl	80035c8 <HAL_GPIO_Init>
}
 80014c4:	bf00      	nop
 80014c6:	3738      	adds	r7, #56	@ 0x38
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40010024 	.word	0x40010024
 80014d0:	40021000 	.word	0x40021000
 80014d4:	48000400 	.word	0x48000400
 80014d8:	40010028 	.word	0x40010028
 80014dc:	4001002c 	.word	0x4001002c
 80014e0:	40010030 	.word	0x40010030

080014e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	@ 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a18      	ldr	r2, [pc, #96]	@ (8001564 <HAL_I2C_MspInit+0x80>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d129      	bne.n	800155a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_I2C_MspInit+0x84>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	4a17      	ldr	r2, [pc, #92]	@ (8001568 <HAL_I2C_MspInit+0x84>)
 800150c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001510:	6153      	str	r3, [r2, #20]
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_I2C_MspInit+0x84>)
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 800151e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001524:	2312      	movs	r3, #18
 8001526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001530:	2304      	movs	r3, #4
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153e:	f002 f843 	bl	80035c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001542:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <HAL_I2C_MspInit+0x84>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a08      	ldr	r2, [pc, #32]	@ (8001568 <HAL_I2C_MspInit+0x84>)
 8001548:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800154c:	61d3      	str	r3, [r2, #28]
 800154e:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_I2C_MspInit+0x84>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	@ 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40005800 	.word	0x40005800
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	@ 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a2e      	ldr	r2, [pc, #184]	@ (8001644 <HAL_SPI_MspInit+0xd8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d128      	bne.n	80015e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800158e:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <HAL_SPI_MspInit+0xdc>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	4a2d      	ldr	r2, [pc, #180]	@ (8001648 <HAL_SPI_MspInit+0xdc>)
 8001594:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001598:	6193      	str	r3, [r2, #24]
 800159a:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <HAL_SPI_MspInit+0xdc>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <HAL_SPI_MspInit+0xdc>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	4a27      	ldr	r2, [pc, #156]	@ (8001648 <HAL_SPI_MspInit+0xdc>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b0:	6153      	str	r3, [r2, #20]
 80015b2:	4b25      	ldr	r3, [pc, #148]	@ (8001648 <HAL_SPI_MspInit+0xdc>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TX_CLK_Pin|TX_MOSI_Pin;
 80015be:	2328      	movs	r3, #40	@ 0x28
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ce:	2305      	movs	r3, #5
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	481c      	ldr	r0, [pc, #112]	@ (800164c <HAL_SPI_MspInit+0xe0>)
 80015da:	f001 fff5 	bl	80035c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015de:	e02d      	b.n	800163c <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001650 <HAL_SPI_MspInit+0xe4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d128      	bne.n	800163c <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <HAL_SPI_MspInit+0xdc>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a16      	ldr	r2, [pc, #88]	@ (8001648 <HAL_SPI_MspInit+0xdc>)
 80015f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <HAL_SPI_MspInit+0xdc>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_SPI_MspInit+0xdc>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a10      	ldr	r2, [pc, #64]	@ (8001648 <HAL_SPI_MspInit+0xdc>)
 8001608:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800160c:	6153      	str	r3, [r2, #20]
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <HAL_SPI_MspInit+0xdc>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UI_SCK_Pin|UI_MOSI_Pin;
 800161a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800162c:	2306      	movs	r3, #6
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4807      	ldr	r0, [pc, #28]	@ (8001654 <HAL_SPI_MspInit+0xe8>)
 8001638:	f001 ffc6 	bl	80035c8 <HAL_GPIO_Init>
}
 800163c:	bf00      	nop
 800163e:	3730      	adds	r7, #48	@ 0x30
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40013000 	.word	0x40013000
 8001648:	40021000 	.word	0x40021000
 800164c:	48000400 	.word	0x48000400
 8001650:	40003c00 	.word	0x40003c00
 8001654:	48000800 	.word	0x48000800

08001658 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	@ 0x30
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001668:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <HAL_InitTick+0xcc>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a2d      	ldr	r2, [pc, #180]	@ (8001724 <HAL_InitTick+0xcc>)
 800166e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <HAL_InitTick+0xcc>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001680:	f107 020c 	add.w	r2, r7, #12
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f005 fd02 	bl	8007094 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001690:	f005 fcde 	bl	8007050 <HAL_RCC_GetPCLK2Freq>
 8001694:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001698:	4a23      	ldr	r2, [pc, #140]	@ (8001728 <HAL_InitTick+0xd0>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	0c9b      	lsrs	r3, r3, #18
 80016a0:	3b01      	subs	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016a4:	4b21      	ldr	r3, [pc, #132]	@ (800172c <HAL_InitTick+0xd4>)
 80016a6:	4a22      	ldr	r2, [pc, #136]	@ (8001730 <HAL_InitTick+0xd8>)
 80016a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <HAL_InitTick+0xd4>)
 80016ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016b2:	4a1e      	ldr	r2, [pc, #120]	@ (800172c <HAL_InitTick+0xd4>)
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <HAL_InitTick+0xd4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016be:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_InitTick+0xd4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b19      	ldr	r3, [pc, #100]	@ (800172c <HAL_InitTick+0xd4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80016ca:	4818      	ldr	r0, [pc, #96]	@ (800172c <HAL_InitTick+0xd4>)
 80016cc:	f006 fa48 	bl	8007b60 <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80016d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d11b      	bne.n	8001716 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016de:	4813      	ldr	r0, [pc, #76]	@ (800172c <HAL_InitTick+0xd4>)
 80016e0:	f006 faa0 	bl	8007c24 <HAL_TIM_Base_Start_IT>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80016ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d111      	bne.n	8001716 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80016f2:	2019      	movs	r0, #25
 80016f4:	f001 fe34 	bl	8003360 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	d808      	bhi.n	8001710 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80016fe:	2200      	movs	r2, #0
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	2019      	movs	r0, #25
 8001704:	f001 fe10 	bl	8003328 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001708:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <HAL_InitTick+0xdc>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e002      	b.n	8001716 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001716:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800171a:	4618      	mov	r0, r3
 800171c:	3730      	adds	r7, #48	@ 0x30
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000
 8001728:	431bde83 	.word	0x431bde83
 800172c:	20000858 	.word	0x20000858
 8001730:	40012c00 	.word	0x40012c00
 8001734:	20000010 	.word	0x20000010

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <NMI_Handler+0x4>

08001740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <MemManage_Handler+0x4>

08001750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <UsageFault_Handler+0x4>

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <DMA1_Channel1_IRQHandler+0x10>)
 8001776:	f001 fe48 	bl	800340a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000053c 	.word	0x2000053c

08001784 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001788:	4803      	ldr	r0, [pc, #12]	@ (8001798 <ADC1_2_IRQHandler+0x14>)
 800178a:	f000 fd1b 	bl	80021c4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800178e:	4803      	ldr	r0, [pc, #12]	@ (800179c <ADC1_2_IRQHandler+0x18>)
 8001790:	f000 fd18 	bl	80021c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200003fc 	.word	0x200003fc
 800179c:	2000044c 	.word	0x2000044c

080017a0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80017a6:	f002 fe5b 	bl	8004460 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200026c4 	.word	0x200026c4

080017b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80017ba:	f006 fa9d 	bl	8007cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000858 	.word	0x20000858

080017c8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <ADC3_IRQHandler+0x10>)
 80017ce:	f000 fcf9 	bl	80021c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000049c 	.word	0x2000049c

080017dc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <DMA2_Channel1_IRQHandler+0x10>)
 80017e2:	f001 fe12 	bl	800340a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000580 	.word	0x20000580

080017f0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <DMA2_Channel2_IRQHandler+0x10>)
 80017f6:	f001 fe08 	bl	800340a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000608 	.word	0x20000608

08001804 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <DMA2_Channel5_IRQHandler+0x10>)
 800180a:	f001 fdfe 	bl	800340a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200005c4 	.word	0x200005c4

08001818 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <ADC4_IRQHandler+0x10>)
 800181e:	f000 fcd1 	bl	80021c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200004ec 	.word	0x200004ec

0800182c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	@ (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001888 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001854:	f7ff ffea 	bl	800182c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001858:	480c      	ldr	r0, [pc, #48]	@ (800188c <LoopForever+0x6>)
  ldr r1, =_edata
 800185a:	490d      	ldr	r1, [pc, #52]	@ (8001890 <LoopForever+0xa>)
  ldr r2, =_sidata
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <LoopForever+0xe>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001870:	4c0a      	ldr	r4, [pc, #40]	@ (800189c <LoopForever+0x16>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187e:	f00c fa2b 	bl	800dcd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001882:	f7fe fcc7 	bl	8000214 <main>

08001886 <LoopForever>:

LoopForever:
    b LoopForever
 8001886:	e7fe      	b.n	8001886 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001888:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001894:	0800e488 	.word	0x0800e488
  ldr r2, =_sbss
 8001898:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 800189c:	20002bb8 	.word	0x20002bb8

080018a0 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <CAN_RX1_IRQHandler>

080018a2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af04      	add	r7, sp, #16
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	2301      	movs	r3, #1
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	1dfb      	adds	r3, r7, #7
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2301      	movs	r3, #1
 80018ca:	2200      	movs	r2, #0
 80018cc:	2178      	movs	r1, #120	@ 0x78
 80018ce:	4803      	ldr	r0, [pc, #12]	@ (80018dc <ssd1306_WriteCommand+0x2c>)
 80018d0:	f002 f8c0 	bl	8003a54 <HAL_I2C_Mem_Write>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	2000070c 	.word	0x2000070c

080018e0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af04      	add	r7, sp, #16
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f04f 32ff 	mov.w	r2, #4294967295
 80018f2:	9202      	str	r2, [sp, #8]
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	2240      	movs	r2, #64	@ 0x40
 80018fe:	2178      	movs	r1, #120	@ 0x78
 8001900:	4803      	ldr	r0, [pc, #12]	@ (8001910 <ssd1306_WriteData+0x30>)
 8001902:	f002 f8a7 	bl	8003a54 <HAL_I2C_Mem_Write>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000070c 	.word	0x2000070c

08001914 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001918:	f7ff ffc3 	bl	80018a2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800191c:	2064      	movs	r0, #100	@ 0x64
 800191e:	f000 fa2f 	bl	8001d80 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001922:	2000      	movs	r0, #0
 8001924:	f000 f9d8 	bl	8001cd8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001928:	2020      	movs	r0, #32
 800192a:	f7ff ffc1 	bl	80018b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff ffbe 	bl	80018b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001934:	20b0      	movs	r0, #176	@ 0xb0
 8001936:	f7ff ffbb 	bl	80018b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 800193a:	20c0      	movs	r0, #192	@ 0xc0
 800193c:	f7ff ffb8 	bl	80018b0 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff ffb5 	bl	80018b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001946:	2010      	movs	r0, #16
 8001948:	f7ff ffb2 	bl	80018b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800194c:	2040      	movs	r0, #64	@ 0x40
 800194e:	f7ff ffaf 	bl	80018b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001952:	20ff      	movs	r0, #255	@ 0xff
 8001954:	f000 f9ac 	bl	8001cb0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001958:	20a1      	movs	r0, #161	@ 0xa1
 800195a:	f7ff ffa9 	bl	80018b0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800195e:	20a6      	movs	r0, #166	@ 0xa6
 8001960:	f7ff ffa6 	bl	80018b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001964:	20a8      	movs	r0, #168	@ 0xa8
 8001966:	f7ff ffa3 	bl	80018b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800196a:	203f      	movs	r0, #63	@ 0x3f
 800196c:	f7ff ffa0 	bl	80018b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001970:	20a4      	movs	r0, #164	@ 0xa4
 8001972:	f7ff ff9d 	bl	80018b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001976:	20d3      	movs	r0, #211	@ 0xd3
 8001978:	f7ff ff9a 	bl	80018b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800197c:	2000      	movs	r0, #0
 800197e:	f7ff ff97 	bl	80018b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001982:	20d5      	movs	r0, #213	@ 0xd5
 8001984:	f7ff ff94 	bl	80018b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001988:	20f0      	movs	r0, #240	@ 0xf0
 800198a:	f7ff ff91 	bl	80018b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800198e:	20d9      	movs	r0, #217	@ 0xd9
 8001990:	f7ff ff8e 	bl	80018b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001994:	2022      	movs	r0, #34	@ 0x22
 8001996:	f7ff ff8b 	bl	80018b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800199a:	20da      	movs	r0, #218	@ 0xda
 800199c:	f7ff ff88 	bl	80018b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80019a0:	2012      	movs	r0, #18
 80019a2:	f7ff ff85 	bl	80018b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80019a6:	20db      	movs	r0, #219	@ 0xdb
 80019a8:	f7ff ff82 	bl	80018b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80019ac:	2020      	movs	r0, #32
 80019ae:	f7ff ff7f 	bl	80018b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80019b2:	208d      	movs	r0, #141	@ 0x8d
 80019b4:	f7ff ff7c 	bl	80018b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80019b8:	2014      	movs	r0, #20
 80019ba:	f7ff ff79 	bl	80018b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80019be:	2001      	movs	r0, #1
 80019c0:	f000 f98a 	bl	8001cd8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f000 f80f 	bl	80019e8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80019ca:	f000 f825 	bl	8001a18 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80019ce:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <ssd1306_Init+0xd0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <ssd1306_Init+0xd0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80019da:	4b02      	ldr	r3, [pc, #8]	@ (80019e4 <ssd1306_Init+0xd0>)
 80019dc:	2201      	movs	r2, #1
 80019de:	711a      	strb	r2, [r3, #4]
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000ca4 	.word	0x20000ca4

080019e8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <ssd1306_Fill+0x14>
 80019f8:	2300      	movs	r3, #0
 80019fa:	e000      	b.n	80019fe <ssd1306_Fill+0x16>
 80019fc:	23ff      	movs	r3, #255	@ 0xff
 80019fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a02:	4619      	mov	r1, r3
 8001a04:	4803      	ldr	r0, [pc, #12]	@ (8001a14 <ssd1306_Fill+0x2c>)
 8001a06:	f00c f95f 	bl	800dcc8 <memset>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200008a4 	.word	0x200008a4

08001a18 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	e016      	b.n	8001a52 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	3b50      	subs	r3, #80	@ 0x50
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff40 	bl	80018b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff ff3d 	bl	80018b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a36:	2010      	movs	r0, #16
 8001a38:	f7ff ff3a 	bl	80018b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	01db      	lsls	r3, r3, #7
 8001a40:	4a08      	ldr	r2, [pc, #32]	@ (8001a64 <ssd1306_UpdateScreen+0x4c>)
 8001a42:	4413      	add	r3, r2
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff4a 	bl	80018e0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2b07      	cmp	r3, #7
 8001a56:	d9e5      	bls.n	8001a24 <ssd1306_UpdateScreen+0xc>
    }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200008a4 	.word	0x200008a4

08001a68 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	460b      	mov	r3, r1
 8001a74:	71bb      	strb	r3, [r7, #6]
 8001a76:	4613      	mov	r3, r2
 8001a78:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db3d      	blt.n	8001afe <ssd1306_DrawPixel+0x96>
 8001a82:	79bb      	ldrb	r3, [r7, #6]
 8001a84:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a86:	d83a      	bhi.n	8001afe <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001a88:	797b      	ldrb	r3, [r7, #5]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d11a      	bne.n	8001ac4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a8e:	79fa      	ldrb	r2, [r7, #7]
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	08db      	lsrs	r3, r3, #3
 8001a94:	b2d8      	uxtb	r0, r3
 8001a96:	4603      	mov	r3, r0
 8001a98:	01db      	lsls	r3, r3, #7
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b0c <ssd1306_DrawPixel+0xa4>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	b25a      	sxtb	r2, r3
 8001aa2:	79bb      	ldrb	r3, [r7, #6]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	b25b      	sxtb	r3, r3
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	b259      	sxtb	r1, r3
 8001ab4:	79fa      	ldrb	r2, [r7, #7]
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	01db      	lsls	r3, r3, #7
 8001aba:	4413      	add	r3, r2
 8001abc:	b2c9      	uxtb	r1, r1
 8001abe:	4a13      	ldr	r2, [pc, #76]	@ (8001b0c <ssd1306_DrawPixel+0xa4>)
 8001ac0:	54d1      	strb	r1, [r2, r3]
 8001ac2:	e01d      	b.n	8001b00 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ac4:	79fa      	ldrb	r2, [r7, #7]
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	b2d8      	uxtb	r0, r3
 8001acc:	4603      	mov	r3, r0
 8001ace:	01db      	lsls	r3, r3, #7
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b0c <ssd1306_DrawPixel+0xa4>)
 8001ad4:	5cd3      	ldrb	r3, [r2, r3]
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	4013      	ands	r3, r2
 8001aec:	b259      	sxtb	r1, r3
 8001aee:	79fa      	ldrb	r2, [r7, #7]
 8001af0:	4603      	mov	r3, r0
 8001af2:	01db      	lsls	r3, r3, #7
 8001af4:	4413      	add	r3, r2
 8001af6:	b2c9      	uxtb	r1, r1
 8001af8:	4a04      	ldr	r2, [pc, #16]	@ (8001b0c <ssd1306_DrawPixel+0xa4>)
 8001afa:	54d1      	strb	r1, [r2, r3]
 8001afc:	e000      	b.n	8001b00 <ssd1306_DrawPixel+0x98>
        return;
 8001afe:	bf00      	nop
    }
}
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	200008a4 	.word	0x200008a4

08001b10 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b089      	sub	sp, #36	@ 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4604      	mov	r4, r0
 8001b18:	4638      	mov	r0, r7
 8001b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001b1e:	4623      	mov	r3, r4
 8001b20:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	2b1f      	cmp	r3, #31
 8001b26:	d902      	bls.n	8001b2e <ssd1306_WriteChar+0x1e>
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	2b7e      	cmp	r3, #126	@ 0x7e
 8001b2c:	d901      	bls.n	8001b32 <ssd1306_WriteChar+0x22>
        return 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e079      	b.n	8001c26 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <ssd1306_WriteChar+0x34>
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	3b20      	subs	r3, #32
 8001b3e:	4413      	add	r3, r2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	e000      	b.n	8001b46 <ssd1306_WriteChar+0x36>
 8001b44:	783b      	ldrb	r3, [r7, #0]
 8001b46:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001b48:	4b39      	ldr	r3, [pc, #228]	@ (8001c30 <ssd1306_WriteChar+0x120>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
 8001b50:	4413      	add	r3, r2
 8001b52:	2b80      	cmp	r3, #128	@ 0x80
 8001b54:	dc06      	bgt.n	8001b64 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001b56:	4b36      	ldr	r3, [pc, #216]	@ (8001c30 <ssd1306_WriteChar+0x120>)
 8001b58:	885b      	ldrh	r3, [r3, #2]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001b60:	2b40      	cmp	r3, #64	@ 0x40
 8001b62:	dd01      	ble.n	8001b68 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e05e      	b.n	8001c26 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	e04d      	b.n	8001c0a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	3b20      	subs	r3, #32
 8001b74:	7879      	ldrb	r1, [r7, #1]
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	440b      	add	r3, r1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	e036      	b.n	8001bfc <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d013      	beq.n	8001bc6 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b9e:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <ssd1306_WriteChar+0x120>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2d8      	uxtb	r0, r3
 8001bac:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <ssd1306_WriteChar+0x120>)
 8001bae:	885b      	ldrh	r3, [r3, #2]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7ff ff52 	bl	8001a68 <ssd1306_DrawPixel>
 8001bc4:	e017      	b.n	8001bf6 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <ssd1306_WriteChar+0x120>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b2d8      	uxtb	r0, r3
 8001bd4:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <ssd1306_WriteChar+0x120>)
 8001bd6:	885b      	ldrh	r3, [r3, #2]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	b2d9      	uxtb	r1, r3
 8001be2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf0c      	ite	eq
 8001bea:	2301      	moveq	r3, #1
 8001bec:	2300      	movne	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f7ff ff39 	bl	8001a68 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d3c4      	bcc.n	8001b8e <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	3301      	adds	r3, #1
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	787b      	ldrb	r3, [r7, #1]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d3ac      	bcc.n	8001b6e <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <ssd1306_WriteChar+0x120>)
 8001c16:	881a      	ldrh	r2, [r3, #0]
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <ssd1306_WriteChar+0x120>)
 8001c22:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	@ 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd90      	pop	{r4, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000ca4 	.word	0x20000ca4

08001c34 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	4638      	mov	r0, r7
 8001c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001c42:	e013      	b.n	8001c6c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	7818      	ldrb	r0, [r3, #0]
 8001c48:	7e3b      	ldrb	r3, [r7, #24]
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c50:	f7ff ff5e 	bl	8001b10 <ssd1306_WriteChar>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d002      	beq.n	8001c66 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	e008      	b.n	8001c78 <ssd1306_WriteString+0x44>
        }
        str++;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e7      	bne.n	8001c44 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	781b      	ldrb	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	460a      	mov	r2, r1
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <ssd1306_SetCursor+0x2c>)
 8001c96:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001c98:	79bb      	ldrb	r3, [r7, #6]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b03      	ldr	r3, [pc, #12]	@ (8001cac <ssd1306_SetCursor+0x2c>)
 8001c9e:	805a      	strh	r2, [r3, #2]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	20000ca4 	.word	0x20000ca4

08001cb0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001cba:	2381      	movs	r3, #129	@ 0x81
 8001cbc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fdf5 	bl	80018b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fdf1 	bl	80018b0 <ssd1306_WriteCommand>
}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001ce8:	23af      	movs	r3, #175	@ 0xaf
 8001cea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001cec:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <ssd1306_SetDisplayOn+0x38>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	715a      	strb	r2, [r3, #5]
 8001cf2:	e004      	b.n	8001cfe <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001cf4:	23ae      	movs	r3, #174	@ 0xae
 8001cf6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <ssd1306_SetDisplayOn+0x38>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fdd5 	bl	80018b0 <ssd1306_WriteCommand>
}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000ca4 	.word	0x20000ca4

08001d14 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d18:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <HAL_Init+0x28>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a07      	ldr	r2, [pc, #28]	@ (8001d3c <HAL_Init+0x28>)
 8001d1e:	f043 0310 	orr.w	r3, r3, #16
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d24:	2003      	movs	r0, #3
 8001d26:	f001 faf4 	bl	8003312 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2a:	200f      	movs	r0, #15
 8001d2c:	f7ff fc94 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d30:	f7ff f920 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40022000 	.word	0x40022000

08001d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_IncTick+0x24>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <HAL_IncTick+0x24>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000014 	.word	0x20000014
 8001d64:	20000cac 	.word	0x20000cac

08001d68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d6c:	4b03      	ldr	r3, [pc, #12]	@ (8001d7c <HAL_GetTick+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000cac 	.word	0x20000cac

08001d80 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff ffee 	bl	8001d68 <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000014 	.word	0x20000014

08001dc8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b09a      	sub	sp, #104	@ 0x68
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e1c9      	b.n	80021b8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d176      	bne.n	8001f24 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d152      	bne.n	8001ee4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff f8b3 	bl	8000fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d13b      	bne.n	8001ee4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f001 f893 	bl	8002f98 <ADC_Disable>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d12f      	bne.n	8001ee4 <HAL_ADC_Init+0xe0>
 8001e84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d12b      	bne.n	8001ee4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e94:	f023 0302 	bic.w	r3, r3, #2
 8001e98:	f043 0202 	orr.w	r2, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001eae:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ebe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ec0:	4b86      	ldr	r3, [pc, #536]	@ (80020dc <HAL_ADC_Init+0x2d8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a86      	ldr	r2, [pc, #536]	@ (80020e0 <HAL_ADC_Init+0x2dc>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0c9a      	lsrs	r2, r3, #18
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ed6:	e002      	b.n	8001ede <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f9      	bne.n	8001ed8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d007      	beq.n	8001f02 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f00:	d110      	bne.n	8001f24 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f023 0312 	bic.w	r3, r3, #18
 8001f0a:	f043 0210 	orr.w	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f040 8136 	bne.w	800219e <HAL_ADC_Init+0x39a>
 8001f32:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 8131 	bne.w	800219e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 8129 	bne.w	800219e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f54:	f043 0202 	orr.w	r2, r3, #2
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f64:	d004      	beq.n	8001f70 <HAL_ADC_Init+0x16c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a5e      	ldr	r2, [pc, #376]	@ (80020e4 <HAL_ADC_Init+0x2e0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_Init+0x170>
 8001f70:	4b5d      	ldr	r3, [pc, #372]	@ (80020e8 <HAL_ADC_Init+0x2e4>)
 8001f72:	e000      	b.n	8001f76 <HAL_ADC_Init+0x172>
 8001f74:	4b5d      	ldr	r3, [pc, #372]	@ (80020ec <HAL_ADC_Init+0x2e8>)
 8001f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f80:	d102      	bne.n	8001f88 <HAL_ADC_Init+0x184>
 8001f82:	4b58      	ldr	r3, [pc, #352]	@ (80020e4 <HAL_ADC_Init+0x2e0>)
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	e01a      	b.n	8001fbe <HAL_ADC_Init+0x1ba>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a55      	ldr	r2, [pc, #340]	@ (80020e4 <HAL_ADC_Init+0x2e0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d103      	bne.n	8001f9a <HAL_ADC_Init+0x196>
 8001f92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	e011      	b.n	8001fbe <HAL_ADC_Init+0x1ba>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a54      	ldr	r2, [pc, #336]	@ (80020f0 <HAL_ADC_Init+0x2ec>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d102      	bne.n	8001faa <HAL_ADC_Init+0x1a6>
 8001fa4:	4b53      	ldr	r3, [pc, #332]	@ (80020f4 <HAL_ADC_Init+0x2f0>)
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	e009      	b.n	8001fbe <HAL_ADC_Init+0x1ba>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a51      	ldr	r2, [pc, #324]	@ (80020f4 <HAL_ADC_Init+0x2f0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d102      	bne.n	8001fba <HAL_ADC_Init+0x1b6>
 8001fb4:	4b4e      	ldr	r3, [pc, #312]	@ (80020f0 <HAL_ADC_Init+0x2ec>)
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e001      	b.n	8001fbe <HAL_ADC_Init+0x1ba>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d108      	bne.n	8001fde <HAL_ADC_Init+0x1da>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Init+0x1da>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_ADC_Init+0x1dc>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d11c      	bne.n	800201e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d010      	beq.n	800200c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d107      	bne.n	8002006 <HAL_ADC_Init+0x202>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_ADC_Init+0x202>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_ADC_Init+0x204>
 8002006:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002008:	2b00      	cmp	r3, #0
 800200a:	d108      	bne.n	800201e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800200c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	431a      	orrs	r2, r3
 800201a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800201c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7e5b      	ldrb	r3, [r3, #25]
 8002022:	035b      	lsls	r3, r3, #13
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002028:	2a01      	cmp	r2, #1
 800202a:	d002      	beq.n	8002032 <HAL_ADC_Init+0x22e>
 800202c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002030:	e000      	b.n	8002034 <HAL_ADC_Init+0x230>
 8002032:	2200      	movs	r2, #0
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4313      	orrs	r3, r2
 8002042:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002044:	4313      	orrs	r3, r2
 8002046:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d11b      	bne.n	800208a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	7e5b      	ldrb	r3, [r3, #25]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	3b01      	subs	r3, #1
 8002060:	045a      	lsls	r2, r3, #17
 8002062:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002064:	4313      	orrs	r3, r2
 8002066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206a:	663b      	str	r3, [r7, #96]	@ 0x60
 800206c:	e00d      	b.n	800208a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002076:	f043 0220 	orr.w	r2, r3, #32
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208e:	2b01      	cmp	r3, #1
 8002090:	d03a      	beq.n	8002108 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a16      	ldr	r2, [pc, #88]	@ (80020f0 <HAL_ADC_Init+0x2ec>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d004      	beq.n	80020a6 <HAL_ADC_Init+0x2a2>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a14      	ldr	r2, [pc, #80]	@ (80020f4 <HAL_ADC_Init+0x2f0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d128      	bne.n	80020f8 <HAL_ADC_Init+0x2f4>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020aa:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80020ae:	d012      	beq.n	80020d6 <HAL_ADC_Init+0x2d2>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020b8:	d00a      	beq.n	80020d0 <HAL_ADC_Init+0x2cc>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020be:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80020c2:	d002      	beq.n	80020ca <HAL_ADC_Init+0x2c6>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	e018      	b.n	80020fc <HAL_ADC_Init+0x2f8>
 80020ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020ce:	e015      	b.n	80020fc <HAL_ADC_Init+0x2f8>
 80020d0:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80020d4:	e012      	b.n	80020fc <HAL_ADC_Init+0x2f8>
 80020d6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80020da:	e00f      	b.n	80020fc <HAL_ADC_Init+0x2f8>
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	50000100 	.word	0x50000100
 80020e8:	50000300 	.word	0x50000300
 80020ec:	50000700 	.word	0x50000700
 80020f0:	50000400 	.word	0x50000400
 80020f4:	50000500 	.word	0x50000500
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002100:	4313      	orrs	r3, r2
 8002102:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002104:	4313      	orrs	r3, r2
 8002106:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b00      	cmp	r3, #0
 8002114:	d114      	bne.n	8002140 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002124:	f023 0302 	bic.w	r3, r3, #2
 8002128:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7e1b      	ldrb	r3, [r3, #24]
 800212e:	039a      	lsls	r2, r3, #14
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4313      	orrs	r3, r2
 800213a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800213c:	4313      	orrs	r3, r2
 800213e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	4b1e      	ldr	r3, [pc, #120]	@ (80021c0 <HAL_ADC_Init+0x3bc>)
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002150:	430b      	orrs	r3, r1
 8002152:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10c      	bne.n	8002176 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	f023 010f 	bic.w	r1, r3, #15
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	1e5a      	subs	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	631a      	str	r2, [r3, #48]	@ 0x30
 8002174:	e007      	b.n	8002186 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 020f 	bic.w	r2, r2, #15
 8002184:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f023 0303 	bic.w	r3, r3, #3
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	641a      	str	r2, [r3, #64]	@ 0x40
 800219c:	e00a      	b.n	80021b4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	f023 0312 	bic.w	r3, r3, #18
 80021a6:	f043 0210 	orr.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80021ae:	2301      	movs	r3, #1
 80021b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80021b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3768      	adds	r7, #104	@ 0x68
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	fff0c007 	.word	0xfff0c007

080021c4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d004      	beq.n	80021fc <HAL_ADC_IRQHandler+0x38>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80bc 	beq.w	8002380 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80b6 	beq.w	8002380 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002234:	d004      	beq.n	8002240 <HAL_ADC_IRQHandler+0x7c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a90      	ldr	r2, [pc, #576]	@ (800247c <HAL_ADC_IRQHandler+0x2b8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d106      	bne.n	800224e <HAL_ADC_IRQHandler+0x8a>
 8002240:	4b8f      	ldr	r3, [pc, #572]	@ (8002480 <HAL_ADC_IRQHandler+0x2bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	2b00      	cmp	r3, #0
 800224a:	d03e      	beq.n	80022ca <HAL_ADC_IRQHandler+0x106>
 800224c:	e005      	b.n	800225a <HAL_ADC_IRQHandler+0x96>
 800224e:	4b8d      	ldr	r3, [pc, #564]	@ (8002484 <HAL_ADC_IRQHandler+0x2c0>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	2b00      	cmp	r3, #0
 8002258:	d037      	beq.n	80022ca <HAL_ADC_IRQHandler+0x106>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002262:	d004      	beq.n	800226e <HAL_ADC_IRQHandler+0xaa>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a84      	ldr	r2, [pc, #528]	@ (800247c <HAL_ADC_IRQHandler+0x2b8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d106      	bne.n	800227c <HAL_ADC_IRQHandler+0xb8>
 800226e:	4b84      	ldr	r3, [pc, #528]	@ (8002480 <HAL_ADC_IRQHandler+0x2bc>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2b05      	cmp	r3, #5
 8002278:	d027      	beq.n	80022ca <HAL_ADC_IRQHandler+0x106>
 800227a:	e005      	b.n	8002288 <HAL_ADC_IRQHandler+0xc4>
 800227c:	4b81      	ldr	r3, [pc, #516]	@ (8002484 <HAL_ADC_IRQHandler+0x2c0>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	2b05      	cmp	r3, #5
 8002286:	d020      	beq.n	80022ca <HAL_ADC_IRQHandler+0x106>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002290:	d004      	beq.n	800229c <HAL_ADC_IRQHandler+0xd8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a79      	ldr	r2, [pc, #484]	@ (800247c <HAL_ADC_IRQHandler+0x2b8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d106      	bne.n	80022aa <HAL_ADC_IRQHandler+0xe6>
 800229c:	4b78      	ldr	r3, [pc, #480]	@ (8002480 <HAL_ADC_IRQHandler+0x2bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	2b09      	cmp	r3, #9
 80022a6:	d010      	beq.n	80022ca <HAL_ADC_IRQHandler+0x106>
 80022a8:	e005      	b.n	80022b6 <HAL_ADC_IRQHandler+0xf2>
 80022aa:	4b76      	ldr	r3, [pc, #472]	@ (8002484 <HAL_ADC_IRQHandler+0x2c0>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	2b09      	cmp	r3, #9
 80022b4:	d009      	beq.n	80022ca <HAL_ADC_IRQHandler+0x106>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022be:	d004      	beq.n	80022ca <HAL_ADC_IRQHandler+0x106>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a70      	ldr	r2, [pc, #448]	@ (8002488 <HAL_ADC_IRQHandler+0x2c4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d104      	bne.n	80022d4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	e00f      	b.n	80022f4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022dc:	d004      	beq.n	80022e8 <HAL_ADC_IRQHandler+0x124>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a66      	ldr	r2, [pc, #408]	@ (800247c <HAL_ADC_IRQHandler+0x2b8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d102      	bne.n	80022ee <HAL_ADC_IRQHandler+0x12a>
 80022e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022ec:	e000      	b.n	80022f0 <HAL_ADC_IRQHandler+0x12c>
 80022ee:	4b66      	ldr	r3, [pc, #408]	@ (8002488 <HAL_ADC_IRQHandler+0x2c4>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d137      	bne.n	8002372 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002308:	2b00      	cmp	r3, #0
 800230a:	d132      	bne.n	8002372 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d02d      	beq.n	8002372 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11a      	bne.n	800235a <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 020c 	bic.w	r2, r2, #12
 8002332:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d112      	bne.n	8002372 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40
 8002358:	e00b      	b.n	8002372 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	f043 0210 	orr.w	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	f043 0201 	orr.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff fd28 	bl	8001dc8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	220c      	movs	r2, #12
 800237e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <HAL_ADC_IRQHandler+0x1d0>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 8138 	beq.w	8002610 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8132 	beq.w	8002610 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023c0:	d004      	beq.n	80023cc <HAL_ADC_IRQHandler+0x208>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <HAL_ADC_IRQHandler+0x2b8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d106      	bne.n	80023da <HAL_ADC_IRQHandler+0x216>
 80023cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002480 <HAL_ADC_IRQHandler+0x2bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d03e      	beq.n	8002456 <HAL_ADC_IRQHandler+0x292>
 80023d8:	e005      	b.n	80023e6 <HAL_ADC_IRQHandler+0x222>
 80023da:	4b2a      	ldr	r3, [pc, #168]	@ (8002484 <HAL_ADC_IRQHandler+0x2c0>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d037      	beq.n	8002456 <HAL_ADC_IRQHandler+0x292>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ee:	d004      	beq.n	80023fa <HAL_ADC_IRQHandler+0x236>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a21      	ldr	r2, [pc, #132]	@ (800247c <HAL_ADC_IRQHandler+0x2b8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d106      	bne.n	8002408 <HAL_ADC_IRQHandler+0x244>
 80023fa:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <HAL_ADC_IRQHandler+0x2bc>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	2b05      	cmp	r3, #5
 8002404:	d027      	beq.n	8002456 <HAL_ADC_IRQHandler+0x292>
 8002406:	e005      	b.n	8002414 <HAL_ADC_IRQHandler+0x250>
 8002408:	4b1e      	ldr	r3, [pc, #120]	@ (8002484 <HAL_ADC_IRQHandler+0x2c0>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	2b05      	cmp	r3, #5
 8002412:	d020      	beq.n	8002456 <HAL_ADC_IRQHandler+0x292>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800241c:	d004      	beq.n	8002428 <HAL_ADC_IRQHandler+0x264>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a16      	ldr	r2, [pc, #88]	@ (800247c <HAL_ADC_IRQHandler+0x2b8>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d106      	bne.n	8002436 <HAL_ADC_IRQHandler+0x272>
 8002428:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <HAL_ADC_IRQHandler+0x2bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	2b09      	cmp	r3, #9
 8002432:	d010      	beq.n	8002456 <HAL_ADC_IRQHandler+0x292>
 8002434:	e005      	b.n	8002442 <HAL_ADC_IRQHandler+0x27e>
 8002436:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <HAL_ADC_IRQHandler+0x2c0>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	2b09      	cmp	r3, #9
 8002440:	d009      	beq.n	8002456 <HAL_ADC_IRQHandler+0x292>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800244a:	d004      	beq.n	8002456 <HAL_ADC_IRQHandler+0x292>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0d      	ldr	r2, [pc, #52]	@ (8002488 <HAL_ADC_IRQHandler+0x2c4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d104      	bne.n	8002460 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	e018      	b.n	8002492 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002468:	d004      	beq.n	8002474 <HAL_ADC_IRQHandler+0x2b0>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a03      	ldr	r2, [pc, #12]	@ (800247c <HAL_ADC_IRQHandler+0x2b8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d10b      	bne.n	800248c <HAL_ADC_IRQHandler+0x2c8>
 8002474:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002478:	e009      	b.n	800248e <HAL_ADC_IRQHandler+0x2ca>
 800247a:	bf00      	nop
 800247c:	50000100 	.word	0x50000100
 8002480:	50000300 	.word	0x50000300
 8002484:	50000700 	.word	0x50000700
 8002488:	50000400 	.word	0x50000400
 800248c:	4b92      	ldr	r3, [pc, #584]	@ (80026d8 <HAL_ADC_IRQHandler+0x514>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002498:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800249c:	2b00      	cmp	r3, #0
 800249e:	f040 80b0 	bne.w	8002602 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 80a3 	bne.w	8002602 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 809d 	bne.w	8002602 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8097 	beq.w	8002602 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024dc:	d004      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x324>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7e      	ldr	r2, [pc, #504]	@ (80026dc <HAL_ADC_IRQHandler+0x518>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d106      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x332>
 80024e8:	4b7d      	ldr	r3, [pc, #500]	@ (80026e0 <HAL_ADC_IRQHandler+0x51c>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d03e      	beq.n	8002572 <HAL_ADC_IRQHandler+0x3ae>
 80024f4:	e005      	b.n	8002502 <HAL_ADC_IRQHandler+0x33e>
 80024f6:	4b7b      	ldr	r3, [pc, #492]	@ (80026e4 <HAL_ADC_IRQHandler+0x520>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d037      	beq.n	8002572 <HAL_ADC_IRQHandler+0x3ae>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800250a:	d004      	beq.n	8002516 <HAL_ADC_IRQHandler+0x352>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a72      	ldr	r2, [pc, #456]	@ (80026dc <HAL_ADC_IRQHandler+0x518>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d106      	bne.n	8002524 <HAL_ADC_IRQHandler+0x360>
 8002516:	4b72      	ldr	r3, [pc, #456]	@ (80026e0 <HAL_ADC_IRQHandler+0x51c>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2b06      	cmp	r3, #6
 8002520:	d027      	beq.n	8002572 <HAL_ADC_IRQHandler+0x3ae>
 8002522:	e005      	b.n	8002530 <HAL_ADC_IRQHandler+0x36c>
 8002524:	4b6f      	ldr	r3, [pc, #444]	@ (80026e4 <HAL_ADC_IRQHandler+0x520>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2b06      	cmp	r3, #6
 800252e:	d020      	beq.n	8002572 <HAL_ADC_IRQHandler+0x3ae>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002538:	d004      	beq.n	8002544 <HAL_ADC_IRQHandler+0x380>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a67      	ldr	r2, [pc, #412]	@ (80026dc <HAL_ADC_IRQHandler+0x518>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d106      	bne.n	8002552 <HAL_ADC_IRQHandler+0x38e>
 8002544:	4b66      	ldr	r3, [pc, #408]	@ (80026e0 <HAL_ADC_IRQHandler+0x51c>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	2b07      	cmp	r3, #7
 800254e:	d010      	beq.n	8002572 <HAL_ADC_IRQHandler+0x3ae>
 8002550:	e005      	b.n	800255e <HAL_ADC_IRQHandler+0x39a>
 8002552:	4b64      	ldr	r3, [pc, #400]	@ (80026e4 <HAL_ADC_IRQHandler+0x520>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2b07      	cmp	r3, #7
 800255c:	d009      	beq.n	8002572 <HAL_ADC_IRQHandler+0x3ae>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002566:	d004      	beq.n	8002572 <HAL_ADC_IRQHandler+0x3ae>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a5a      	ldr	r2, [pc, #360]	@ (80026d8 <HAL_ADC_IRQHandler+0x514>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d104      	bne.n	800257c <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e00f      	b.n	800259c <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002584:	d004      	beq.n	8002590 <HAL_ADC_IRQHandler+0x3cc>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a54      	ldr	r2, [pc, #336]	@ (80026dc <HAL_ADC_IRQHandler+0x518>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d102      	bne.n	8002596 <HAL_ADC_IRQHandler+0x3d2>
 8002590:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002594:	e000      	b.n	8002598 <HAL_ADC_IRQHandler+0x3d4>
 8002596:	4b50      	ldr	r3, [pc, #320]	@ (80026d8 <HAL_ADC_IRQHandler+0x514>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d12d      	bne.n	8002602 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11a      	bne.n	80025ea <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80025c2:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d112      	bne.n	8002602 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	f043 0201 	orr.w	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80025e8:	e00b      	b.n	8002602 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f043 0210 	orr.w	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8c4 	bl	8002790 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2260      	movs	r2, #96	@ 0x60
 800260e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002616:	2b00      	cmp	r3, #0
 8002618:	d011      	beq.n	800263e <HAL_ADC_IRQHandler+0x47a>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00c      	beq.n	800263e <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff fbd3 	bl	8001ddc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2280      	movs	r2, #128	@ 0x80
 800263c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d012      	beq.n	800266e <HAL_ADC_IRQHandler+0x4aa>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00d      	beq.n	800266e <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8aa 	bl	80027b8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800266c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002674:	2b00      	cmp	r3, #0
 8002676:	d012      	beq.n	800269e <HAL_ADC_IRQHandler+0x4da>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00d      	beq.n	800269e <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f89c 	bl	80027cc <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800269c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d04f      	beq.n	8002748 <HAL_ADC_IRQHandler+0x584>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d04a      	beq.n	8002748 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d102      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80026ba:	2301      	movs	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e02d      	b.n	800271c <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026c8:	d004      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x510>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a03      	ldr	r2, [pc, #12]	@ (80026dc <HAL_ADC_IRQHandler+0x518>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d109      	bne.n	80026e8 <HAL_ADC_IRQHandler+0x524>
 80026d4:	4b02      	ldr	r3, [pc, #8]	@ (80026e0 <HAL_ADC_IRQHandler+0x51c>)
 80026d6:	e008      	b.n	80026ea <HAL_ADC_IRQHandler+0x526>
 80026d8:	50000400 	.word	0x50000400
 80026dc:	50000100 	.word	0x50000100
 80026e0:	50000300 	.word	0x50000300
 80026e4:	50000700 	.word	0x50000700
 80026e8:	4b28      	ldr	r3, [pc, #160]	@ (800278c <HAL_ADC_IRQHandler+0x5c8>)
 80026ea:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10a      	bne.n	800271c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002706:	2301      	movs	r3, #1
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	e007      	b.n	800271c <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002718:	2301      	movs	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10e      	bne.n	8002740 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002732:	f043 0202 	orr.w	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fb58 	bl	8001df0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2210      	movs	r2, #16
 8002746:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274e:	2b00      	cmp	r3, #0
 8002750:	d018      	beq.n	8002784 <HAL_ADC_IRQHandler+0x5c0>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002758:	2b00      	cmp	r3, #0
 800275a:	d013      	beq.n	8002784 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276c:	f043 0208 	orr.w	r2, r3, #8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800277c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f810 	bl	80027a4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002784:	bf00      	nop
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	50000700 	.word	0x50000700

08002790 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b09b      	sub	sp, #108	@ 0x6c
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x22>
 80027fe:	2302      	movs	r3, #2
 8002800:	e2c8      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x5b4>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	f040 82ac 	bne.w	8002d72 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b04      	cmp	r3, #4
 8002820:	d81c      	bhi.n	800285c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	461a      	mov	r2, r3
 8002836:	231f      	movs	r3, #31
 8002838:	4093      	lsls	r3, r2
 800283a:	43db      	mvns	r3, r3
 800283c:	4019      	ands	r1, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fa00 f203 	lsl.w	r2, r0, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
 800285a:	e063      	b.n	8002924 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b09      	cmp	r3, #9
 8002862:	d81e      	bhi.n	80028a2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	3b1e      	subs	r3, #30
 8002878:	221f      	movs	r2, #31
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	4019      	ands	r1, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	3b1e      	subs	r3, #30
 8002894:	fa00 f203 	lsl.w	r2, r0, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	635a      	str	r2, [r3, #52]	@ 0x34
 80028a0:	e040      	b.n	8002924 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b0e      	cmp	r3, #14
 80028a8:	d81e      	bhi.n	80028e8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	3b3c      	subs	r3, #60	@ 0x3c
 80028be:	221f      	movs	r2, #31
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	4019      	ands	r1, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	3b3c      	subs	r3, #60	@ 0x3c
 80028da:	fa00 f203 	lsl.w	r2, r0, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80028e6:	e01d      	b.n	8002924 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	3b5a      	subs	r3, #90	@ 0x5a
 80028fc:	221f      	movs	r2, #31
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	4019      	ands	r1, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	3b5a      	subs	r3, #90	@ 0x5a
 8002918:	fa00 f203 	lsl.w	r2, r0, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 80e5 	bne.w	8002afe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b09      	cmp	r3, #9
 800293a:	d91c      	bls.n	8002976 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6999      	ldr	r1, [r3, #24]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	3b1e      	subs	r3, #30
 800294e:	2207      	movs	r2, #7
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	4019      	ands	r1, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	6898      	ldr	r0, [r3, #8]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	3b1e      	subs	r3, #30
 8002968:	fa00 f203 	lsl.w	r2, r0, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	619a      	str	r2, [r3, #24]
 8002974:	e019      	b.n	80029aa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6959      	ldr	r1, [r3, #20]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	2207      	movs	r2, #7
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	4019      	ands	r1, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6898      	ldr	r0, [r3, #8]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	fa00 f203 	lsl.w	r2, r0, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	08db      	lsrs	r3, r3, #3
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d84f      	bhi.n	8002a6c <HAL_ADC_ConfigChannel+0x28c>
 80029cc:	a201      	add	r2, pc, #4	@ (adr r2, 80029d4 <HAL_ADC_ConfigChannel+0x1f4>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	08002a07 	.word	0x08002a07
 80029dc:	08002a29 	.word	0x08002a29
 80029e0:	08002a4b 	.word	0x08002a4b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029ea:	4b99      	ldr	r3, [pc, #612]	@ (8002c50 <HAL_ADC_ConfigChannel+0x470>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	0691      	lsls	r1, r2, #26
 80029f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029f6:	430a      	orrs	r2, r1
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a02:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a04:	e07b      	b.n	8002afe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002a0c:	4b90      	ldr	r3, [pc, #576]	@ (8002c50 <HAL_ADC_ConfigChannel+0x470>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	0691      	lsls	r1, r2, #26
 8002a16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a24:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a26:	e06a      	b.n	8002afe <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002a2e:	4b88      	ldr	r3, [pc, #544]	@ (8002c50 <HAL_ADC_ConfigChannel+0x470>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	0691      	lsls	r1, r2, #26
 8002a38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a46:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a48:	e059      	b.n	8002afe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a50:	4b7f      	ldr	r3, [pc, #508]	@ (8002c50 <HAL_ADC_ConfigChannel+0x470>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	0691      	lsls	r1, r2, #26
 8002a5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002a68:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a6a:	e048      	b.n	8002afe <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	069b      	lsls	r3, r3, #26
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d107      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002a8e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	069b      	lsls	r3, r3, #26
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ab2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	069b      	lsls	r3, r3, #26
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ad6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ade:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	069b      	lsls	r3, r3, #26
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d107      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002afa:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002afc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d108      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x33e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x33e>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x340>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f040 8131 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d00f      	beq.n	8002b4e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43da      	mvns	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	400a      	ands	r2, r1
 8002b48:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002b4c:	e049      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b09      	cmp	r3, #9
 8002b6e:	d91c      	bls.n	8002baa <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6999      	ldr	r1, [r3, #24]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b1b      	subs	r3, #27
 8002b82:	2207      	movs	r2, #7
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	4019      	ands	r1, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6898      	ldr	r0, [r3, #8]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	3b1b      	subs	r3, #27
 8002b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	619a      	str	r2, [r3, #24]
 8002ba8:	e01b      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6959      	ldr	r1, [r3, #20]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	4019      	ands	r1, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6898      	ldr	r0, [r3, #8]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bea:	d004      	beq.n	8002bf6 <HAL_ADC_ConfigChannel+0x416>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a18      	ldr	r2, [pc, #96]	@ (8002c54 <HAL_ADC_ConfigChannel+0x474>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x41a>
 8002bf6:	4b18      	ldr	r3, [pc, #96]	@ (8002c58 <HAL_ADC_ConfigChannel+0x478>)
 8002bf8:	e000      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x41c>
 8002bfa:	4b18      	ldr	r3, [pc, #96]	@ (8002c5c <HAL_ADC_ConfigChannel+0x47c>)
 8002bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b10      	cmp	r3, #16
 8002c04:	d105      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d015      	beq.n	8002c3e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c16:	2b11      	cmp	r3, #17
 8002c18:	d105      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c2a:	2b12      	cmp	r3, #18
 8002c2c:	f040 80ac 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f040 80a5 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c46:	d10b      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x480>
 8002c48:	4b02      	ldr	r3, [pc, #8]	@ (8002c54 <HAL_ADC_ConfigChannel+0x474>)
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e023      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x4b6>
 8002c4e:	bf00      	nop
 8002c50:	83fff000 	.word	0x83fff000
 8002c54:	50000100 	.word	0x50000100
 8002c58:	50000300 	.word	0x50000300
 8002c5c:	50000700 	.word	0x50000700
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a4e      	ldr	r2, [pc, #312]	@ (8002da0 <HAL_ADC_ConfigChannel+0x5c0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d103      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x492>
 8002c6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	e011      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x4b6>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a4b      	ldr	r2, [pc, #300]	@ (8002da4 <HAL_ADC_ConfigChannel+0x5c4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d102      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x4a2>
 8002c7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002da8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	e009      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x4b6>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a48      	ldr	r2, [pc, #288]	@ (8002da8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d102      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x4b2>
 8002c8c:	4b45      	ldr	r3, [pc, #276]	@ (8002da4 <HAL_ADC_ConfigChannel+0x5c4>)
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e001      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x4b6>
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d108      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x4d6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x4d6>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x4d8>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d150      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cbc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x4fe>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x4fe>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x500>
 8002cde:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d13c      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d11d      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x548>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cf4:	d118      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d00:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d02:	4b2a      	ldr	r3, [pc, #168]	@ (8002dac <HAL_ADC_ConfigChannel+0x5cc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2a      	ldr	r2, [pc, #168]	@ (8002db0 <HAL_ADC_ConfigChannel+0x5d0>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	0c9a      	lsrs	r2, r3, #18
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d18:	e002      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f9      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d26:	e02e      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b11      	cmp	r3, #17
 8002d2e:	d10b      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x568>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d38:	d106      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d44:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d46:	e01e      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b12      	cmp	r3, #18
 8002d4e:	d11a      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d5a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d5c:	e013      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002d70:	e00a      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002d84:	e000      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d86:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	376c      	adds	r7, #108	@ 0x6c
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	50000100 	.word	0x50000100
 8002da4:	50000400 	.word	0x50000400
 8002da8:	50000500 	.word	0x50000500
 8002dac:	2000000c 	.word	0x2000000c
 8002db0:	431bde83 	.word	0x431bde83

08002db4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b099      	sub	sp, #100	@ 0x64
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dcc:	d102      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002dce:	4b6d      	ldr	r3, [pc, #436]	@ (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	e01a      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d103      	bne.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002dde:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	e011      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a67      	ldr	r2, [pc, #412]	@ (8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d102      	bne.n	8002df6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002df0:	4b66      	ldr	r3, [pc, #408]	@ (8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	e009      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a64      	ldr	r2, [pc, #400]	@ (8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d102      	bne.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002e00:	4b61      	ldr	r3, [pc, #388]	@ (8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	e001      	b.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0b0      	b.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e0a9      	b.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 808d 	bne.w	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f040 8086 	bne.w	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e50:	d004      	beq.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a4b      	ldr	r2, [pc, #300]	@ (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8002f90 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002e5e:	e000      	b.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e60:	4b4c      	ldr	r3, [pc, #304]	@ (8002f94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002e62:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d040      	beq.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e7e:	035b      	lsls	r3, r3, #13
 8002e80:	430b      	orrs	r3, r1
 8002e82:	431a      	orrs	r2, r3
 8002e84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e86:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d108      	bne.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d15c      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d107      	bne.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002eca:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d14b      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ed0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ed8:	f023 030f 	bic.w	r3, r3, #15
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	6811      	ldr	r1, [r2, #0]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	6892      	ldr	r2, [r2, #8]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eea:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eec:	e03c      	b.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ef6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ef8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d108      	bne.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d123      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002f3c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d112      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f4a:	f023 030f 	bic.w	r3, r3, #15
 8002f4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f50:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f52:	e009      	b.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002f66:	e000      	b.n	8002f6a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f68:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002f76:	4618      	mov	r0, r3
 8002f78:	3764      	adds	r7, #100	@ 0x64
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	50000100 	.word	0x50000100
 8002f88:	50000400 	.word	0x50000400
 8002f8c:	50000500 	.word	0x50000500
 8002f90:	50000300 	.word	0x50000300
 8002f94:	50000700 	.word	0x50000700

08002f98 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d108      	bne.n	8002fc4 <ADC_Disable+0x2c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <ADC_Disable+0x2c>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <ADC_Disable+0x2e>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d047      	beq.n	800305a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030d 	and.w	r3, r3, #13
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10f      	bne.n	8002ff8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0202 	orr.w	r2, r2, #2
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2203      	movs	r2, #3
 8002fee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002ff0:	f7fe feba 	bl	8001d68 <HAL_GetTick>
 8002ff4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ff6:	e029      	b.n	800304c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	f043 0210 	orr.w	r2, r3, #16
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e023      	b.n	800305c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003014:	f7fe fea8 	bl	8001d68 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d914      	bls.n	800304c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d10d      	bne.n	800304c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	f043 0210 	orr.w	r2, r3, #16
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003040:	f043 0201 	orr.w	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e007      	b.n	800305c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d0dc      	beq.n	8003014 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <HAL_COMP_Init+0x26>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_COMP_Init+0x2c>
  {
    status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	77fb      	strb	r3, [r7, #31]
 800308e:	e088      	b.n	80031a2 <HAL_COMP_Init+0x13e>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003090:	4b46      	ldr	r3, [pc, #280]	@ (80031ac <HAL_COMP_Init+0x148>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4a45      	ldr	r2, [pc, #276]	@ (80031ac <HAL_COMP_Init+0x148>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6193      	str	r3, [r2, #24]
 800309c:	4b43      	ldr	r3, [pc, #268]	@ (80031ac <HAL_COMP_Init+0x148>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fe f953 	bl	8001354 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030b8:	61bb      	str	r3, [r7, #24]

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0282 	bic.w	r2, r3, #130	@ 0x82
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f023 020c 	bic.w	r2, r3, #12
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	601a      	str	r2, [r3, #0]

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0)) != 0UL) &&
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003168:	2b00      	cmp	r3, #0
 800316a:	d016      	beq.n	800319a <HAL_COMP_Init+0x136>
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d113      	bne.n	800319a <HAL_COMP_Init+0x136>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003172:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <HAL_COMP_Init+0x14c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	4a0e      	ldr	r2, [pc, #56]	@ (80031b4 <HAL_COMP_Init+0x150>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	099b      	lsrs	r3, r3, #6
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 800318c:	e002      	b.n	8003194 <HAL_COMP_Init+0x130>
      {
        wait_loop_index--;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	3b01      	subs	r3, #1
 8003192:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f9      	bne.n	800318e <HAL_COMP_Init+0x12a>
      }
    }

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  return status;
 80031a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	2000000c 	.word	0x2000000c
 80031b4:	053e2d63 	.word	0x053e2d63

080031b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c8:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031d4:	4013      	ands	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ea:	4a04      	ldr	r2, [pc, #16]	@ (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	60d3      	str	r3, [r2, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <__NVIC_GetPriorityGrouping+0x18>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 0307 	and.w	r3, r3, #7
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	2b00      	cmp	r3, #0
 800322c:	db0b      	blt.n	8003246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	f003 021f 	and.w	r2, r3, #31
 8003234:	4907      	ldr	r1, [pc, #28]	@ (8003254 <__NVIC_EnableIRQ+0x38>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2001      	movs	r0, #1
 800323e:	fa00 f202 	lsl.w	r2, r0, r2
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000e100 	.word	0xe000e100

08003258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	6039      	str	r1, [r7, #0]
 8003262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003268:	2b00      	cmp	r3, #0
 800326a:	db0a      	blt.n	8003282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	490c      	ldr	r1, [pc, #48]	@ (80032a4 <__NVIC_SetPriority+0x4c>)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	440b      	add	r3, r1
 800327c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003280:	e00a      	b.n	8003298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	4908      	ldr	r1, [pc, #32]	@ (80032a8 <__NVIC_SetPriority+0x50>)
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	3b04      	subs	r3, #4
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	440b      	add	r3, r1
 8003296:	761a      	strb	r2, [r3, #24]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000e100 	.word	0xe000e100
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	@ 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f1c3 0307 	rsb	r3, r3, #7
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	bf28      	it	cs
 80032ca:	2304      	movcs	r3, #4
 80032cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d902      	bls.n	80032dc <NVIC_EncodePriority+0x30>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3b03      	subs	r3, #3
 80032da:	e000      	b.n	80032de <NVIC_EncodePriority+0x32>
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43da      	mvns	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	401a      	ands	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f4:	f04f 31ff 	mov.w	r1, #4294967295
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	43d9      	mvns	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	4313      	orrs	r3, r2
         );
}
 8003306:	4618      	mov	r0, r3
 8003308:	3724      	adds	r7, #36	@ 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ff4c 	bl	80031b8 <__NVIC_SetPriorityGrouping>
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800333a:	f7ff ff61 	bl	8003200 <__NVIC_GetPriorityGrouping>
 800333e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	6978      	ldr	r0, [r7, #20]
 8003346:	f7ff ffb1 	bl	80032ac <NVIC_EncodePriority>
 800334a:	4602      	mov	r2, r0
 800334c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ff80 	bl	8003258 <__NVIC_SetPriority>
}
 8003358:	bf00      	nop
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff ff54 	bl	800321c <__NVIC_EnableIRQ>
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e037      	b.n	8003402 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033a8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80033ac:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f8b3 	bl	8003550 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	2204      	movs	r2, #4
 8003428:	409a      	lsls	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d024      	beq.n	800347c <HAL_DMA_IRQHandler+0x72>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01f      	beq.n	800347c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d107      	bne.n	800345a <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0204 	bic.w	r2, r2, #4
 8003458:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003462:	2104      	movs	r1, #4
 8003464:	fa01 f202 	lsl.w	r2, r1, r2
 8003468:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d06a      	beq.n	8003548 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800347a:	e065      	b.n	8003548 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	2202      	movs	r2, #2
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d02c      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdc>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d027      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 020a 	bic.w	r2, r2, #10
 80034b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c4:	2102      	movs	r1, #2
 80034c6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d035      	beq.n	8003548 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034e4:	e030      	b.n	8003548 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	2208      	movs	r2, #8
 80034ec:	409a      	lsls	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d028      	beq.n	8003548 <HAL_DMA_IRQHandler+0x13e>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d023      	beq.n	8003548 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 020e 	bic.w	r2, r2, #14
 800350e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003518:	2101      	movs	r1, #1
 800351a:	fa01 f202 	lsl.w	r2, r1, r2
 800351e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	2b00      	cmp	r3, #0
 800353c:	d004      	beq.n	8003548 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
    }
  }
}
 8003546:	e7ff      	b.n	8003548 <HAL_DMA_IRQHandler+0x13e>
 8003548:	bf00      	nop
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	4b14      	ldr	r3, [pc, #80]	@ (80035b0 <DMA_CalcBaseAndBitshift+0x60>)
 8003560:	429a      	cmp	r2, r3
 8003562:	d80f      	bhi.n	8003584 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	4b12      	ldr	r3, [pc, #72]	@ (80035b4 <DMA_CalcBaseAndBitshift+0x64>)
 800356c:	4413      	add	r3, r2
 800356e:	4a12      	ldr	r2, [pc, #72]	@ (80035b8 <DMA_CalcBaseAndBitshift+0x68>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	009a      	lsls	r2, r3, #2
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a0f      	ldr	r2, [pc, #60]	@ (80035bc <DMA_CalcBaseAndBitshift+0x6c>)
 8003580:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003582:	e00e      	b.n	80035a2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	4b0d      	ldr	r3, [pc, #52]	@ (80035c0 <DMA_CalcBaseAndBitshift+0x70>)
 800358c:	4413      	add	r3, r2
 800358e:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <DMA_CalcBaseAndBitshift+0x68>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	009a      	lsls	r2, r3, #2
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a09      	ldr	r2, [pc, #36]	@ (80035c4 <DMA_CalcBaseAndBitshift+0x74>)
 80035a0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40020407 	.word	0x40020407
 80035b4:	bffdfff8 	.word	0xbffdfff8
 80035b8:	cccccccd 	.word	0xcccccccd
 80035bc:	40020000 	.word	0x40020000
 80035c0:	bffdfbf8 	.word	0xbffdfbf8
 80035c4:	40020400 	.word	0x40020400

080035c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035d6:	e154      	b.n	8003882 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	2101      	movs	r1, #1
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	4013      	ands	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8146 	beq.w	800387c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d005      	beq.n	8003608 <HAL_GPIO_Init+0x40>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d130      	bne.n	800366a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800363e:	2201      	movs	r2, #1
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	f003 0201 	and.w	r2, r3, #1
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b03      	cmp	r3, #3
 8003674:	d017      	beq.n	80036a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d123      	bne.n	80036fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	08da      	lsrs	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3208      	adds	r2, #8
 80036ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	220f      	movs	r2, #15
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	08da      	lsrs	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3208      	adds	r2, #8
 80036f4:	6939      	ldr	r1, [r7, #16]
 80036f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	2203      	movs	r2, #3
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0203 	and.w	r2, r3, #3
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80a0 	beq.w	800387c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373c:	4b58      	ldr	r3, [pc, #352]	@ (80038a0 <HAL_GPIO_Init+0x2d8>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	4a57      	ldr	r2, [pc, #348]	@ (80038a0 <HAL_GPIO_Init+0x2d8>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	6193      	str	r3, [r2, #24]
 8003748:	4b55      	ldr	r3, [pc, #340]	@ (80038a0 <HAL_GPIO_Init+0x2d8>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003754:	4a53      	ldr	r2, [pc, #332]	@ (80038a4 <HAL_GPIO_Init+0x2dc>)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	3302      	adds	r3, #2
 800375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	220f      	movs	r2, #15
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4013      	ands	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800377e:	d019      	beq.n	80037b4 <HAL_GPIO_Init+0x1ec>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a49      	ldr	r2, [pc, #292]	@ (80038a8 <HAL_GPIO_Init+0x2e0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <HAL_GPIO_Init+0x1e8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a48      	ldr	r2, [pc, #288]	@ (80038ac <HAL_GPIO_Init+0x2e4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00d      	beq.n	80037ac <HAL_GPIO_Init+0x1e4>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a47      	ldr	r2, [pc, #284]	@ (80038b0 <HAL_GPIO_Init+0x2e8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d007      	beq.n	80037a8 <HAL_GPIO_Init+0x1e0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a46      	ldr	r2, [pc, #280]	@ (80038b4 <HAL_GPIO_Init+0x2ec>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d101      	bne.n	80037a4 <HAL_GPIO_Init+0x1dc>
 80037a0:	2304      	movs	r3, #4
 80037a2:	e008      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037a4:	2305      	movs	r3, #5
 80037a6:	e006      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037a8:	2303      	movs	r3, #3
 80037aa:	e004      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e002      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037b4:	2300      	movs	r3, #0
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	f002 0203 	and.w	r2, r2, #3
 80037bc:	0092      	lsls	r2, r2, #2
 80037be:	4093      	lsls	r3, r2
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037c6:	4937      	ldr	r1, [pc, #220]	@ (80038a4 <HAL_GPIO_Init+0x2dc>)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	089b      	lsrs	r3, r3, #2
 80037cc:	3302      	adds	r3, #2
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037d4:	4b38      	ldr	r3, [pc, #224]	@ (80038b8 <HAL_GPIO_Init+0x2f0>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	43db      	mvns	r3, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4013      	ands	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037f8:	4a2f      	ldr	r2, [pc, #188]	@ (80038b8 <HAL_GPIO_Init+0x2f0>)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037fe:	4b2e      	ldr	r3, [pc, #184]	@ (80038b8 <HAL_GPIO_Init+0x2f0>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	43db      	mvns	r3, r3
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4013      	ands	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003822:	4a25      	ldr	r2, [pc, #148]	@ (80038b8 <HAL_GPIO_Init+0x2f0>)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003828:	4b23      	ldr	r3, [pc, #140]	@ (80038b8 <HAL_GPIO_Init+0x2f0>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	43db      	mvns	r3, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800384c:	4a1a      	ldr	r2, [pc, #104]	@ (80038b8 <HAL_GPIO_Init+0x2f0>)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003852:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <HAL_GPIO_Init+0x2f0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	43db      	mvns	r3, r3
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4013      	ands	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003876:	4a10      	ldr	r2, [pc, #64]	@ (80038b8 <HAL_GPIO_Init+0x2f0>)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	3301      	adds	r3, #1
 8003880:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	f47f aea3 	bne.w	80035d8 <HAL_GPIO_Init+0x10>
  }
}
 8003892:	bf00      	nop
 8003894:	bf00      	nop
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40010000 	.word	0x40010000
 80038a8:	48000400 	.word	0x48000400
 80038ac:	48000800 	.word	0x48000800
 80038b0:	48000c00 	.word	0x48000c00
 80038b4:	48001000 	.word	0x48001000
 80038b8:	40010400 	.word	0x40010400

080038bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	887b      	ldrh	r3, [r7, #2]
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e001      	b.n	80038de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038de:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
 80038f8:	4613      	mov	r3, r2
 80038fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038fc:	787b      	ldrb	r3, [r7, #1]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003902:	887a      	ldrh	r2, [r7, #2]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003908:	e002      	b.n	8003910 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e08d      	b.n	8003a4a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fdce 	bl	80014e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	@ 0x24
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800396c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800397c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	e006      	b.n	80039a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80039a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d108      	bne.n	80039be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	e007      	b.n	80039ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69d9      	ldr	r1, [r3, #28]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	4611      	mov	r1, r2
 8003a60:	461a      	mov	r2, r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	817b      	strh	r3, [r7, #10]
 8003a66:	460b      	mov	r3, r1
 8003a68:	813b      	strh	r3, [r7, #8]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	f040 80f9 	bne.w	8003c6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_I2C_Mem_Write+0x34>
 8003a82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a8e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0ed      	b.n	8003c70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_I2C_Mem_Write+0x4e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e0e6      	b.n	8003c70 <HAL_I2C_Mem_Write+0x21c>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003aaa:	f7fe f95d 	bl	8001d68 <HAL_GetTick>
 8003aae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	2319      	movs	r3, #25
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f955 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0d1      	b.n	8003c70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2221      	movs	r2, #33	@ 0x21
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2240      	movs	r2, #64	@ 0x40
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a3a      	ldr	r2, [r7, #32]
 8003ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003af4:	88f8      	ldrh	r0, [r7, #6]
 8003af6:	893a      	ldrh	r2, [r7, #8]
 8003af8:	8979      	ldrh	r1, [r7, #10]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	9301      	str	r3, [sp, #4]
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	4603      	mov	r3, r0
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f8b9 	bl	8003c7c <I2C_RequestMemoryWrite>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0a9      	b.n	8003c70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2bff      	cmp	r3, #255	@ 0xff
 8003b24:	d90e      	bls.n	8003b44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	22ff      	movs	r2, #255	@ 0xff
 8003b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	8979      	ldrh	r1, [r7, #10]
 8003b34:	2300      	movs	r3, #0
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fad9 	bl	80040f4 <I2C_TransferConfig>
 8003b42:	e00f      	b.n	8003b64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	8979      	ldrh	r1, [r7, #10]
 8003b56:	2300      	movs	r3, #0
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fac8 	bl	80040f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f958 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e07b      	b.n	8003c70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	781a      	ldrb	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d034      	beq.n	8003c1c <HAL_I2C_Mem_Write+0x1c8>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d130      	bne.n	8003c1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2180      	movs	r1, #128	@ 0x80
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f8d1 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e04d      	b.n	8003c70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2bff      	cmp	r3, #255	@ 0xff
 8003bdc:	d90e      	bls.n	8003bfc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	22ff      	movs	r2, #255	@ 0xff
 8003be2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	8979      	ldrh	r1, [r7, #10]
 8003bec:	2300      	movs	r3, #0
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fa7d 	bl	80040f4 <I2C_TransferConfig>
 8003bfa:	e00f      	b.n	8003c1c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	8979      	ldrh	r1, [r7, #10]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fa6c 	bl	80040f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d19e      	bne.n	8003b64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f93e 	bl	8003eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e01a      	b.n	8003c70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c78 <HAL_I2C_Mem_Write+0x224>)
 8003c4e:	400b      	ands	r3, r1
 8003c50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e000      	b.n	8003c70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
  }
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	fe00e800 	.word	0xfe00e800

08003c7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	4608      	mov	r0, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	817b      	strh	r3, [r7, #10]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	813b      	strh	r3, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	8979      	ldrh	r1, [r7, #10]
 8003c9c:	4b20      	ldr	r3, [pc, #128]	@ (8003d20 <I2C_RequestMemoryWrite+0xa4>)
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 fa25 	bl	80040f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	69b9      	ldr	r1, [r7, #24]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f8b5 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e02c      	b.n	8003d18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc4:	893b      	ldrh	r3, [r7, #8]
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cce:	e015      	b.n	8003cfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	69b9      	ldr	r1, [r7, #24]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f89b 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e012      	b.n	8003d18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf2:	893b      	ldrh	r3, [r7, #8]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2200      	movs	r2, #0
 8003d04:	2180      	movs	r1, #128	@ 0x80
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f830 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	80002000 	.word	0x80002000

08003d24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d103      	bne.n	8003d42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d007      	beq.n	8003d60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	619a      	str	r2, [r3, #24]
  }
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d7c:	e03b      	b.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	6839      	ldr	r1, [r7, #0]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f8d6 	bl	8003f34 <I2C_IsErrorOccurred>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e041      	b.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d02d      	beq.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9a:	f7fd ffe5 	bl	8001d68 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d302      	bcc.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d122      	bne.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d113      	bne.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	f043 0220 	orr.w	r2, r3, #32
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e00f      	b.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d0b4      	beq.n	8003d7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e2a:	e033      	b.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f87f 	bl	8003f34 <I2C_IsErrorOccurred>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e031      	b.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d025      	beq.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e48:	f7fd ff8e 	bl	8001d68 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d302      	bcc.n	8003e5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11a      	bne.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d013      	beq.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e007      	b.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d1c4      	bne.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb8:	e02f      	b.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f838 	bl	8003f34 <I2C_IsErrorOccurred>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e02d      	b.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7fd ff4b 	bl	8001d68 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d11a      	bne.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d013      	beq.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	f043 0220 	orr.w	r2, r3, #32
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e007      	b.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d1c8      	bne.n	8003eba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	@ 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d068      	beq.n	8004032 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2210      	movs	r2, #16
 8003f66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f68:	e049      	b.n	8003ffe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d045      	beq.n	8003ffe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f72:	f7fd fef9 	bl	8001d68 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <I2C_IsErrorOccurred+0x54>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d13a      	bne.n	8003ffe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003faa:	d121      	bne.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fb2:	d01d      	beq.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d01a      	beq.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fca:	f7fd fecd 	bl	8001d68 <HAL_GetTick>
 8003fce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fd0:	e00e      	b.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fd2:	f7fd fec9 	bl	8001d68 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b19      	cmp	r3, #25
 8003fde:	d907      	bls.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	f043 0320 	orr.w	r3, r3, #32
 8003fe6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003fee:	e006      	b.n	8003ffe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d1e9      	bne.n	8003fd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b20      	cmp	r3, #32
 800400a:	d003      	beq.n	8004014 <I2C_IsErrorOccurred+0xe0>
 800400c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0aa      	beq.n	8003f6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2220      	movs	r2, #32
 8004022:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004054:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f043 0308 	orr.w	r3, r3, #8
 800406c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80040a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01c      	beq.n	80040e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff fe3b 	bl	8003d24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b0d      	ldr	r3, [pc, #52]	@ (80040f0 <I2C_IsErrorOccurred+0x1bc>)
 80040ba:	400b      	ands	r3, r1
 80040bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80040e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3728      	adds	r7, #40	@ 0x28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	fe00e800 	.word	0xfe00e800

080040f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	817b      	strh	r3, [r7, #10]
 8004102:	4613      	mov	r3, r2
 8004104:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004106:	897b      	ldrh	r3, [r7, #10]
 8004108:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800410c:	7a7b      	ldrb	r3, [r7, #9]
 800410e:	041b      	lsls	r3, r3, #16
 8004110:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004114:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	4313      	orrs	r3, r2
 800411e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004122:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	0d5b      	lsrs	r3, r3, #21
 800412e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004132:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <I2C_TransferConfig+0x60>)
 8004134:	430b      	orrs	r3, r1
 8004136:	43db      	mvns	r3, r3
 8004138:	ea02 0103 	and.w	r1, r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	03ff63ff 	.word	0x03ff63ff

08004158 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b20      	cmp	r3, #32
 800416c:	d138      	bne.n	80041e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004178:	2302      	movs	r3, #2
 800417a:	e032      	b.n	80041e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2224      	movs	r2, #36	@ 0x24
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b20      	cmp	r3, #32
 8004202:	d139      	bne.n	8004278 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800420e:	2302      	movs	r3, #2
 8004210:	e033      	b.n	800427a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2224      	movs	r2, #36	@ 0x24
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004240:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	e000      	b.n	800427a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004278:	2302      	movs	r3, #2
  }
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0b9      	b.n	800440c <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d106      	bne.n	80042b2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f009 fa37 	bl	800d720 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2203      	movs	r2, #3
 80042b6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f003 ff15 	bl	80080ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c4:	2300      	movs	r3, #0
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	e03e      	b.n	8004348 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	3311      	adds	r3, #17
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	440b      	add	r3, r1
 80042ec:	3310      	adds	r3, #16
 80042ee:	7bfa      	ldrb	r2, [r7, #15]
 80042f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	440b      	add	r3, r1
 8004300:	3313      	adds	r3, #19
 8004302:	2200      	movs	r2, #0
 8004304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004306:	7bfa      	ldrb	r2, [r7, #15]
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	440b      	add	r3, r1
 8004314:	3320      	adds	r3, #32
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800431a:	7bfa      	ldrb	r2, [r7, #15]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	440b      	add	r3, r1
 8004328:	3324      	adds	r3, #36	@ 0x24
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	440b      	add	r3, r1
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	3301      	adds	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	791b      	ldrb	r3, [r3, #4]
 800434c:	7bfa      	ldrb	r2, [r7, #15]
 800434e:	429a      	cmp	r2, r3
 8004350:	d3bb      	bcc.n	80042ca <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]
 8004356:	e044      	b.n	80043e2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004358:	7bfa      	ldrb	r2, [r7, #15]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	440b      	add	r3, r1
 8004366:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800436e:	7bfa      	ldrb	r2, [r7, #15]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	440b      	add	r3, r1
 800437c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004380:	7bfa      	ldrb	r2, [r7, #15]
 8004382:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004384:	7bfa      	ldrb	r2, [r7, #15]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	440b      	add	r3, r1
 8004392:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800439a:	7bfa      	ldrb	r2, [r7, #15]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	440b      	add	r3, r1
 80043a8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043b0:	7bfa      	ldrb	r2, [r7, #15]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	440b      	add	r3, r1
 80043be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	440b      	add	r3, r1
 80043d4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	3301      	adds	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	791b      	ldrb	r3, [r3, #4]
 80043e6:	7bfa      	ldrb	r2, [r7, #15]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d3b5      	bcc.n	8004358 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80043f8:	f003 fe94 	bl	8008124 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_PCD_Start+0x16>
 8004426:	2302      	movs	r3, #2
 8004428:	e016      	b.n	8004458 <HAL_PCD_Start+0x44>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f003 fe42 	bl	80080c0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800443c:	2101      	movs	r1, #1
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f009 fc0a 	bl	800dc58 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f006 f8ff 	bl	800a64c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f006 f8f8 	bl	800a662 <USB_ReadInterrupts>
 8004472:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fab1 	bl	80049e6 <PCD_EP_ISR_Handler>

    return;
 8004484:	e0bd      	b.n	8004602 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448c:	2b00      	cmp	r3, #0
 800448e:	d013      	beq.n	80044b8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044a2:	b292      	uxth	r2, r2
 80044a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f009 f9da 	bl	800d862 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80044ae:	2100      	movs	r1, #0
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f8a9 	bl	8004608 <HAL_PCD_SetAddress>

    return;
 80044b6:	e0a4      	b.n	8004602 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00c      	beq.n	80044dc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044d4:	b292      	uxth	r2, r2
 80044d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80044da:	e092      	b.n	8004602 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00c      	beq.n	8004500 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044f8:	b292      	uxth	r2, r2
 80044fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80044fe:	e080      	b.n	8004602 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d027      	beq.n	800455a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0204 	bic.w	r2, r2, #4
 800451c:	b292      	uxth	r2, r2
 800451e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800452a:	b29a      	uxth	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0208 	bic.w	r2, r2, #8
 8004534:	b292      	uxth	r2, r2
 8004536:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f009 f9ca 	bl	800d8d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004552:	b292      	uxth	r2, r2
 8004554:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004558:	e053      	b.n	8004602 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004560:	2b00      	cmp	r3, #0
 8004562:	d027      	beq.n	80045b4 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0208 	orr.w	r2, r2, #8
 8004576:	b292      	uxth	r2, r2
 8004578:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004584:	b29a      	uxth	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800458e:	b292      	uxth	r2, r2
 8004590:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800459c:	b29a      	uxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0204 	orr.w	r2, r2, #4
 80045a6:	b292      	uxth	r2, r2
 80045a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f009 f977 	bl	800d8a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80045b2:	e026      	b.n	8004602 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00f      	beq.n	80045de <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80045d0:	b292      	uxth	r2, r2
 80045d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f009 f935 	bl	800d846 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80045dc:	e011      	b.n	8004602 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00c      	beq.n	8004602 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045fa:	b292      	uxth	r2, r2
 80045fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004600:	bf00      	nop
  }
}
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_PCD_SetAddress+0x1a>
 800461e:	2302      	movs	r3, #2
 8004620:	e012      	b.n	8004648 <HAL_PCD_SetAddress+0x40>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	78fa      	ldrb	r2, [r7, #3]
 800462e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f005 fff3 	bl	800a624 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	4608      	mov	r0, r1
 800465a:	4611      	mov	r1, r2
 800465c:	461a      	mov	r2, r3
 800465e:	4603      	mov	r3, r0
 8004660:	70fb      	strb	r3, [r7, #3]
 8004662:	460b      	mov	r3, r1
 8004664:	803b      	strh	r3, [r7, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800466e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004672:	2b00      	cmp	r3, #0
 8004674:	da0e      	bge.n	8004694 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	f003 0207 	and.w	r2, r3, #7
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	3310      	adds	r3, #16
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	705a      	strb	r2, [r3, #1]
 8004692:	e00e      	b.n	80046b2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	f003 0207 	and.w	r2, r3, #7
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80046b2:	78fb      	ldrb	r3, [r7, #3]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80046be:	883a      	ldrh	r2, [r7, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	78ba      	ldrb	r2, [r7, #2]
 80046c8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046ca:	78bb      	ldrb	r3, [r7, #2]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d102      	bne.n	80046d6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_PCD_EP_Open+0x94>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e00e      	b.n	8004702 <HAL_PCD_EP_Open+0xb2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68f9      	ldr	r1, [r7, #12]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f003 fd34 	bl	8008160 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004700:	7afb      	ldrb	r3, [r7, #11]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	460b      	mov	r3, r1
 8004714:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004716:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800471a:	2b00      	cmp	r3, #0
 800471c:	da0e      	bge.n	800473c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	f003 0207 	and.w	r2, r3, #7
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	3310      	adds	r3, #16
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4413      	add	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	705a      	strb	r2, [r3, #1]
 800473a:	e00e      	b.n	800475a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800473c:	78fb      	ldrb	r3, [r7, #3]
 800473e:	f003 0207 	and.w	r2, r3, #7
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	b2da      	uxtb	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_PCD_EP_Close+0x6a>
 8004770:	2302      	movs	r3, #2
 8004772:	e00e      	b.n	8004792 <HAL_PCD_EP_Close+0x88>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68f9      	ldr	r1, [r7, #12]
 8004782:	4618      	mov	r0, r3
 8004784:	f004 f8b0 	bl	80088e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b086      	sub	sp, #24
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	460b      	mov	r3, r1
 80047a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047aa:	7afb      	ldrb	r3, [r7, #11]
 80047ac:	f003 0207 	and.w	r2, r3, #7
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2200      	movs	r2, #0
 80047d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2200      	movs	r2, #0
 80047d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047da:	7afb      	ldrb	r3, [r7, #11]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6979      	ldr	r1, [r7, #20]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f004 fa68 	bl	8008cc2 <USB_EPStartXfer>

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	f003 0207 	and.w	r2, r3, #7
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	440b      	add	r3, r1
 800481a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	460b      	mov	r3, r1
 800483a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800483c:	7afb      	ldrb	r3, [r7, #11]
 800483e:	f003 0207 	and.w	r2, r3, #7
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	3310      	adds	r3, #16
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2200      	movs	r2, #0
 8004870:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2201      	movs	r2, #1
 8004876:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004878:	7afb      	ldrb	r3, [r7, #11]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	b2da      	uxtb	r2, r3
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6979      	ldr	r1, [r7, #20]
 800488a:	4618      	mov	r0, r3
 800488c:	f004 fa19 	bl	8008cc2 <USB_EPStartXfer>

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	460b      	mov	r3, r1
 80048a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	7912      	ldrb	r2, [r2, #4]
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d901      	bls.n	80048b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e03e      	b.n	8004936 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	da0e      	bge.n	80048de <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	f003 0207 	and.w	r2, r3, #7
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	3310      	adds	r3, #16
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	705a      	strb	r2, [r3, #1]
 80048dc:	e00c      	b.n	80048f8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048de:	78fa      	ldrb	r2, [r7, #3]
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	4413      	add	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_PCD_EP_SetStall+0x7e>
 8004914:	2302      	movs	r3, #2
 8004916:	e00e      	b.n	8004936 <HAL_PCD_EP_SetStall+0x9c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68f9      	ldr	r1, [r7, #12]
 8004926:	4618      	mov	r0, r3
 8004928:	f005 fd7d 	bl	800a426 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	460b      	mov	r3, r1
 8004948:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	7912      	ldrb	r2, [r2, #4]
 8004954:	4293      	cmp	r3, r2
 8004956:	d901      	bls.n	800495c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e040      	b.n	80049de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800495c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004960:	2b00      	cmp	r3, #0
 8004962:	da0e      	bge.n	8004982 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	f003 0207 	and.w	r2, r3, #7
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	3310      	adds	r3, #16
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	4413      	add	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	705a      	strb	r2, [r3, #1]
 8004980:	e00e      	b.n	80049a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	f003 0207 	and.w	r2, r3, #7
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	4413      	add	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049a6:	78fb      	ldrb	r3, [r7, #3]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_PCD_EP_ClrStall+0x82>
 80049bc:	2302      	movs	r3, #2
 80049be:	e00e      	b.n	80049de <HAL_PCD_EP_ClrStall+0xa0>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68f9      	ldr	r1, [r7, #12]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f005 fd7a 	bl	800a4c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b096      	sub	sp, #88	@ 0x58
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049ee:	e3bb      	b.n	8005168 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049f8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80049fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8004a0a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f040 8175 	bne.w	8004cfe <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d14e      	bne.n	8004abe <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a30:	81fb      	strh	r3, [r7, #14]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	89fb      	ldrh	r3, [r7, #14]
 8004a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3310      	adds	r3, #16
 8004a48:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3302      	adds	r3, #2
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	441a      	add	r2, r3
 8004a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a82:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a84:	2100      	movs	r1, #0
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f008 fec3 	bl	800d812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7b1b      	ldrb	r3, [r3, #12]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8368 	beq.w	8005168 <PCD_EP_ISR_Handler+0x782>
 8004a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 8363 	bne.w	8005168 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	7b1b      	ldrb	r3, [r3, #12]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	731a      	strb	r2, [r3, #12]
 8004abc:	e354      	b.n	8005168 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ac4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004ad0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004ad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d034      	beq.n	8004b46 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4413      	add	r3, r2
 8004af0:	3306      	adds	r3, #6
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b06:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b14:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b18:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f005 fdf7 	bl	800a70e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	823b      	strh	r3, [r7, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	8a3a      	ldrh	r2, [r7, #16]
 8004b36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b3a:	b292      	uxth	r2, r2
 8004b3c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f008 fe3a 	bl	800d7b8 <HAL_PCD_SetupStageCallback>
 8004b44:	e310      	b.n	8005168 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b46:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f280 830c 	bge.w	8005168 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	83fb      	strh	r3, [r7, #30]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	8bfa      	ldrh	r2, [r7, #30]
 8004b66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b6a:	b292      	uxth	r2, r2
 8004b6c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4413      	add	r3, r2
 8004b82:	3306      	adds	r3, #6
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b98:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d019      	beq.n	8004bd6 <PCD_EP_ISR_Handler+0x1f0>
 8004ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d015      	beq.n	8004bd6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb0:	6959      	ldr	r1, [r3, #20]
 8004bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f005 fda7 	bl	800a70e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc2:	695a      	ldr	r2, [r3, #20]
 8004bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	441a      	add	r2, r3
 8004bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bcc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004bce:	2100      	movs	r1, #0
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f008 fe03 	bl	800d7dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004be0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004be4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f040 82bd 	bne.w	8005168 <PCD_EP_ISR_Handler+0x782>
 8004bee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004bf2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004bf6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bfa:	f000 82b5 	beq.w	8005168 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	4413      	add	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	801a      	strh	r2, [r3, #0]
 8004c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <PCD_EP_ISR_Handler+0x266>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	801a      	strh	r2, [r3, #0]
 8004c4a:	e039      	b.n	8004cc0 <PCD_EP_ISR_Handler+0x2da>
 8004c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c52:	d818      	bhi.n	8004c86 <PCD_EP_ISR_Handler+0x2a0>
 8004c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <PCD_EP_ISR_Handler+0x288>
 8004c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	029b      	lsls	r3, r3, #10
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	801a      	strh	r2, [r3, #0]
 8004c84:	e01c      	b.n	8004cc0 <PCD_EP_ISR_Handler+0x2da>
 8004c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d102      	bne.n	8004ca0 <PCD_EP_ISR_Handler+0x2ba>
 8004c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	029b      	lsls	r3, r3, #10
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd0:	827b      	strh	r3, [r7, #18]
 8004cd2:	8a7b      	ldrh	r3, [r7, #18]
 8004cd4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004cd8:	827b      	strh	r3, [r7, #18]
 8004cda:	8a7b      	ldrh	r3, [r7, #18]
 8004cdc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ce0:	827b      	strh	r3, [r7, #18]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	8a7b      	ldrh	r3, [r7, #18]
 8004ce8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]
 8004cfc:	e234      	b.n	8005168 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d12:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f280 80fc 	bge.w	8004f14 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004d32:	4013      	ands	r3, r2
 8004d34:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8004d4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d4e:	b292      	uxth	r2, r2
 8004d50:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004d52:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	4413      	add	r3, r2
 8004d66:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d6a:	7b1b      	ldrb	r3, [r3, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d125      	bne.n	8004dbc <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4413      	add	r3, r2
 8004d84:	3306      	adds	r3, #6
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d98:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004d9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 8092 	beq.w	8004eca <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dac:	6959      	ldr	r1, [r3, #20]
 8004dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db0:	88da      	ldrh	r2, [r3, #6]
 8004db2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004db6:	f005 fcaa 	bl	800a70e <USB_ReadPMA>
 8004dba:	e086      	b.n	8004eca <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dbe:	78db      	ldrb	r3, [r3, #3]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d10a      	bne.n	8004dda <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004dc4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f9d9 	bl	8005184 <HAL_PCD_EP_DB_Receive>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004dd8:	e077      	b.n	8004eca <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004e0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d024      	beq.n	8004e82 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e60:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004e64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d02e      	beq.n	8004eca <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e72:	6959      	ldr	r1, [r3, #20]
 8004e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e76:	891a      	ldrh	r2, [r3, #8]
 8004e78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004e7c:	f005 fc47 	bl	800a70e <USB_ReadPMA>
 8004e80:	e023      	b.n	8004eca <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	3306      	adds	r3, #6
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6812      	ldr	r2, [r2, #0]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eaa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004eae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ebc:	6959      	ldr	r1, [r3, #20]
 8004ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec0:	895a      	ldrh	r2, [r3, #10]
 8004ec2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ec6:	f005 fc22 	bl	800a70e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ecc:	69da      	ldr	r2, [r3, #28]
 8004ece:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ed2:	441a      	add	r2, r3
 8004ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ee0:	441a      	add	r2, r3
 8004ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <PCD_EP_ISR_Handler+0x514>
 8004eee:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d206      	bcs.n	8004f08 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f008 fc6b 	bl	800d7dc <HAL_PCD_DataOutStageCallback>
 8004f06:	e005      	b.n	8004f14 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f003 fed7 	bl	8008cc2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004f14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8123 	beq.w	8005168 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004f22:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	3310      	adds	r3, #16
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	4413      	add	r3, r2
 8004f34:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f50:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f74:	78db      	ldrb	r3, [r3, #3]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	f040 80a2 	bne.w	80050c0 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7e:	2200      	movs	r2, #0
 8004f80:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f84:	7b1b      	ldrb	r3, [r3, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 8093 	beq.w	80050b2 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f8c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d046      	beq.n	8005026 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9a:	785b      	ldrb	r3, [r3, #1]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d126      	bne.n	8004fee <PCD_EP_ISR_Handler+0x608>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	4413      	add	r3, r2
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	011a      	lsls	r2, r3, #4
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fc6:	623b      	str	r3, [r7, #32]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	801a      	strh	r2, [r3, #0]
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	e061      	b.n	80050b2 <PCD_EP_ISR_Handler+0x6cc>
 8004fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d15d      	bne.n	80050b2 <PCD_EP_ISR_Handler+0x6cc>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005004:	b29b      	uxth	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500a:	4413      	add	r3, r2
 800500c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800500e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	011a      	lsls	r2, r3, #4
 8005014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005016:	4413      	add	r3, r2
 8005018:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800501c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800501e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005020:	2200      	movs	r2, #0
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	e045      	b.n	80050b2 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800502c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d126      	bne.n	8005082 <PCD_EP_ISR_Handler+0x69c>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	637b      	str	r3, [r7, #52]	@ 0x34
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005042:	b29b      	uxth	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005048:	4413      	add	r3, r2
 800504a:	637b      	str	r3, [r7, #52]	@ 0x34
 800504c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	011a      	lsls	r2, r3, #4
 8005052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005054:	4413      	add	r3, r2
 8005056:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800505a:	633b      	str	r3, [r7, #48]	@ 0x30
 800505c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005066:	b29a      	uxth	r2, r3
 8005068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506a:	801a      	strh	r2, [r3, #0]
 800506c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800507a:	b29a      	uxth	r2, r3
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	801a      	strh	r2, [r3, #0]
 8005080:	e017      	b.n	80050b2 <PCD_EP_ISR_Handler+0x6cc>
 8005082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005084:	785b      	ldrb	r3, [r3, #1]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d113      	bne.n	80050b2 <PCD_EP_ISR_Handler+0x6cc>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005092:	b29b      	uxth	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005098:	4413      	add	r3, r2
 800509a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800509c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	011a      	lsls	r2, r3, #4
 80050a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a4:	4413      	add	r3, r2
 80050a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ae:	2200      	movs	r2, #0
 80050b0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	4619      	mov	r1, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f008 fbaa 	bl	800d812 <HAL_PCD_DataInStageCallback>
 80050be:	e053      	b.n	8005168 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80050c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80050c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d146      	bne.n	800515a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4413      	add	r3, r2
 80050e0:	3302      	adds	r3, #2
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80050f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fa:	699a      	ldr	r2, [r3, #24]
 80050fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005100:	429a      	cmp	r2, r3
 8005102:	d907      	bls.n	8005114 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8005104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800510c:	1ad2      	subs	r2, r2, r3
 800510e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005110:	619a      	str	r2, [r3, #24]
 8005112:	e002      	b.n	800511a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8005114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005116:	2200      	movs	r2, #0
 8005118:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800511a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f008 fb72 	bl	800d812 <HAL_PCD_DataInStageCallback>
 800512e:	e01b      	b.n	8005168 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005132:	695a      	ldr	r2, [r3, #20]
 8005134:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005138:	441a      	add	r2, r3
 800513a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800513e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005140:	69da      	ldr	r2, [r3, #28]
 8005142:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005146:	441a      	add	r2, r3
 8005148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800514a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005152:	4618      	mov	r0, r3
 8005154:	f003 fdb5 	bl	8008cc2 <USB_EPStartXfer>
 8005158:	e006      	b.n	8005168 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800515a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800515e:	461a      	mov	r2, r3
 8005160:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f91b 	bl	800539e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005170:	b29b      	uxth	r3, r3
 8005172:	b21b      	sxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	f6ff ac3b 	blt.w	80049f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3758      	adds	r7, #88	@ 0x58
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	4613      	mov	r3, r2
 8005190:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d07e      	beq.n	800529a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4413      	add	r3, r2
 80051b0:	3302      	adds	r3, #2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	8b7b      	ldrh	r3, [r7, #26]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d306      	bcc.n	80051de <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	699a      	ldr	r2, [r3, #24]
 80051d4:	8b7b      	ldrh	r3, [r7, #26]
 80051d6:	1ad2      	subs	r2, r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	619a      	str	r2, [r3, #24]
 80051dc:	e002      	b.n	80051e4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2200      	movs	r2, #0
 80051e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d123      	bne.n	8005234 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005206:	833b      	strh	r3, [r7, #24]
 8005208:	8b3b      	ldrh	r3, [r7, #24]
 800520a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800520e:	833b      	strh	r3, [r7, #24]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	8b3b      	ldrh	r3, [r7, #24]
 8005220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800522c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01f      	beq.n	800527e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005258:	82fb      	strh	r3, [r7, #22]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	441a      	add	r2, r3
 8005268:	8afb      	ldrh	r3, [r7, #22]
 800526a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800526e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005276:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800527a:	b29b      	uxth	r3, r3
 800527c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800527e:	8b7b      	ldrh	r3, [r7, #26]
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 8087 	beq.w	8005394 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6959      	ldr	r1, [r3, #20]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	891a      	ldrh	r2, [r3, #8]
 8005292:	8b7b      	ldrh	r3, [r7, #26]
 8005294:	f005 fa3b 	bl	800a70e <USB_ReadPMA>
 8005298:	e07c      	b.n	8005394 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	3306      	adds	r3, #6
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	699a      	ldr	r2, [r3, #24]
 80052c8:	8b7b      	ldrh	r3, [r7, #26]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d306      	bcc.n	80052dc <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	8b7b      	ldrh	r3, [r7, #26]
 80052d4:	1ad2      	subs	r2, r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	619a      	str	r2, [r3, #24]
 80052da:	e002      	b.n	80052e2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2200      	movs	r2, #0
 80052e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d123      	bne.n	8005332 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005304:	83fb      	strh	r3, [r7, #30]
 8005306:	8bfb      	ldrh	r3, [r7, #30]
 8005308:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800530c:	83fb      	strh	r3, [r7, #30]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	441a      	add	r2, r3
 800531c:	8bfb      	ldrh	r3, [r7, #30]
 800531e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800532a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800532e:	b29b      	uxth	r3, r3
 8005330:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d11f      	bne.n	800537c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005356:	83bb      	strh	r3, [r7, #28]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	441a      	add	r2, r3
 8005366:	8bbb      	ldrh	r3, [r7, #28]
 8005368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800536c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005374:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005378:	b29b      	uxth	r3, r3
 800537a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800537c:	8b7b      	ldrh	r3, [r7, #26]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d008      	beq.n	8005394 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6959      	ldr	r1, [r3, #20]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	895a      	ldrh	r2, [r3, #10]
 800538e:	8b7b      	ldrh	r3, [r7, #26]
 8005390:	f005 f9bd 	bl	800a70e <USB_ReadPMA>
    }
  }

  return count;
 8005394:	8b7b      	ldrh	r3, [r7, #26]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b0a4      	sub	sp, #144	@ 0x90
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	4613      	mov	r3, r2
 80053aa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 81dd 	beq.w	8005772 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	4413      	add	r3, r2
 80053cc:	3302      	adds	r3, #2
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	699a      	ldr	r2, [r3, #24]
 80053e8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d907      	bls.n	8005400 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80053f8:	1ad2      	subs	r2, r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	619a      	str	r2, [r3, #24]
 80053fe:	e002      	b.n	8005406 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2200      	movs	r2, #0
 8005404:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f040 80b9 	bne.w	8005582 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d126      	bne.n	8005466 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005426:	b29b      	uxth	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542c:	4413      	add	r3, r2
 800542e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	011a      	lsls	r2, r3, #4
 8005436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005438:	4413      	add	r3, r2
 800543a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800543e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	b29b      	uxth	r3, r3
 8005446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800544a:	b29a      	uxth	r2, r3
 800544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544e:	801a      	strh	r2, [r3, #0]
 8005450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545e:	b29a      	uxth	r2, r3
 8005460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005462:	801a      	strh	r2, [r3, #0]
 8005464:	e01a      	b.n	800549c <HAL_PCD_EP_DB_Transmit+0xfe>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d116      	bne.n	800549c <HAL_PCD_EP_DB_Transmit+0xfe>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	637b      	str	r3, [r7, #52]	@ 0x34
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800547c:	b29b      	uxth	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005482:	4413      	add	r3, r2
 8005484:	637b      	str	r3, [r7, #52]	@ 0x34
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	011a      	lsls	r2, r3, #4
 800548c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548e:	4413      	add	r3, r2
 8005490:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005494:	633b      	str	r3, [r7, #48]	@ 0x30
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	2200      	movs	r2, #0
 800549a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	785b      	ldrb	r3, [r3, #1]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d126      	bne.n	80054f8 <HAL_PCD_EP_DB_Transmit+0x15a>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	4413      	add	r3, r2
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	011a      	lsls	r2, r3, #4
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	4413      	add	r3, r2
 80054cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054dc:	b29a      	uxth	r2, r3
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	e017      	b.n	8005528 <HAL_PCD_EP_DB_Transmit+0x18a>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d113      	bne.n	8005528 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005508:	b29b      	uxth	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	4413      	add	r3, r2
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	011a      	lsls	r2, r3, #4
 8005518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551a:	4413      	add	r3, r2
 800551c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005520:	623b      	str	r3, [r7, #32]
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	2200      	movs	r2, #0
 8005526:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	4619      	mov	r1, r3
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f008 f96f 	bl	800d812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 82fc 	beq.w	8005b38 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555a:	82fb      	strh	r3, [r7, #22]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	441a      	add	r2, r3
 800556a:	8afb      	ldrh	r3, [r7, #22]
 800556c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005570:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005574:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800557c:	b29b      	uxth	r3, r3
 800557e:	8013      	strh	r3, [r2, #0]
 8005580:	e2da      	b.n	8005b38 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005582:	88fb      	ldrh	r3, [r7, #6]
 8005584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d021      	beq.n	80055d0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	441a      	add	r2, r3
 80055b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80055bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	f040 82ae 	bne.w	8005b38 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80055e4:	441a      	add	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80055f2:	441a      	add	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	6a1a      	ldr	r2, [r3, #32]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	429a      	cmp	r2, r3
 8005602:	d30b      	bcc.n	800561c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	6a1a      	ldr	r2, [r3, #32]
 8005610:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005614:	1ad2      	subs	r2, r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	621a      	str	r2, [r3, #32]
 800561a:	e017      	b.n	800564c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d108      	bne.n	8005636 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005624:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005628:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005634:	e00a      	b.n	800564c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2200      	movs	r2, #0
 800564a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	785b      	ldrb	r3, [r3, #1]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d165      	bne.n	8005720 <HAL_PCD_EP_DB_Transmit+0x382>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005662:	b29b      	uxth	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005668:	4413      	add	r3, r2
 800566a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	011a      	lsls	r2, r3, #4
 8005672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005674:	4413      	add	r3, r2
 8005676:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800567a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800567c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005686:	b29a      	uxth	r2, r3
 8005688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <HAL_PCD_EP_DB_Transmit+0x30c>
 8005694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	e057      	b.n	800575a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80056aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80056b0:	d818      	bhi.n	80056e4 <HAL_PCD_EP_DB_Transmit+0x346>
 80056b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056b6:	085b      	lsrs	r3, r3, #1
 80056b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_PCD_EP_DB_Transmit+0x32e>
 80056c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056c8:	3301      	adds	r3, #1
 80056ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	029b      	lsls	r3, r3, #10
 80056d8:	b29b      	uxth	r3, r3
 80056da:	4313      	orrs	r3, r2
 80056dc:	b29a      	uxth	r2, r3
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	e03a      	b.n	800575a <HAL_PCD_EP_DB_Transmit+0x3bc>
 80056e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <HAL_PCD_EP_DB_Transmit+0x360>
 80056f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056fa:	3b01      	subs	r3, #1
 80056fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29a      	uxth	r2, r3
 8005704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005706:	b29b      	uxth	r3, r3
 8005708:	029b      	lsls	r3, r3, #10
 800570a:	b29b      	uxth	r3, r3
 800570c:	4313      	orrs	r3, r2
 800570e:	b29b      	uxth	r3, r3
 8005710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005718:	b29a      	uxth	r2, r3
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	801a      	strh	r2, [r3, #0]
 800571e:	e01c      	b.n	800575a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d118      	bne.n	800575a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	647b      	str	r3, [r7, #68]	@ 0x44
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005736:	b29b      	uxth	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800573c:	4413      	add	r3, r2
 800573e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	011a      	lsls	r2, r3, #4
 8005746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005748:	4413      	add	r3, r2
 800574a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800574e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005754:	b29a      	uxth	r2, r3
 8005756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005758:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6959      	ldr	r1, [r3, #20]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	891a      	ldrh	r2, [r3, #8]
 8005766:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800576a:	b29b      	uxth	r3, r3
 800576c:	f004 ff89 	bl	800a682 <USB_WritePMA>
 8005770:	e1e2      	b.n	8005b38 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800577a:	b29b      	uxth	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	3306      	adds	r3, #6
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800579a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d307      	bcc.n	80057ba <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80057b2:	1ad2      	subs	r2, r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	619a      	str	r2, [r3, #24]
 80057b8:	e002      	b.n	80057c0 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2200      	movs	r2, #0
 80057be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f040 80c0 	bne.w	800594a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d126      	bne.n	8005820 <HAL_PCD_EP_DB_Transmit+0x482>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	461a      	mov	r2, r3
 80057e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057e6:	4413      	add	r3, r2
 80057e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	011a      	lsls	r2, r3, #4
 80057f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057f2:	4413      	add	r3, r2
 80057f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005804:	b29a      	uxth	r2, r3
 8005806:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005808:	801a      	strh	r2, [r3, #0]
 800580a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	b29b      	uxth	r3, r3
 8005810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005818:	b29a      	uxth	r2, r3
 800581a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800581c:	801a      	strh	r2, [r3, #0]
 800581e:	e01a      	b.n	8005856 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	785b      	ldrb	r3, [r3, #1]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d116      	bne.n	8005856 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	667b      	str	r3, [r7, #100]	@ 0x64
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005836:	b29b      	uxth	r3, r3
 8005838:	461a      	mov	r2, r3
 800583a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800583c:	4413      	add	r3, r2
 800583e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	011a      	lsls	r2, r3, #4
 8005846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005848:	4413      	add	r3, r2
 800584a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800584e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005850:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005852:	2200      	movs	r2, #0
 8005854:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	677b      	str	r3, [r7, #116]	@ 0x74
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d12b      	bne.n	80058bc <HAL_PCD_EP_DB_Transmit+0x51e>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005872:	b29b      	uxth	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005878:	4413      	add	r3, r2
 800587a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	011a      	lsls	r2, r3, #4
 8005882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005884:	4413      	add	r3, r2
 8005886:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800588a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800588e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800589a:	b29a      	uxth	r2, r3
 800589c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058a0:	801a      	strh	r2, [r3, #0]
 80058a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	e017      	b.n	80058ec <HAL_PCD_EP_DB_Transmit+0x54e>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d113      	bne.n	80058ec <HAL_PCD_EP_DB_Transmit+0x54e>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	461a      	mov	r2, r3
 80058d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058d2:	4413      	add	r3, r2
 80058d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	011a      	lsls	r2, r3, #4
 80058dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058de:	4413      	add	r3, r2
 80058e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80058e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058e8:	2200      	movs	r2, #0
 80058ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	4619      	mov	r1, r3
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f007 ff8d 	bl	800d812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80058f8:	88fb      	ldrh	r3, [r7, #6]
 80058fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f040 811a 	bne.w	8005b38 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	b29b      	uxth	r3, r3
 8005916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800591a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800593c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005944:	b29b      	uxth	r3, r3
 8005946:	8013      	strh	r3, [r2, #0]
 8005948:	e0f6      	b.n	8005b38 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800594a:	88fb      	ldrh	r3, [r7, #6]
 800594c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d121      	bne.n	8005998 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29b      	uxth	r3, r3
 8005966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800596a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800596e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	441a      	add	r2, r3
 8005980:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005984:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005988:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800598c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005994:	b29b      	uxth	r3, r3
 8005996:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800599e:	2b01      	cmp	r3, #1
 80059a0:	f040 80ca 	bne.w	8005b38 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80059ac:	441a      	add	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	69da      	ldr	r2, [r3, #28]
 80059b6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80059ba:	441a      	add	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d30b      	bcc.n	80059e4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	6a1a      	ldr	r2, [r3, #32]
 80059d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059dc:	1ad2      	subs	r2, r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	621a      	str	r2, [r3, #32]
 80059e2:	e017      	b.n	8005a14 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d108      	bne.n	80059fe <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80059ec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80059f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80059fc:	e00a      	b.n	8005a14 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d165      	bne.n	8005aee <HAL_PCD_EP_DB_Transmit+0x750>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a36:	4413      	add	r3, r2
 8005a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	011a      	lsls	r2, r3, #4
 8005a40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a42:	4413      	add	r3, r2
 8005a44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <HAL_PCD_EP_DB_Transmit+0x6da>
 8005a62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a74:	801a      	strh	r2, [r3, #0]
 8005a76:	e054      	b.n	8005b22 <HAL_PCD_EP_DB_Transmit+0x784>
 8005a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a7e:	d818      	bhi.n	8005ab2 <HAL_PCD_EP_DB_Transmit+0x714>
 8005a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a84:	085b      	lsrs	r3, r3, #1
 8005a86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_PCD_EP_DB_Transmit+0x6fc>
 8005a94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a96:	3301      	adds	r3, #1
 8005a98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	029b      	lsls	r3, r3, #10
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	e037      	b.n	8005b22 <HAL_PCD_EP_DB_Transmit+0x784>
 8005ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d102      	bne.n	8005acc <HAL_PCD_EP_DB_Transmit+0x72e>
 8005ac6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005acc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	029b      	lsls	r3, r3, #10
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	4313      	orrs	r3, r2
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	e019      	b.n	8005b22 <HAL_PCD_EP_DB_Transmit+0x784>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	785b      	ldrb	r3, [r3, #1]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d115      	bne.n	8005b22 <HAL_PCD_EP_DB_Transmit+0x784>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b04:	4413      	add	r3, r2
 8005b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	011a      	lsls	r2, r3, #4
 8005b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b10:	4413      	add	r3, r2
 8005b12:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b16:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b20:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6959      	ldr	r1, [r3, #20]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	895a      	ldrh	r2, [r3, #10]
 8005b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f004 fda5 	bl	800a682 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b52:	82bb      	strh	r3, [r7, #20]
 8005b54:	8abb      	ldrh	r3, [r7, #20]
 8005b56:	f083 0310 	eor.w	r3, r3, #16
 8005b5a:	82bb      	strh	r3, [r7, #20]
 8005b5c:	8abb      	ldrh	r3, [r7, #20]
 8005b5e:	f083 0320 	eor.w	r3, r3, #32
 8005b62:	82bb      	strh	r3, [r7, #20]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	8abb      	ldrh	r3, [r7, #20]
 8005b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3790      	adds	r7, #144	@ 0x90
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b087      	sub	sp, #28
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	607b      	str	r3, [r7, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	817b      	strh	r3, [r7, #10]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005ba4:	897b      	ldrh	r3, [r7, #10]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bb0:	897b      	ldrh	r3, [r7, #10]
 8005bb2:	f003 0207 	and.w	r2, r3, #7
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	3310      	adds	r3, #16
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]
 8005bc6:	e009      	b.n	8005bdc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005bc8:	897a      	ldrh	r2, [r7, #10]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4413      	add	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005bdc:	893b      	ldrh	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d107      	bne.n	8005bf2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2200      	movs	r2, #0
 8005be6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	80da      	strh	r2, [r3, #6]
 8005bf0:	e00b      	b.n	8005c0a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	0c1b      	lsrs	r3, r3, #16
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f001 b823 	b.w	8006c84 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 817d 	beq.w	8005f4e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005c54:	4bbc      	ldr	r3, [pc, #752]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 030c 	and.w	r3, r3, #12
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d00c      	beq.n	8005c7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c60:	4bb9      	ldr	r3, [pc, #740]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 030c 	and.w	r3, r3, #12
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d15c      	bne.n	8005d26 <HAL_RCC_OscConfig+0x10e>
 8005c6c:	4bb6      	ldr	r3, [pc, #728]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c78:	d155      	bne.n	8005d26 <HAL_RCC_OscConfig+0x10e>
 8005c7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c7e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c82:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8005c86:	fa93 f3a3 	rbit	r3, r3
 8005c8a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005c8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c92:	fab3 f383 	clz	r3, r3
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	095b      	lsrs	r3, r3, #5
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d102      	bne.n	8005cac <HAL_RCC_OscConfig+0x94>
 8005ca6:	4ba8      	ldr	r3, [pc, #672]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	e015      	b.n	8005cd8 <HAL_RCC_OscConfig+0xc0>
 8005cac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cb0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005cb8:	fa93 f3a3 	rbit	r3, r3
 8005cbc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005cc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cc4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005cc8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005ccc:	fa93 f3a3 	rbit	r3, r3
 8005cd0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005cd4:	4b9c      	ldr	r3, [pc, #624]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005cdc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005ce0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005ce4:	fa92 f2a2 	rbit	r2, r2
 8005ce8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8005cec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005cf0:	fab2 f282 	clz	r2, r2
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	f042 0220 	orr.w	r2, r2, #32
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	f002 021f 	and.w	r2, r2, #31
 8005d00:	2101      	movs	r1, #1
 8005d02:	fa01 f202 	lsl.w	r2, r1, r2
 8005d06:	4013      	ands	r3, r2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 811f 	beq.w	8005f4c <HAL_RCC_OscConfig+0x334>
 8005d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f040 8116 	bne.w	8005f4c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	f000 bfaf 	b.w	8006c84 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d36:	d106      	bne.n	8005d46 <HAL_RCC_OscConfig+0x12e>
 8005d38:	4b83      	ldr	r3, [pc, #524]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a82      	ldr	r2, [pc, #520]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	e036      	b.n	8005db4 <HAL_RCC_OscConfig+0x19c>
 8005d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10c      	bne.n	8005d70 <HAL_RCC_OscConfig+0x158>
 8005d56:	4b7c      	ldr	r3, [pc, #496]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a7b      	ldr	r2, [pc, #492]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	4b79      	ldr	r3, [pc, #484]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a78      	ldr	r2, [pc, #480]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005d68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e021      	b.n	8005db4 <HAL_RCC_OscConfig+0x19c>
 8005d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCC_OscConfig+0x184>
 8005d82:	4b71      	ldr	r3, [pc, #452]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a70      	ldr	r2, [pc, #448]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	4b6e      	ldr	r3, [pc, #440]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a6d      	ldr	r2, [pc, #436]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e00b      	b.n	8005db4 <HAL_RCC_OscConfig+0x19c>
 8005d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a69      	ldr	r2, [pc, #420]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	4b67      	ldr	r3, [pc, #412]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a66      	ldr	r2, [pc, #408]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005db2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005db4:	4b64      	ldr	r3, [pc, #400]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db8:	f023 020f 	bic.w	r2, r3, #15
 8005dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	495f      	ldr	r1, [pc, #380]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d059      	beq.n	8005e92 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dde:	f7fb ffc3 	bl	8001d68 <HAL_GetTick>
 8005de2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de6:	e00a      	b.n	8005dfe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005de8:	f7fb ffbe 	bl	8001d68 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b64      	cmp	r3, #100	@ 0x64
 8005df6:	d902      	bls.n	8005dfe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	f000 bf43 	b.w	8006c84 <HAL_RCC_OscConfig+0x106c>
 8005dfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e02:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e06:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005e0a:	fa93 f3a3 	rbit	r3, r3
 8005e0e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005e12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e16:	fab3 f383 	clz	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f043 0301 	orr.w	r3, r3, #1
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d102      	bne.n	8005e30 <HAL_RCC_OscConfig+0x218>
 8005e2a:	4b47      	ldr	r3, [pc, #284]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	e015      	b.n	8005e5c <HAL_RCC_OscConfig+0x244>
 8005e30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e34:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e38:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005e3c:	fa93 f3a3 	rbit	r3, r3
 8005e40:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005e44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e48:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005e4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005e50:	fa93 f3a3 	rbit	r3, r3
 8005e54:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005e58:	4b3b      	ldr	r3, [pc, #236]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005e60:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005e64:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005e68:	fa92 f2a2 	rbit	r2, r2
 8005e6c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005e70:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005e74:	fab2 f282 	clz	r2, r2
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	f042 0220 	orr.w	r2, r2, #32
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	f002 021f 	and.w	r2, r2, #31
 8005e84:	2101      	movs	r1, #1
 8005e86:	fa01 f202 	lsl.w	r2, r1, r2
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0ab      	beq.n	8005de8 <HAL_RCC_OscConfig+0x1d0>
 8005e90:	e05d      	b.n	8005f4e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e92:	f7fb ff69 	bl	8001d68 <HAL_GetTick>
 8005e96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9a:	e00a      	b.n	8005eb2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e9c:	f7fb ff64 	bl	8001d68 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b64      	cmp	r3, #100	@ 0x64
 8005eaa:	d902      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	f000 bee9 	b.w	8006c84 <HAL_RCC_OscConfig+0x106c>
 8005eb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005eb6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005ebe:	fa93 f3a3 	rbit	r3, r3
 8005ec2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005ec6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eca:	fab3 f383 	clz	r3, r3
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d102      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x2cc>
 8005ede:	4b1a      	ldr	r3, [pc, #104]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	e015      	b.n	8005f10 <HAL_RCC_OscConfig+0x2f8>
 8005ee4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ee8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005ef0:	fa93 f3a3 	rbit	r3, r3
 8005ef4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005ef8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005efc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005f00:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005f04:	fa93 f3a3 	rbit	r3, r3
 8005f08:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8005f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f48 <HAL_RCC_OscConfig+0x330>)
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005f14:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005f18:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005f1c:	fa92 f2a2 	rbit	r2, r2
 8005f20:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005f24:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005f28:	fab2 f282 	clz	r2, r2
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	f042 0220 	orr.w	r2, r2, #32
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	f002 021f 	and.w	r2, r2, #31
 8005f38:	2101      	movs	r1, #1
 8005f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f3e:	4013      	ands	r3, r2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1ab      	bne.n	8005e9c <HAL_RCC_OscConfig+0x284>
 8005f44:	e003      	b.n	8005f4e <HAL_RCC_OscConfig+0x336>
 8005f46:	bf00      	nop
 8005f48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 817d 	beq.w	800625e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005f64:	4ba6      	ldr	r3, [pc, #664]	@ (8006200 <HAL_RCC_OscConfig+0x5e8>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f003 030c 	and.w	r3, r3, #12
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00b      	beq.n	8005f88 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005f70:	4ba3      	ldr	r3, [pc, #652]	@ (8006200 <HAL_RCC_OscConfig+0x5e8>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 030c 	and.w	r3, r3, #12
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d172      	bne.n	8006062 <HAL_RCC_OscConfig+0x44a>
 8005f7c:	4ba0      	ldr	r3, [pc, #640]	@ (8006200 <HAL_RCC_OscConfig+0x5e8>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d16c      	bne.n	8006062 <HAL_RCC_OscConfig+0x44a>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005f92:	fa93 f3a3 	rbit	r3, r3
 8005f96:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005f9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f9e:	fab3 f383 	clz	r3, r3
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	f043 0301 	orr.w	r3, r3, #1
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d102      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x3a0>
 8005fb2:	4b93      	ldr	r3, [pc, #588]	@ (8006200 <HAL_RCC_OscConfig+0x5e8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	e013      	b.n	8005fe0 <HAL_RCC_OscConfig+0x3c8>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbe:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005fc2:	fa93 f3a3 	rbit	r3, r3
 8005fc6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005fca:	2302      	movs	r3, #2
 8005fcc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005fd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005fd4:	fa93 f3a3 	rbit	r3, r3
 8005fd8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005fdc:	4b88      	ldr	r3, [pc, #544]	@ (8006200 <HAL_RCC_OscConfig+0x5e8>)
 8005fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8005fe6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005fea:	fa92 f2a2 	rbit	r2, r2
 8005fee:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8005ff2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005ff6:	fab2 f282 	clz	r2, r2
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	f042 0220 	orr.w	r2, r2, #32
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	f002 021f 	and.w	r2, r2, #31
 8006006:	2101      	movs	r1, #1
 8006008:	fa01 f202 	lsl.w	r2, r1, r2
 800600c:	4013      	ands	r3, r2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HAL_RCC_OscConfig+0x410>
 8006012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d002      	beq.n	8006028 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	f000 be2e 	b.w	8006c84 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006028:	4b75      	ldr	r3, [pc, #468]	@ (8006200 <HAL_RCC_OscConfig+0x5e8>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006034:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	21f8      	movs	r1, #248	@ 0xf8
 800603e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006042:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8006046:	fa91 f1a1 	rbit	r1, r1
 800604a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800604e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8006052:	fab1 f181 	clz	r1, r1
 8006056:	b2c9      	uxtb	r1, r1
 8006058:	408b      	lsls	r3, r1
 800605a:	4969      	ldr	r1, [pc, #420]	@ (8006200 <HAL_RCC_OscConfig+0x5e8>)
 800605c:	4313      	orrs	r3, r2
 800605e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006060:	e0fd      	b.n	800625e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006066:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 8088 	beq.w	8006184 <HAL_RCC_OscConfig+0x56c>
 8006074:	2301      	movs	r3, #1
 8006076:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800607a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800607e:	fa93 f3a3 	rbit	r3, r3
 8006082:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8006086:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800608a:	fab3 f383 	clz	r3, r3
 800608e:	b2db      	uxtb	r3, r3
 8006090:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006094:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	461a      	mov	r2, r3
 800609c:	2301      	movs	r3, #1
 800609e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a0:	f7fb fe62 	bl	8001d68 <HAL_GetTick>
 80060a4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a8:	e00a      	b.n	80060c0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060aa:	f7fb fe5d 	bl	8001d68 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d902      	bls.n	80060c0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	f000 bde2 	b.w	8006c84 <HAL_RCC_OscConfig+0x106c>
 80060c0:	2302      	movs	r3, #2
 80060c2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80060ca:	fa93 f3a3 	rbit	r3, r3
 80060ce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80060d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d6:	fab3 f383 	clz	r3, r3
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d102      	bne.n	80060f0 <HAL_RCC_OscConfig+0x4d8>
 80060ea:	4b45      	ldr	r3, [pc, #276]	@ (8006200 <HAL_RCC_OscConfig+0x5e8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	e013      	b.n	8006118 <HAL_RCC_OscConfig+0x500>
 80060f0:	2302      	movs	r3, #2
 80060f2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80060fa:	fa93 f3a3 	rbit	r3, r3
 80060fe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8006102:	2302      	movs	r3, #2
 8006104:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8006108:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800610c:	fa93 f3a3 	rbit	r3, r3
 8006110:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8006114:	4b3a      	ldr	r3, [pc, #232]	@ (8006200 <HAL_RCC_OscConfig+0x5e8>)
 8006116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006118:	2202      	movs	r2, #2
 800611a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800611e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8006122:	fa92 f2a2 	rbit	r2, r2
 8006126:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800612a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800612e:	fab2 f282 	clz	r2, r2
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	f042 0220 	orr.w	r2, r2, #32
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	f002 021f 	and.w	r2, r2, #31
 800613e:	2101      	movs	r1, #1
 8006140:	fa01 f202 	lsl.w	r2, r1, r2
 8006144:	4013      	ands	r3, r2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0af      	beq.n	80060aa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614a:	4b2d      	ldr	r3, [pc, #180]	@ (8006200 <HAL_RCC_OscConfig+0x5e8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006156:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	21f8      	movs	r1, #248	@ 0xf8
 8006160:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006164:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006168:	fa91 f1a1 	rbit	r1, r1
 800616c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8006170:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8006174:	fab1 f181 	clz	r1, r1
 8006178:	b2c9      	uxtb	r1, r1
 800617a:	408b      	lsls	r3, r1
 800617c:	4920      	ldr	r1, [pc, #128]	@ (8006200 <HAL_RCC_OscConfig+0x5e8>)
 800617e:	4313      	orrs	r3, r2
 8006180:	600b      	str	r3, [r1, #0]
 8006182:	e06c      	b.n	800625e <HAL_RCC_OscConfig+0x646>
 8006184:	2301      	movs	r3, #1
 8006186:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800618e:	fa93 f3a3 	rbit	r3, r3
 8006192:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8006196:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800619a:	fab3 f383 	clz	r3, r3
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80061a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	461a      	mov	r2, r3
 80061ac:	2300      	movs	r3, #0
 80061ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b0:	f7fb fdda 	bl	8001d68 <HAL_GetTick>
 80061b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061b8:	e00a      	b.n	80061d0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ba:	f7fb fdd5 	bl	8001d68 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d902      	bls.n	80061d0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	f000 bd5a 	b.w	8006c84 <HAL_RCC_OscConfig+0x106c>
 80061d0:	2302      	movs	r3, #2
 80061d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061da:	fa93 f3a3 	rbit	r3, r3
 80061de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80061e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061e6:	fab3 f383 	clz	r3, r3
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	f043 0301 	orr.w	r3, r3, #1
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d104      	bne.n	8006204 <HAL_RCC_OscConfig+0x5ec>
 80061fa:	4b01      	ldr	r3, [pc, #4]	@ (8006200 <HAL_RCC_OscConfig+0x5e8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	e015      	b.n	800622c <HAL_RCC_OscConfig+0x614>
 8006200:	40021000 	.word	0x40021000
 8006204:	2302      	movs	r3, #2
 8006206:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800620e:	fa93 f3a3 	rbit	r3, r3
 8006212:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006216:	2302      	movs	r3, #2
 8006218:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800621c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006220:	fa93 f3a3 	rbit	r3, r3
 8006224:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006228:	4bc8      	ldr	r3, [pc, #800]	@ (800654c <HAL_RCC_OscConfig+0x934>)
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	2202      	movs	r2, #2
 800622e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8006232:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006236:	fa92 f2a2 	rbit	r2, r2
 800623a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800623e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8006242:	fab2 f282 	clz	r2, r2
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	f042 0220 	orr.w	r2, r2, #32
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	f002 021f 	and.w	r2, r2, #31
 8006252:	2101      	movs	r1, #1
 8006254:	fa01 f202 	lsl.w	r2, r1, r2
 8006258:	4013      	ands	r3, r2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1ad      	bne.n	80061ba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800625e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006262:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 8110 	beq.w	8006494 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006278:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d079      	beq.n	8006378 <HAL_RCC_OscConfig+0x760>
 8006284:	2301      	movs	r3, #1
 8006286:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800628e:	fa93 f3a3 	rbit	r3, r3
 8006292:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8006296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800629a:	fab3 f383 	clz	r3, r3
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	4bab      	ldr	r3, [pc, #684]	@ (8006550 <HAL_RCC_OscConfig+0x938>)
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	461a      	mov	r2, r3
 80062aa:	2301      	movs	r3, #1
 80062ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ae:	f7fb fd5b 	bl	8001d68 <HAL_GetTick>
 80062b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062b6:	e00a      	b.n	80062ce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062b8:	f7fb fd56 	bl	8001d68 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d902      	bls.n	80062ce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	f000 bcdb 	b.w	8006c84 <HAL_RCC_OscConfig+0x106c>
 80062ce:	2302      	movs	r3, #2
 80062d0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80062d8:	fa93 f3a3 	rbit	r3, r3
 80062dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80062e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80062e8:	2202      	movs	r2, #2
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062f0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	fa93 f2a3 	rbit	r2, r3
 80062fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800630c:	2202      	movs	r2, #2
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	fa93 f2a3 	rbit	r2, r3
 800631e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006322:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006326:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006328:	4b88      	ldr	r3, [pc, #544]	@ (800654c <HAL_RCC_OscConfig+0x934>)
 800632a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800632c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006330:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006334:	2102      	movs	r1, #2
 8006336:	6019      	str	r1, [r3, #0]
 8006338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800633c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	fa93 f1a3 	rbit	r1, r3
 8006346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800634a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800634e:	6019      	str	r1, [r3, #0]
  return result;
 8006350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006354:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	fab3 f383 	clz	r3, r3
 800635e:	b2db      	uxtb	r3, r3
 8006360:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006364:	b2db      	uxtb	r3, r3
 8006366:	f003 031f 	and.w	r3, r3, #31
 800636a:	2101      	movs	r1, #1
 800636c:	fa01 f303 	lsl.w	r3, r1, r3
 8006370:	4013      	ands	r3, r2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0a0      	beq.n	80062b8 <HAL_RCC_OscConfig+0x6a0>
 8006376:	e08d      	b.n	8006494 <HAL_RCC_OscConfig+0x87c>
 8006378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800637c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8006380:	2201      	movs	r2, #1
 8006382:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006388:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	fa93 f2a3 	rbit	r2, r3
 8006392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006396:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800639a:	601a      	str	r2, [r3, #0]
  return result;
 800639c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063a0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80063a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063a6:	fab3 f383 	clz	r3, r3
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	4b68      	ldr	r3, [pc, #416]	@ (8006550 <HAL_RCC_OscConfig+0x938>)
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	461a      	mov	r2, r3
 80063b6:	2300      	movs	r3, #0
 80063b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ba:	f7fb fcd5 	bl	8001d68 <HAL_GetTick>
 80063be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063c2:	e00a      	b.n	80063da <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063c4:	f7fb fcd0 	bl	8001d68 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d902      	bls.n	80063da <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	f000 bc55 	b.w	8006c84 <HAL_RCC_OscConfig+0x106c>
 80063da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80063e2:	2202      	movs	r2, #2
 80063e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	fa93 f2a3 	rbit	r2, r3
 80063f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006402:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006406:	2202      	movs	r2, #2
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800640e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	fa93 f2a3 	rbit	r2, r3
 8006418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800641c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006426:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800642a:	2202      	movs	r2, #2
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006432:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	fa93 f2a3 	rbit	r2, r3
 800643c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006440:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006444:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006446:	4b41      	ldr	r3, [pc, #260]	@ (800654c <HAL_RCC_OscConfig+0x934>)
 8006448:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800644a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800644e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006452:	2102      	movs	r1, #2
 8006454:	6019      	str	r1, [r3, #0]
 8006456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800645a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	fa93 f1a3 	rbit	r1, r3
 8006464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006468:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800646c:	6019      	str	r1, [r3, #0]
  return result;
 800646e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006472:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	fab3 f383 	clz	r3, r3
 800647c:	b2db      	uxtb	r3, r3
 800647e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	2101      	movs	r1, #1
 800648a:	fa01 f303 	lsl.w	r3, r1, r3
 800648e:	4013      	ands	r3, r2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d197      	bne.n	80063c4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006498:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 81a1 	beq.w	80067ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064b0:	4b26      	ldr	r3, [pc, #152]	@ (800654c <HAL_RCC_OscConfig+0x934>)
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d116      	bne.n	80064ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064bc:	4b23      	ldr	r3, [pc, #140]	@ (800654c <HAL_RCC_OscConfig+0x934>)
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	4a22      	ldr	r2, [pc, #136]	@ (800654c <HAL_RCC_OscConfig+0x934>)
 80064c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064c6:	61d3      	str	r3, [r2, #28]
 80064c8:	4b20      	ldr	r3, [pc, #128]	@ (800654c <HAL_RCC_OscConfig+0x934>)
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80064d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064d4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064de:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80064e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006554 <HAL_RCC_OscConfig+0x93c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d11a      	bne.n	800652c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064f6:	4b17      	ldr	r3, [pc, #92]	@ (8006554 <HAL_RCC_OscConfig+0x93c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a16      	ldr	r2, [pc, #88]	@ (8006554 <HAL_RCC_OscConfig+0x93c>)
 80064fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006500:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006502:	f7fb fc31 	bl	8001d68 <HAL_GetTick>
 8006506:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800650a:	e009      	b.n	8006520 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800650c:	f7fb fc2c 	bl	8001d68 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b64      	cmp	r3, #100	@ 0x64
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e3b1      	b.n	8006c84 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006520:	4b0c      	ldr	r3, [pc, #48]	@ (8006554 <HAL_RCC_OscConfig+0x93c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0ef      	beq.n	800650c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800652c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006530:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d10d      	bne.n	8006558 <HAL_RCC_OscConfig+0x940>
 800653c:	4b03      	ldr	r3, [pc, #12]	@ (800654c <HAL_RCC_OscConfig+0x934>)
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	4a02      	ldr	r2, [pc, #8]	@ (800654c <HAL_RCC_OscConfig+0x934>)
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	6213      	str	r3, [r2, #32]
 8006548:	e03c      	b.n	80065c4 <HAL_RCC_OscConfig+0x9ac>
 800654a:	bf00      	nop
 800654c:	40021000 	.word	0x40021000
 8006550:	10908120 	.word	0x10908120
 8006554:	40007000 	.word	0x40007000
 8006558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800655c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10c      	bne.n	8006582 <HAL_RCC_OscConfig+0x96a>
 8006568:	4bc1      	ldr	r3, [pc, #772]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	4ac0      	ldr	r2, [pc, #768]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 800656e:	f023 0301 	bic.w	r3, r3, #1
 8006572:	6213      	str	r3, [r2, #32]
 8006574:	4bbe      	ldr	r3, [pc, #760]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	4abd      	ldr	r2, [pc, #756]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 800657a:	f023 0304 	bic.w	r3, r3, #4
 800657e:	6213      	str	r3, [r2, #32]
 8006580:	e020      	b.n	80065c4 <HAL_RCC_OscConfig+0x9ac>
 8006582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006586:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2b05      	cmp	r3, #5
 8006590:	d10c      	bne.n	80065ac <HAL_RCC_OscConfig+0x994>
 8006592:	4bb7      	ldr	r3, [pc, #732]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	4ab6      	ldr	r2, [pc, #728]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 8006598:	f043 0304 	orr.w	r3, r3, #4
 800659c:	6213      	str	r3, [r2, #32]
 800659e:	4bb4      	ldr	r3, [pc, #720]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	4ab3      	ldr	r2, [pc, #716]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 80065a4:	f043 0301 	orr.w	r3, r3, #1
 80065a8:	6213      	str	r3, [r2, #32]
 80065aa:	e00b      	b.n	80065c4 <HAL_RCC_OscConfig+0x9ac>
 80065ac:	4bb0      	ldr	r3, [pc, #704]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	4aaf      	ldr	r2, [pc, #700]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 80065b2:	f023 0301 	bic.w	r3, r3, #1
 80065b6:	6213      	str	r3, [r2, #32]
 80065b8:	4bad      	ldr	r3, [pc, #692]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	4aac      	ldr	r2, [pc, #688]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 80065be:	f023 0304 	bic.w	r3, r3, #4
 80065c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8081 	beq.w	80066d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d6:	f7fb fbc7 	bl	8001d68 <HAL_GetTick>
 80065da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065de:	e00b      	b.n	80065f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065e0:	f7fb fbc2 	bl	8001d68 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e345      	b.n	8006c84 <HAL_RCC_OscConfig+0x106c>
 80065f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006600:	2202      	movs	r2, #2
 8006602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006608:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	fa93 f2a3 	rbit	r2, r3
 8006612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006616:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006620:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006624:	2202      	movs	r2, #2
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800662c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	fa93 f2a3 	rbit	r2, r3
 8006636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800663a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800663e:	601a      	str	r2, [r3, #0]
  return result;
 8006640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006644:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006648:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800664a:	fab3 f383 	clz	r3, r3
 800664e:	b2db      	uxtb	r3, r3
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f043 0302 	orr.w	r3, r3, #2
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d102      	bne.n	8006664 <HAL_RCC_OscConfig+0xa4c>
 800665e:	4b84      	ldr	r3, [pc, #528]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	e013      	b.n	800668c <HAL_RCC_OscConfig+0xa74>
 8006664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006668:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800666c:	2202      	movs	r2, #2
 800666e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006674:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	fa93 f2a3 	rbit	r2, r3
 800667e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006682:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	4b79      	ldr	r3, [pc, #484]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 800668a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006690:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8006694:	2102      	movs	r1, #2
 8006696:	6011      	str	r1, [r2, #0]
 8006698:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800669c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	fa92 f1a2 	rbit	r1, r2
 80066a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80066aa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80066ae:	6011      	str	r1, [r2, #0]
  return result;
 80066b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80066b4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	fab2 f282 	clz	r2, r2
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	f002 021f 	and.w	r2, r2, #31
 80066ca:	2101      	movs	r1, #1
 80066cc:	fa01 f202 	lsl.w	r2, r1, r2
 80066d0:	4013      	ands	r3, r2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d084      	beq.n	80065e0 <HAL_RCC_OscConfig+0x9c8>
 80066d6:	e07f      	b.n	80067d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066d8:	f7fb fb46 	bl	8001d68 <HAL_GetTick>
 80066dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e0:	e00b      	b.n	80066fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e2:	f7fb fb41 	bl	8001d68 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e2c4      	b.n	8006c84 <HAL_RCC_OscConfig+0x106c>
 80066fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066fe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006702:	2202      	movs	r2, #2
 8006704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800670a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	fa93 f2a3 	rbit	r2, r3
 8006714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006718:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006722:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006726:	2202      	movs	r2, #2
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800672e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	fa93 f2a3 	rbit	r2, r3
 8006738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800673c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006740:	601a      	str	r2, [r3, #0]
  return result;
 8006742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006746:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800674a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800674c:	fab3 f383 	clz	r3, r3
 8006750:	b2db      	uxtb	r3, r3
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f043 0302 	orr.w	r3, r3, #2
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d102      	bne.n	8006766 <HAL_RCC_OscConfig+0xb4e>
 8006760:	4b43      	ldr	r3, [pc, #268]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	e013      	b.n	800678e <HAL_RCC_OscConfig+0xb76>
 8006766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800676a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800676e:	2202      	movs	r2, #2
 8006770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006776:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	fa93 f2a3 	rbit	r2, r3
 8006780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006784:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	4b39      	ldr	r3, [pc, #228]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 800678c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006792:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8006796:	2102      	movs	r1, #2
 8006798:	6011      	str	r1, [r2, #0]
 800679a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800679e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80067a2:	6812      	ldr	r2, [r2, #0]
 80067a4:	fa92 f1a2 	rbit	r1, r2
 80067a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067ac:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80067b0:	6011      	str	r1, [r2, #0]
  return result;
 80067b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067b6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80067ba:	6812      	ldr	r2, [r2, #0]
 80067bc:	fab2 f282 	clz	r2, r2
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	f002 021f 	and.w	r2, r2, #31
 80067cc:	2101      	movs	r1, #1
 80067ce:	fa01 f202 	lsl.w	r2, r1, r2
 80067d2:	4013      	ands	r3, r2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d184      	bne.n	80066e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80067d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d105      	bne.n	80067ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067e0:	4b23      	ldr	r3, [pc, #140]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	4a22      	ldr	r2, [pc, #136]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 80067e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 8242 	beq.w	8006c82 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006870 <HAL_RCC_OscConfig+0xc58>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f003 030c 	and.w	r3, r3, #12
 8006806:	2b08      	cmp	r3, #8
 8006808:	f000 8213 	beq.w	8006c32 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800680c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006810:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	2b02      	cmp	r3, #2
 800681a:	f040 8162 	bne.w	8006ae2 <HAL_RCC_OscConfig+0xeca>
 800681e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006822:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006826:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800682a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800682c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006830:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	fa93 f2a3 	rbit	r2, r3
 800683a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800683e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006842:	601a      	str	r2, [r3, #0]
  return result;
 8006844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006848:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800684c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800684e:	fab3 f383 	clz	r3, r3
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006858:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	461a      	mov	r2, r3
 8006860:	2300      	movs	r3, #0
 8006862:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006864:	f7fb fa80 	bl	8001d68 <HAL_GetTick>
 8006868:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800686c:	e00c      	b.n	8006888 <HAL_RCC_OscConfig+0xc70>
 800686e:	bf00      	nop
 8006870:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006874:	f7fb fa78 	bl	8001d68 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e1fd      	b.n	8006c84 <HAL_RCC_OscConfig+0x106c>
 8006888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800688c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8006890:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800689a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	fa93 f2a3 	rbit	r2, r3
 80068a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80068ac:	601a      	str	r2, [r3, #0]
  return result;
 80068ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068b2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80068b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068b8:	fab3 f383 	clz	r3, r3
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	f043 0301 	orr.w	r3, r3, #1
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d102      	bne.n	80068d2 <HAL_RCC_OscConfig+0xcba>
 80068cc:	4bb0      	ldr	r3, [pc, #704]	@ (8006b90 <HAL_RCC_OscConfig+0xf78>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	e027      	b.n	8006922 <HAL_RCC_OscConfig+0xd0a>
 80068d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80068da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068e4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	fa93 f2a3 	rbit	r2, r3
 80068ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068f2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068fc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8006900:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800690a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	fa93 f2a3 	rbit	r2, r3
 8006914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006918:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	4b9c      	ldr	r3, [pc, #624]	@ (8006b90 <HAL_RCC_OscConfig+0xf78>)
 8006920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006922:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006926:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800692a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800692e:	6011      	str	r1, [r2, #0]
 8006930:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006934:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006938:	6812      	ldr	r2, [r2, #0]
 800693a:	fa92 f1a2 	rbit	r1, r2
 800693e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006942:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006946:	6011      	str	r1, [r2, #0]
  return result;
 8006948:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800694c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	fab2 f282 	clz	r2, r2
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	f042 0220 	orr.w	r2, r2, #32
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	f002 021f 	and.w	r2, r2, #31
 8006962:	2101      	movs	r1, #1
 8006964:	fa01 f202 	lsl.w	r2, r1, r2
 8006968:	4013      	ands	r3, r2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d182      	bne.n	8006874 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800696e:	4b88      	ldr	r3, [pc, #544]	@ (8006b90 <HAL_RCC_OscConfig+0xf78>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800697a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006986:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	430b      	orrs	r3, r1
 8006990:	497f      	ldr	r1, [pc, #508]	@ (8006b90 <HAL_RCC_OscConfig+0xf78>)
 8006992:	4313      	orrs	r3, r2
 8006994:	604b      	str	r3, [r1, #4]
 8006996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800699a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800699e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069a8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	fa93 f2a3 	rbit	r2, r3
 80069b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069b6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80069ba:	601a      	str	r2, [r3, #0]
  return result;
 80069bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069c0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80069c4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069c6:	fab3 f383 	clz	r3, r3
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80069d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	461a      	mov	r2, r3
 80069d8:	2301      	movs	r3, #1
 80069da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069dc:	f7fb f9c4 	bl	8001d68 <HAL_GetTick>
 80069e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069e4:	e009      	b.n	80069fa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069e6:	f7fb f9bf 	bl	8001d68 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e144      	b.n	8006c84 <HAL_RCC_OscConfig+0x106c>
 80069fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80069fe:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006a02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a0c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	fa93 f2a3 	rbit	r2, r3
 8006a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a1a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006a1e:	601a      	str	r2, [r3, #0]
  return result;
 8006a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a24:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006a28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a2a:	fab3 f383 	clz	r3, r3
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	095b      	lsrs	r3, r3, #5
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f043 0301 	orr.w	r3, r3, #1
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d102      	bne.n	8006a44 <HAL_RCC_OscConfig+0xe2c>
 8006a3e:	4b54      	ldr	r3, [pc, #336]	@ (8006b90 <HAL_RCC_OscConfig+0xf78>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	e027      	b.n	8006a94 <HAL_RCC_OscConfig+0xe7c>
 8006a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a48:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006a4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a56:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	fa93 f2a3 	rbit	r2, r3
 8006a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a64:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a6e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006a72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a7c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	fa93 f2a3 	rbit	r2, r3
 8006a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006a8a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	4b3f      	ldr	r3, [pc, #252]	@ (8006b90 <HAL_RCC_OscConfig+0xf78>)
 8006a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006a98:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006a9c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006aa0:	6011      	str	r1, [r2, #0]
 8006aa2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006aa6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006aaa:	6812      	ldr	r2, [r2, #0]
 8006aac:	fa92 f1a2 	rbit	r1, r2
 8006ab0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006ab4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006ab8:	6011      	str	r1, [r2, #0]
  return result;
 8006aba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006abe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	fab2 f282 	clz	r2, r2
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	f042 0220 	orr.w	r2, r2, #32
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	f002 021f 	and.w	r2, r2, #31
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d082      	beq.n	80069e6 <HAL_RCC_OscConfig+0xdce>
 8006ae0:	e0cf      	b.n	8006c82 <HAL_RCC_OscConfig+0x106a>
 8006ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ae6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006aea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006af4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	fa93 f2a3 	rbit	r2, r3
 8006afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b02:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006b06:	601a      	str	r2, [r3, #0]
  return result;
 8006b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b0c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006b10:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b12:	fab3 f383 	clz	r3, r3
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006b1c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	461a      	mov	r2, r3
 8006b24:	2300      	movs	r3, #0
 8006b26:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b28:	f7fb f91e 	bl	8001d68 <HAL_GetTick>
 8006b2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b30:	e009      	b.n	8006b46 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b32:	f7fb f919 	bl	8001d68 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e09e      	b.n	8006c84 <HAL_RCC_OscConfig+0x106c>
 8006b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b4a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006b4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b58:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	fa93 f2a3 	rbit	r2, r3
 8006b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b66:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006b6a:	601a      	str	r2, [r3, #0]
  return result;
 8006b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b70:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006b74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b76:	fab3 f383 	clz	r3, r3
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	f043 0301 	orr.w	r3, r3, #1
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d104      	bne.n	8006b94 <HAL_RCC_OscConfig+0xf7c>
 8006b8a:	4b01      	ldr	r3, [pc, #4]	@ (8006b90 <HAL_RCC_OscConfig+0xf78>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	e029      	b.n	8006be4 <HAL_RCC_OscConfig+0xfcc>
 8006b90:	40021000 	.word	0x40021000
 8006b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006b98:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006b9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006ba6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	fa93 f2a3 	rbit	r2, r3
 8006bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bb4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bbe:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006bc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bcc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	fa93 f2a3 	rbit	r2, r3
 8006bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006bda:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	4b2b      	ldr	r3, [pc, #172]	@ (8006c90 <HAL_RCC_OscConfig+0x1078>)
 8006be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006be8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006bec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006bf0:	6011      	str	r1, [r2, #0]
 8006bf2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006bf6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006bfa:	6812      	ldr	r2, [r2, #0]
 8006bfc:	fa92 f1a2 	rbit	r1, r2
 8006c00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006c04:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006c08:	6011      	str	r1, [r2, #0]
  return result;
 8006c0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006c0e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006c12:	6812      	ldr	r2, [r2, #0]
 8006c14:	fab2 f282 	clz	r2, r2
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	f042 0220 	orr.w	r2, r2, #32
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	f002 021f 	and.w	r2, r2, #31
 8006c24:	2101      	movs	r1, #1
 8006c26:	fa01 f202 	lsl.w	r2, r1, r2
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d180      	bne.n	8006b32 <HAL_RCC_OscConfig+0xf1a>
 8006c30:	e027      	b.n	8006c82 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e01e      	b.n	8006c84 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c46:	4b12      	ldr	r3, [pc, #72]	@ (8006c90 <HAL_RCC_OscConfig+0x1078>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006c4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006c52:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d10b      	bne.n	8006c7e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006c66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006c6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006c72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d001      	beq.n	8006c82 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40021000 	.word	0x40021000

08006c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b09e      	sub	sp, #120	@ 0x78
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e162      	b.n	8006f72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cac:	4b90      	ldr	r3, [pc, #576]	@ (8006ef0 <HAL_RCC_ClockConfig+0x25c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d910      	bls.n	8006cdc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cba:	4b8d      	ldr	r3, [pc, #564]	@ (8006ef0 <HAL_RCC_ClockConfig+0x25c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f023 0207 	bic.w	r2, r3, #7
 8006cc2:	498b      	ldr	r1, [pc, #556]	@ (8006ef0 <HAL_RCC_ClockConfig+0x25c>)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cca:	4b89      	ldr	r3, [pc, #548]	@ (8006ef0 <HAL_RCC_ClockConfig+0x25c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d001      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e14a      	b.n	8006f72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ce8:	4b82      	ldr	r3, [pc, #520]	@ (8006ef4 <HAL_RCC_ClockConfig+0x260>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	497f      	ldr	r1, [pc, #508]	@ (8006ef4 <HAL_RCC_ClockConfig+0x260>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 80dc 	beq.w	8006ec0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d13c      	bne.n	8006d8a <HAL_RCC_ClockConfig+0xf6>
 8006d10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006d14:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d18:	fa93 f3a3 	rbit	r3, r3
 8006d1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d20:	fab3 f383 	clz	r3, r3
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	f043 0301 	orr.w	r3, r3, #1
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d102      	bne.n	8006d3a <HAL_RCC_ClockConfig+0xa6>
 8006d34:	4b6f      	ldr	r3, [pc, #444]	@ (8006ef4 <HAL_RCC_ClockConfig+0x260>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	e00f      	b.n	8006d5a <HAL_RCC_ClockConfig+0xc6>
 8006d3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006d3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d42:	fa93 f3a3 	rbit	r3, r3
 8006d46:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006d4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d50:	fa93 f3a3 	rbit	r3, r3
 8006d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d56:	4b67      	ldr	r3, [pc, #412]	@ (8006ef4 <HAL_RCC_ClockConfig+0x260>)
 8006d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006d5e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d62:	fa92 f2a2 	rbit	r2, r2
 8006d66:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006d68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d6a:	fab2 f282 	clz	r2, r2
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	f042 0220 	orr.w	r2, r2, #32
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	f002 021f 	and.w	r2, r2, #31
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d80:	4013      	ands	r3, r2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d17b      	bne.n	8006e7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e0f3      	b.n	8006f72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d13c      	bne.n	8006e0c <HAL_RCC_ClockConfig+0x178>
 8006d92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d96:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d9a:	fa93 f3a3 	rbit	r3, r3
 8006d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006da2:	fab3 f383 	clz	r3, r3
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d102      	bne.n	8006dbc <HAL_RCC_ClockConfig+0x128>
 8006db6:	4b4f      	ldr	r3, [pc, #316]	@ (8006ef4 <HAL_RCC_ClockConfig+0x260>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	e00f      	b.n	8006ddc <HAL_RCC_ClockConfig+0x148>
 8006dbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dc4:	fa93 f3a3 	rbit	r3, r3
 8006dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006dce:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd2:	fa93 f3a3 	rbit	r3, r3
 8006dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dd8:	4b46      	ldr	r3, [pc, #280]	@ (8006ef4 <HAL_RCC_ClockConfig+0x260>)
 8006dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ddc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006de0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006de2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006de4:	fa92 f2a2 	rbit	r2, r2
 8006de8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006dea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dec:	fab2 f282 	clz	r2, r2
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	f042 0220 	orr.w	r2, r2, #32
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	f002 021f 	and.w	r2, r2, #31
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8006e02:	4013      	ands	r3, r2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d13a      	bne.n	8006e7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e0b2      	b.n	8006f72 <HAL_RCC_ClockConfig+0x2de>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e12:	fa93 f3a3 	rbit	r3, r3
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e1a:	fab3 f383 	clz	r3, r3
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	095b      	lsrs	r3, r3, #5
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	f043 0301 	orr.w	r3, r3, #1
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d102      	bne.n	8006e34 <HAL_RCC_ClockConfig+0x1a0>
 8006e2e:	4b31      	ldr	r3, [pc, #196]	@ (8006ef4 <HAL_RCC_ClockConfig+0x260>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	e00d      	b.n	8006e50 <HAL_RCC_ClockConfig+0x1bc>
 8006e34:	2302      	movs	r3, #2
 8006e36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3a:	fa93 f3a3 	rbit	r3, r3
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e40:	2302      	movs	r3, #2
 8006e42:	623b      	str	r3, [r7, #32]
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	fa93 f3a3 	rbit	r3, r3
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	4b29      	ldr	r3, [pc, #164]	@ (8006ef4 <HAL_RCC_ClockConfig+0x260>)
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e50:	2202      	movs	r2, #2
 8006e52:	61ba      	str	r2, [r7, #24]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	fa92 f2a2 	rbit	r2, r2
 8006e5a:	617a      	str	r2, [r7, #20]
  return result;
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	fab2 f282 	clz	r2, r2
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	f042 0220 	orr.w	r2, r2, #32
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	f002 021f 	and.w	r2, r2, #31
 8006e6e:	2101      	movs	r1, #1
 8006e70:	fa01 f202 	lsl.w	r2, r1, r2
 8006e74:	4013      	ands	r3, r2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e079      	b.n	8006f72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef4 <HAL_RCC_ClockConfig+0x260>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f023 0203 	bic.w	r2, r3, #3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	491a      	ldr	r1, [pc, #104]	@ (8006ef4 <HAL_RCC_ClockConfig+0x260>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e90:	f7fa ff6a 	bl	8001d68 <HAL_GetTick>
 8006e94:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e96:	e00a      	b.n	8006eae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e98:	f7fa ff66 	bl	8001d68 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e061      	b.n	8006f72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eae:	4b11      	ldr	r3, [pc, #68]	@ (8006ef4 <HAL_RCC_ClockConfig+0x260>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f003 020c 	and.w	r2, r3, #12
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d1eb      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef0 <HAL_RCC_ClockConfig+0x25c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d214      	bcs.n	8006ef8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ece:	4b08      	ldr	r3, [pc, #32]	@ (8006ef0 <HAL_RCC_ClockConfig+0x25c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f023 0207 	bic.w	r2, r3, #7
 8006ed6:	4906      	ldr	r1, [pc, #24]	@ (8006ef0 <HAL_RCC_ClockConfig+0x25c>)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ede:	4b04      	ldr	r3, [pc, #16]	@ (8006ef0 <HAL_RCC_ClockConfig+0x25c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d005      	beq.n	8006ef8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e040      	b.n	8006f72 <HAL_RCC_ClockConfig+0x2de>
 8006ef0:	40022000 	.word	0x40022000
 8006ef4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f04:	4b1d      	ldr	r3, [pc, #116]	@ (8006f7c <HAL_RCC_ClockConfig+0x2e8>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	491a      	ldr	r1, [pc, #104]	@ (8006f7c <HAL_RCC_ClockConfig+0x2e8>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f22:	4b16      	ldr	r3, [pc, #88]	@ (8006f7c <HAL_RCC_ClockConfig+0x2e8>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	4912      	ldr	r1, [pc, #72]	@ (8006f7c <HAL_RCC_ClockConfig+0x2e8>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006f36:	f000 f829 	bl	8006f8c <HAL_RCC_GetSysClockFreq>
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f7c <HAL_RCC_ClockConfig+0x2e8>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f44:	22f0      	movs	r2, #240	@ 0xf0
 8006f46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	fa92 f2a2 	rbit	r2, r2
 8006f4e:	60fa      	str	r2, [r7, #12]
  return result;
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	fab2 f282 	clz	r2, r2
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	40d3      	lsrs	r3, r2
 8006f5a:	4a09      	ldr	r2, [pc, #36]	@ (8006f80 <HAL_RCC_ClockConfig+0x2ec>)
 8006f5c:	5cd3      	ldrb	r3, [r2, r3]
 8006f5e:	fa21 f303 	lsr.w	r3, r1, r3
 8006f62:	4a08      	ldr	r2, [pc, #32]	@ (8006f84 <HAL_RCC_ClockConfig+0x2f0>)
 8006f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006f66:	4b08      	ldr	r3, [pc, #32]	@ (8006f88 <HAL_RCC_ClockConfig+0x2f4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fa fb74 	bl	8001658 <HAL_InitTick>
  
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3778      	adds	r7, #120	@ 0x78
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	0800de44 	.word	0x0800de44
 8006f84:	2000000c 	.word	0x2000000c
 8006f88:	20000010 	.word	0x20000010

08006f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	2300      	movs	r3, #0
 8006f98:	60bb      	str	r3, [r7, #8]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8007020 <HAL_RCC_GetSysClockFreq+0x94>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f003 030c 	and.w	r3, r3, #12
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	d002      	beq.n	8006fbc <HAL_RCC_GetSysClockFreq+0x30>
 8006fb6:	2b08      	cmp	r3, #8
 8006fb8:	d003      	beq.n	8006fc2 <HAL_RCC_GetSysClockFreq+0x36>
 8006fba:	e026      	b.n	800700a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006fbc:	4b19      	ldr	r3, [pc, #100]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x98>)
 8006fbe:	613b      	str	r3, [r7, #16]
      break;
 8006fc0:	e026      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	0c9b      	lsrs	r3, r3, #18
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	4a17      	ldr	r2, [pc, #92]	@ (8007028 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006fcc:	5cd3      	ldrb	r3, [r2, r3]
 8006fce:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006fd0:	4b13      	ldr	r3, [pc, #76]	@ (8007020 <HAL_RCC_GetSysClockFreq+0x94>)
 8006fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	4a14      	ldr	r2, [pc, #80]	@ (800702c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006fda:	5cd3      	ldrb	r3, [r2, r3]
 8006fdc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8007024 <HAL_RCC_GetSysClockFreq+0x98>)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	fb02 f303 	mul.w	r3, r2, r3
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	e004      	b.n	8007004 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8007030 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ffe:	fb02 f303 	mul.w	r3, r2, r3
 8007002:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	613b      	str	r3, [r7, #16]
      break;
 8007008:	e002      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800700a:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <HAL_RCC_GetSysClockFreq+0xa8>)
 800700c:	613b      	str	r3, [r7, #16]
      break;
 800700e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007010:	693b      	ldr	r3, [r7, #16]
}
 8007012:	4618      	mov	r0, r3
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40021000 	.word	0x40021000
 8007024:	00f42400 	.word	0x00f42400
 8007028:	0800e458 	.word	0x0800e458
 800702c:	0800e468 	.word	0x0800e468
 8007030:	003d0900 	.word	0x003d0900
 8007034:	007a1200 	.word	0x007a1200

08007038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800703c:	4b03      	ldr	r3, [pc, #12]	@ (800704c <HAL_RCC_GetHCLKFreq+0x14>)
 800703e:	681b      	ldr	r3, [r3, #0]
}
 8007040:	4618      	mov	r0, r3
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	2000000c 	.word	0x2000000c

08007050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007056:	f7ff ffef 	bl	8007038 <HAL_RCC_GetHCLKFreq>
 800705a:	4601      	mov	r1, r0
 800705c:	4b0b      	ldr	r3, [pc, #44]	@ (800708c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8007064:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8007068:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	fa92 f2a2 	rbit	r2, r2
 8007070:	603a      	str	r2, [r7, #0]
  return result;
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	fab2 f282 	clz	r2, r2
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	40d3      	lsrs	r3, r2
 800707c:	4a04      	ldr	r2, [pc, #16]	@ (8007090 <HAL_RCC_GetPCLK2Freq+0x40>)
 800707e:	5cd3      	ldrb	r3, [r2, r3]
 8007080:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40021000 	.word	0x40021000
 8007090:	0800de54 	.word	0x0800de54

08007094 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	220f      	movs	r2, #15
 80070a2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070a4:	4b12      	ldr	r3, [pc, #72]	@ (80070f0 <HAL_RCC_GetClockConfig+0x5c>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f003 0203 	and.w	r2, r3, #3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80070b0:	4b0f      	ldr	r3, [pc, #60]	@ (80070f0 <HAL_RCC_GetClockConfig+0x5c>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80070bc:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <HAL_RCC_GetClockConfig+0x5c>)
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80070c8:	4b09      	ldr	r3, [pc, #36]	@ (80070f0 <HAL_RCC_GetClockConfig+0x5c>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	08db      	lsrs	r3, r3, #3
 80070ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80070d6:	4b07      	ldr	r3, [pc, #28]	@ (80070f4 <HAL_RCC_GetClockConfig+0x60>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0207 	and.w	r2, r3, #7
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	601a      	str	r2, [r3, #0]
}
 80070e2:	bf00      	nop
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40021000 	.word	0x40021000
 80070f4:	40022000 	.word	0x40022000

080070f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b092      	sub	sp, #72	@ 0x48
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8007104:	2300      	movs	r3, #0
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007108:	2300      	movs	r3, #0
 800710a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 80d4 	beq.w	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800711c:	4b4e      	ldr	r3, [pc, #312]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10e      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007128:	4b4b      	ldr	r3, [pc, #300]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	4a4a      	ldr	r2, [pc, #296]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800712e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007132:	61d3      	str	r3, [r2, #28]
 8007134:	4b48      	ldr	r3, [pc, #288]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007140:	2301      	movs	r3, #1
 8007142:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007146:	4b45      	ldr	r3, [pc, #276]	@ (800725c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800714e:	2b00      	cmp	r3, #0
 8007150:	d118      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007152:	4b42      	ldr	r3, [pc, #264]	@ (800725c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a41      	ldr	r2, [pc, #260]	@ (800725c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800715c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800715e:	f7fa fe03 	bl	8001d68 <HAL_GetTick>
 8007162:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007164:	e008      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007166:	f7fa fdff 	bl	8001d68 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	2b64      	cmp	r3, #100	@ 0x64
 8007172:	d901      	bls.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e169      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007178:	4b38      	ldr	r3, [pc, #224]	@ (800725c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007180:	2b00      	cmp	r3, #0
 8007182:	d0f0      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007184:	4b34      	ldr	r3, [pc, #208]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800718c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800718e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 8084 	beq.w	800729e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800719e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d07c      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071a4:	4b2c      	ldr	r3, [pc, #176]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80071b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b6:	fa93 f3a3 	rbit	r3, r3
 80071ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80071bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071be:	fab3 f383 	clz	r3, r3
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	4b26      	ldr	r3, [pc, #152]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	461a      	mov	r2, r3
 80071ce:	2301      	movs	r3, #1
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80071d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071da:	fa93 f3a3 	rbit	r3, r3
 80071de:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80071e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071e2:	fab3 f383 	clz	r3, r3
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	4b1d      	ldr	r3, [pc, #116]	@ (8007260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	461a      	mov	r2, r3
 80071f2:	2300      	movs	r3, #0
 80071f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80071f6:	4a18      	ldr	r2, [pc, #96]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80071fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d04b      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007206:	f7fa fdaf 	bl	8001d68 <HAL_GetTick>
 800720a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800720c:	e00a      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800720e:	f7fa fdab 	bl	8001d68 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800721c:	4293      	cmp	r3, r2
 800721e:	d901      	bls.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e113      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007224:	2302      	movs	r3, #2
 8007226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722a:	fa93 f3a3 	rbit	r3, r3
 800722e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007230:	2302      	movs	r3, #2
 8007232:	623b      	str	r3, [r7, #32]
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	fa93 f3a3 	rbit	r3, r3
 800723a:	61fb      	str	r3, [r7, #28]
  return result;
 800723c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800723e:	fab3 f383 	clz	r3, r3
 8007242:	b2db      	uxtb	r3, r3
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f043 0302 	orr.w	r3, r3, #2
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d108      	bne.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007252:	4b01      	ldr	r3, [pc, #4]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	e00d      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007258:	40021000 	.word	0x40021000
 800725c:	40007000 	.word	0x40007000
 8007260:	10908100 	.word	0x10908100
 8007264:	2302      	movs	r3, #2
 8007266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	fa93 f3a3 	rbit	r3, r3
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	4b78      	ldr	r3, [pc, #480]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007274:	2202      	movs	r2, #2
 8007276:	613a      	str	r2, [r7, #16]
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	fa92 f2a2 	rbit	r2, r2
 800727e:	60fa      	str	r2, [r7, #12]
  return result;
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	fab2 f282 	clz	r2, r2
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800728c:	b2d2      	uxtb	r2, r2
 800728e:	f002 021f 	and.w	r2, r2, #31
 8007292:	2101      	movs	r1, #1
 8007294:	fa01 f202 	lsl.w	r2, r1, r2
 8007298:	4013      	ands	r3, r2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0b7      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800729e:	4b6d      	ldr	r3, [pc, #436]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	496a      	ldr	r1, [pc, #424]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80072b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d105      	bne.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072b8:	4b66      	ldr	r3, [pc, #408]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	4a65      	ldr	r2, [pc, #404]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d008      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072d0:	4b60      	ldr	r3, [pc, #384]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d4:	f023 0203 	bic.w	r2, r3, #3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	495d      	ldr	r1, [pc, #372]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d008      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072ee:	4b59      	ldr	r3, [pc, #356]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	4956      	ldr	r1, [pc, #344]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800730c:	4b51      	ldr	r3, [pc, #324]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800730e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007310:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	494e      	ldr	r1, [pc, #312]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800731a:	4313      	orrs	r3, r2
 800731c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800732a:	4b4a      	ldr	r3, [pc, #296]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800732c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732e:	f023 0210 	bic.w	r2, r3, #16
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	4947      	ldr	r1, [pc, #284]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007338:	4313      	orrs	r3, r2
 800733a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d008      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007348:	4b42      	ldr	r3, [pc, #264]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007354:	493f      	ldr	r1, [pc, #252]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007356:	4313      	orrs	r3, r2
 8007358:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d008      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007366:	4b3b      	ldr	r3, [pc, #236]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736a:	f023 0220 	bic.w	r2, r3, #32
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	4938      	ldr	r1, [pc, #224]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007374:	4313      	orrs	r3, r2
 8007376:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0308 	and.w	r3, r3, #8
 8007380:	2b00      	cmp	r3, #0
 8007382:	d008      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007384:	4b33      	ldr	r3, [pc, #204]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007388:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	4930      	ldr	r1, [pc, #192]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007392:	4313      	orrs	r3, r2
 8007394:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0310 	and.w	r3, r3, #16
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d008      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	4929      	ldr	r1, [pc, #164]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d008      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073c0:	4b24      	ldr	r3, [pc, #144]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073cc:	4921      	ldr	r1, [pc, #132]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d008      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80073de:	4b1d      	ldr	r3, [pc, #116]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ea:	491a      	ldr	r1, [pc, #104]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d008      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80073fc:	4b15      	ldr	r3, [pc, #84]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007408:	4912      	ldr	r1, [pc, #72]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800740a:	4313      	orrs	r3, r2
 800740c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d008      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800741a:	4b0e      	ldr	r3, [pc, #56]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007426:	490b      	ldr	r1, [pc, #44]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007428:	4313      	orrs	r3, r2
 800742a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007438:	4b06      	ldr	r3, [pc, #24]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800743a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007444:	4903      	ldr	r1, [pc, #12]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007446:	4313      	orrs	r3, r2
 8007448:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3748      	adds	r7, #72	@ 0x48
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	40021000 	.word	0x40021000

08007458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e09d      	b.n	80075a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746e:	2b00      	cmp	r3, #0
 8007470:	d108      	bne.n	8007484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800747a:	d009      	beq.n	8007490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	61da      	str	r2, [r3, #28]
 8007482:	e005      	b.n	8007490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fa f85e 	bl	800156c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80074d0:	d902      	bls.n	80074d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	e002      	b.n	80074de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80074d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80074e6:	d007      	beq.n	80074f8 <HAL_SPI_Init+0xa0>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80074f0:	d002      	beq.n	80074f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007530:	431a      	orrs	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753a:	ea42 0103 	orr.w	r1, r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007542:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	0c1b      	lsrs	r3, r3, #16
 8007554:	f003 0204 	and.w	r2, r3, #4
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	431a      	orrs	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007574:	ea42 0103 	orr.w	r1, r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69da      	ldr	r2, [r3, #28]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007594:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b088      	sub	sp, #32
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d101      	bne.n	80075d0 <HAL_SPI_Transmit+0x22>
 80075cc:	2302      	movs	r3, #2
 80075ce:	e15f      	b.n	8007890 <HAL_SPI_Transmit+0x2e2>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075d8:	f7fa fbc6 	bl	8001d68 <HAL_GetTick>
 80075dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d002      	beq.n	80075f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075ee:	2302      	movs	r3, #2
 80075f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075f2:	e148      	b.n	8007886 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <HAL_SPI_Transmit+0x52>
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d102      	bne.n	8007606 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007604:	e13f      	b.n	8007886 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2203      	movs	r2, #3
 800760a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	88fa      	ldrh	r2, [r7, #6]
 800761e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	88fa      	ldrh	r2, [r7, #6]
 8007624:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007650:	d10f      	bne.n	8007672 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007660:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007670:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800767c:	2b40      	cmp	r3, #64	@ 0x40
 800767e:	d007      	beq.n	8007690 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800768e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007698:	d94f      	bls.n	800773a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_SPI_Transmit+0xfa>
 80076a2:	8afb      	ldrh	r3, [r7, #22]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d142      	bne.n	800772e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ac:	881a      	ldrh	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b8:	1c9a      	adds	r2, r3, #2
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80076cc:	e02f      	b.n	800772e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d112      	bne.n	8007702 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e0:	881a      	ldrh	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ec:	1c9a      	adds	r2, r3, #2
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007700:	e015      	b.n	800772e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007702:	f7fa fb31 	bl	8001d68 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d803      	bhi.n	800771a <HAL_SPI_Transmit+0x16c>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007718:	d102      	bne.n	8007720 <HAL_SPI_Transmit+0x172>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800772c:	e0ab      	b.n	8007886 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007732:	b29b      	uxth	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1ca      	bne.n	80076ce <HAL_SPI_Transmit+0x120>
 8007738:	e080      	b.n	800783c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <HAL_SPI_Transmit+0x19a>
 8007742:	8afb      	ldrh	r3, [r7, #22]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d174      	bne.n	8007832 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800774c:	b29b      	uxth	r3, r3
 800774e:	2b01      	cmp	r3, #1
 8007750:	d912      	bls.n	8007778 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007756:	881a      	ldrh	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007762:	1c9a      	adds	r2, r3, #2
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800776c:	b29b      	uxth	r3, r3
 800776e:	3b02      	subs	r3, #2
 8007770:	b29a      	uxth	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007776:	e05c      	b.n	8007832 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	330c      	adds	r3, #12
 8007782:	7812      	ldrb	r2, [r2, #0]
 8007784:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800779e:	e048      	b.n	8007832 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d12b      	bne.n	8007806 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d912      	bls.n	80077de <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077bc:	881a      	ldrh	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c8:	1c9a      	adds	r2, r3, #2
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	3b02      	subs	r3, #2
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077dc:	e029      	b.n	8007832 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	330c      	adds	r3, #12
 80077e8:	7812      	ldrb	r2, [r2, #0]
 80077ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007804:	e015      	b.n	8007832 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007806:	f7fa faaf 	bl	8001d68 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d803      	bhi.n	800781e <HAL_SPI_Transmit+0x270>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781c:	d102      	bne.n	8007824 <HAL_SPI_Transmit+0x276>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d106      	bne.n	8007832 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007830:	e029      	b.n	8007886 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007836:	b29b      	uxth	r3, r3
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1b1      	bne.n	80077a0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 f947 	bl	8007ad4 <SPI_EndRxTxTransaction>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2220      	movs	r2, #32
 8007850:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	77fb      	strb	r3, [r7, #31]
 800787c:	e003      	b.n	8007886 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800788e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3720      	adds	r7, #32
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	4613      	mov	r3, r2
 80078a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078a8:	f7fa fa5e 	bl	8001d68 <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b0:	1a9b      	subs	r3, r3, r2
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	4413      	add	r3, r2
 80078b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078b8:	f7fa fa56 	bl	8001d68 <HAL_GetTick>
 80078bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80078be:	4b39      	ldr	r3, [pc, #228]	@ (80079a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	015b      	lsls	r3, r3, #5
 80078c4:	0d1b      	lsrs	r3, r3, #20
 80078c6:	69fa      	ldr	r2, [r7, #28]
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
 80078cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078ce:	e054      	b.n	800797a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d6:	d050      	beq.n	800797a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078d8:	f7fa fa46 	bl	8001d68 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d902      	bls.n	80078ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d13d      	bne.n	800796a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80078fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007906:	d111      	bne.n	800792c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007910:	d004      	beq.n	800791c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800791a:	d107      	bne.n	800792c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800792a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007934:	d10f      	bne.n	8007956 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007954:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e017      	b.n	800799a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	3b01      	subs	r3, #1
 8007978:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4013      	ands	r3, r2
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	429a      	cmp	r2, r3
 8007988:	bf0c      	ite	eq
 800798a:	2301      	moveq	r3, #1
 800798c:	2300      	movne	r3, #0
 800798e:	b2db      	uxtb	r3, r3
 8007990:	461a      	mov	r2, r3
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	429a      	cmp	r2, r3
 8007996:	d19b      	bne.n	80078d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3720      	adds	r7, #32
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	2000000c 	.word	0x2000000c

080079a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08a      	sub	sp, #40	@ 0x28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80079ba:	f7fa f9d5 	bl	8001d68 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	1a9b      	subs	r3, r3, r2
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	4413      	add	r3, r2
 80079c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80079ca:	f7fa f9cd 	bl	8001d68 <HAL_GetTick>
 80079ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	330c      	adds	r3, #12
 80079d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80079d8:	4b3d      	ldr	r3, [pc, #244]	@ (8007ad0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	4613      	mov	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	00da      	lsls	r2, r3, #3
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	0d1b      	lsrs	r3, r3, #20
 80079e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ea:	fb02 f303 	mul.w	r3, r2, r3
 80079ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80079f0:	e060      	b.n	8007ab4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80079f8:	d107      	bne.n	8007a0a <SPI_WaitFifoStateUntilTimeout+0x62>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d104      	bne.n	8007a0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d050      	beq.n	8007ab4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a12:	f7fa f9a9 	bl	8001d68 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d902      	bls.n	8007a28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d13d      	bne.n	8007aa4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a40:	d111      	bne.n	8007a66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a4a:	d004      	beq.n	8007a56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a54:	d107      	bne.n	8007a66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a6e:	d10f      	bne.n	8007a90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e010      	b.n	8007ac6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689a      	ldr	r2, [r3, #8]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	4013      	ands	r3, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d196      	bne.n	80079f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3728      	adds	r7, #40	@ 0x28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	2000000c 	.word	0x2000000c

08007ad4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af02      	add	r7, sp, #8
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f7ff ff5b 	bl	80079a8 <SPI_WaitFifoStateUntilTimeout>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d007      	beq.n	8007b08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007afc:	f043 0220 	orr.w	r2, r3, #32
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e027      	b.n	8007b58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	2180      	movs	r1, #128	@ 0x80
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f7ff fec0 	bl	8007898 <SPI_WaitFlagStateUntilTimeout>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d007      	beq.n	8007b2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b22:	f043 0220 	orr.w	r2, r3, #32
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e014      	b.n	8007b58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7ff ff34 	bl	80079a8 <SPI_WaitFifoStateUntilTimeout>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d007      	beq.n	8007b56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b4a:	f043 0220 	orr.w	r2, r3, #32
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e000      	b.n	8007b58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e049      	b.n	8007c06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d106      	bne.n	8007b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f841 	bl	8007c0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f000 f9d4 	bl	8007f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
	...

08007c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d001      	beq.n	8007c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e04a      	b.n	8007cd2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0201 	orr.w	r2, r2, #1
 8007c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a21      	ldr	r2, [pc, #132]	@ (8007ce0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d018      	beq.n	8007c90 <HAL_TIM_Base_Start_IT+0x6c>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c66:	d013      	beq.n	8007c90 <HAL_TIM_Base_Start_IT+0x6c>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ce4 <HAL_TIM_Base_Start_IT+0xc0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00e      	beq.n	8007c90 <HAL_TIM_Base_Start_IT+0x6c>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d009      	beq.n	8007c90 <HAL_TIM_Base_Start_IT+0x6c>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1a      	ldr	r2, [pc, #104]	@ (8007cec <HAL_TIM_Base_Start_IT+0xc8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d004      	beq.n	8007c90 <HAL_TIM_Base_Start_IT+0x6c>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a19      	ldr	r2, [pc, #100]	@ (8007cf0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d115      	bne.n	8007cbc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689a      	ldr	r2, [r3, #8]
 8007c96:	4b17      	ldr	r3, [pc, #92]	@ (8007cf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c98:	4013      	ands	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b06      	cmp	r3, #6
 8007ca0:	d015      	beq.n	8007cce <HAL_TIM_Base_Start_IT+0xaa>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ca8:	d011      	beq.n	8007cce <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f042 0201 	orr.w	r2, r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cba:	e008      	b.n	8007cce <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	e000      	b.n	8007cd0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	40012c00 	.word	0x40012c00
 8007ce4:	40000400 	.word	0x40000400
 8007ce8:	40000800 	.word	0x40000800
 8007cec:	40013400 	.word	0x40013400
 8007cf0:	40014000 	.word	0x40014000
 8007cf4:	00010007 	.word	0x00010007

08007cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d020      	beq.n	8007d5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d01b      	beq.n	8007d5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f06f 0202 	mvn.w	r2, #2
 8007d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	f003 0303 	and.w	r3, r3, #3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f8e4 	bl	8007f10 <HAL_TIM_IC_CaptureCallback>
 8007d48:	e005      	b.n	8007d56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f8d6 	bl	8007efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f8e7 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f003 0304 	and.w	r3, r3, #4
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d020      	beq.n	8007da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01b      	beq.n	8007da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0204 	mvn.w	r2, #4
 8007d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f8be 	bl	8007f10 <HAL_TIM_IC_CaptureCallback>
 8007d94:	e005      	b.n	8007da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f8b0 	bl	8007efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f8c1 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f003 0308 	and.w	r3, r3, #8
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d020      	beq.n	8007df4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d01b      	beq.n	8007df4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f06f 0208 	mvn.w	r2, #8
 8007dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2204      	movs	r2, #4
 8007dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	f003 0303 	and.w	r3, r3, #3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f898 	bl	8007f10 <HAL_TIM_IC_CaptureCallback>
 8007de0:	e005      	b.n	8007dee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f88a 	bl	8007efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f89b 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f003 0310 	and.w	r3, r3, #16
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d020      	beq.n	8007e40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f003 0310 	and.w	r3, r3, #16
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d01b      	beq.n	8007e40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f06f 0210 	mvn.w	r2, #16
 8007e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2208      	movs	r2, #8
 8007e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f872 	bl	8007f10 <HAL_TIM_IC_CaptureCallback>
 8007e2c:	e005      	b.n	8007e3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f864 	bl	8007efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f875 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00c      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0201 	mvn.w	r2, #1
 8007e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7f9 f870 	bl	8000f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00c      	beq.n	8007e88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d007      	beq.n	8007e88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f908 	bl	8008098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00c      	beq.n	8007eac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f900 	bl	80080ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00c      	beq.n	8007ed0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d007      	beq.n	8007ed0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f834 	bl	8007f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00c      	beq.n	8007ef4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f003 0320 	and.w	r3, r3, #32
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d007      	beq.n	8007ef4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f06f 0220 	mvn.w	r2, #32
 8007eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f8c8 	bl	8008084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a42      	ldr	r2, [pc, #264]	@ (8008068 <TIM_Base_SetConfig+0x11c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00f      	beq.n	8007f84 <TIM_Base_SetConfig+0x38>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f6a:	d00b      	beq.n	8007f84 <TIM_Base_SetConfig+0x38>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a3f      	ldr	r2, [pc, #252]	@ (800806c <TIM_Base_SetConfig+0x120>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d007      	beq.n	8007f84 <TIM_Base_SetConfig+0x38>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a3e      	ldr	r2, [pc, #248]	@ (8008070 <TIM_Base_SetConfig+0x124>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d003      	beq.n	8007f84 <TIM_Base_SetConfig+0x38>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a3d      	ldr	r2, [pc, #244]	@ (8008074 <TIM_Base_SetConfig+0x128>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d108      	bne.n	8007f96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a33      	ldr	r2, [pc, #204]	@ (8008068 <TIM_Base_SetConfig+0x11c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d01b      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fa4:	d017      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a30      	ldr	r2, [pc, #192]	@ (800806c <TIM_Base_SetConfig+0x120>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d013      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8008070 <TIM_Base_SetConfig+0x124>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d00f      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8008074 <TIM_Base_SetConfig+0x128>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d00b      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8008078 <TIM_Base_SetConfig+0x12c>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d007      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800807c <TIM_Base_SetConfig+0x130>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d003      	beq.n	8007fd6 <TIM_Base_SetConfig+0x8a>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8008080 <TIM_Base_SetConfig+0x134>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d108      	bne.n	8007fe8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a16      	ldr	r2, [pc, #88]	@ (8008068 <TIM_Base_SetConfig+0x11c>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00f      	beq.n	8008034 <TIM_Base_SetConfig+0xe8>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a17      	ldr	r2, [pc, #92]	@ (8008074 <TIM_Base_SetConfig+0x128>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00b      	beq.n	8008034 <TIM_Base_SetConfig+0xe8>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a16      	ldr	r2, [pc, #88]	@ (8008078 <TIM_Base_SetConfig+0x12c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d007      	beq.n	8008034 <TIM_Base_SetConfig+0xe8>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a15      	ldr	r2, [pc, #84]	@ (800807c <TIM_Base_SetConfig+0x130>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d003      	beq.n	8008034 <TIM_Base_SetConfig+0xe8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a14      	ldr	r2, [pc, #80]	@ (8008080 <TIM_Base_SetConfig+0x134>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d103      	bne.n	800803c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b01      	cmp	r3, #1
 800804c:	d105      	bne.n	800805a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	f023 0201 	bic.w	r2, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	611a      	str	r2, [r3, #16]
  }
}
 800805a:	bf00      	nop
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	40012c00 	.word	0x40012c00
 800806c:	40000400 	.word	0x40000400
 8008070:	40000800 	.word	0x40000800
 8008074:	40013400 	.word	0x40013400
 8008078:	40014000 	.word	0x40014000
 800807c:	40014400 	.word	0x40014400
 8008080:	40014800 	.word	0x40014800

08008084 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080d0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80080d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b085      	sub	sp, #20
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080f6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80080fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008102:	b29a      	uxth	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	b29b      	uxth	r3, r3
 8008108:	43db      	mvns	r3, r3
 800810a:	b29b      	uxth	r3, r3
 800810c:	4013      	ands	r3, r2
 800810e:	b29a      	uxth	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	1d3b      	adds	r3, r7, #4
 800812e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008160:	b480      	push	{r7}
 8008162:	b09d      	sub	sp, #116	@ 0x74
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	b29b      	uxth	r3, r3
 800817e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008186:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	78db      	ldrb	r3, [r3, #3]
 800818e:	2b03      	cmp	r3, #3
 8008190:	d81f      	bhi.n	80081d2 <USB_ActivateEndpoint+0x72>
 8008192:	a201      	add	r2, pc, #4	@ (adr r2, 8008198 <USB_ActivateEndpoint+0x38>)
 8008194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008198:	080081a9 	.word	0x080081a9
 800819c:	080081c5 	.word	0x080081c5
 80081a0:	080081db 	.word	0x080081db
 80081a4:	080081b7 	.word	0x080081b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80081a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80081ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80081b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80081b4:	e012      	b.n	80081dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80081b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80081ba:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80081be:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80081c2:	e00b      	b.n	80081dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80081c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80081c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80081cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80081d0:	e004      	b.n	80081dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80081d8:	e000      	b.n	80081dc <USB_ActivateEndpoint+0x7c>
      break;
 80081da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	441a      	add	r2, r3
 80081e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80081ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	b29b      	uxth	r3, r3
 800820c:	b21b      	sxth	r3, r3
 800820e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008216:	b21a      	sxth	r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	b21b      	sxth	r3, r3
 800821e:	4313      	orrs	r3, r2
 8008220:	b21b      	sxth	r3, r3
 8008222:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	441a      	add	r2, r3
 8008230:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008234:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008238:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800823c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008244:	b29b      	uxth	r3, r3
 8008246:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	7b1b      	ldrb	r3, [r3, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	f040 8178 	bne.w	8008542 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	785b      	ldrb	r3, [r3, #1]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 8084 	beq.w	8008364 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	61bb      	str	r3, [r7, #24]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008266:	b29b      	uxth	r3, r3
 8008268:	461a      	mov	r2, r3
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	4413      	add	r3, r2
 800826e:	61bb      	str	r3, [r7, #24]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	011a      	lsls	r2, r3, #4
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	88db      	ldrh	r3, [r3, #6]
 8008284:	085b      	lsrs	r3, r3, #1
 8008286:	b29b      	uxth	r3, r3
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	b29a      	uxth	r2, r3
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	827b      	strh	r3, [r7, #18]
 800829e:	8a7b      	ldrh	r3, [r7, #18]
 80082a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01b      	beq.n	80082e0 <USB_ActivateEndpoint+0x180>
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082be:	823b      	strh	r3, [r7, #16]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	441a      	add	r2, r3
 80082ca:	8a3b      	ldrh	r3, [r7, #16]
 80082cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80082dc:	b29b      	uxth	r3, r3
 80082de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	78db      	ldrb	r3, [r3, #3]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d020      	beq.n	800832a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082fe:	81bb      	strh	r3, [r7, #12]
 8008300:	89bb      	ldrh	r3, [r7, #12]
 8008302:	f083 0320 	eor.w	r3, r3, #32
 8008306:	81bb      	strh	r3, [r7, #12]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	441a      	add	r2, r3
 8008312:	89bb      	ldrh	r3, [r7, #12]
 8008314:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008318:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800831c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008324:	b29b      	uxth	r3, r3
 8008326:	8013      	strh	r3, [r2, #0]
 8008328:	e2d5      	b.n	80088d6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800833c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008340:	81fb      	strh	r3, [r7, #14]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	441a      	add	r2, r3
 800834c:	89fb      	ldrh	r3, [r7, #14]
 800834e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008352:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800835a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800835e:	b29b      	uxth	r3, r3
 8008360:	8013      	strh	r3, [r2, #0]
 8008362:	e2b8      	b.n	80088d6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	633b      	str	r3, [r7, #48]	@ 0x30
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800836e:	b29b      	uxth	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	4413      	add	r3, r2
 8008376:	633b      	str	r3, [r7, #48]	@ 0x30
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	011a      	lsls	r2, r3, #4
 800837e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008380:	4413      	add	r3, r2
 8008382:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8008386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	88db      	ldrh	r3, [r3, #6]
 800838c:	085b      	lsrs	r3, r3, #1
 800838e:	b29b      	uxth	r3, r3
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	b29a      	uxth	r2, r3
 8008394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008396:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a8:	4413      	add	r3, r2
 80083aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	011a      	lsls	r2, r3, #4
 80083b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b4:	4413      	add	r3, r2
 80083b6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80083ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80083bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ca:	801a      	strh	r2, [r3, #0]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10a      	bne.n	80083ea <USB_ActivateEndpoint+0x28a>
 80083d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e6:	801a      	strh	r2, [r3, #0]
 80083e8:	e039      	b.n	800845e <USB_ActivateEndpoint+0x2fe>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80083f0:	d818      	bhi.n	8008424 <USB_ActivateEndpoint+0x2c4>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	085b      	lsrs	r3, r3, #1
 80083f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d002      	beq.n	800840c <USB_ActivateEndpoint+0x2ac>
 8008406:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008408:	3301      	adds	r3, #1
 800840a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800840c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	b29a      	uxth	r2, r3
 8008412:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008414:	b29b      	uxth	r3, r3
 8008416:	029b      	lsls	r3, r3, #10
 8008418:	b29b      	uxth	r3, r3
 800841a:	4313      	orrs	r3, r2
 800841c:	b29a      	uxth	r2, r3
 800841e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008420:	801a      	strh	r2, [r3, #0]
 8008422:	e01c      	b.n	800845e <USB_ActivateEndpoint+0x2fe>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	095b      	lsrs	r3, r3, #5
 800842a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	f003 031f 	and.w	r3, r3, #31
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <USB_ActivateEndpoint+0x2de>
 8008438:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800843a:	3b01      	subs	r3, #1
 800843c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	b29a      	uxth	r2, r3
 8008444:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008446:	b29b      	uxth	r3, r3
 8008448:	029b      	lsls	r3, r3, #10
 800844a:	b29b      	uxth	r3, r3
 800844c:	4313      	orrs	r3, r2
 800844e:	b29b      	uxth	r3, r3
 8008450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008458:	b29a      	uxth	r2, r3
 800845a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800846c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800846e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d01b      	beq.n	80084ae <USB_ActivateEndpoint+0x34e>
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	b29b      	uxth	r3, r3
 8008484:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800848c:	843b      	strh	r3, [r7, #32]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	441a      	add	r2, r3
 8008498:	8c3b      	ldrh	r3, [r7, #32]
 800849a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800849e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80084a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d124      	bne.n	8008500 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084cc:	83bb      	strh	r3, [r7, #28]
 80084ce:	8bbb      	ldrh	r3, [r7, #28]
 80084d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80084d4:	83bb      	strh	r3, [r7, #28]
 80084d6:	8bbb      	ldrh	r3, [r7, #28]
 80084d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084dc:	83bb      	strh	r3, [r7, #28]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	441a      	add	r2, r3
 80084e8:	8bbb      	ldrh	r3, [r7, #28]
 80084ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	8013      	strh	r3, [r2, #0]
 80084fe:	e1ea      	b.n	80088d6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008516:	83fb      	strh	r3, [r7, #30]
 8008518:	8bfb      	ldrh	r3, [r7, #30]
 800851a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800851e:	83fb      	strh	r3, [r7, #30]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	441a      	add	r2, r3
 800852a:	8bfb      	ldrh	r3, [r7, #30]
 800852c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800853c:	b29b      	uxth	r3, r3
 800853e:	8013      	strh	r3, [r2, #0]
 8008540:	e1c9      	b.n	80088d6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	78db      	ldrb	r3, [r3, #3]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d11e      	bne.n	8008588 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	b29b      	uxth	r3, r3
 8008558:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800855c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008560:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	441a      	add	r2, r3
 800856e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800857a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800857e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008582:	b29b      	uxth	r3, r3
 8008584:	8013      	strh	r3, [r2, #0]
 8008586:	e01d      	b.n	80085c4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	b29b      	uxth	r3, r3
 8008596:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800859a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800859e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	441a      	add	r2, r3
 80085ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80085b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	461a      	mov	r2, r3
 80085d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085d4:	4413      	add	r3, r2
 80085d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	011a      	lsls	r2, r3, #4
 80085de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	891b      	ldrh	r3, [r3, #8]
 80085ec:	085b      	lsrs	r3, r3, #1
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085f6:	801a      	strh	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008602:	b29b      	uxth	r3, r3
 8008604:	461a      	mov	r2, r3
 8008606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008608:	4413      	add	r3, r2
 800860a:	657b      	str	r3, [r7, #84]	@ 0x54
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	011a      	lsls	r2, r3, #4
 8008612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008614:	4413      	add	r3, r2
 8008616:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800861a:	653b      	str	r3, [r7, #80]	@ 0x50
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	895b      	ldrh	r3, [r3, #10]
 8008620:	085b      	lsrs	r3, r3, #1
 8008622:	b29b      	uxth	r3, r3
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	b29a      	uxth	r2, r3
 8008628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800862a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	785b      	ldrb	r3, [r3, #1]
 8008630:	2b00      	cmp	r3, #0
 8008632:	f040 8093 	bne.w	800875c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008646:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800864a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01b      	beq.n	800868a <USB_ActivateEndpoint+0x52a>
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008668:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	441a      	add	r2, r3
 8008674:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800867a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800867e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008686:	b29b      	uxth	r3, r3
 8008688:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008698:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800869a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d01b      	beq.n	80086da <USB_ActivateEndpoint+0x57a>
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	441a      	add	r2, r3
 80086c4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80086c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f0:	873b      	strh	r3, [r7, #56]	@ 0x38
 80086f2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80086f4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80086f8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80086fa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80086fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008700:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	441a      	add	r2, r3
 800870c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800870e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800871a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800871e:	b29b      	uxth	r3, r3
 8008720:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	b29b      	uxth	r3, r3
 8008730:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008734:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008738:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	441a      	add	r2, r3
 8008744:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800874a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800874e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008756:	b29b      	uxth	r3, r3
 8008758:	8013      	strh	r3, [r2, #0]
 800875a:	e0bc      	b.n	80088d6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800876c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01d      	beq.n	80087b4 <USB_ActivateEndpoint+0x654>
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	b29b      	uxth	r3, r3
 8008786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800878a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	441a      	add	r2, r3
 800879c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80087a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80087c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80087c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d01d      	beq.n	800880c <USB_ActivateEndpoint+0x6ac>
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	b29b      	uxth	r3, r3
 80087de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087e6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	441a      	add	r2, r3
 80087f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80087f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008804:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008808:	b29b      	uxth	r3, r3
 800880a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	78db      	ldrb	r3, [r3, #3]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d024      	beq.n	800885e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	b29b      	uxth	r3, r3
 8008822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800882a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800882e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008832:	f083 0320 	eor.w	r3, r3, #32
 8008836:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	441a      	add	r2, r3
 8008844:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008848:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800884c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008850:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008858:	b29b      	uxth	r3, r3
 800885a:	8013      	strh	r3, [r2, #0]
 800885c:	e01d      	b.n	800889a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4413      	add	r3, r2
 8008868:	881b      	ldrh	r3, [r3, #0]
 800886a:	b29b      	uxth	r3, r3
 800886c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008874:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	441a      	add	r2, r3
 8008882:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800888a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800888e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008896:	b29b      	uxth	r3, r3
 8008898:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	441a      	add	r2, r3
 80088be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80088c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80088d6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3774      	adds	r7, #116	@ 0x74
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop

080088e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b08d      	sub	sp, #52	@ 0x34
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	7b1b      	ldrb	r3, [r3, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f040 808e 	bne.w	8008a18 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	785b      	ldrb	r3, [r3, #1]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d044      	beq.n	800898e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	881b      	ldrh	r3, [r3, #0]
 8008910:	81bb      	strh	r3, [r7, #12]
 8008912:	89bb      	ldrh	r3, [r7, #12]
 8008914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008918:	2b00      	cmp	r3, #0
 800891a:	d01b      	beq.n	8008954 <USB_DeactivateEndpoint+0x6c>
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	b29b      	uxth	r3, r3
 800892a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800892e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008932:	817b      	strh	r3, [r7, #10]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	441a      	add	r2, r3
 800893e:	897b      	ldrh	r3, [r7, #10]
 8008940:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008944:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800894c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008950:	b29b      	uxth	r3, r3
 8008952:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	b29b      	uxth	r3, r3
 8008962:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008966:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800896a:	813b      	strh	r3, [r7, #8]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	441a      	add	r2, r3
 8008976:	893b      	ldrh	r3, [r7, #8]
 8008978:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800897c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008988:	b29b      	uxth	r3, r3
 800898a:	8013      	strh	r3, [r2, #0]
 800898c:	e192      	b.n	8008cb4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	827b      	strh	r3, [r7, #18]
 800899c:	8a7b      	ldrh	r3, [r7, #18]
 800899e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d01b      	beq.n	80089de <USB_DeactivateEndpoint+0xf6>
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	881b      	ldrh	r3, [r3, #0]
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089bc:	823b      	strh	r3, [r7, #16]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	441a      	add	r2, r3
 80089c8:	8a3b      	ldrh	r3, [r7, #16]
 80089ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089da:	b29b      	uxth	r3, r3
 80089dc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089f4:	81fb      	strh	r3, [r7, #14]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	441a      	add	r2, r3
 8008a00:	89fb      	ldrh	r3, [r7, #14]
 8008a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	8013      	strh	r3, [r2, #0]
 8008a16:	e14d      	b.n	8008cb4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	785b      	ldrb	r3, [r3, #1]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f040 80a5 	bne.w	8008b6c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	843b      	strh	r3, [r7, #32]
 8008a30:	8c3b      	ldrh	r3, [r7, #32]
 8008a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d01b      	beq.n	8008a72 <USB_DeactivateEndpoint+0x18a>
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a50:	83fb      	strh	r3, [r7, #30]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	441a      	add	r2, r3
 8008a5c:	8bfb      	ldrh	r3, [r7, #30]
 8008a5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	83bb      	strh	r3, [r7, #28]
 8008a80:	8bbb      	ldrh	r3, [r7, #28]
 8008a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01b      	beq.n	8008ac2 <USB_DeactivateEndpoint+0x1da>
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa0:	837b      	strh	r3, [r7, #26]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	441a      	add	r2, r3
 8008aac:	8b7b      	ldrh	r3, [r7, #26]
 8008aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad8:	833b      	strh	r3, [r7, #24]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	441a      	add	r2, r3
 8008ae4:	8b3b      	ldrh	r3, [r7, #24]
 8008ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008af2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b10:	82fb      	strh	r3, [r7, #22]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	441a      	add	r2, r3
 8008b1c:	8afb      	ldrh	r3, [r7, #22]
 8008b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b48:	82bb      	strh	r3, [r7, #20]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	441a      	add	r2, r3
 8008b54:	8abb      	ldrh	r3, [r7, #20]
 8008b56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	8013      	strh	r3, [r2, #0]
 8008b6a:	e0a3      	b.n	8008cb4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008b7a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d01b      	beq.n	8008bbc <USB_DeactivateEndpoint+0x2d4>
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	881b      	ldrh	r3, [r3, #0]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b9a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	441a      	add	r2, r3
 8008ba6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008ba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008bb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008bca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d01b      	beq.n	8008c0c <USB_DeactivateEndpoint+0x324>
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bea:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	441a      	add	r2, r3
 8008bf6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008bf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c22:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	441a      	add	r2, r3
 8008c2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	441a      	add	r2, r3
 8008c66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c92:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	441a      	add	r2, r3
 8008c9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008ca0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ca4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3734      	adds	r7, #52	@ 0x34
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b0c2      	sub	sp, #264	@ 0x108
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ccc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cd0:	6018      	str	r0, [r3, #0]
 8008cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cda:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	785b      	ldrb	r3, [r3, #1]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	f040 86b7 	bne.w	8009a5c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	699a      	ldr	r2, [r3, #24]
 8008cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d908      	bls.n	8008d1c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008d1a:	e007      	b.n	8008d2c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	7b1b      	ldrb	r3, [r3, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d13a      	bne.n	8008db2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6959      	ldr	r1, [r3, #20]
 8008d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	88da      	ldrh	r2, [r3, #6]
 8008d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008d5e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008d62:	6800      	ldr	r0, [r0, #0]
 8008d64:	f001 fc8d 	bl	800a682 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	613b      	str	r3, [r7, #16]
 8008d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	461a      	mov	r2, r3
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	4413      	add	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]
 8008d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	011a      	lsls	r2, r3, #4
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	801a      	strh	r2, [r3, #0]
 8008dae:	f000 be1f 	b.w	80099f0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	78db      	ldrb	r3, [r3, #3]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	f040 8462 	bne.w	8009688 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6a1a      	ldr	r2, [r3, #32]
 8008dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	f240 83df 	bls.w	80095a0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008de6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	881b      	ldrh	r3, [r3, #0]
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e08:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	441a      	add	r2, r3
 8008e26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008e2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e32:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6a1a      	ldr	r2, [r3, #32]
 8008e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e4e:	1ad2      	subs	r2, r2, r3
 8008e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 81c7 	beq.w	8009212 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	785b      	ldrb	r3, [r3, #1]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d177      	bne.n	8008f90 <USB_EPStartXfer+0x2ce>
 8008ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec0:	4413      	add	r3, r2
 8008ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	011a      	lsls	r2, r3, #4
 8008ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8008edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eea:	801a      	strh	r2, [r3, #0]
 8008eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10a      	bne.n	8008f0a <USB_EPStartXfer+0x248>
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	801a      	strh	r2, [r3, #0]
 8008f08:	e067      	b.n	8008fda <USB_EPStartXfer+0x318>
 8008f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f10:	d81c      	bhi.n	8008f4c <USB_EPStartXfer+0x28a>
 8008f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f16:	085b      	lsrs	r3, r3, #1
 8008f18:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d004      	beq.n	8008f32 <USB_EPStartXfer+0x270>
 8008f28:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	029b      	lsls	r3, r3, #10
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	4313      	orrs	r3, r2
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f48:	801a      	strh	r2, [r3, #0]
 8008f4a:	e046      	b.n	8008fda <USB_EPStartXfer+0x318>
 8008f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f50:	095b      	lsrs	r3, r3, #5
 8008f52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5a:	f003 031f 	and.w	r3, r3, #31
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d104      	bne.n	8008f6c <USB_EPStartXfer+0x2aa>
 8008f62:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008f66:	3b01      	subs	r3, #1
 8008f68:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	029b      	lsls	r3, r3, #10
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8c:	801a      	strh	r2, [r3, #0]
 8008f8e:	e024      	b.n	8008fda <USB_EPStartXfer+0x318>
 8008f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	785b      	ldrb	r3, [r3, #1]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d11c      	bne.n	8008fda <USB_EPStartXfer+0x318>
 8008fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb4:	4413      	add	r3, r2
 8008fb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	011a      	lsls	r2, r3, #4
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc8:	4413      	add	r3, r2
 8008fca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	895b      	ldrh	r3, [r3, #10]
 8008fe6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6959      	ldr	r1, [r3, #20]
 8008ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009000:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009004:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009008:	6800      	ldr	r0, [r0, #0]
 800900a:	f001 fb3a 	bl	800a682 <USB_WritePMA>
            ep->xfer_buff += len;
 800900e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	695a      	ldr	r2, [r3, #20]
 800901a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800901e:	441a      	add	r2, r3
 8009020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800902c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6a1a      	ldr	r2, [r3, #32]
 8009038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800903c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	429a      	cmp	r2, r3
 8009046:	d90f      	bls.n	8009068 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800904c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6a1a      	ldr	r2, [r3, #32]
 8009054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009058:	1ad2      	subs	r2, r2, r3
 800905a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800905e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	621a      	str	r2, [r3, #32]
 8009066:	e00e      	b.n	8009086 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800906c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800907c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2200      	movs	r2, #0
 8009084:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800908a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	785b      	ldrb	r3, [r3, #1]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d177      	bne.n	8009186 <USB_EPStartXfer+0x4c4>
 8009096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800909a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	61bb      	str	r3, [r7, #24]
 80090a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	461a      	mov	r2, r3
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	4413      	add	r3, r2
 80090b8:	61bb      	str	r3, [r7, #24]
 80090ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	011a      	lsls	r2, r3, #4
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	4413      	add	r3, r2
 80090cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80090d0:	617b      	str	r3, [r7, #20]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090dc:	b29a      	uxth	r2, r3
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	801a      	strh	r2, [r3, #0]
 80090e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <USB_EPStartXfer+0x43e>
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	801a      	strh	r2, [r3, #0]
 80090fe:	e06d      	b.n	80091dc <USB_EPStartXfer+0x51a>
 8009100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009104:	2b3e      	cmp	r3, #62	@ 0x3e
 8009106:	d81c      	bhi.n	8009142 <USB_EPStartXfer+0x480>
 8009108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800910c:	085b      	lsrs	r3, r3, #1
 800910e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d004      	beq.n	8009128 <USB_EPStartXfer+0x466>
 800911e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009122:	3301      	adds	r3, #1
 8009124:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	b29a      	uxth	r2, r3
 800912e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009132:	b29b      	uxth	r3, r3
 8009134:	029b      	lsls	r3, r3, #10
 8009136:	b29b      	uxth	r3, r3
 8009138:	4313      	orrs	r3, r2
 800913a:	b29a      	uxth	r2, r3
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	801a      	strh	r2, [r3, #0]
 8009140:	e04c      	b.n	80091dc <USB_EPStartXfer+0x51a>
 8009142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009146:	095b      	lsrs	r3, r3, #5
 8009148:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800914c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009150:	f003 031f 	and.w	r3, r3, #31
 8009154:	2b00      	cmp	r3, #0
 8009156:	d104      	bne.n	8009162 <USB_EPStartXfer+0x4a0>
 8009158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800915c:	3b01      	subs	r3, #1
 800915e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	b29a      	uxth	r2, r3
 8009168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800916c:	b29b      	uxth	r3, r3
 800916e:	029b      	lsls	r3, r3, #10
 8009170:	b29b      	uxth	r3, r3
 8009172:	4313      	orrs	r3, r2
 8009174:	b29b      	uxth	r3, r3
 8009176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800917a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800917e:	b29a      	uxth	r2, r3
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	801a      	strh	r2, [r3, #0]
 8009184:	e02a      	b.n	80091dc <USB_EPStartXfer+0x51a>
 8009186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800918a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	785b      	ldrb	r3, [r3, #1]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d122      	bne.n	80091dc <USB_EPStartXfer+0x51a>
 8009196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800919a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	623b      	str	r3, [r7, #32]
 80091a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	461a      	mov	r2, r3
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	4413      	add	r3, r2
 80091b8:	623b      	str	r3, [r7, #32]
 80091ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	011a      	lsls	r2, r3, #4
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	4413      	add	r3, r2
 80091cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80091d0:	61fb      	str	r3, [r7, #28]
 80091d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80091dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	891b      	ldrh	r3, [r3, #8]
 80091e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6959      	ldr	r1, [r3, #20]
 80091f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009202:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009206:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800920a:	6800      	ldr	r0, [r0, #0]
 800920c:	f001 fa39 	bl	800a682 <USB_WritePMA>
 8009210:	e3ee      	b.n	80099f0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	785b      	ldrb	r3, [r3, #1]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d177      	bne.n	8009312 <USB_EPStartXfer+0x650>
 8009222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800922e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800923c:	b29b      	uxth	r3, r3
 800923e:	461a      	mov	r2, r3
 8009240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009242:	4413      	add	r3, r2
 8009244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800924a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	011a      	lsls	r2, r3, #4
 8009254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009256:	4413      	add	r3, r2
 8009258:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800925c:	647b      	str	r3, [r7, #68]	@ 0x44
 800925e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	b29b      	uxth	r3, r3
 8009264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009268:	b29a      	uxth	r2, r3
 800926a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800926c:	801a      	strh	r2, [r3, #0]
 800926e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <USB_EPStartXfer+0x5ca>
 8009276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	b29b      	uxth	r3, r3
 800927c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009284:	b29a      	uxth	r2, r3
 8009286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009288:	801a      	strh	r2, [r3, #0]
 800928a:	e06d      	b.n	8009368 <USB_EPStartXfer+0x6a6>
 800928c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009290:	2b3e      	cmp	r3, #62	@ 0x3e
 8009292:	d81c      	bhi.n	80092ce <USB_EPStartXfer+0x60c>
 8009294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009298:	085b      	lsrs	r3, r3, #1
 800929a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800929e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d004      	beq.n	80092b4 <USB_EPStartXfer+0x5f2>
 80092aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80092ae:	3301      	adds	r3, #1
 80092b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80092b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80092be:	b29b      	uxth	r3, r3
 80092c0:	029b      	lsls	r3, r3, #10
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	4313      	orrs	r3, r2
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092ca:	801a      	strh	r2, [r3, #0]
 80092cc:	e04c      	b.n	8009368 <USB_EPStartXfer+0x6a6>
 80092ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d2:	095b      	lsrs	r3, r3, #5
 80092d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80092d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092dc:	f003 031f 	and.w	r3, r3, #31
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d104      	bne.n	80092ee <USB_EPStartXfer+0x62c>
 80092e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80092e8:	3b01      	subs	r3, #1
 80092ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80092ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	029b      	lsls	r3, r3, #10
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	4313      	orrs	r3, r2
 8009300:	b29b      	uxth	r3, r3
 8009302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800930a:	b29a      	uxth	r2, r3
 800930c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800930e:	801a      	strh	r2, [r3, #0]
 8009310:	e02a      	b.n	8009368 <USB_EPStartXfer+0x6a6>
 8009312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	785b      	ldrb	r3, [r3, #1]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d122      	bne.n	8009368 <USB_EPStartXfer+0x6a6>
 8009322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	653b      	str	r3, [r7, #80]	@ 0x50
 800932e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800933c:	b29b      	uxth	r3, r3
 800933e:	461a      	mov	r2, r3
 8009340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009342:	4413      	add	r3, r2
 8009344:	653b      	str	r3, [r7, #80]	@ 0x50
 8009346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800934a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	011a      	lsls	r2, r3, #4
 8009354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009356:	4413      	add	r3, r2
 8009358:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800935c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800935e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009362:	b29a      	uxth	r2, r3
 8009364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009366:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800936c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	891b      	ldrh	r3, [r3, #8]
 8009374:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800937c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6959      	ldr	r1, [r3, #20]
 8009384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009388:	b29b      	uxth	r3, r3
 800938a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800938e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009392:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009396:	6800      	ldr	r0, [r0, #0]
 8009398:	f001 f973 	bl	800a682 <USB_WritePMA>
            ep->xfer_buff += len;
 800939c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	695a      	ldr	r2, [r3, #20]
 80093a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ac:	441a      	add	r2, r3
 80093ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80093ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6a1a      	ldr	r2, [r3, #32]
 80093c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d90f      	bls.n	80093f6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80093d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6a1a      	ldr	r2, [r3, #32]
 80093e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093e6:	1ad2      	subs	r2, r2, r3
 80093e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	621a      	str	r2, [r3, #32]
 80093f4:	e00e      	b.n	8009414 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80093f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800940a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2200      	movs	r2, #0
 8009412:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d177      	bne.n	8009520 <USB_EPStartXfer+0x85e>
 8009430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800943c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009440:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800944a:	b29b      	uxth	r3, r3
 800944c:	461a      	mov	r2, r3
 800944e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009450:	4413      	add	r3, r2
 8009452:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	011a      	lsls	r2, r3, #4
 8009462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009464:	4413      	add	r3, r2
 8009466:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800946a:	637b      	str	r3, [r7, #52]	@ 0x34
 800946c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800946e:	881b      	ldrh	r3, [r3, #0]
 8009470:	b29b      	uxth	r3, r3
 8009472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009476:	b29a      	uxth	r2, r3
 8009478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800947a:	801a      	strh	r2, [r3, #0]
 800947c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10a      	bne.n	800949a <USB_EPStartXfer+0x7d8>
 8009484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	b29b      	uxth	r3, r3
 800948a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800948e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009492:	b29a      	uxth	r2, r3
 8009494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009496:	801a      	strh	r2, [r3, #0]
 8009498:	e067      	b.n	800956a <USB_EPStartXfer+0x8a8>
 800949a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800949e:	2b3e      	cmp	r3, #62	@ 0x3e
 80094a0:	d81c      	bhi.n	80094dc <USB_EPStartXfer+0x81a>
 80094a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094a6:	085b      	lsrs	r3, r3, #1
 80094a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80094ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b0:	f003 0301 	and.w	r3, r3, #1
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d004      	beq.n	80094c2 <USB_EPStartXfer+0x800>
 80094b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094bc:	3301      	adds	r3, #1
 80094be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80094c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	029b      	lsls	r3, r3, #10
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	4313      	orrs	r3, r2
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d8:	801a      	strh	r2, [r3, #0]
 80094da:	e046      	b.n	800956a <USB_EPStartXfer+0x8a8>
 80094dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e0:	095b      	lsrs	r3, r3, #5
 80094e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80094e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ea:	f003 031f 	and.w	r3, r3, #31
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d104      	bne.n	80094fc <USB_EPStartXfer+0x83a>
 80094f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094f6:	3b01      	subs	r3, #1
 80094f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80094fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29a      	uxth	r2, r3
 8009502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009506:	b29b      	uxth	r3, r3
 8009508:	029b      	lsls	r3, r3, #10
 800950a:	b29b      	uxth	r3, r3
 800950c:	4313      	orrs	r3, r2
 800950e:	b29b      	uxth	r3, r3
 8009510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009518:	b29a      	uxth	r2, r3
 800951a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800951c:	801a      	strh	r2, [r3, #0]
 800951e:	e024      	b.n	800956a <USB_EPStartXfer+0x8a8>
 8009520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	785b      	ldrb	r3, [r3, #1]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d11c      	bne.n	800956a <USB_EPStartXfer+0x8a8>
 8009530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800953e:	b29b      	uxth	r3, r3
 8009540:	461a      	mov	r2, r3
 8009542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009544:	4413      	add	r3, r2
 8009546:	643b      	str	r3, [r7, #64]	@ 0x40
 8009548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800954c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	011a      	lsls	r2, r3, #4
 8009556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009558:	4413      	add	r3, r2
 800955a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009564:	b29a      	uxth	r2, r3
 8009566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009568:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800956a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800956e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	895b      	ldrh	r3, [r3, #10]
 8009576:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800957a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800957e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6959      	ldr	r1, [r3, #20]
 8009586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800958a:	b29b      	uxth	r3, r3
 800958c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009590:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009594:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009598:	6800      	ldr	r0, [r0, #0]
 800959a:	f001 f872 	bl	800a682 <USB_WritePMA>
 800959e:	e227      	b.n	80099f0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80095a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80095b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80095d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095d6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80095da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	441a      	add	r2, r3
 80095f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80095f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009600:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009608:	b29b      	uxth	r3, r3
 800960a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800960c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009610:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800961c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009626:	b29b      	uxth	r3, r3
 8009628:	461a      	mov	r2, r3
 800962a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800962c:	4413      	add	r3, r2
 800962e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	011a      	lsls	r2, r3, #4
 800963e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009640:	4413      	add	r3, r2
 8009642:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009646:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800964c:	b29a      	uxth	r2, r3
 800964e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009650:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	891b      	ldrh	r3, [r3, #8]
 800965e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6959      	ldr	r1, [r3, #20]
 800966e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009672:	b29b      	uxth	r3, r3
 8009674:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009678:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800967c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009680:	6800      	ldr	r0, [r0, #0]
 8009682:	f000 fffe 	bl	800a682 <USB_WritePMA>
 8009686:	e1b3      	b.n	80099f0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800968c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6a1a      	ldr	r2, [r3, #32]
 8009694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009698:	1ad2      	subs	r2, r2, r3
 800969a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800969e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80096a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f000 80c6 	beq.w	800985a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80096ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80096da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	785b      	ldrb	r3, [r3, #1]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d177      	bne.n	80097da <USB_EPStartXfer+0xb18>
 80096ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009704:	b29b      	uxth	r3, r3
 8009706:	461a      	mov	r2, r3
 8009708:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800970a:	4413      	add	r3, r2
 800970c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800970e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	011a      	lsls	r2, r3, #4
 800971c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800971e:	4413      	add	r3, r2
 8009720:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009724:	667b      	str	r3, [r7, #100]	@ 0x64
 8009726:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	b29b      	uxth	r3, r3
 800972c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009730:	b29a      	uxth	r2, r3
 8009732:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009734:	801a      	strh	r2, [r3, #0]
 8009736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10a      	bne.n	8009754 <USB_EPStartXfer+0xa92>
 800973e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	b29b      	uxth	r3, r3
 8009744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800974c:	b29a      	uxth	r2, r3
 800974e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009750:	801a      	strh	r2, [r3, #0]
 8009752:	e067      	b.n	8009824 <USB_EPStartXfer+0xb62>
 8009754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009758:	2b3e      	cmp	r3, #62	@ 0x3e
 800975a:	d81c      	bhi.n	8009796 <USB_EPStartXfer+0xad4>
 800975c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009760:	085b      	lsrs	r3, r3, #1
 8009762:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d004      	beq.n	800977c <USB_EPStartXfer+0xaba>
 8009772:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009776:	3301      	adds	r3, #1
 8009778:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800977c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	b29a      	uxth	r2, r3
 8009782:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009786:	b29b      	uxth	r3, r3
 8009788:	029b      	lsls	r3, r3, #10
 800978a:	b29b      	uxth	r3, r3
 800978c:	4313      	orrs	r3, r2
 800978e:	b29a      	uxth	r2, r3
 8009790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009792:	801a      	strh	r2, [r3, #0]
 8009794:	e046      	b.n	8009824 <USB_EPStartXfer+0xb62>
 8009796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800979a:	095b      	lsrs	r3, r3, #5
 800979c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80097a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a4:	f003 031f 	and.w	r3, r3, #31
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d104      	bne.n	80097b6 <USB_EPStartXfer+0xaf4>
 80097ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80097b0:	3b01      	subs	r3, #1
 80097b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80097b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097b8:	881b      	ldrh	r3, [r3, #0]
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	029b      	lsls	r3, r3, #10
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	4313      	orrs	r3, r2
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097d6:	801a      	strh	r2, [r3, #0]
 80097d8:	e024      	b.n	8009824 <USB_EPStartXfer+0xb62>
 80097da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d11c      	bne.n	8009824 <USB_EPStartXfer+0xb62>
 80097ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	461a      	mov	r2, r3
 80097fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097fe:	4413      	add	r3, r2
 8009800:	673b      	str	r3, [r7, #112]	@ 0x70
 8009802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	011a      	lsls	r2, r3, #4
 8009810:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009812:	4413      	add	r3, r2
 8009814:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009818:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800981a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800981e:	b29a      	uxth	r2, r3
 8009820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009822:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	895b      	ldrh	r3, [r3, #10]
 8009830:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6959      	ldr	r1, [r3, #20]
 8009840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009844:	b29b      	uxth	r3, r3
 8009846:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800984a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800984e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009852:	6800      	ldr	r0, [r0, #0]
 8009854:	f000 ff15 	bl	800a682 <USB_WritePMA>
 8009858:	e0ca      	b.n	80099f0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800985a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800985e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	785b      	ldrb	r3, [r3, #1]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d177      	bne.n	800995a <USB_EPStartXfer+0xc98>
 800986a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800986e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800987a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009884:	b29b      	uxth	r3, r3
 8009886:	461a      	mov	r2, r3
 8009888:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800988a:	4413      	add	r3, r2
 800988c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800988e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	011a      	lsls	r2, r3, #4
 800989c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800989e:	4413      	add	r3, r2
 80098a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80098a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098a8:	881b      	ldrh	r3, [r3, #0]
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098b4:	801a      	strh	r2, [r3, #0]
 80098b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <USB_EPStartXfer+0xc12>
 80098be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098d0:	801a      	strh	r2, [r3, #0]
 80098d2:	e073      	b.n	80099bc <USB_EPStartXfer+0xcfa>
 80098d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80098da:	d81c      	bhi.n	8009916 <USB_EPStartXfer+0xc54>
 80098dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e0:	085b      	lsrs	r3, r3, #1
 80098e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80098e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d004      	beq.n	80098fc <USB_EPStartXfer+0xc3a>
 80098f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80098f6:	3301      	adds	r3, #1
 80098f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80098fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	b29a      	uxth	r2, r3
 8009902:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009906:	b29b      	uxth	r3, r3
 8009908:	029b      	lsls	r3, r3, #10
 800990a:	b29b      	uxth	r3, r3
 800990c:	4313      	orrs	r3, r2
 800990e:	b29a      	uxth	r2, r3
 8009910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009912:	801a      	strh	r2, [r3, #0]
 8009914:	e052      	b.n	80099bc <USB_EPStartXfer+0xcfa>
 8009916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800991a:	095b      	lsrs	r3, r3, #5
 800991c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009924:	f003 031f 	and.w	r3, r3, #31
 8009928:	2b00      	cmp	r3, #0
 800992a:	d104      	bne.n	8009936 <USB_EPStartXfer+0xc74>
 800992c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009930:	3b01      	subs	r3, #1
 8009932:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009936:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29a      	uxth	r2, r3
 800993c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009940:	b29b      	uxth	r3, r3
 8009942:	029b      	lsls	r3, r3, #10
 8009944:	b29b      	uxth	r3, r3
 8009946:	4313      	orrs	r3, r2
 8009948:	b29b      	uxth	r3, r3
 800994a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009952:	b29a      	uxth	r2, r3
 8009954:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009956:	801a      	strh	r2, [r3, #0]
 8009958:	e030      	b.n	80099bc <USB_EPStartXfer+0xcfa>
 800995a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800995e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	785b      	ldrb	r3, [r3, #1]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d128      	bne.n	80099bc <USB_EPStartXfer+0xcfa>
 800996a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009986:	b29b      	uxth	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800998e:	4413      	add	r3, r2
 8009990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	011a      	lsls	r2, r3, #4
 80099a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099a6:	4413      	add	r3, r2
 80099a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80099ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80099b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80099ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80099bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	891b      	ldrh	r3, [r3, #8]
 80099c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6959      	ldr	r1, [r3, #20]
 80099d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099dc:	b29b      	uxth	r3, r3
 80099de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80099e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80099e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80099ea:	6800      	ldr	r0, [r0, #0]
 80099ec:	f000 fe49 	bl	800a682 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80099f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a16:	817b      	strh	r3, [r7, #10]
 8009a18:	897b      	ldrh	r3, [r7, #10]
 8009a1a:	f083 0310 	eor.w	r3, r3, #16
 8009a1e:	817b      	strh	r3, [r7, #10]
 8009a20:	897b      	ldrh	r3, [r7, #10]
 8009a22:	f083 0320 	eor.w	r3, r3, #32
 8009a26:	817b      	strh	r3, [r7, #10]
 8009a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	441a      	add	r2, r3
 8009a42:	897b      	ldrh	r3, [r7, #10]
 8009a44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	8013      	strh	r3, [r2, #0]
 8009a58:	f000 bcdf 	b.w	800a41a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	7b1b      	ldrb	r3, [r3, #12]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f040 80bc 	bne.w	8009be6 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	699a      	ldr	r2, [r3, #24]
 8009a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d917      	bls.n	8009aba <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	699a      	ldr	r2, [r3, #24]
 8009aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aaa:	1ad2      	subs	r2, r2, r3
 8009aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	619a      	str	r2, [r3, #24]
 8009ab8:	e00e      	b.n	8009ad8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009adc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	461a      	mov	r2, r3
 8009af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009afc:	4413      	add	r3, r2
 8009afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	011a      	lsls	r2, r3, #4
 8009b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b14:	4413      	add	r3, r2
 8009b16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009b1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b30:	801a      	strh	r2, [r3, #0]
 8009b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10d      	bne.n	8009b56 <USB_EPStartXfer+0xe94>
 8009b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b3e:	881b      	ldrh	r3, [r3, #0]
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b50:	801a      	strh	r2, [r3, #0]
 8009b52:	f000 bc28 	b.w	800a3a6 <USB_EPStartXfer+0x16e4>
 8009b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b5c:	d81f      	bhi.n	8009b9e <USB_EPStartXfer+0xedc>
 8009b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b62:	085b      	lsrs	r3, r3, #1
 8009b64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b6c:	f003 0301 	and.w	r3, r3, #1
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d004      	beq.n	8009b7e <USB_EPStartXfer+0xebc>
 8009b74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009b78:	3301      	adds	r3, #1
 8009b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	029b      	lsls	r3, r3, #10
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	4313      	orrs	r3, r2
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b98:	801a      	strh	r2, [r3, #0]
 8009b9a:	f000 bc04 	b.w	800a3a6 <USB_EPStartXfer+0x16e4>
 8009b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba2:	095b      	lsrs	r3, r3, #5
 8009ba4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bac:	f003 031f 	and.w	r3, r3, #31
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d104      	bne.n	8009bbe <USB_EPStartXfer+0xefc>
 8009bb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	029b      	lsls	r3, r3, #10
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009be2:	801a      	strh	r2, [r3, #0]
 8009be4:	e3df      	b.n	800a3a6 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	78db      	ldrb	r3, [r3, #3]
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	f040 8218 	bne.w	800a028 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	785b      	ldrb	r3, [r3, #1]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f040 809d 	bne.w	8009d44 <USB_EPStartXfer+0x1082>
 8009c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	461a      	mov	r2, r3
 8009c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c2e:	4413      	add	r3, r2
 8009c30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	011a      	lsls	r2, r3, #4
 8009c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c46:	4413      	add	r3, r2
 8009c48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c62:	801a      	strh	r2, [r3, #0]
 8009c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10c      	bne.n	8009c8e <USB_EPStartXfer+0xfcc>
 8009c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c8a:	801a      	strh	r2, [r3, #0]
 8009c8c:	e08f      	b.n	8009dae <USB_EPStartXfer+0x10ec>
 8009c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c9c:	d826      	bhi.n	8009cec <USB_EPStartXfer+0x102a>
 8009c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	085b      	lsrs	r3, r3, #1
 8009cac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d004      	beq.n	8009cce <USB_EPStartXfer+0x100c>
 8009cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cc8:	3301      	adds	r3, #1
 8009cca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009cce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	029b      	lsls	r3, r3, #10
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ce8:	801a      	strh	r2, [r3, #0]
 8009cea:	e060      	b.n	8009dae <USB_EPStartXfer+0x10ec>
 8009cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	095b      	lsrs	r3, r3, #5
 8009cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	f003 031f 	and.w	r3, r3, #31
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d104      	bne.n	8009d1c <USB_EPStartXfer+0x105a>
 8009d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d16:	3b01      	subs	r3, #1
 8009d18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d20:	881b      	ldrh	r3, [r3, #0]
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	029b      	lsls	r3, r3, #10
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d40:	801a      	strh	r2, [r3, #0]
 8009d42:	e034      	b.n	8009dae <USB_EPStartXfer+0x10ec>
 8009d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	785b      	ldrb	r3, [r3, #1]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d12c      	bne.n	8009dae <USB_EPStartXfer+0x10ec>
 8009d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	461a      	mov	r2, r3
 8009d74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d78:	4413      	add	r3, r2
 8009d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	011a      	lsls	r2, r3, #4
 8009d8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d90:	4413      	add	r3, r2
 8009d92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009dac:	801a      	strh	r2, [r3, #0]
 8009dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	785b      	ldrb	r3, [r3, #1]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f040 809d 	bne.w	8009f08 <USB_EPStartXfer+0x1246>
 8009dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	461a      	mov	r2, r3
 8009dee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009df2:	4413      	add	r3, r2
 8009df4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	011a      	lsls	r2, r3, #4
 8009e06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e26:	801a      	strh	r2, [r3, #0]
 8009e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10c      	bne.n	8009e52 <USB_EPStartXfer+0x1190>
 8009e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e4e:	801a      	strh	r2, [r3, #0]
 8009e50:	e088      	b.n	8009f64 <USB_EPStartXfer+0x12a2>
 8009e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e60:	d826      	bhi.n	8009eb0 <USB_EPStartXfer+0x11ee>
 8009e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	085b      	lsrs	r3, r3, #1
 8009e70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d004      	beq.n	8009e92 <USB_EPStartXfer+0x11d0>
 8009e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009e92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	029b      	lsls	r3, r3, #10
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009eac:	801a      	strh	r2, [r3, #0]
 8009eae:	e059      	b.n	8009f64 <USB_EPStartXfer+0x12a2>
 8009eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	095b      	lsrs	r3, r3, #5
 8009ebe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	f003 031f 	and.w	r3, r3, #31
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d104      	bne.n	8009ee0 <USB_EPStartXfer+0x121e>
 8009ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009eda:	3b01      	subs	r3, #1
 8009edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	029b      	lsls	r3, r3, #10
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f04:	801a      	strh	r2, [r3, #0]
 8009f06:	e02d      	b.n	8009f64 <USB_EPStartXfer+0x12a2>
 8009f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	785b      	ldrb	r3, [r3, #1]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d125      	bne.n	8009f64 <USB_EPStartXfer+0x12a2>
 8009f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	461a      	mov	r2, r3
 8009f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f2e:	4413      	add	r3, r2
 8009f30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	011a      	lsls	r2, r3, #4
 8009f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f46:	4413      	add	r3, r2
 8009f48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f62:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	69db      	ldr	r3, [r3, #28]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 8218 	beq.w	800a3a6 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009f96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d005      	beq.n	8009fae <USB_EPStartXfer+0x12ec>
 8009fa2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10d      	bne.n	8009fca <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f040 81f5 	bne.w	800a3a6 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fbc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f040 81ee 	bne.w	800a3a6 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ff0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	441a      	add	r2, r3
 800a00e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a01a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a01e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a022:	b29b      	uxth	r3, r3
 800a024:	8013      	strh	r3, [r2, #0]
 800a026:	e1be      	b.n	800a3a6 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a02c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	78db      	ldrb	r3, [r3, #3]
 800a034:	2b01      	cmp	r3, #1
 800a036:	f040 81b4 	bne.w	800a3a2 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a03a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a03e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	699a      	ldr	r2, [r3, #24]
 800a046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a04a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	429a      	cmp	r2, r3
 800a054:	d917      	bls.n	800a086 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800a056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a05a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a06a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	699a      	ldr	r2, [r3, #24]
 800a072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a076:	1ad2      	subs	r2, r2, r3
 800a078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a07c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	619a      	str	r2, [r3, #24]
 800a084:	e00e      	b.n	800a0a4 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800a086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a08a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a09a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a0a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	785b      	ldrb	r3, [r3, #1]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f040 8085 	bne.w	800a1c0 <USB_EPStartXfer+0x14fe>
 800a0b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a0c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a0da:	4413      	add	r3, r2
 800a0dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a0e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	011a      	lsls	r2, r3, #4
 800a0ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a0f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a0fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	b29b      	uxth	r3, r3
 800a104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a108:	b29a      	uxth	r2, r3
 800a10a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a10e:	801a      	strh	r2, [r3, #0]
 800a110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10c      	bne.n	800a132 <USB_EPStartXfer+0x1470>
 800a118:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a11c:	881b      	ldrh	r3, [r3, #0]
 800a11e:	b29b      	uxth	r3, r3
 800a120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a128:	b29a      	uxth	r2, r3
 800a12a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a12e:	801a      	strh	r2, [r3, #0]
 800a130:	e077      	b.n	800a222 <USB_EPStartXfer+0x1560>
 800a132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a136:	2b3e      	cmp	r3, #62	@ 0x3e
 800a138:	d81e      	bhi.n	800a178 <USB_EPStartXfer+0x14b6>
 800a13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a13e:	085b      	lsrs	r3, r3, #1
 800a140:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d004      	beq.n	800a15a <USB_EPStartXfer+0x1498>
 800a150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a154:	3301      	adds	r3, #1
 800a156:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a15a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	b29a      	uxth	r2, r3
 800a162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a166:	b29b      	uxth	r3, r3
 800a168:	029b      	lsls	r3, r3, #10
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	4313      	orrs	r3, r2
 800a16e:	b29a      	uxth	r2, r3
 800a170:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a174:	801a      	strh	r2, [r3, #0]
 800a176:	e054      	b.n	800a222 <USB_EPStartXfer+0x1560>
 800a178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a17c:	095b      	lsrs	r3, r3, #5
 800a17e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a186:	f003 031f 	and.w	r3, r3, #31
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d104      	bne.n	800a198 <USB_EPStartXfer+0x14d6>
 800a18e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a192:	3b01      	subs	r3, #1
 800a194:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a198:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	029b      	lsls	r3, r3, #10
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a1bc:	801a      	strh	r2, [r3, #0]
 800a1be:	e030      	b.n	800a222 <USB_EPStartXfer+0x1560>
 800a1c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	785b      	ldrb	r3, [r3, #1]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d128      	bne.n	800a222 <USB_EPStartXfer+0x1560>
 800a1d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a1de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a1fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	011a      	lsls	r2, r3, #4
 800a208:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a20c:	4413      	add	r3, r2
 800a20e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a212:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a220:	801a      	strh	r2, [r3, #0]
 800a222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	785b      	ldrb	r3, [r3, #1]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f040 8085 	bne.w	800a34c <USB_EPStartXfer+0x168a>
 800a242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a25e:	b29b      	uxth	r3, r3
 800a260:	461a      	mov	r2, r3
 800a262:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a266:	4413      	add	r3, r2
 800a268:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a26c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	011a      	lsls	r2, r3, #4
 800a27a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a27e:	4413      	add	r3, r2
 800a280:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a288:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a28c:	881b      	ldrh	r3, [r3, #0]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a294:	b29a      	uxth	r2, r3
 800a296:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a29a:	801a      	strh	r2, [r3, #0]
 800a29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10c      	bne.n	800a2be <USB_EPStartXfer+0x15fc>
 800a2a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a2ba:	801a      	strh	r2, [r3, #0]
 800a2bc:	e073      	b.n	800a3a6 <USB_EPStartXfer+0x16e4>
 800a2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2c2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2c4:	d81e      	bhi.n	800a304 <USB_EPStartXfer+0x1642>
 800a2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ca:	085b      	lsrs	r3, r3, #1
 800a2cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d004      	beq.n	800a2e6 <USB_EPStartXfer+0x1624>
 800a2dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	029b      	lsls	r3, r3, #10
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a300:	801a      	strh	r2, [r3, #0]
 800a302:	e050      	b.n	800a3a6 <USB_EPStartXfer+0x16e4>
 800a304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a308:	095b      	lsrs	r3, r3, #5
 800a30a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a312:	f003 031f 	and.w	r3, r3, #31
 800a316:	2b00      	cmp	r3, #0
 800a318:	d104      	bne.n	800a324 <USB_EPStartXfer+0x1662>
 800a31a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a31e:	3b01      	subs	r3, #1
 800a320:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a324:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a330:	b29b      	uxth	r3, r3
 800a332:	029b      	lsls	r3, r3, #10
 800a334:	b29b      	uxth	r3, r3
 800a336:	4313      	orrs	r3, r2
 800a338:	b29b      	uxth	r3, r3
 800a33a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a33e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a342:	b29a      	uxth	r2, r3
 800a344:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a348:	801a      	strh	r2, [r3, #0]
 800a34a:	e02c      	b.n	800a3a6 <USB_EPStartXfer+0x16e4>
 800a34c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	785b      	ldrb	r3, [r3, #1]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d124      	bne.n	800a3a6 <USB_EPStartXfer+0x16e4>
 800a35c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	461a      	mov	r2, r3
 800a36e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a372:	4413      	add	r3, r2
 800a374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a37c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	011a      	lsls	r2, r3, #4
 800a386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a38a:	4413      	add	r3, r2
 800a38c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a390:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a398:	b29a      	uxth	r2, r3
 800a39a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a39e:	801a      	strh	r2, [r3, #0]
 800a3a0:	e001      	b.n	800a3a6 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e03a      	b.n	800a41c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a3a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4413      	add	r3, r2
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a3d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a3d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a3d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a3dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a3e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a3e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	441a      	add	r2, r3
 800a402:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a40a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a40e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a416:	b29b      	uxth	r3, r3
 800a418:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a426:	b480      	push	{r7}
 800a428:	b085      	sub	sp, #20
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	785b      	ldrb	r3, [r3, #1]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d020      	beq.n	800a47a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	881b      	ldrh	r3, [r3, #0]
 800a444:	b29b      	uxth	r3, r3
 800a446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a44a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a44e:	81bb      	strh	r3, [r7, #12]
 800a450:	89bb      	ldrh	r3, [r7, #12]
 800a452:	f083 0310 	eor.w	r3, r3, #16
 800a456:	81bb      	strh	r3, [r7, #12]
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	441a      	add	r2, r3
 800a462:	89bb      	ldrh	r3, [r7, #12]
 800a464:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a468:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a46c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a474:	b29b      	uxth	r3, r3
 800a476:	8013      	strh	r3, [r2, #0]
 800a478:	e01f      	b.n	800a4ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4413      	add	r3, r2
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	b29b      	uxth	r3, r3
 800a488:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a48c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a490:	81fb      	strh	r3, [r7, #14]
 800a492:	89fb      	ldrh	r3, [r7, #14]
 800a494:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a498:	81fb      	strh	r3, [r7, #14]
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	441a      	add	r2, r3
 800a4a4:	89fb      	ldrh	r3, [r7, #14]
 800a4a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	7b1b      	ldrb	r3, [r3, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f040 809d 	bne.w	800a616 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	785b      	ldrb	r3, [r3, #1]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d04c      	beq.n	800a57e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	4413      	add	r3, r2
 800a4ee:	881b      	ldrh	r3, [r3, #0]
 800a4f0:	823b      	strh	r3, [r7, #16]
 800a4f2:	8a3b      	ldrh	r3, [r7, #16]
 800a4f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01b      	beq.n	800a534 <USB_EPClearStall+0x6c>
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	b29b      	uxth	r3, r3
 800a50a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a50e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a512:	81fb      	strh	r3, [r7, #14]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	441a      	add	r2, r3
 800a51e:	89fb      	ldrh	r3, [r7, #14]
 800a520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a528:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a52c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a530:	b29b      	uxth	r3, r3
 800a532:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	78db      	ldrb	r3, [r3, #3]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d06c      	beq.n	800a616 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	881b      	ldrh	r3, [r3, #0]
 800a548:	b29b      	uxth	r3, r3
 800a54a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a54e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a552:	81bb      	strh	r3, [r7, #12]
 800a554:	89bb      	ldrh	r3, [r7, #12]
 800a556:	f083 0320 	eor.w	r3, r3, #32
 800a55a:	81bb      	strh	r3, [r7, #12]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	441a      	add	r2, r3
 800a566:	89bb      	ldrh	r3, [r7, #12]
 800a568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a56c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a578:	b29b      	uxth	r3, r3
 800a57a:	8013      	strh	r3, [r2, #0]
 800a57c:	e04b      	b.n	800a616 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4413      	add	r3, r2
 800a588:	881b      	ldrh	r3, [r3, #0]
 800a58a:	82fb      	strh	r3, [r7, #22]
 800a58c:	8afb      	ldrh	r3, [r7, #22]
 800a58e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d01b      	beq.n	800a5ce <USB_EPClearStall+0x106>
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5ac:	82bb      	strh	r3, [r7, #20]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	441a      	add	r2, r3
 800a5b8:	8abb      	ldrh	r3, [r7, #20]
 800a5ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a5c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4413      	add	r3, r2
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5e4:	827b      	strh	r3, [r7, #18]
 800a5e6:	8a7b      	ldrh	r3, [r7, #18]
 800a5e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a5ec:	827b      	strh	r3, [r7, #18]
 800a5ee:	8a7b      	ldrh	r3, [r7, #18]
 800a5f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a5f4:	827b      	strh	r3, [r7, #18]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	441a      	add	r2, r3
 800a600:	8a7b      	ldrh	r3, [r7, #18]
 800a602:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a606:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a60a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a60e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a612:	b29b      	uxth	r3, r3
 800a614:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	371c      	adds	r7, #28
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a630:	78fb      	ldrb	r3, [r7, #3]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d103      	bne.n	800a63e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2280      	movs	r2, #128	@ 0x80
 800a63a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a662:	b480      	push	{r7}
 800a664:	b085      	sub	sp, #20
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a670:	b29b      	uxth	r3, r3
 800a672:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a674:	68fb      	ldr	r3, [r7, #12]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a682:	b480      	push	{r7}
 800a684:	b08b      	sub	sp, #44	@ 0x2c
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	4611      	mov	r1, r2
 800a68e:	461a      	mov	r2, r3
 800a690:	460b      	mov	r3, r1
 800a692:	80fb      	strh	r3, [r7, #6]
 800a694:	4613      	mov	r3, r2
 800a696:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a698:	88bb      	ldrh	r3, [r7, #4]
 800a69a:	3301      	adds	r3, #1
 800a69c:	085b      	lsrs	r3, r3, #1
 800a69e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a6a8:	88fb      	ldrh	r3, [r7, #6]
 800a6aa:	005a      	lsls	r2, r3, #1
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a6b4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6ba:	e01e      	b.n	800a6fa <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	021b      	lsls	r3, r3, #8
 800a6ca:	b21a      	sxth	r2, r3
 800a6cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	b21b      	sxth	r3, r3
 800a6d4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a6d6:	6a3b      	ldr	r3, [r7, #32]
 800a6d8:	8a7a      	ldrh	r2, [r7, #18]
 800a6da:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a6dc:	6a3b      	ldr	r3, [r7, #32]
 800a6de:	3302      	adds	r3, #2
 800a6e0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a6e2:	6a3b      	ldr	r3, [r7, #32]
 800a6e4:	3302      	adds	r3, #2
 800a6e6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1dd      	bne.n	800a6bc <USB_WritePMA+0x3a>
  }
}
 800a700:	bf00      	nop
 800a702:	bf00      	nop
 800a704:	372c      	adds	r7, #44	@ 0x2c
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a70e:	b480      	push	{r7}
 800a710:	b08b      	sub	sp, #44	@ 0x2c
 800a712:	af00      	add	r7, sp, #0
 800a714:	60f8      	str	r0, [r7, #12]
 800a716:	60b9      	str	r1, [r7, #8]
 800a718:	4611      	mov	r1, r2
 800a71a:	461a      	mov	r2, r3
 800a71c:	460b      	mov	r3, r1
 800a71e:	80fb      	strh	r3, [r7, #6]
 800a720:	4613      	mov	r3, r2
 800a722:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a724:	88bb      	ldrh	r3, [r7, #4]
 800a726:	085b      	lsrs	r3, r3, #1
 800a728:	b29b      	uxth	r3, r3
 800a72a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a734:	88fb      	ldrh	r3, [r7, #6]
 800a736:	005a      	lsls	r2, r3, #1
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a740:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	627b      	str	r3, [r7, #36]	@ 0x24
 800a746:	e01b      	b.n	800a780 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	881b      	ldrh	r3, [r3, #0]
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a750:	6a3b      	ldr	r3, [r7, #32]
 800a752:	3302      	adds	r3, #2
 800a754:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	3301      	adds	r3, #1
 800a762:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	0a1b      	lsrs	r3, r3, #8
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	3301      	adds	r3, #1
 800a772:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a774:	6a3b      	ldr	r3, [r7, #32]
 800a776:	3302      	adds	r3, #2
 800a778:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77c:	3b01      	subs	r3, #1
 800a77e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e0      	bne.n	800a748 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a786:	88bb      	ldrh	r3, [r7, #4]
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d007      	beq.n	800a7a2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	b29b      	uxth	r3, r3
 800a798:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	701a      	strb	r2, [r3, #0]
  }
}
 800a7a2:	bf00      	nop
 800a7a4:	372c      	adds	r7, #44	@ 0x2c
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	7c1b      	ldrb	r3, [r3, #16]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d115      	bne.n	800a7f2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7ca:	2202      	movs	r2, #2
 800a7cc:	2181      	movs	r1, #129	@ 0x81
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f003 f903 	bl	800d9da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a7da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7de:	2202      	movs	r2, #2
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f003 f8f9 	bl	800d9da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800a7f0:	e012      	b.n	800a818 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7f2:	2340      	movs	r3, #64	@ 0x40
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	2181      	movs	r1, #129	@ 0x81
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f003 f8ee 	bl	800d9da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a804:	2340      	movs	r3, #64	@ 0x40
 800a806:	2202      	movs	r2, #2
 800a808:	2101      	movs	r1, #1
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f003 f8e5 	bl	800d9da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a818:	2308      	movs	r3, #8
 800a81a:	2203      	movs	r2, #3
 800a81c:	2182      	movs	r1, #130	@ 0x82
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f003 f8db 	bl	800d9da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a82a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a82e:	f003 f9fb 	bl	800dc28 <USBD_static_malloc>
 800a832:	4602      	mov	r2, r0
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a844:	2301      	movs	r3, #1
 800a846:	73fb      	strb	r3, [r7, #15]
 800a848:	e026      	b.n	800a898 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a850:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	2200      	movs	r2, #0
 800a860:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	2200      	movs	r2, #0
 800a868:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	7c1b      	ldrb	r3, [r3, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d109      	bne.n	800a888 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a87a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a87e:	2101      	movs	r1, #1
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f003 f99b 	bl	800dbbc <USBD_LL_PrepareReceive>
 800a886:	e007      	b.n	800a898 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a88e:	2340      	movs	r3, #64	@ 0x40
 800a890:	2101      	movs	r1, #1
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f003 f992 	bl	800dbbc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a898:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a8b2:	2181      	movs	r1, #129	@ 0x81
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f003 f8b6 	bl	800da26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a8c0:	2101      	movs	r1, #1
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f003 f8af 	bl	800da26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a8d0:	2182      	movs	r1, #130	@ 0x82
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f003 f8a7 	bl	800da26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00e      	beq.n	800a906 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f003 f9a3 	bl	800dc44 <USBD_static_free>
    pdev->pClassData = NULL;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800a906:	7bfb      	ldrb	r3, [r7, #15]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a920:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a922:	2300      	movs	r3, #0
 800a924:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a926:	2300      	movs	r3, #0
 800a928:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a936:	2b00      	cmp	r3, #0
 800a938:	d039      	beq.n	800a9ae <USBD_CDC_Setup+0x9e>
 800a93a:	2b20      	cmp	r3, #32
 800a93c:	d17f      	bne.n	800aa3e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	88db      	ldrh	r3, [r3, #6]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d029      	beq.n	800a99a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	b25b      	sxtb	r3, r3
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	da11      	bge.n	800a974 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a95c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	88d2      	ldrh	r2, [r2, #6]
 800a962:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a964:	6939      	ldr	r1, [r7, #16]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	88db      	ldrh	r3, [r3, #6]
 800a96a:	461a      	mov	r2, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f001 fa0f 	bl	800bd90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a972:	e06b      	b.n	800aa4c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	785a      	ldrb	r2, [r3, #1]
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	88db      	ldrh	r3, [r3, #6]
 800a982:	b2da      	uxtb	r2, r3
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a98a:	6939      	ldr	r1, [r7, #16]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	88db      	ldrh	r3, [r3, #6]
 800a990:	461a      	mov	r2, r3
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f001 fa2a 	bl	800bdec <USBD_CtlPrepareRx>
      break;
 800a998:	e058      	b.n	800aa4c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	683a      	ldr	r2, [r7, #0]
 800a9a4:	7850      	ldrb	r0, [r2, #1]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	4798      	blx	r3
      break;
 800a9ac:	e04e      	b.n	800aa4c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	785b      	ldrb	r3, [r3, #1]
 800a9b2:	2b0b      	cmp	r3, #11
 800a9b4:	d02e      	beq.n	800aa14 <USBD_CDC_Setup+0x104>
 800a9b6:	2b0b      	cmp	r3, #11
 800a9b8:	dc38      	bgt.n	800aa2c <USBD_CDC_Setup+0x11c>
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <USBD_CDC_Setup+0xb4>
 800a9be:	2b0a      	cmp	r3, #10
 800a9c0:	d014      	beq.n	800a9ec <USBD_CDC_Setup+0xdc>
 800a9c2:	e033      	b.n	800aa2c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	d107      	bne.n	800a9de <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a9ce:	f107 030c 	add.w	r3, r7, #12
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f001 f9da 	bl	800bd90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9dc:	e02e      	b.n	800aa3c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 f96a 	bl	800bcba <USBD_CtlError>
            ret = USBD_FAIL;
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	75fb      	strb	r3, [r7, #23]
          break;
 800a9ea:	e027      	b.n	800aa3c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	d107      	bne.n	800aa06 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a9f6:	f107 030f 	add.w	r3, r7, #15
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f001 f9c6 	bl	800bd90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa04:	e01a      	b.n	800aa3c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f001 f956 	bl	800bcba <USBD_CtlError>
            ret = USBD_FAIL;
 800aa0e:	2302      	movs	r3, #2
 800aa10:	75fb      	strb	r3, [r7, #23]
          break;
 800aa12:	e013      	b.n	800aa3c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d00d      	beq.n	800aa3a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f001 f94a 	bl	800bcba <USBD_CtlError>
            ret = USBD_FAIL;
 800aa26:	2302      	movs	r3, #2
 800aa28:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa2a:	e006      	b.n	800aa3a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 f943 	bl	800bcba <USBD_CtlError>
          ret = USBD_FAIL;
 800aa34:	2302      	movs	r3, #2
 800aa36:	75fb      	strb	r3, [r7, #23]
          break;
 800aa38:	e000      	b.n	800aa3c <USBD_CDC_Setup+0x12c>
          break;
 800aa3a:	bf00      	nop
      }
      break;
 800aa3c:	e006      	b.n	800aa4c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 f93a 	bl	800bcba <USBD_CtlError>
      ret = USBD_FAIL;
 800aa46:	2302      	movs	r3, #2
 800aa48:	75fb      	strb	r3, [r7, #23]
      break;
 800aa4a:	bf00      	nop
  }

  return ret;
 800aa4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3718      	adds	r7, #24
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b084      	sub	sp, #16
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa68:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa70:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d03a      	beq.n	800aaf2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aa7c:	78fa      	ldrb	r2, [r7, #3]
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	4613      	mov	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	440b      	add	r3, r1
 800aa8a:	331c      	adds	r3, #28
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d029      	beq.n	800aae6 <USBD_CDC_DataIn+0x90>
 800aa92:	78fa      	ldrb	r2, [r7, #3]
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	4613      	mov	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	440b      	add	r3, r1
 800aaa0:	331c      	adds	r3, #28
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	78f9      	ldrb	r1, [r7, #3]
 800aaa6:	68b8      	ldr	r0, [r7, #8]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	00db      	lsls	r3, r3, #3
 800aab0:	4403      	add	r3, r0
 800aab2:	3320      	adds	r3, #32
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	fbb2 f1f3 	udiv	r1, r2, r3
 800aaba:	fb01 f303 	mul.w	r3, r1, r3
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d110      	bne.n	800aae6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800aac4:	78fa      	ldrb	r2, [r7, #3]
 800aac6:	6879      	ldr	r1, [r7, #4]
 800aac8:	4613      	mov	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	440b      	add	r3, r1
 800aad2:	331c      	adds	r3, #28
 800aad4:	2200      	movs	r2, #0
 800aad6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aad8:	78f9      	ldrb	r1, [r7, #3]
 800aada:	2300      	movs	r3, #0
 800aadc:	2200      	movs	r2, #0
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f003 f849 	bl	800db76 <USBD_LL_Transmit>
 800aae4:	e003      	b.n	800aaee <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	e000      	b.n	800aaf4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800aaf2:	2302      	movs	r3, #2
  }
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	460b      	mov	r3, r1
 800ab06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab0e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f003 f874 	bl	800dc02 <USBD_LL_GetRxDataSize>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00d      	beq.n	800ab48 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ab40:	4611      	mov	r1, r2
 800ab42:	4798      	blx	r3

    return USBD_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	e000      	b.n	800ab4a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ab48:	2302      	movs	r3, #2
  }
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab60:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d014      	beq.n	800ab96 <USBD_CDC_EP0_RxReady+0x44>
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ab72:	2bff      	cmp	r3, #255	@ 0xff
 800ab74:	d00f      	beq.n	800ab96 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ab84:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	22ff      	movs	r2, #255	@ 0xff
 800ab92:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2243      	movs	r2, #67	@ 0x43
 800abac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800abae:	4b03      	ldr	r3, [pc, #12]	@ (800abbc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	200000a0 	.word	0x200000a0

0800abc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2243      	movs	r2, #67	@ 0x43
 800abcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800abce:	4b03      	ldr	r3, [pc, #12]	@ (800abdc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	2000005c 	.word	0x2000005c

0800abe0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2243      	movs	r2, #67	@ 0x43
 800abec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800abee:	4b03      	ldr	r3, [pc, #12]	@ (800abfc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	200000e4 	.word	0x200000e4

0800ac00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	220a      	movs	r2, #10
 800ac0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ac0e:	4b03      	ldr	r3, [pc, #12]	@ (800ac1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	20000018 	.word	0x20000018

0800ac20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ac2a:	2302      	movs	r3, #2
 800ac2c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d005      	beq.n	800ac40 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ac4e:	b480      	push	{r7}
 800ac50:	b087      	sub	sp, #28
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	60f8      	str	r0, [r7, #12]
 800ac56:	60b9      	str	r1, [r7, #8]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac62:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ac6c:	88fa      	ldrh	r2, [r7, #6]
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	371c      	adds	r7, #28
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b085      	sub	sp, #20
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac92:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d01c      	beq.n	800acfe <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800acca:	2b00      	cmp	r3, #0
 800accc:	d115      	bne.n	800acfa <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800acec:	b29b      	uxth	r3, r3
 800acee:	2181      	movs	r1, #129	@ 0x81
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f002 ff40 	bl	800db76 <USBD_LL_Transmit>

      return USBD_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	e002      	b.n	800ad00 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e000      	b.n	800ad00 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800acfe:	2302      	movs	r3, #2
  }
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad16:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d017      	beq.n	800ad52 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	7c1b      	ldrb	r3, [r3, #16]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d109      	bne.n	800ad3e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad34:	2101      	movs	r1, #1
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f002 ff40 	bl	800dbbc <USBD_LL_PrepareReceive>
 800ad3c:	e007      	b.n	800ad4e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad44:	2340      	movs	r3, #64	@ 0x40
 800ad46:	2101      	movs	r1, #1
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f002 ff37 	bl	800dbbc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	e000      	b.n	800ad54 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ad52:	2302      	movs	r3, #2
  }
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	4613      	mov	r3, r2
 800ad68:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d101      	bne.n	800ad74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad70:	2302      	movs	r3, #2
 800ad72:	e01a      	b.n	800adaa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	79fa      	ldrb	r2, [r7, #7]
 800ada0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f002 fda4 	bl	800d8f0 <USBD_LL_Init>

  return USBD_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b085      	sub	sp, #20
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
 800adba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d006      	beq.n	800add4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	683a      	ldr	r2, [r7, #0]
 800adca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800adce:	2300      	movs	r3, #0
 800add0:	73fb      	strb	r3, [r7, #15]
 800add2:	e001      	b.n	800add8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800add4:	2302      	movs	r3, #2
 800add6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800add8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr

0800ade6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b082      	sub	sp, #8
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f002 fdd8 	bl	800d9a4 <USBD_LL_Start>

  return USBD_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3708      	adds	r7, #8
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800adfe:	b480      	push	{r7}
 800ae00:	b083      	sub	sp, #12
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ae20:	2302      	movs	r3, #2
 800ae22:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00c      	beq.n	800ae48 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	78fa      	ldrb	r2, [r7, #3]
 800ae38:	4611      	mov	r1, r2
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	4798      	blx	r3
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d101      	bne.n	800ae48 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	78fa      	ldrb	r2, [r7, #3]
 800ae68:	4611      	mov	r1, r2
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	4798      	blx	r3

  return USBD_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 fedb 	bl	800bc46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ae9e:	461a      	mov	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800aeac:	f003 031f 	and.w	r3, r3, #31
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d016      	beq.n	800aee2 <USBD_LL_SetupStage+0x6a>
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d81c      	bhi.n	800aef2 <USBD_LL_SetupStage+0x7a>
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <USBD_LL_SetupStage+0x4a>
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d008      	beq.n	800aed2 <USBD_LL_SetupStage+0x5a>
 800aec0:	e017      	b.n	800aef2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800aec8:	4619      	mov	r1, r3
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f9ce 	bl	800b26c <USBD_StdDevReq>
      break;
 800aed0:	e01a      	b.n	800af08 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fa30 	bl	800b340 <USBD_StdItfReq>
      break;
 800aee0:	e012      	b.n	800af08 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fa70 	bl	800b3d0 <USBD_StdEPReq>
      break;
 800aef0:	e00a      	b.n	800af08 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800aef8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f002 fdaf 	bl	800da64 <USBD_LL_StallEP>
      break;
 800af06:	bf00      	nop
  }

  return USBD_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b086      	sub	sp, #24
 800af16:	af00      	add	r7, sp, #0
 800af18:	60f8      	str	r0, [r7, #12]
 800af1a:	460b      	mov	r3, r1
 800af1c:	607a      	str	r2, [r7, #4]
 800af1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af20:	7afb      	ldrb	r3, [r7, #11]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d14b      	bne.n	800afbe <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800af2c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af34:	2b03      	cmp	r3, #3
 800af36:	d134      	bne.n	800afa2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	68da      	ldr	r2, [r3, #12]
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	429a      	cmp	r2, r3
 800af42:	d919      	bls.n	800af78 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	68da      	ldr	r2, [r3, #12]
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	1ad2      	subs	r2, r2, r3
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	68da      	ldr	r2, [r3, #12]
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d203      	bcs.n	800af66 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800af62:	b29b      	uxth	r3, r3
 800af64:	e002      	b.n	800af6c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	461a      	mov	r2, r3
 800af6e:	6879      	ldr	r1, [r7, #4]
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f000 ff59 	bl	800be28 <USBD_CtlContinueRx>
 800af76:	e038      	b.n	800afea <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00a      	beq.n	800af9a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af8a:	2b03      	cmp	r3, #3
 800af8c:	d105      	bne.n	800af9a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f000 ff56 	bl	800be4c <USBD_CtlSendStatus>
 800afa0:	e023      	b.n	800afea <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800afa8:	2b05      	cmp	r3, #5
 800afaa:	d11e      	bne.n	800afea <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800afb4:	2100      	movs	r1, #0
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f002 fd54 	bl	800da64 <USBD_LL_StallEP>
 800afbc:	e015      	b.n	800afea <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afc4:	699b      	ldr	r3, [r3, #24]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00d      	beq.n	800afe6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d108      	bne.n	800afe6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afda:	699b      	ldr	r3, [r3, #24]
 800afdc:	7afa      	ldrb	r2, [r7, #11]
 800afde:	4611      	mov	r1, r2
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	4798      	blx	r3
 800afe4:	e001      	b.n	800afea <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800afe6:	2302      	movs	r3, #2
 800afe8:	e000      	b.n	800afec <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3718      	adds	r7, #24
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	460b      	mov	r3, r1
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b002:	7afb      	ldrb	r3, [r7, #11]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d17f      	bne.n	800b108 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3314      	adds	r3, #20
 800b00c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b014:	2b02      	cmp	r3, #2
 800b016:	d15c      	bne.n	800b0d2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	68da      	ldr	r2, [r3, #12]
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	429a      	cmp	r2, r3
 800b022:	d915      	bls.n	800b050 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	1ad2      	subs	r2, r2, r3
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	b29b      	uxth	r3, r3
 800b038:	461a      	mov	r2, r3
 800b03a:	6879      	ldr	r1, [r7, #4]
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 fec3 	bl	800bdc8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b042:	2300      	movs	r3, #0
 800b044:	2200      	movs	r2, #0
 800b046:	2100      	movs	r1, #0
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f002 fdb7 	bl	800dbbc <USBD_LL_PrepareReceive>
 800b04e:	e04e      	b.n	800b0ee <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	697a      	ldr	r2, [r7, #20]
 800b056:	6912      	ldr	r2, [r2, #16]
 800b058:	fbb3 f1f2 	udiv	r1, r3, r2
 800b05c:	fb01 f202 	mul.w	r2, r1, r2
 800b060:	1a9b      	subs	r3, r3, r2
 800b062:	2b00      	cmp	r3, #0
 800b064:	d11c      	bne.n	800b0a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	689a      	ldr	r2, [r3, #8]
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b06e:	429a      	cmp	r2, r3
 800b070:	d316      	bcc.n	800b0a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	689a      	ldr	r2, [r3, #8]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d20f      	bcs.n	800b0a0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b080:	2200      	movs	r2, #0
 800b082:	2100      	movs	r1, #0
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f000 fe9f 	bl	800bdc8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b092:	2300      	movs	r3, #0
 800b094:	2200      	movs	r2, #0
 800b096:	2100      	movs	r1, #0
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f002 fd8f 	bl	800dbbc <USBD_LL_PrepareReceive>
 800b09e:	e026      	b.n	800b0ee <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00a      	beq.n	800b0c2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d105      	bne.n	800b0c2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b0c2:	2180      	movs	r1, #128	@ 0x80
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f002 fccd 	bl	800da64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f000 fed1 	bl	800be72 <USBD_CtlReceiveStatus>
 800b0d0:	e00d      	b.n	800b0ee <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b0d8:	2b04      	cmp	r3, #4
 800b0da:	d004      	beq.n	800b0e6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d103      	bne.n	800b0ee <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b0e6:	2180      	movs	r1, #128	@ 0x80
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f002 fcbb 	bl	800da64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d11d      	bne.n	800b134 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f7ff fe80 	bl	800adfe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b106:	e015      	b.n	800b134 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b10e:	695b      	ldr	r3, [r3, #20]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00d      	beq.n	800b130 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d108      	bne.n	800b130 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	7afa      	ldrb	r2, [r7, #11]
 800b128:	4611      	mov	r1, r2
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	4798      	blx	r3
 800b12e:	e001      	b.n	800b134 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b130:	2302      	movs	r3, #2
 800b132:	e000      	b.n	800b136 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b082      	sub	sp, #8
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b146:	2340      	movs	r3, #64	@ 0x40
 800b148:	2200      	movs	r2, #0
 800b14a:	2100      	movs	r1, #0
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f002 fc44 	bl	800d9da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2240      	movs	r2, #64	@ 0x40
 800b15e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b162:	2340      	movs	r3, #64	@ 0x40
 800b164:	2200      	movs	r2, #0
 800b166:	2180      	movs	r1, #128	@ 0x80
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f002 fc36 	bl	800d9da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2240      	movs	r2, #64	@ 0x40
 800b178:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2201      	movs	r2, #1
 800b17e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d009      	beq.n	800b1b6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	6852      	ldr	r2, [r2, #4]
 800b1ae:	b2d2      	uxtb	r2, r2
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	4798      	blx	r3
  }

  return USBD_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3708      	adds	r7, #8
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	78fa      	ldrb	r2, [r7, #3]
 800b1d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2204      	movs	r2, #4
 800b1f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	370c      	adds	r7, #12
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr

0800b20a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b20a:	b480      	push	{r7}
 800b20c:	b083      	sub	sp, #12
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b218:	2b04      	cmp	r3, #4
 800b21a:	d105      	bne.n	800b228 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b082      	sub	sp, #8
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b244:	2b03      	cmp	r3, #3
 800b246:	d10b      	bne.n	800b260 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b24e:	69db      	ldr	r3, [r3, #28]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d005      	beq.n	800b260 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b25a:	69db      	ldr	r3, [r3, #28]
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
	...

0800b26c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b282:	2b40      	cmp	r3, #64	@ 0x40
 800b284:	d005      	beq.n	800b292 <USBD_StdDevReq+0x26>
 800b286:	2b40      	cmp	r3, #64	@ 0x40
 800b288:	d84f      	bhi.n	800b32a <USBD_StdDevReq+0xbe>
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d009      	beq.n	800b2a2 <USBD_StdDevReq+0x36>
 800b28e:	2b20      	cmp	r3, #32
 800b290:	d14b      	bne.n	800b32a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	6839      	ldr	r1, [r7, #0]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	4798      	blx	r3
      break;
 800b2a0:	e048      	b.n	800b334 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	785b      	ldrb	r3, [r3, #1]
 800b2a6:	2b09      	cmp	r3, #9
 800b2a8:	d839      	bhi.n	800b31e <USBD_StdDevReq+0xb2>
 800b2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b2b0 <USBD_StdDevReq+0x44>)
 800b2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b0:	0800b301 	.word	0x0800b301
 800b2b4:	0800b315 	.word	0x0800b315
 800b2b8:	0800b31f 	.word	0x0800b31f
 800b2bc:	0800b30b 	.word	0x0800b30b
 800b2c0:	0800b31f 	.word	0x0800b31f
 800b2c4:	0800b2e3 	.word	0x0800b2e3
 800b2c8:	0800b2d9 	.word	0x0800b2d9
 800b2cc:	0800b31f 	.word	0x0800b31f
 800b2d0:	0800b2f7 	.word	0x0800b2f7
 800b2d4:	0800b2ed 	.word	0x0800b2ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f9dc 	bl	800b698 <USBD_GetDescriptor>
          break;
 800b2e0:	e022      	b.n	800b328 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fb3f 	bl	800b968 <USBD_SetAddress>
          break;
 800b2ea:	e01d      	b.n	800b328 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fb7e 	bl	800b9f0 <USBD_SetConfig>
          break;
 800b2f4:	e018      	b.n	800b328 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b2f6:	6839      	ldr	r1, [r7, #0]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fc07 	bl	800bb0c <USBD_GetConfig>
          break;
 800b2fe:	e013      	b.n	800b328 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fc37 	bl	800bb76 <USBD_GetStatus>
          break;
 800b308:	e00e      	b.n	800b328 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b30a:	6839      	ldr	r1, [r7, #0]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fc65 	bl	800bbdc <USBD_SetFeature>
          break;
 800b312:	e009      	b.n	800b328 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fc74 	bl	800bc04 <USBD_ClrFeature>
          break;
 800b31c:	e004      	b.n	800b328 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fcca 	bl	800bcba <USBD_CtlError>
          break;
 800b326:	bf00      	nop
      }
      break;
 800b328:	e004      	b.n	800b334 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fcc4 	bl	800bcba <USBD_CtlError>
      break;
 800b332:	bf00      	nop
  }

  return ret;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop

0800b340 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b356:	2b40      	cmp	r3, #64	@ 0x40
 800b358:	d005      	beq.n	800b366 <USBD_StdItfReq+0x26>
 800b35a:	2b40      	cmp	r3, #64	@ 0x40
 800b35c:	d82e      	bhi.n	800b3bc <USBD_StdItfReq+0x7c>
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <USBD_StdItfReq+0x26>
 800b362:	2b20      	cmp	r3, #32
 800b364:	d12a      	bne.n	800b3bc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b36c:	3b01      	subs	r3, #1
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d81d      	bhi.n	800b3ae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	889b      	ldrh	r3, [r3, #4]
 800b376:	b2db      	uxtb	r3, r3
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d813      	bhi.n	800b3a4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	4798      	blx	r3
 800b38a:	4603      	mov	r3, r0
 800b38c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	88db      	ldrh	r3, [r3, #6]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d110      	bne.n	800b3b8 <USBD_StdItfReq+0x78>
 800b396:	7bfb      	ldrb	r3, [r7, #15]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10d      	bne.n	800b3b8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 fd55 	bl	800be4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3a2:	e009      	b.n	800b3b8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fc87 	bl	800bcba <USBD_CtlError>
          break;
 800b3ac:	e004      	b.n	800b3b8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fc82 	bl	800bcba <USBD_CtlError>
          break;
 800b3b6:	e000      	b.n	800b3ba <USBD_StdItfReq+0x7a>
          break;
 800b3b8:	bf00      	nop
      }
      break;
 800b3ba:	e004      	b.n	800b3c6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fc7b 	bl	800bcba <USBD_CtlError>
      break;
 800b3c4:	bf00      	nop
  }

  return USBD_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	889b      	ldrh	r3, [r3, #4]
 800b3e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b3ec:	2b40      	cmp	r3, #64	@ 0x40
 800b3ee:	d007      	beq.n	800b400 <USBD_StdEPReq+0x30>
 800b3f0:	2b40      	cmp	r3, #64	@ 0x40
 800b3f2:	f200 8146 	bhi.w	800b682 <USBD_StdEPReq+0x2b2>
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00a      	beq.n	800b410 <USBD_StdEPReq+0x40>
 800b3fa:	2b20      	cmp	r3, #32
 800b3fc:	f040 8141 	bne.w	800b682 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	6839      	ldr	r1, [r7, #0]
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	4798      	blx	r3
      break;
 800b40e:	e13d      	b.n	800b68c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b418:	2b20      	cmp	r3, #32
 800b41a:	d10a      	bne.n	800b432 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	4798      	blx	r3
 800b42a:	4603      	mov	r3, r0
 800b42c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	e12d      	b.n	800b68e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	785b      	ldrb	r3, [r3, #1]
 800b436:	2b03      	cmp	r3, #3
 800b438:	d007      	beq.n	800b44a <USBD_StdEPReq+0x7a>
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	f300 811b 	bgt.w	800b676 <USBD_StdEPReq+0x2a6>
 800b440:	2b00      	cmp	r3, #0
 800b442:	d072      	beq.n	800b52a <USBD_StdEPReq+0x15a>
 800b444:	2b01      	cmp	r3, #1
 800b446:	d03a      	beq.n	800b4be <USBD_StdEPReq+0xee>
 800b448:	e115      	b.n	800b676 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b450:	2b02      	cmp	r3, #2
 800b452:	d002      	beq.n	800b45a <USBD_StdEPReq+0x8a>
 800b454:	2b03      	cmp	r3, #3
 800b456:	d015      	beq.n	800b484 <USBD_StdEPReq+0xb4>
 800b458:	e02b      	b.n	800b4b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b45a:	7bbb      	ldrb	r3, [r7, #14]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00c      	beq.n	800b47a <USBD_StdEPReq+0xaa>
 800b460:	7bbb      	ldrb	r3, [r7, #14]
 800b462:	2b80      	cmp	r3, #128	@ 0x80
 800b464:	d009      	beq.n	800b47a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b466:	7bbb      	ldrb	r3, [r7, #14]
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f002 fafa 	bl	800da64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b470:	2180      	movs	r1, #128	@ 0x80
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f002 faf6 	bl	800da64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b478:	e020      	b.n	800b4bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fc1c 	bl	800bcba <USBD_CtlError>
              break;
 800b482:	e01b      	b.n	800b4bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	885b      	ldrh	r3, [r3, #2]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10e      	bne.n	800b4aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b48c:	7bbb      	ldrb	r3, [r7, #14]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00b      	beq.n	800b4aa <USBD_StdEPReq+0xda>
 800b492:	7bbb      	ldrb	r3, [r7, #14]
 800b494:	2b80      	cmp	r3, #128	@ 0x80
 800b496:	d008      	beq.n	800b4aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	88db      	ldrh	r3, [r3, #6]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d104      	bne.n	800b4aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f002 fadd 	bl	800da64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fcce 	bl	800be4c <USBD_CtlSendStatus>

              break;
 800b4b0:	e004      	b.n	800b4bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b4b2:	6839      	ldr	r1, [r7, #0]
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fc00 	bl	800bcba <USBD_CtlError>
              break;
 800b4ba:	bf00      	nop
          }
          break;
 800b4bc:	e0e0      	b.n	800b680 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d002      	beq.n	800b4ce <USBD_StdEPReq+0xfe>
 800b4c8:	2b03      	cmp	r3, #3
 800b4ca:	d015      	beq.n	800b4f8 <USBD_StdEPReq+0x128>
 800b4cc:	e026      	b.n	800b51c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4ce:	7bbb      	ldrb	r3, [r7, #14]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00c      	beq.n	800b4ee <USBD_StdEPReq+0x11e>
 800b4d4:	7bbb      	ldrb	r3, [r7, #14]
 800b4d6:	2b80      	cmp	r3, #128	@ 0x80
 800b4d8:	d009      	beq.n	800b4ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b4da:	7bbb      	ldrb	r3, [r7, #14]
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f002 fac0 	bl	800da64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b4e4:	2180      	movs	r1, #128	@ 0x80
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f002 fabc 	bl	800da64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4ec:	e01c      	b.n	800b528 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fbe2 	bl	800bcba <USBD_CtlError>
              break;
 800b4f6:	e017      	b.n	800b528 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	885b      	ldrh	r3, [r3, #2]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d112      	bne.n	800b526 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b506:	2b00      	cmp	r3, #0
 800b508:	d004      	beq.n	800b514 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b50a:	7bbb      	ldrb	r3, [r7, #14]
 800b50c:	4619      	mov	r1, r3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f002 fac7 	bl	800daa2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fc99 	bl	800be4c <USBD_CtlSendStatus>
              }
              break;
 800b51a:	e004      	b.n	800b526 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fbcb 	bl	800bcba <USBD_CtlError>
              break;
 800b524:	e000      	b.n	800b528 <USBD_StdEPReq+0x158>
              break;
 800b526:	bf00      	nop
          }
          break;
 800b528:	e0aa      	b.n	800b680 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b530:	2b02      	cmp	r3, #2
 800b532:	d002      	beq.n	800b53a <USBD_StdEPReq+0x16a>
 800b534:	2b03      	cmp	r3, #3
 800b536:	d032      	beq.n	800b59e <USBD_StdEPReq+0x1ce>
 800b538:	e097      	b.n	800b66a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b53a:	7bbb      	ldrb	r3, [r7, #14]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d007      	beq.n	800b550 <USBD_StdEPReq+0x180>
 800b540:	7bbb      	ldrb	r3, [r7, #14]
 800b542:	2b80      	cmp	r3, #128	@ 0x80
 800b544:	d004      	beq.n	800b550 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fbb6 	bl	800bcba <USBD_CtlError>
                break;
 800b54e:	e091      	b.n	800b674 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b554:	2b00      	cmp	r3, #0
 800b556:	da0b      	bge.n	800b570 <USBD_StdEPReq+0x1a0>
 800b558:	7bbb      	ldrb	r3, [r7, #14]
 800b55a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b55e:	4613      	mov	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4413      	add	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	3310      	adds	r3, #16
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	4413      	add	r3, r2
 800b56c:	3304      	adds	r3, #4
 800b56e:	e00b      	b.n	800b588 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b570:	7bbb      	ldrb	r3, [r7, #14]
 800b572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b576:	4613      	mov	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4413      	add	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	4413      	add	r3, r2
 800b586:	3304      	adds	r3, #4
 800b588:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	2200      	movs	r2, #0
 800b58e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2202      	movs	r2, #2
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 fbfa 	bl	800bd90 <USBD_CtlSendData>
              break;
 800b59c:	e06a      	b.n	800b674 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b59e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	da11      	bge.n	800b5ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5a6:	7bbb      	ldrb	r3, [r7, #14]
 800b5a8:	f003 020f 	and.w	r2, r3, #15
 800b5ac:	6879      	ldr	r1, [r7, #4]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	4413      	add	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	440b      	add	r3, r1
 800b5b8:	3318      	adds	r3, #24
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d117      	bne.n	800b5f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5c0:	6839      	ldr	r1, [r7, #0]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 fb79 	bl	800bcba <USBD_CtlError>
                  break;
 800b5c8:	e054      	b.n	800b674 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5ca:	7bbb      	ldrb	r3, [r7, #14]
 800b5cc:	f003 020f 	and.w	r2, r3, #15
 800b5d0:	6879      	ldr	r1, [r7, #4]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	4413      	add	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	440b      	add	r3, r1
 800b5dc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d104      	bne.n	800b5f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fb66 	bl	800bcba <USBD_CtlError>
                  break;
 800b5ee:	e041      	b.n	800b674 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	da0b      	bge.n	800b610 <USBD_StdEPReq+0x240>
 800b5f8:	7bbb      	ldrb	r3, [r7, #14]
 800b5fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5fe:	4613      	mov	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	3310      	adds	r3, #16
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	4413      	add	r3, r2
 800b60c:	3304      	adds	r3, #4
 800b60e:	e00b      	b.n	800b628 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b616:	4613      	mov	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	4413      	add	r3, r2
 800b626:	3304      	adds	r3, #4
 800b628:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b62a:	7bbb      	ldrb	r3, [r7, #14]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <USBD_StdEPReq+0x266>
 800b630:	7bbb      	ldrb	r3, [r7, #14]
 800b632:	2b80      	cmp	r3, #128	@ 0x80
 800b634:	d103      	bne.n	800b63e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	e00e      	b.n	800b65c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b63e:	7bbb      	ldrb	r3, [r7, #14]
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f002 fa4c 	bl	800dae0 <USBD_LL_IsStallEP>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d003      	beq.n	800b656 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	2201      	movs	r2, #1
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	e002      	b.n	800b65c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	2200      	movs	r2, #0
 800b65a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	2202      	movs	r2, #2
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fb94 	bl	800bd90 <USBD_CtlSendData>
              break;
 800b668:	e004      	b.n	800b674 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fb24 	bl	800bcba <USBD_CtlError>
              break;
 800b672:	bf00      	nop
          }
          break;
 800b674:	e004      	b.n	800b680 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b676:	6839      	ldr	r1, [r7, #0]
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fb1e 	bl	800bcba <USBD_CtlError>
          break;
 800b67e:	bf00      	nop
      }
      break;
 800b680:	e004      	b.n	800b68c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fb18 	bl	800bcba <USBD_CtlError>
      break;
 800b68a:	bf00      	nop
  }

  return ret;
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	885b      	ldrh	r3, [r3, #2]
 800b6b2:	0a1b      	lsrs	r3, r3, #8
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	2b06      	cmp	r3, #6
 800b6ba:	f200 8128 	bhi.w	800b90e <USBD_GetDescriptor+0x276>
 800b6be:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c4 <USBD_GetDescriptor+0x2c>)
 800b6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c4:	0800b6e1 	.word	0x0800b6e1
 800b6c8:	0800b6f9 	.word	0x0800b6f9
 800b6cc:	0800b739 	.word	0x0800b739
 800b6d0:	0800b90f 	.word	0x0800b90f
 800b6d4:	0800b90f 	.word	0x0800b90f
 800b6d8:	0800b8af 	.word	0x0800b8af
 800b6dc:	0800b8db 	.word	0x0800b8db
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	7c12      	ldrb	r2, [r2, #16]
 800b6ec:	f107 0108 	add.w	r1, r7, #8
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	4798      	blx	r3
 800b6f4:	60f8      	str	r0, [r7, #12]
      break;
 800b6f6:	e112      	b.n	800b91e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	7c1b      	ldrb	r3, [r3, #16]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10d      	bne.n	800b71c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b708:	f107 0208 	add.w	r2, r7, #8
 800b70c:	4610      	mov	r0, r2
 800b70e:	4798      	blx	r3
 800b710:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	3301      	adds	r3, #1
 800b716:	2202      	movs	r2, #2
 800b718:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b71a:	e100      	b.n	800b91e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b724:	f107 0208 	add.w	r2, r7, #8
 800b728:	4610      	mov	r0, r2
 800b72a:	4798      	blx	r3
 800b72c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	3301      	adds	r3, #1
 800b732:	2202      	movs	r2, #2
 800b734:	701a      	strb	r2, [r3, #0]
      break;
 800b736:	e0f2      	b.n	800b91e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	885b      	ldrh	r3, [r3, #2]
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b05      	cmp	r3, #5
 800b740:	f200 80ac 	bhi.w	800b89c <USBD_GetDescriptor+0x204>
 800b744:	a201      	add	r2, pc, #4	@ (adr r2, 800b74c <USBD_GetDescriptor+0xb4>)
 800b746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74a:	bf00      	nop
 800b74c:	0800b765 	.word	0x0800b765
 800b750:	0800b799 	.word	0x0800b799
 800b754:	0800b7cd 	.word	0x0800b7cd
 800b758:	0800b801 	.word	0x0800b801
 800b75c:	0800b835 	.word	0x0800b835
 800b760:	0800b869 	.word	0x0800b869
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00b      	beq.n	800b788 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	7c12      	ldrb	r2, [r2, #16]
 800b77c:	f107 0108 	add.w	r1, r7, #8
 800b780:	4610      	mov	r0, r2
 800b782:	4798      	blx	r3
 800b784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b786:	e091      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b788:	6839      	ldr	r1, [r7, #0]
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 fa95 	bl	800bcba <USBD_CtlError>
            err++;
 800b790:	7afb      	ldrb	r3, [r7, #11]
 800b792:	3301      	adds	r3, #1
 800b794:	72fb      	strb	r3, [r7, #11]
          break;
 800b796:	e089      	b.n	800b8ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00b      	beq.n	800b7bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	7c12      	ldrb	r2, [r2, #16]
 800b7b0:	f107 0108 	add.w	r1, r7, #8
 800b7b4:	4610      	mov	r0, r2
 800b7b6:	4798      	blx	r3
 800b7b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7ba:	e077      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fa7b 	bl	800bcba <USBD_CtlError>
            err++;
 800b7c4:	7afb      	ldrb	r3, [r7, #11]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ca:	e06f      	b.n	800b8ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00b      	beq.n	800b7f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	7c12      	ldrb	r2, [r2, #16]
 800b7e4:	f107 0108 	add.w	r1, r7, #8
 800b7e8:	4610      	mov	r0, r2
 800b7ea:	4798      	blx	r3
 800b7ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7ee:	e05d      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7f0:	6839      	ldr	r1, [r7, #0]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 fa61 	bl	800bcba <USBD_CtlError>
            err++;
 800b7f8:	7afb      	ldrb	r3, [r7, #11]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b7fe:	e055      	b.n	800b8ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00b      	beq.n	800b824 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	7c12      	ldrb	r2, [r2, #16]
 800b818:	f107 0108 	add.w	r1, r7, #8
 800b81c:	4610      	mov	r0, r2
 800b81e:	4798      	blx	r3
 800b820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b822:	e043      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b824:	6839      	ldr	r1, [r7, #0]
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fa47 	bl	800bcba <USBD_CtlError>
            err++;
 800b82c:	7afb      	ldrb	r3, [r7, #11]
 800b82e:	3301      	adds	r3, #1
 800b830:	72fb      	strb	r3, [r7, #11]
          break;
 800b832:	e03b      	b.n	800b8ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00b      	beq.n	800b858 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b846:	695b      	ldr	r3, [r3, #20]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	7c12      	ldrb	r2, [r2, #16]
 800b84c:	f107 0108 	add.w	r1, r7, #8
 800b850:	4610      	mov	r0, r2
 800b852:	4798      	blx	r3
 800b854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b856:	e029      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fa2d 	bl	800bcba <USBD_CtlError>
            err++;
 800b860:	7afb      	ldrb	r3, [r7, #11]
 800b862:	3301      	adds	r3, #1
 800b864:	72fb      	strb	r3, [r7, #11]
          break;
 800b866:	e021      	b.n	800b8ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00b      	beq.n	800b88c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	7c12      	ldrb	r2, [r2, #16]
 800b880:	f107 0108 	add.w	r1, r7, #8
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b88a:	e00f      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fa13 	bl	800bcba <USBD_CtlError>
            err++;
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	3301      	adds	r3, #1
 800b898:	72fb      	strb	r3, [r7, #11]
          break;
 800b89a:	e007      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b89c:	6839      	ldr	r1, [r7, #0]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fa0b 	bl	800bcba <USBD_CtlError>
          err++;
 800b8a4:	7afb      	ldrb	r3, [r7, #11]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b8aa:	e038      	b.n	800b91e <USBD_GetDescriptor+0x286>
 800b8ac:	e037      	b.n	800b91e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	7c1b      	ldrb	r3, [r3, #16]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d109      	bne.n	800b8ca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8be:	f107 0208 	add.w	r2, r7, #8
 800b8c2:	4610      	mov	r0, r2
 800b8c4:	4798      	blx	r3
 800b8c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8c8:	e029      	b.n	800b91e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f9f4 	bl	800bcba <USBD_CtlError>
        err++;
 800b8d2:	7afb      	ldrb	r3, [r7, #11]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	72fb      	strb	r3, [r7, #11]
      break;
 800b8d8:	e021      	b.n	800b91e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	7c1b      	ldrb	r3, [r3, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10d      	bne.n	800b8fe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8ea:	f107 0208 	add.w	r2, r7, #8
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	4798      	blx	r3
 800b8f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	2207      	movs	r2, #7
 800b8fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8fc:	e00f      	b.n	800b91e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f9da 	bl	800bcba <USBD_CtlError>
        err++;
 800b906:	7afb      	ldrb	r3, [r7, #11]
 800b908:	3301      	adds	r3, #1
 800b90a:	72fb      	strb	r3, [r7, #11]
      break;
 800b90c:	e007      	b.n	800b91e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 f9d2 	bl	800bcba <USBD_CtlError>
      err++;
 800b916:	7afb      	ldrb	r3, [r7, #11]
 800b918:	3301      	adds	r3, #1
 800b91a:	72fb      	strb	r3, [r7, #11]
      break;
 800b91c:	bf00      	nop
  }

  if (err != 0U)
 800b91e:	7afb      	ldrb	r3, [r7, #11]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d11c      	bne.n	800b95e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b924:	893b      	ldrh	r3, [r7, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d011      	beq.n	800b94e <USBD_GetDescriptor+0x2b6>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	88db      	ldrh	r3, [r3, #6]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d00d      	beq.n	800b94e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	88da      	ldrh	r2, [r3, #6]
 800b936:	893b      	ldrh	r3, [r7, #8]
 800b938:	4293      	cmp	r3, r2
 800b93a:	bf28      	it	cs
 800b93c:	4613      	movcs	r3, r2
 800b93e:	b29b      	uxth	r3, r3
 800b940:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b942:	893b      	ldrh	r3, [r7, #8]
 800b944:	461a      	mov	r2, r3
 800b946:	68f9      	ldr	r1, [r7, #12]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fa21 	bl	800bd90 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	88db      	ldrh	r3, [r3, #6]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d104      	bne.n	800b960 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fa78 	bl	800be4c <USBD_CtlSendStatus>
 800b95c:	e000      	b.n	800b960 <USBD_GetDescriptor+0x2c8>
    return;
 800b95e:	bf00      	nop
    }
  }
}
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop

0800b968 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	889b      	ldrh	r3, [r3, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d130      	bne.n	800b9dc <USBD_SetAddress+0x74>
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	88db      	ldrh	r3, [r3, #6]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d12c      	bne.n	800b9dc <USBD_SetAddress+0x74>
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	885b      	ldrh	r3, [r3, #2]
 800b986:	2b7f      	cmp	r3, #127	@ 0x7f
 800b988:	d828      	bhi.n	800b9dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	885b      	ldrh	r3, [r3, #2]
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b994:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d104      	bne.n	800b9aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f989 	bl	800bcba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a8:	e01d      	b.n	800b9e6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	7bfa      	ldrb	r2, [r7, #15]
 800b9ae:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f002 f8be 	bl	800db38 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fa45 	bl	800be4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d004      	beq.n	800b9d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d0:	e009      	b.n	800b9e6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9da:	e004      	b.n	800b9e6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f96b 	bl	800bcba <USBD_CtlError>
  }
}
 800b9e4:	bf00      	nop
 800b9e6:	bf00      	nop
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
	...

0800b9f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	885b      	ldrh	r3, [r3, #2]
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	4b41      	ldr	r3, [pc, #260]	@ (800bb08 <USBD_SetConfig+0x118>)
 800ba02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba04:	4b40      	ldr	r3, [pc, #256]	@ (800bb08 <USBD_SetConfig+0x118>)
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d904      	bls.n	800ba16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ba0c:	6839      	ldr	r1, [r7, #0]
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f953 	bl	800bcba <USBD_CtlError>
 800ba14:	e075      	b.n	800bb02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d002      	beq.n	800ba26 <USBD_SetConfig+0x36>
 800ba20:	2b03      	cmp	r3, #3
 800ba22:	d023      	beq.n	800ba6c <USBD_SetConfig+0x7c>
 800ba24:	e062      	b.n	800baec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ba26:	4b38      	ldr	r3, [pc, #224]	@ (800bb08 <USBD_SetConfig+0x118>)
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d01a      	beq.n	800ba64 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ba2e:	4b36      	ldr	r3, [pc, #216]	@ (800bb08 <USBD_SetConfig+0x118>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2203      	movs	r2, #3
 800ba3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ba40:	4b31      	ldr	r3, [pc, #196]	@ (800bb08 <USBD_SetConfig+0x118>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7ff f9e4 	bl	800ae14 <USBD_SetClassConfig>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d104      	bne.n	800ba5c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f930 	bl	800bcba <USBD_CtlError>
            return;
 800ba5a:	e052      	b.n	800bb02 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f9f5 	bl	800be4c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba62:	e04e      	b.n	800bb02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f9f1 	bl	800be4c <USBD_CtlSendStatus>
        break;
 800ba6a:	e04a      	b.n	800bb02 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ba6c:	4b26      	ldr	r3, [pc, #152]	@ (800bb08 <USBD_SetConfig+0x118>)
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d112      	bne.n	800ba9a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2202      	movs	r2, #2
 800ba78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800ba7c:	4b22      	ldr	r3, [pc, #136]	@ (800bb08 <USBD_SetConfig+0x118>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	461a      	mov	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ba86:	4b20      	ldr	r3, [pc, #128]	@ (800bb08 <USBD_SetConfig+0x118>)
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f7ff f9e0 	bl	800ae52 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 f9da 	bl	800be4c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba98:	e033      	b.n	800bb02 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ba9a:	4b1b      	ldr	r3, [pc, #108]	@ (800bb08 <USBD_SetConfig+0x118>)
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d01d      	beq.n	800bae4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	b2db      	uxtb	r3, r3
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff f9ce 	bl	800ae52 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bab6:	4b14      	ldr	r3, [pc, #80]	@ (800bb08 <USBD_SetConfig+0x118>)
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bac0:	4b11      	ldr	r3, [pc, #68]	@ (800bb08 <USBD_SetConfig+0x118>)
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	4619      	mov	r1, r3
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7ff f9a4 	bl	800ae14 <USBD_SetClassConfig>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d104      	bne.n	800badc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f8f0 	bl	800bcba <USBD_CtlError>
            return;
 800bada:	e012      	b.n	800bb02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 f9b5 	bl	800be4c <USBD_CtlSendStatus>
        break;
 800bae2:	e00e      	b.n	800bb02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 f9b1 	bl	800be4c <USBD_CtlSendStatus>
        break;
 800baea:	e00a      	b.n	800bb02 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f8e3 	bl	800bcba <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800baf4:	4b04      	ldr	r3, [pc, #16]	@ (800bb08 <USBD_SetConfig+0x118>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	4619      	mov	r1, r3
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7ff f9a9 	bl	800ae52 <USBD_ClrClassConfig>
        break;
 800bb00:	bf00      	nop
    }
  }
}
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	20000cb0 	.word	0x20000cb0

0800bb0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	88db      	ldrh	r3, [r3, #6]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d004      	beq.n	800bb28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f8ca 	bl	800bcba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb26:	e022      	b.n	800bb6e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	dc02      	bgt.n	800bb38 <USBD_GetConfig+0x2c>
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	dc03      	bgt.n	800bb3e <USBD_GetConfig+0x32>
 800bb36:	e015      	b.n	800bb64 <USBD_GetConfig+0x58>
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d00b      	beq.n	800bb54 <USBD_GetConfig+0x48>
 800bb3c:	e012      	b.n	800bb64 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3308      	adds	r3, #8
 800bb48:	2201      	movs	r2, #1
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f91f 	bl	800bd90 <USBD_CtlSendData>
        break;
 800bb52:	e00c      	b.n	800bb6e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	3304      	adds	r3, #4
 800bb58:	2201      	movs	r2, #1
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 f917 	bl	800bd90 <USBD_CtlSendData>
        break;
 800bb62:	e004      	b.n	800bb6e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bb64:	6839      	ldr	r1, [r7, #0]
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f8a7 	bl	800bcba <USBD_CtlError>
        break;
 800bb6c:	bf00      	nop
}
 800bb6e:	bf00      	nop
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb86:	3b01      	subs	r3, #1
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d81e      	bhi.n	800bbca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	88db      	ldrh	r3, [r3, #6]
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d004      	beq.n	800bb9e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f88f 	bl	800bcba <USBD_CtlError>
        break;
 800bb9c:	e01a      	b.n	800bbd4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d005      	beq.n	800bbba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	f043 0202 	orr.w	r2, r3, #2
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	330c      	adds	r3, #12
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f8e4 	bl	800bd90 <USBD_CtlSendData>
      break;
 800bbc8:	e004      	b.n	800bbd4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bbca:	6839      	ldr	r1, [r7, #0]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 f874 	bl	800bcba <USBD_CtlError>
      break;
 800bbd2:	bf00      	nop
  }
}
 800bbd4:	bf00      	nop
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	885b      	ldrh	r3, [r3, #2]
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d106      	bne.n	800bbfc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f928 	bl	800be4c <USBD_CtlSendStatus>
  }
}
 800bbfc:	bf00      	nop
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc14:	3b01      	subs	r3, #1
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d80b      	bhi.n	800bc32 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	885b      	ldrh	r3, [r3, #2]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d10c      	bne.n	800bc3c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f90e 	bl	800be4c <USBD_CtlSendStatus>
      }
      break;
 800bc30:	e004      	b.n	800bc3c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f840 	bl	800bcba <USBD_CtlError>
      break;
 800bc3a:	e000      	b.n	800bc3e <USBD_ClrFeature+0x3a>
      break;
 800bc3c:	bf00      	nop
  }
}
 800bc3e:	bf00      	nop
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc46:	b480      	push	{r7}
 800bc48:	b083      	sub	sp, #12
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	781a      	ldrb	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	785a      	ldrb	r2, [r3, #1]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	3302      	adds	r3, #2
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	461a      	mov	r2, r3
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	3303      	adds	r3, #3
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	021b      	lsls	r3, r3, #8
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	4413      	add	r3, r2
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	461a      	mov	r2, r3
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	3305      	adds	r3, #5
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	021b      	lsls	r3, r3, #8
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	4413      	add	r3, r2
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	3306      	adds	r3, #6
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	3307      	adds	r3, #7
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	021b      	lsls	r3, r3, #8
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	4413      	add	r3, r2
 800bca8:	b29a      	uxth	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	80da      	strh	r2, [r3, #6]

}
 800bcae:	bf00      	nop
 800bcb0:	370c      	adds	r7, #12
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bcc4:	2180      	movs	r1, #128	@ 0x80
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f001 fecc 	bl	800da64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bccc:	2100      	movs	r1, #0
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f001 fec8 	bl	800da64 <USBD_LL_StallEP>
}
 800bcd4:	bf00      	nop
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bce8:	2300      	movs	r3, #0
 800bcea:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d032      	beq.n	800bd58 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f000 f834 	bl	800bd60 <USBD_GetLen>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	005b      	lsls	r3, r3, #1
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	1c5a      	adds	r2, r3, #1
 800bd0a:	75fa      	strb	r2, [r7, #23]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	4413      	add	r3, r2
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	7812      	ldrb	r2, [r2, #0]
 800bd16:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	75fa      	strb	r2, [r7, #23]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	4413      	add	r3, r2
 800bd24:	2203      	movs	r2, #3
 800bd26:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bd28:	e012      	b.n	800bd50 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	1c5a      	adds	r2, r3, #1
 800bd2e:	60fa      	str	r2, [r7, #12]
 800bd30:	7dfa      	ldrb	r2, [r7, #23]
 800bd32:	1c51      	adds	r1, r2, #1
 800bd34:	75f9      	strb	r1, [r7, #23]
 800bd36:	4611      	mov	r1, r2
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	440a      	add	r2, r1
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bd40:	7dfb      	ldrb	r3, [r7, #23]
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	75fa      	strb	r2, [r7, #23]
 800bd46:	461a      	mov	r2, r3
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1e8      	bne.n	800bd2a <USBD_GetString+0x4e>
    }
  }
}
 800bd58:	bf00      	nop
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bd6c:	e005      	b.n	800bd7a <USBD_GetLen+0x1a>
  {
    len++;
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
 800bd70:	3301      	adds	r3, #1
 800bd72:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3301      	adds	r3, #1
 800bd78:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1f5      	bne.n	800bd6e <USBD_GetLen+0xe>
  }

  return len;
 800bd82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3714      	adds	r7, #20
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2202      	movs	r2, #2
 800bda2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bda6:	88fa      	ldrh	r2, [r7, #6]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bdac:	88fa      	ldrh	r2, [r7, #6]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdb2:	88fb      	ldrh	r3, [r7, #6]
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f001 fedc 	bl	800db76 <USBD_LL_Transmit>

  return USBD_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdd6:	88fb      	ldrh	r3, [r7, #6]
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	2100      	movs	r1, #0
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f001 feca 	bl	800db76 <USBD_LL_Transmit>

  return USBD_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2203      	movs	r2, #3
 800bdfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800be02:	88fa      	ldrh	r2, [r7, #6]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800be0a:	88fa      	ldrh	r2, [r7, #6]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be12:	88fb      	ldrh	r3, [r7, #6]
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	2100      	movs	r1, #0
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f001 fecf 	bl	800dbbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	4613      	mov	r3, r2
 800be34:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be36:	88fb      	ldrh	r3, [r7, #6]
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	2100      	movs	r1, #0
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f001 febd 	bl	800dbbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2204      	movs	r2, #4
 800be58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be5c:	2300      	movs	r3, #0
 800be5e:	2200      	movs	r2, #0
 800be60:	2100      	movs	r1, #0
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f001 fe87 	bl	800db76 <USBD_LL_Transmit>

  return USBD_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b082      	sub	sp, #8
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2205      	movs	r2, #5
 800be7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be82:	2300      	movs	r3, #0
 800be84:	2200      	movs	r2, #0
 800be86:	2100      	movs	r1, #0
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f001 fe97 	bl	800dbbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	4603      	mov	r3, r0
 800bea0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bea2:	2300      	movs	r3, #0
 800bea4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800beaa:	2b84      	cmp	r3, #132	@ 0x84
 800beac:	d005      	beq.n	800beba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800beae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	4413      	add	r3, r2
 800beb6:	3303      	adds	r3, #3
 800beb8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800beba:	68fb      	ldr	r3, [r7, #12]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3714      	adds	r7, #20
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800becc:	f000 fadc 	bl	800c488 <vTaskStartScheduler>
  
  return osOK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bed6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bed8:	b089      	sub	sp, #36	@ 0x24
 800beda:	af04      	add	r7, sp, #16
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	695b      	ldr	r3, [r3, #20]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d020      	beq.n	800bf2a <osThreadCreate+0x54>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	699b      	ldr	r3, [r3, #24]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d01c      	beq.n	800bf2a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685c      	ldr	r4, [r3, #4]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	691e      	ldr	r6, [r3, #16]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7ff ffc8 	bl	800be98 <makeFreeRtosPriority>
 800bf08:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	695b      	ldr	r3, [r3, #20]
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf12:	9202      	str	r2, [sp, #8]
 800bf14:	9301      	str	r3, [sp, #4]
 800bf16:	9100      	str	r1, [sp, #0]
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	4632      	mov	r2, r6
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f000 f8ed 	bl	800c0fe <xTaskCreateStatic>
 800bf24:	4603      	mov	r3, r0
 800bf26:	60fb      	str	r3, [r7, #12]
 800bf28:	e01c      	b.n	800bf64 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685c      	ldr	r4, [r3, #4]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf36:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7ff ffaa 	bl	800be98 <makeFreeRtosPriority>
 800bf44:	4602      	mov	r2, r0
 800bf46:	f107 030c 	add.w	r3, r7, #12
 800bf4a:	9301      	str	r3, [sp, #4]
 800bf4c:	9200      	str	r2, [sp, #0]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	4632      	mov	r2, r6
 800bf52:	4629      	mov	r1, r5
 800bf54:	4620      	mov	r0, r4
 800bf56:	f000 f931 	bl	800c1bc <xTaskCreate>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d001      	beq.n	800bf64 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bf60:	2300      	movs	r3, #0
 800bf62:	e000      	b.n	800bf66 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bf64:	68fb      	ldr	r3, [r7, #12]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3714      	adds	r7, #20
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf6e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b084      	sub	sp, #16
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d001      	beq.n	800bf84 <osDelay+0x16>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	e000      	b.n	800bf86 <osDelay+0x18>
 800bf84:	2301      	movs	r3, #1
 800bf86:	4618      	mov	r0, r3
 800bf88:	f000 fa48 	bl	800c41c <vTaskDelay>
  
  return osOK;
 800bf8c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf96:	b480      	push	{r7}
 800bf98:	b083      	sub	sp, #12
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f103 0208 	add.w	r2, r3, #8
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f04f 32ff 	mov.w	r2, #4294967295
 800bfae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f103 0208 	add.w	r2, r3, #8
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f103 0208 	add.w	r2, r3, #8
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bfca:	bf00      	nop
 800bfcc:	370c      	adds	r7, #12
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr

0800bfd6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	b083      	sub	sp, #12
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bfe4:	bf00      	nop
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	689a      	ldr	r2, [r3, #8]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	683a      	ldr	r2, [r7, #0]
 800c01a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	601a      	str	r2, [r3, #0]
}
 800c02c:	bf00      	nop
 800c02e:	3714      	adds	r7, #20
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c04e:	d103      	bne.n	800c058 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	60fb      	str	r3, [r7, #12]
 800c056:	e00c      	b.n	800c072 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	3308      	adds	r3, #8
 800c05c:	60fb      	str	r3, [r7, #12]
 800c05e:	e002      	b.n	800c066 <vListInsert+0x2e>
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	60fb      	str	r3, [r7, #12]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d2f6      	bcs.n	800c060 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	685a      	ldr	r2, [r3, #4]
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	68fa      	ldr	r2, [r7, #12]
 800c086:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	1c5a      	adds	r2, r3, #1
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	601a      	str	r2, [r3, #0]
}
 800c09e:	bf00      	nop
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b085      	sub	sp, #20
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	6892      	ldr	r2, [r2, #8]
 800c0c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	6852      	ldr	r2, [r2, #4]
 800c0ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d103      	bne.n	800c0de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	689a      	ldr	r2, [r3, #8]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	1e5a      	subs	r2, r3, #1
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3714      	adds	r7, #20
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr

0800c0fe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b08e      	sub	sp, #56	@ 0x38
 800c102:	af04      	add	r7, sp, #16
 800c104:	60f8      	str	r0, [r7, #12]
 800c106:	60b9      	str	r1, [r7, #8]
 800c108:	607a      	str	r2, [r7, #4]
 800c10a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10b      	bne.n	800c12a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop
 800c128:	e7fd      	b.n	800c126 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10b      	bne.n	800c148 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	61fb      	str	r3, [r7, #28]
}
 800c142:	bf00      	nop
 800c144:	bf00      	nop
 800c146:	e7fd      	b.n	800c144 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c148:	2354      	movs	r3, #84	@ 0x54
 800c14a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	2b54      	cmp	r3, #84	@ 0x54
 800c150:	d00b      	beq.n	800c16a <xTaskCreateStatic+0x6c>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	61bb      	str	r3, [r7, #24]
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop
 800c168:	e7fd      	b.n	800c166 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d01e      	beq.n	800c1ae <xTaskCreateStatic+0xb0>
 800c170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c172:	2b00      	cmp	r3, #0
 800c174:	d01b      	beq.n	800c1ae <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c178:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c17e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c182:	2202      	movs	r2, #2
 800c184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c188:	2300      	movs	r3, #0
 800c18a:	9303      	str	r3, [sp, #12]
 800c18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18e:	9302      	str	r3, [sp, #8]
 800c190:	f107 0314 	add.w	r3, r7, #20
 800c194:	9301      	str	r3, [sp, #4]
 800c196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	68b9      	ldr	r1, [r7, #8]
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f000 f850 	bl	800c246 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c1a8:	f000 f8ce 	bl	800c348 <prvAddNewTaskToReadyList>
 800c1ac:	e001      	b.n	800c1b2 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1b2:	697b      	ldr	r3, [r7, #20]
	}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3728      	adds	r7, #40	@ 0x28
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08c      	sub	sp, #48	@ 0x30
 800c1c0:	af04      	add	r7, sp, #16
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	603b      	str	r3, [r7, #0]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1cc:	88fb      	ldrh	r3, [r7, #6]
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f000 fed1 	bl	800cf78 <pvPortMalloc>
 800c1d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00e      	beq.n	800c1fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800c1de:	2054      	movs	r0, #84	@ 0x54
 800c1e0:	f000 feca 	bl	800cf78 <pvPortMalloc>
 800c1e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d003      	beq.n	800c1f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	697a      	ldr	r2, [r7, #20]
 800c1f0:	631a      	str	r2, [r3, #48]	@ 0x30
 800c1f2:	e005      	b.n	800c200 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c1f4:	6978      	ldr	r0, [r7, #20]
 800c1f6:	f000 ff87 	bl	800d108 <vPortFree>
 800c1fa:	e001      	b.n	800c200 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d017      	beq.n	800c236 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c20e:	88fa      	ldrh	r2, [r7, #6]
 800c210:	2300      	movs	r3, #0
 800c212:	9303      	str	r3, [sp, #12]
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	9302      	str	r3, [sp, #8]
 800c218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c21a:	9301      	str	r3, [sp, #4]
 800c21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	68b9      	ldr	r1, [r7, #8]
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f000 f80e 	bl	800c246 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c22a:	69f8      	ldr	r0, [r7, #28]
 800c22c:	f000 f88c 	bl	800c348 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c230:	2301      	movs	r3, #1
 800c232:	61bb      	str	r3, [r7, #24]
 800c234:	e002      	b.n	800c23c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c236:	f04f 33ff 	mov.w	r3, #4294967295
 800c23a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c23c:	69bb      	ldr	r3, [r7, #24]
	}
 800c23e:	4618      	mov	r0, r3
 800c240:	3720      	adds	r7, #32
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c246:	b580      	push	{r7, lr}
 800c248:	b088      	sub	sp, #32
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	60f8      	str	r0, [r7, #12]
 800c24e:	60b9      	str	r1, [r7, #8]
 800c250:	607a      	str	r2, [r7, #4]
 800c252:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800c254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c25e:	3b01      	subs	r3, #1
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4413      	add	r3, r2
 800c264:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	f023 0307 	bic.w	r3, r3, #7
 800c26c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	f003 0307 	and.w	r3, r3, #7
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00b      	beq.n	800c290 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	617b      	str	r3, [r7, #20]
}
 800c28a:	bf00      	nop
 800c28c:	bf00      	nop
 800c28e:	e7fd      	b.n	800c28c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c290:	2300      	movs	r3, #0
 800c292:	61fb      	str	r3, [r7, #28]
 800c294:	e012      	b.n	800c2bc <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	4413      	add	r3, r2
 800c29c:	7819      	ldrb	r1, [r3, #0]
 800c29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	3334      	adds	r3, #52	@ 0x34
 800c2a6:	460a      	mov	r2, r1
 800c2a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d006      	beq.n	800c2c4 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	61fb      	str	r3, [r7, #28]
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	2b0f      	cmp	r3, #15
 800c2c0:	d9e9      	bls.n	800c296 <prvInitialiseNewTask+0x50>
 800c2c2:	e000      	b.n	800c2c6 <prvInitialiseNewTask+0x80>
		{
			break;
 800c2c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d0:	2b06      	cmp	r3, #6
 800c2d2:	d901      	bls.n	800c2d8 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c2d4:	2306      	movs	r3, #6
 800c2d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2e2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7ff fe71 	bl	800bfd6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f6:	3318      	adds	r3, #24
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff fe6c 	bl	800bfd6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c302:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c306:	f1c3 0207 	rsb	r2, r3, #7
 800c30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c312:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c316:	2200      	movs	r2, #0
 800c318:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c31c:	2200      	movs	r2, #0
 800c31e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	68f9      	ldr	r1, [r7, #12]
 800c326:	69b8      	ldr	r0, [r7, #24]
 800c328:	f000 fc18 	bl	800cb5c <pxPortInitialiseStack>
 800c32c:	4602      	mov	r2, r0
 800c32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c330:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c334:	2b00      	cmp	r3, #0
 800c336:	d002      	beq.n	800c33e <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c33a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c33c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c33e:	bf00      	nop
 800c340:	3720      	adds	r7, #32
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
	...

0800c348 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c350:	f000 fd32 	bl	800cdb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c354:	4b2a      	ldr	r3, [pc, #168]	@ (800c400 <prvAddNewTaskToReadyList+0xb8>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	3301      	adds	r3, #1
 800c35a:	4a29      	ldr	r2, [pc, #164]	@ (800c400 <prvAddNewTaskToReadyList+0xb8>)
 800c35c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c35e:	4b29      	ldr	r3, [pc, #164]	@ (800c404 <prvAddNewTaskToReadyList+0xbc>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d109      	bne.n	800c37a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c366:	4a27      	ldr	r2, [pc, #156]	@ (800c404 <prvAddNewTaskToReadyList+0xbc>)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c36c:	4b24      	ldr	r3, [pc, #144]	@ (800c400 <prvAddNewTaskToReadyList+0xb8>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2b01      	cmp	r3, #1
 800c372:	d110      	bne.n	800c396 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c374:	f000 fac8 	bl	800c908 <prvInitialiseTaskLists>
 800c378:	e00d      	b.n	800c396 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c37a:	4b23      	ldr	r3, [pc, #140]	@ (800c408 <prvAddNewTaskToReadyList+0xc0>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d109      	bne.n	800c396 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c382:	4b20      	ldr	r3, [pc, #128]	@ (800c404 <prvAddNewTaskToReadyList+0xbc>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d802      	bhi.n	800c396 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c390:	4a1c      	ldr	r2, [pc, #112]	@ (800c404 <prvAddNewTaskToReadyList+0xbc>)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c396:	4b1d      	ldr	r3, [pc, #116]	@ (800c40c <prvAddNewTaskToReadyList+0xc4>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	3301      	adds	r3, #1
 800c39c:	4a1b      	ldr	r2, [pc, #108]	@ (800c40c <prvAddNewTaskToReadyList+0xc4>)
 800c39e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	409a      	lsls	r2, r3
 800c3a8:	4b19      	ldr	r3, [pc, #100]	@ (800c410 <prvAddNewTaskToReadyList+0xc8>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	4a18      	ldr	r2, [pc, #96]	@ (800c410 <prvAddNewTaskToReadyList+0xc8>)
 800c3b0:	6013      	str	r3, [r2, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	4413      	add	r3, r2
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	4a15      	ldr	r2, [pc, #84]	@ (800c414 <prvAddNewTaskToReadyList+0xcc>)
 800c3c0:	441a      	add	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	f7ff fe11 	bl	800bff0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c3ce:	f000 fd25 	bl	800ce1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c408 <prvAddNewTaskToReadyList+0xc0>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00e      	beq.n	800c3f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c3da:	4b0a      	ldr	r3, [pc, #40]	@ (800c404 <prvAddNewTaskToReadyList+0xbc>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d207      	bcs.n	800c3f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c3e8:	4b0b      	ldr	r3, [pc, #44]	@ (800c418 <prvAddNewTaskToReadyList+0xd0>)
 800c3ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3ee:	601a      	str	r2, [r3, #0]
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3f8:	bf00      	nop
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	20000db4 	.word	0x20000db4
 800c404:	20000cb4 	.word	0x20000cb4
 800c408:	20000dc0 	.word	0x20000dc0
 800c40c:	20000dd0 	.word	0x20000dd0
 800c410:	20000dbc 	.word	0x20000dbc
 800c414:	20000cb8 	.word	0x20000cb8
 800c418:	e000ed04 	.word	0xe000ed04

0800c41c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c424:	2300      	movs	r3, #0
 800c426:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d018      	beq.n	800c460 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c42e:	4b14      	ldr	r3, [pc, #80]	@ (800c480 <vTaskDelay+0x64>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00b      	beq.n	800c44e <vTaskDelay+0x32>
	__asm volatile
 800c436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	60bb      	str	r3, [r7, #8]
}
 800c448:	bf00      	nop
 800c44a:	bf00      	nop
 800c44c:	e7fd      	b.n	800c44a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c44e:	f000 f87d 	bl	800c54c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c452:	2100      	movs	r1, #0
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 fb1b 	bl	800ca90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c45a:	f000 f885 	bl	800c568 <xTaskResumeAll>
 800c45e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d107      	bne.n	800c476 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c466:	4b07      	ldr	r3, [pc, #28]	@ (800c484 <vTaskDelay+0x68>)
 800c468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c46c:	601a      	str	r2, [r3, #0]
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c476:	bf00      	nop
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	20000ddc 	.word	0x20000ddc
 800c484:	e000ed04 	.word	0xe000ed04

0800c488 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b08a      	sub	sp, #40	@ 0x28
 800c48c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c48e:	2300      	movs	r3, #0
 800c490:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c492:	2300      	movs	r3, #0
 800c494:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c496:	463a      	mov	r2, r7
 800c498:	1d39      	adds	r1, r7, #4
 800c49a:	f107 0308 	add.w	r3, r7, #8
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7f3 fe9e 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	9202      	str	r2, [sp, #8]
 800c4ac:	9301      	str	r3, [sp, #4]
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	460a      	mov	r2, r1
 800c4b6:	491f      	ldr	r1, [pc, #124]	@ (800c534 <vTaskStartScheduler+0xac>)
 800c4b8:	481f      	ldr	r0, [pc, #124]	@ (800c538 <vTaskStartScheduler+0xb0>)
 800c4ba:	f7ff fe20 	bl	800c0fe <xTaskCreateStatic>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	4a1e      	ldr	r2, [pc, #120]	@ (800c53c <vTaskStartScheduler+0xb4>)
 800c4c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c4c4:	4b1d      	ldr	r3, [pc, #116]	@ (800c53c <vTaskStartScheduler+0xb4>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	617b      	str	r3, [r7, #20]
 800c4d0:	e001      	b.n	800c4d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d116      	bne.n	800c50a <vTaskStartScheduler+0x82>
	__asm volatile
 800c4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	613b      	str	r3, [r7, #16]
}
 800c4ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c4f0:	4b13      	ldr	r3, [pc, #76]	@ (800c540 <vTaskStartScheduler+0xb8>)
 800c4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c4f8:	4b12      	ldr	r3, [pc, #72]	@ (800c544 <vTaskStartScheduler+0xbc>)
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c4fe:	4b12      	ldr	r3, [pc, #72]	@ (800c548 <vTaskStartScheduler+0xc0>)
 800c500:	2200      	movs	r2, #0
 800c502:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c504:	f000 fbb4 	bl	800cc70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c508:	e00f      	b.n	800c52a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c510:	d10b      	bne.n	800c52a <vTaskStartScheduler+0xa2>
	__asm volatile
 800c512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	60fb      	str	r3, [r7, #12]
}
 800c524:	bf00      	nop
 800c526:	bf00      	nop
 800c528:	e7fd      	b.n	800c526 <vTaskStartScheduler+0x9e>
}
 800c52a:	bf00      	nop
 800c52c:	3718      	adds	r7, #24
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	0800ddf4 	.word	0x0800ddf4
 800c538:	0800c8d9 	.word	0x0800c8d9
 800c53c:	20000dd8 	.word	0x20000dd8
 800c540:	20000dd4 	.word	0x20000dd4
 800c544:	20000dc0 	.word	0x20000dc0
 800c548:	20000db8 	.word	0x20000db8

0800c54c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c54c:	b480      	push	{r7}
 800c54e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c550:	4b04      	ldr	r3, [pc, #16]	@ (800c564 <vTaskSuspendAll+0x18>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3301      	adds	r3, #1
 800c556:	4a03      	ldr	r2, [pc, #12]	@ (800c564 <vTaskSuspendAll+0x18>)
 800c558:	6013      	str	r3, [r2, #0]
}
 800c55a:	bf00      	nop
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr
 800c564:	20000ddc 	.word	0x20000ddc

0800c568 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c572:	2300      	movs	r3, #0
 800c574:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c576:	4b42      	ldr	r3, [pc, #264]	@ (800c680 <xTaskResumeAll+0x118>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10b      	bne.n	800c596 <xTaskResumeAll+0x2e>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	603b      	str	r3, [r7, #0]
}
 800c590:	bf00      	nop
 800c592:	bf00      	nop
 800c594:	e7fd      	b.n	800c592 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c596:	f000 fc0f 	bl	800cdb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c59a:	4b39      	ldr	r3, [pc, #228]	@ (800c680 <xTaskResumeAll+0x118>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	4a37      	ldr	r2, [pc, #220]	@ (800c680 <xTaskResumeAll+0x118>)
 800c5a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5a4:	4b36      	ldr	r3, [pc, #216]	@ (800c680 <xTaskResumeAll+0x118>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d161      	bne.n	800c670 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c5ac:	4b35      	ldr	r3, [pc, #212]	@ (800c684 <xTaskResumeAll+0x11c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d05d      	beq.n	800c670 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5b4:	e02e      	b.n	800c614 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c5b6:	4b34      	ldr	r3, [pc, #208]	@ (800c688 <xTaskResumeAll+0x120>)
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	3318      	adds	r3, #24
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7ff fd71 	bl	800c0aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	3304      	adds	r3, #4
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7ff fd6c 	bl	800c0aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	409a      	lsls	r2, r3
 800c5da:	4b2c      	ldr	r3, [pc, #176]	@ (800c68c <xTaskResumeAll+0x124>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	4a2a      	ldr	r2, [pc, #168]	@ (800c68c <xTaskResumeAll+0x124>)
 800c5e2:	6013      	str	r3, [r2, #0]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	4413      	add	r3, r2
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	4a27      	ldr	r2, [pc, #156]	@ (800c690 <xTaskResumeAll+0x128>)
 800c5f2:	441a      	add	r2, r3
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	3304      	adds	r3, #4
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	4610      	mov	r0, r2
 800c5fc:	f7ff fcf8 	bl	800bff0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c604:	4b23      	ldr	r3, [pc, #140]	@ (800c694 <xTaskResumeAll+0x12c>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d302      	bcc.n	800c614 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c60e:	4b22      	ldr	r3, [pc, #136]	@ (800c698 <xTaskResumeAll+0x130>)
 800c610:	2201      	movs	r2, #1
 800c612:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c614:	4b1c      	ldr	r3, [pc, #112]	@ (800c688 <xTaskResumeAll+0x120>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1cc      	bne.n	800c5b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d001      	beq.n	800c626 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c622:	f000 fa0f 	bl	800ca44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c626:	4b1d      	ldr	r3, [pc, #116]	@ (800c69c <xTaskResumeAll+0x134>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d010      	beq.n	800c654 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c632:	f000 f837 	bl	800c6a4 <xTaskIncrementTick>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d002      	beq.n	800c642 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c63c:	4b16      	ldr	r3, [pc, #88]	@ (800c698 <xTaskResumeAll+0x130>)
 800c63e:	2201      	movs	r2, #1
 800c640:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	3b01      	subs	r3, #1
 800c646:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1f1      	bne.n	800c632 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800c64e:	4b13      	ldr	r3, [pc, #76]	@ (800c69c <xTaskResumeAll+0x134>)
 800c650:	2200      	movs	r2, #0
 800c652:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c654:	4b10      	ldr	r3, [pc, #64]	@ (800c698 <xTaskResumeAll+0x130>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d009      	beq.n	800c670 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c65c:	2301      	movs	r3, #1
 800c65e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c660:	4b0f      	ldr	r3, [pc, #60]	@ (800c6a0 <xTaskResumeAll+0x138>)
 800c662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c666:	601a      	str	r2, [r3, #0]
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c670:	f000 fbd4 	bl	800ce1c <vPortExitCritical>

	return xAlreadyYielded;
 800c674:	68bb      	ldr	r3, [r7, #8]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	20000ddc 	.word	0x20000ddc
 800c684:	20000db4 	.word	0x20000db4
 800c688:	20000d74 	.word	0x20000d74
 800c68c:	20000dbc 	.word	0x20000dbc
 800c690:	20000cb8 	.word	0x20000cb8
 800c694:	20000cb4 	.word	0x20000cb4
 800c698:	20000dc8 	.word	0x20000dc8
 800c69c:	20000dc4 	.word	0x20000dc4
 800c6a0:	e000ed04 	.word	0xe000ed04

0800c6a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b086      	sub	sp, #24
 800c6a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6ae:	4b51      	ldr	r3, [pc, #324]	@ (800c7f4 <xTaskIncrementTick+0x150>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f040 808e 	bne.w	800c7d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c6b8:	4b4f      	ldr	r3, [pc, #316]	@ (800c7f8 <xTaskIncrementTick+0x154>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c6c0:	4a4d      	ldr	r2, [pc, #308]	@ (800c7f8 <xTaskIncrementTick+0x154>)
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d121      	bne.n	800c710 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c6cc:	4b4b      	ldr	r3, [pc, #300]	@ (800c7fc <xTaskIncrementTick+0x158>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00b      	beq.n	800c6ee <xTaskIncrementTick+0x4a>
	__asm volatile
 800c6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	603b      	str	r3, [r7, #0]
}
 800c6e8:	bf00      	nop
 800c6ea:	bf00      	nop
 800c6ec:	e7fd      	b.n	800c6ea <xTaskIncrementTick+0x46>
 800c6ee:	4b43      	ldr	r3, [pc, #268]	@ (800c7fc <xTaskIncrementTick+0x158>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	60fb      	str	r3, [r7, #12]
 800c6f4:	4b42      	ldr	r3, [pc, #264]	@ (800c800 <xTaskIncrementTick+0x15c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a40      	ldr	r2, [pc, #256]	@ (800c7fc <xTaskIncrementTick+0x158>)
 800c6fa:	6013      	str	r3, [r2, #0]
 800c6fc:	4a40      	ldr	r2, [pc, #256]	@ (800c800 <xTaskIncrementTick+0x15c>)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	6013      	str	r3, [r2, #0]
 800c702:	4b40      	ldr	r3, [pc, #256]	@ (800c804 <xTaskIncrementTick+0x160>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	3301      	adds	r3, #1
 800c708:	4a3e      	ldr	r2, [pc, #248]	@ (800c804 <xTaskIncrementTick+0x160>)
 800c70a:	6013      	str	r3, [r2, #0]
 800c70c:	f000 f99a 	bl	800ca44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c710:	4b3d      	ldr	r3, [pc, #244]	@ (800c808 <xTaskIncrementTick+0x164>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	693a      	ldr	r2, [r7, #16]
 800c716:	429a      	cmp	r2, r3
 800c718:	d34d      	bcc.n	800c7b6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c71a:	4b38      	ldr	r3, [pc, #224]	@ (800c7fc <xTaskIncrementTick+0x158>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d101      	bne.n	800c728 <xTaskIncrementTick+0x84>
 800c724:	2301      	movs	r3, #1
 800c726:	e000      	b.n	800c72a <xTaskIncrementTick+0x86>
 800c728:	2300      	movs	r3, #0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d004      	beq.n	800c738 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c72e:	4b36      	ldr	r3, [pc, #216]	@ (800c808 <xTaskIncrementTick+0x164>)
 800c730:	f04f 32ff 	mov.w	r2, #4294967295
 800c734:	601a      	str	r2, [r3, #0]
					break;
 800c736:	e03e      	b.n	800c7b6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c738:	4b30      	ldr	r3, [pc, #192]	@ (800c7fc <xTaskIncrementTick+0x158>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c748:	693a      	ldr	r2, [r7, #16]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d203      	bcs.n	800c758 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c750:	4a2d      	ldr	r2, [pc, #180]	@ (800c808 <xTaskIncrementTick+0x164>)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6013      	str	r3, [r2, #0]
						break;
 800c756:	e02e      	b.n	800c7b6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	3304      	adds	r3, #4
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7ff fca4 	bl	800c0aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c766:	2b00      	cmp	r3, #0
 800c768:	d004      	beq.n	800c774 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	3318      	adds	r3, #24
 800c76e:	4618      	mov	r0, r3
 800c770:	f7ff fc9b 	bl	800c0aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c778:	2201      	movs	r2, #1
 800c77a:	409a      	lsls	r2, r3
 800c77c:	4b23      	ldr	r3, [pc, #140]	@ (800c80c <xTaskIncrementTick+0x168>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4313      	orrs	r3, r2
 800c782:	4a22      	ldr	r2, [pc, #136]	@ (800c80c <xTaskIncrementTick+0x168>)
 800c784:	6013      	str	r3, [r2, #0]
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c78a:	4613      	mov	r3, r2
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	4413      	add	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4a1f      	ldr	r2, [pc, #124]	@ (800c810 <xTaskIncrementTick+0x16c>)
 800c794:	441a      	add	r2, r3
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	3304      	adds	r3, #4
 800c79a:	4619      	mov	r1, r3
 800c79c:	4610      	mov	r0, r2
 800c79e:	f7ff fc27 	bl	800bff0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7a6:	4b1b      	ldr	r3, [pc, #108]	@ (800c814 <xTaskIncrementTick+0x170>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d3b4      	bcc.n	800c71a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7b4:	e7b1      	b.n	800c71a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c7b6:	4b17      	ldr	r3, [pc, #92]	@ (800c814 <xTaskIncrementTick+0x170>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7bc:	4914      	ldr	r1, [pc, #80]	@ (800c810 <xTaskIncrementTick+0x16c>)
 800c7be:	4613      	mov	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	4413      	add	r3, r2
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	440b      	add	r3, r1
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d907      	bls.n	800c7de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	617b      	str	r3, [r7, #20]
 800c7d2:	e004      	b.n	800c7de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c7d4:	4b10      	ldr	r3, [pc, #64]	@ (800c818 <xTaskIncrementTick+0x174>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	4a0f      	ldr	r2, [pc, #60]	@ (800c818 <xTaskIncrementTick+0x174>)
 800c7dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c7de:	4b0f      	ldr	r3, [pc, #60]	@ (800c81c <xTaskIncrementTick+0x178>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c7ea:	697b      	ldr	r3, [r7, #20]
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3718      	adds	r7, #24
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	20000ddc 	.word	0x20000ddc
 800c7f8:	20000db8 	.word	0x20000db8
 800c7fc:	20000d6c 	.word	0x20000d6c
 800c800:	20000d70 	.word	0x20000d70
 800c804:	20000dcc 	.word	0x20000dcc
 800c808:	20000dd4 	.word	0x20000dd4
 800c80c:	20000dbc 	.word	0x20000dbc
 800c810:	20000cb8 	.word	0x20000cb8
 800c814:	20000cb4 	.word	0x20000cb4
 800c818:	20000dc4 	.word	0x20000dc4
 800c81c:	20000dc8 	.word	0x20000dc8

0800c820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c820:	b480      	push	{r7}
 800c822:	b087      	sub	sp, #28
 800c824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c826:	4b27      	ldr	r3, [pc, #156]	@ (800c8c4 <vTaskSwitchContext+0xa4>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d003      	beq.n	800c836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c82e:	4b26      	ldr	r3, [pc, #152]	@ (800c8c8 <vTaskSwitchContext+0xa8>)
 800c830:	2201      	movs	r2, #1
 800c832:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c834:	e040      	b.n	800c8b8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800c836:	4b24      	ldr	r3, [pc, #144]	@ (800c8c8 <vTaskSwitchContext+0xa8>)
 800c838:	2200      	movs	r2, #0
 800c83a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c83c:	4b23      	ldr	r3, [pc, #140]	@ (800c8cc <vTaskSwitchContext+0xac>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	fab3 f383 	clz	r3, r3
 800c848:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c84a:	7afb      	ldrb	r3, [r7, #11]
 800c84c:	f1c3 031f 	rsb	r3, r3, #31
 800c850:	617b      	str	r3, [r7, #20]
 800c852:	491f      	ldr	r1, [pc, #124]	@ (800c8d0 <vTaskSwitchContext+0xb0>)
 800c854:	697a      	ldr	r2, [r7, #20]
 800c856:	4613      	mov	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4413      	add	r3, r2
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	440b      	add	r3, r1
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10b      	bne.n	800c87e <vTaskSwitchContext+0x5e>
	__asm volatile
 800c866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86a:	f383 8811 	msr	BASEPRI, r3
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	f3bf 8f4f 	dsb	sy
 800c876:	607b      	str	r3, [r7, #4]
}
 800c878:	bf00      	nop
 800c87a:	bf00      	nop
 800c87c:	e7fd      	b.n	800c87a <vTaskSwitchContext+0x5a>
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	4613      	mov	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4413      	add	r3, r2
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4a11      	ldr	r2, [pc, #68]	@ (800c8d0 <vTaskSwitchContext+0xb0>)
 800c88a:	4413      	add	r3, r2
 800c88c:	613b      	str	r3, [r7, #16]
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	685a      	ldr	r2, [r3, #4]
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	605a      	str	r2, [r3, #4]
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	3308      	adds	r3, #8
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d104      	bne.n	800c8ae <vTaskSwitchContext+0x8e>
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	685a      	ldr	r2, [r3, #4]
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	605a      	str	r2, [r3, #4]
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	4a07      	ldr	r2, [pc, #28]	@ (800c8d4 <vTaskSwitchContext+0xb4>)
 800c8b6:	6013      	str	r3, [r2, #0]
}
 800c8b8:	bf00      	nop
 800c8ba:	371c      	adds	r7, #28
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr
 800c8c4:	20000ddc 	.word	0x20000ddc
 800c8c8:	20000dc8 	.word	0x20000dc8
 800c8cc:	20000dbc 	.word	0x20000dbc
 800c8d0:	20000cb8 	.word	0x20000cb8
 800c8d4:	20000cb4 	.word	0x20000cb4

0800c8d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c8e0:	f000 f852 	bl	800c988 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c8e4:	4b06      	ldr	r3, [pc, #24]	@ (800c900 <prvIdleTask+0x28>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d9f9      	bls.n	800c8e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c8ec:	4b05      	ldr	r3, [pc, #20]	@ (800c904 <prvIdleTask+0x2c>)
 800c8ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8f2:	601a      	str	r2, [r3, #0]
 800c8f4:	f3bf 8f4f 	dsb	sy
 800c8f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c8fc:	e7f0      	b.n	800c8e0 <prvIdleTask+0x8>
 800c8fe:	bf00      	nop
 800c900:	20000cb8 	.word	0x20000cb8
 800c904:	e000ed04 	.word	0xe000ed04

0800c908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c90e:	2300      	movs	r3, #0
 800c910:	607b      	str	r3, [r7, #4]
 800c912:	e00c      	b.n	800c92e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	4613      	mov	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	4a12      	ldr	r2, [pc, #72]	@ (800c968 <prvInitialiseTaskLists+0x60>)
 800c920:	4413      	add	r3, r2
 800c922:	4618      	mov	r0, r3
 800c924:	f7ff fb37 	bl	800bf96 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	3301      	adds	r3, #1
 800c92c:	607b      	str	r3, [r7, #4]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2b06      	cmp	r3, #6
 800c932:	d9ef      	bls.n	800c914 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c934:	480d      	ldr	r0, [pc, #52]	@ (800c96c <prvInitialiseTaskLists+0x64>)
 800c936:	f7ff fb2e 	bl	800bf96 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c93a:	480d      	ldr	r0, [pc, #52]	@ (800c970 <prvInitialiseTaskLists+0x68>)
 800c93c:	f7ff fb2b 	bl	800bf96 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c940:	480c      	ldr	r0, [pc, #48]	@ (800c974 <prvInitialiseTaskLists+0x6c>)
 800c942:	f7ff fb28 	bl	800bf96 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c946:	480c      	ldr	r0, [pc, #48]	@ (800c978 <prvInitialiseTaskLists+0x70>)
 800c948:	f7ff fb25 	bl	800bf96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c94c:	480b      	ldr	r0, [pc, #44]	@ (800c97c <prvInitialiseTaskLists+0x74>)
 800c94e:	f7ff fb22 	bl	800bf96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c952:	4b0b      	ldr	r3, [pc, #44]	@ (800c980 <prvInitialiseTaskLists+0x78>)
 800c954:	4a05      	ldr	r2, [pc, #20]	@ (800c96c <prvInitialiseTaskLists+0x64>)
 800c956:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c958:	4b0a      	ldr	r3, [pc, #40]	@ (800c984 <prvInitialiseTaskLists+0x7c>)
 800c95a:	4a05      	ldr	r2, [pc, #20]	@ (800c970 <prvInitialiseTaskLists+0x68>)
 800c95c:	601a      	str	r2, [r3, #0]
}
 800c95e:	bf00      	nop
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	20000cb8 	.word	0x20000cb8
 800c96c:	20000d44 	.word	0x20000d44
 800c970:	20000d58 	.word	0x20000d58
 800c974:	20000d74 	.word	0x20000d74
 800c978:	20000d88 	.word	0x20000d88
 800c97c:	20000da0 	.word	0x20000da0
 800c980:	20000d6c 	.word	0x20000d6c
 800c984:	20000d70 	.word	0x20000d70

0800c988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c98e:	e019      	b.n	800c9c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c990:	f000 fa12 	bl	800cdb8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c994:	4b10      	ldr	r3, [pc, #64]	@ (800c9d8 <prvCheckTasksWaitingTermination+0x50>)
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	3304      	adds	r3, #4
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7ff fb82 	bl	800c0aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c9a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c9dc <prvCheckTasksWaitingTermination+0x54>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	4a0b      	ldr	r2, [pc, #44]	@ (800c9dc <prvCheckTasksWaitingTermination+0x54>)
 800c9ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c9b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c9e0 <prvCheckTasksWaitingTermination+0x58>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	4a0a      	ldr	r2, [pc, #40]	@ (800c9e0 <prvCheckTasksWaitingTermination+0x58>)
 800c9b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c9ba:	f000 fa2f 	bl	800ce1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 f810 	bl	800c9e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9c4:	4b06      	ldr	r3, [pc, #24]	@ (800c9e0 <prvCheckTasksWaitingTermination+0x58>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d1e1      	bne.n	800c990 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c9cc:	bf00      	nop
 800c9ce:	bf00      	nop
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	20000d88 	.word	0x20000d88
 800c9dc:	20000db4 	.word	0x20000db4
 800c9e0:	20000d9c 	.word	0x20000d9c

0800c9e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d108      	bne.n	800ca08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 fb84 	bl	800d108 <vPortFree>
				vPortFree( pxTCB );
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 fb81 	bl	800d108 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ca06:	e019      	b.n	800ca3c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d103      	bne.n	800ca1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 fb78 	bl	800d108 <vPortFree>
	}
 800ca18:	e010      	b.n	800ca3c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d00b      	beq.n	800ca3c <prvDeleteTCB+0x58>
	__asm volatile
 800ca24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	60fb      	str	r3, [r7, #12]
}
 800ca36:	bf00      	nop
 800ca38:	bf00      	nop
 800ca3a:	e7fd      	b.n	800ca38 <prvDeleteTCB+0x54>
	}
 800ca3c:	bf00      	nop
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ca88 <prvResetNextTaskUnblockTime+0x44>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d101      	bne.n	800ca58 <prvResetNextTaskUnblockTime+0x14>
 800ca54:	2301      	movs	r3, #1
 800ca56:	e000      	b.n	800ca5a <prvResetNextTaskUnblockTime+0x16>
 800ca58:	2300      	movs	r3, #0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d004      	beq.n	800ca68 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ca8c <prvResetNextTaskUnblockTime+0x48>)
 800ca60:	f04f 32ff 	mov.w	r2, #4294967295
 800ca64:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca66:	e008      	b.n	800ca7a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ca68:	4b07      	ldr	r3, [pc, #28]	@ (800ca88 <prvResetNextTaskUnblockTime+0x44>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	4a05      	ldr	r2, [pc, #20]	@ (800ca8c <prvResetNextTaskUnblockTime+0x48>)
 800ca78:	6013      	str	r3, [r2, #0]
}
 800ca7a:	bf00      	nop
 800ca7c:	370c      	adds	r7, #12
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	20000d6c 	.word	0x20000d6c
 800ca8c:	20000dd4 	.word	0x20000dd4

0800ca90 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca9a:	4b29      	ldr	r3, [pc, #164]	@ (800cb40 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800caa0:	4b28      	ldr	r3, [pc, #160]	@ (800cb44 <prvAddCurrentTaskToDelayedList+0xb4>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	3304      	adds	r3, #4
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7ff faff 	bl	800c0aa <uxListRemove>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10b      	bne.n	800caca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800cab2:	4b24      	ldr	r3, [pc, #144]	@ (800cb44 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cab8:	2201      	movs	r2, #1
 800caba:	fa02 f303 	lsl.w	r3, r2, r3
 800cabe:	43da      	mvns	r2, r3
 800cac0:	4b21      	ldr	r3, [pc, #132]	@ (800cb48 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4013      	ands	r3, r2
 800cac6:	4a20      	ldr	r2, [pc, #128]	@ (800cb48 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cac8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad0:	d10a      	bne.n	800cae8 <prvAddCurrentTaskToDelayedList+0x58>
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d007      	beq.n	800cae8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cad8:	4b1a      	ldr	r3, [pc, #104]	@ (800cb44 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	3304      	adds	r3, #4
 800cade:	4619      	mov	r1, r3
 800cae0:	481a      	ldr	r0, [pc, #104]	@ (800cb4c <prvAddCurrentTaskToDelayedList+0xbc>)
 800cae2:	f7ff fa85 	bl	800bff0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cae6:	e026      	b.n	800cb36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4413      	add	r3, r2
 800caee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800caf0:	4b14      	ldr	r3, [pc, #80]	@ (800cb44 <prvAddCurrentTaskToDelayedList+0xb4>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68ba      	ldr	r2, [r7, #8]
 800caf6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800caf8:	68ba      	ldr	r2, [r7, #8]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d209      	bcs.n	800cb14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb00:	4b13      	ldr	r3, [pc, #76]	@ (800cb50 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	4b0f      	ldr	r3, [pc, #60]	@ (800cb44 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	3304      	adds	r3, #4
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	4610      	mov	r0, r2
 800cb0e:	f7ff fa93 	bl	800c038 <vListInsert>
}
 800cb12:	e010      	b.n	800cb36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb14:	4b0f      	ldr	r3, [pc, #60]	@ (800cb54 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	4b0a      	ldr	r3, [pc, #40]	@ (800cb44 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	4619      	mov	r1, r3
 800cb20:	4610      	mov	r0, r2
 800cb22:	f7ff fa89 	bl	800c038 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cb26:	4b0c      	ldr	r3, [pc, #48]	@ (800cb58 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68ba      	ldr	r2, [r7, #8]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d202      	bcs.n	800cb36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cb30:	4a09      	ldr	r2, [pc, #36]	@ (800cb58 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	6013      	str	r3, [r2, #0]
}
 800cb36:	bf00      	nop
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	20000db8 	.word	0x20000db8
 800cb44:	20000cb4 	.word	0x20000cb4
 800cb48:	20000dbc 	.word	0x20000dbc
 800cb4c:	20000da0 	.word	0x20000da0
 800cb50:	20000d70 	.word	0x20000d70
 800cb54:	20000d6c 	.word	0x20000d6c
 800cb58:	20000dd4 	.word	0x20000dd4

0800cb5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b085      	sub	sp, #20
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	3b04      	subs	r3, #4
 800cb6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cb74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	3b04      	subs	r3, #4
 800cb7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	f023 0201 	bic.w	r2, r3, #1
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	3b04      	subs	r3, #4
 800cb8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb8c:	4a0c      	ldr	r2, [pc, #48]	@ (800cbc0 <pxPortInitialiseStack+0x64>)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	3b14      	subs	r3, #20
 800cb96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3b04      	subs	r3, #4
 800cba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f06f 0202 	mvn.w	r2, #2
 800cbaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	3b20      	subs	r3, #32
 800cbb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3714      	adds	r7, #20
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr
 800cbc0:	0800cbc5 	.word	0x0800cbc5

0800cbc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cbce:	4b13      	ldr	r3, [pc, #76]	@ (800cc1c <prvTaskExitError+0x58>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd6:	d00b      	beq.n	800cbf0 <prvTaskExitError+0x2c>
	__asm volatile
 800cbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbdc:	f383 8811 	msr	BASEPRI, r3
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	60fb      	str	r3, [r7, #12]
}
 800cbea:	bf00      	nop
 800cbec:	bf00      	nop
 800cbee:	e7fd      	b.n	800cbec <prvTaskExitError+0x28>
	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	60bb      	str	r3, [r7, #8]
}
 800cc02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc04:	bf00      	nop
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d0fc      	beq.n	800cc06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc0c:	bf00      	nop
 800cc0e:	bf00      	nop
 800cc10:	3714      	adds	r7, #20
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	20000128 	.word	0x20000128

0800cc20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc20:	4b07      	ldr	r3, [pc, #28]	@ (800cc40 <pxCurrentTCBConst2>)
 800cc22:	6819      	ldr	r1, [r3, #0]
 800cc24:	6808      	ldr	r0, [r1, #0]
 800cc26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2a:	f380 8809 	msr	PSP, r0
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f04f 0000 	mov.w	r0, #0
 800cc36:	f380 8811 	msr	BASEPRI, r0
 800cc3a:	4770      	bx	lr
 800cc3c:	f3af 8000 	nop.w

0800cc40 <pxCurrentTCBConst2>:
 800cc40:	20000cb4 	.word	0x20000cb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc44:	bf00      	nop
 800cc46:	bf00      	nop

0800cc48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc48:	4808      	ldr	r0, [pc, #32]	@ (800cc6c <prvPortStartFirstTask+0x24>)
 800cc4a:	6800      	ldr	r0, [r0, #0]
 800cc4c:	6800      	ldr	r0, [r0, #0]
 800cc4e:	f380 8808 	msr	MSP, r0
 800cc52:	f04f 0000 	mov.w	r0, #0
 800cc56:	f380 8814 	msr	CONTROL, r0
 800cc5a:	b662      	cpsie	i
 800cc5c:	b661      	cpsie	f
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	f3bf 8f6f 	isb	sy
 800cc66:	df00      	svc	0
 800cc68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc6a:	bf00      	nop
 800cc6c:	e000ed08 	.word	0xe000ed08

0800cc70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc76:	4b47      	ldr	r3, [pc, #284]	@ (800cd94 <xPortStartScheduler+0x124>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a47      	ldr	r2, [pc, #284]	@ (800cd98 <xPortStartScheduler+0x128>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d10b      	bne.n	800cc98 <xPortStartScheduler+0x28>
	__asm volatile
 800cc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	613b      	str	r3, [r7, #16]
}
 800cc92:	bf00      	nop
 800cc94:	bf00      	nop
 800cc96:	e7fd      	b.n	800cc94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc98:	4b3e      	ldr	r3, [pc, #248]	@ (800cd94 <xPortStartScheduler+0x124>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a3f      	ldr	r2, [pc, #252]	@ (800cd9c <xPortStartScheduler+0x12c>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d10b      	bne.n	800ccba <xPortStartScheduler+0x4a>
	__asm volatile
 800cca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	60fb      	str	r3, [r7, #12]
}
 800ccb4:	bf00      	nop
 800ccb6:	bf00      	nop
 800ccb8:	e7fd      	b.n	800ccb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ccba:	4b39      	ldr	r3, [pc, #228]	@ (800cda0 <xPortStartScheduler+0x130>)
 800ccbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	22ff      	movs	r2, #255	@ 0xff
 800ccca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ccd4:	78fb      	ldrb	r3, [r7, #3]
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	4b31      	ldr	r3, [pc, #196]	@ (800cda4 <xPortStartScheduler+0x134>)
 800cce0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cce2:	4b31      	ldr	r3, [pc, #196]	@ (800cda8 <xPortStartScheduler+0x138>)
 800cce4:	2207      	movs	r2, #7
 800cce6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cce8:	e009      	b.n	800ccfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ccea:	4b2f      	ldr	r3, [pc, #188]	@ (800cda8 <xPortStartScheduler+0x138>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	3b01      	subs	r3, #1
 800ccf0:	4a2d      	ldr	r2, [pc, #180]	@ (800cda8 <xPortStartScheduler+0x138>)
 800ccf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ccf4:	78fb      	ldrb	r3, [r7, #3]
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	005b      	lsls	r3, r3, #1
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccfe:	78fb      	ldrb	r3, [r7, #3]
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd06:	2b80      	cmp	r3, #128	@ 0x80
 800cd08:	d0ef      	beq.n	800ccea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd0a:	4b27      	ldr	r3, [pc, #156]	@ (800cda8 <xPortStartScheduler+0x138>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f1c3 0307 	rsb	r3, r3, #7
 800cd12:	2b04      	cmp	r3, #4
 800cd14:	d00b      	beq.n	800cd2e <xPortStartScheduler+0xbe>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	60bb      	str	r3, [r7, #8]
}
 800cd28:	bf00      	nop
 800cd2a:	bf00      	nop
 800cd2c:	e7fd      	b.n	800cd2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd2e:	4b1e      	ldr	r3, [pc, #120]	@ (800cda8 <xPortStartScheduler+0x138>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	021b      	lsls	r3, r3, #8
 800cd34:	4a1c      	ldr	r2, [pc, #112]	@ (800cda8 <xPortStartScheduler+0x138>)
 800cd36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd38:	4b1b      	ldr	r3, [pc, #108]	@ (800cda8 <xPortStartScheduler+0x138>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cd40:	4a19      	ldr	r2, [pc, #100]	@ (800cda8 <xPortStartScheduler+0x138>)
 800cd42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd4c:	4b17      	ldr	r3, [pc, #92]	@ (800cdac <xPortStartScheduler+0x13c>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a16      	ldr	r2, [pc, #88]	@ (800cdac <xPortStartScheduler+0x13c>)
 800cd52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cd56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd58:	4b14      	ldr	r3, [pc, #80]	@ (800cdac <xPortStartScheduler+0x13c>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a13      	ldr	r2, [pc, #76]	@ (800cdac <xPortStartScheduler+0x13c>)
 800cd5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cd62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd64:	f000 f8da 	bl	800cf1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd68:	4b11      	ldr	r3, [pc, #68]	@ (800cdb0 <xPortStartScheduler+0x140>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd6e:	f000 f8f9 	bl	800cf64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd72:	4b10      	ldr	r3, [pc, #64]	@ (800cdb4 <xPortStartScheduler+0x144>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a0f      	ldr	r2, [pc, #60]	@ (800cdb4 <xPortStartScheduler+0x144>)
 800cd78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cd7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd7e:	f7ff ff63 	bl	800cc48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd82:	f7ff fd4d 	bl	800c820 <vTaskSwitchContext>
	prvTaskExitError();
 800cd86:	f7ff ff1d 	bl	800cbc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3718      	adds	r7, #24
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	e000ed00 	.word	0xe000ed00
 800cd98:	410fc271 	.word	0x410fc271
 800cd9c:	410fc270 	.word	0x410fc270
 800cda0:	e000e400 	.word	0xe000e400
 800cda4:	20000de0 	.word	0x20000de0
 800cda8:	20000de4 	.word	0x20000de4
 800cdac:	e000ed20 	.word	0xe000ed20
 800cdb0:	20000128 	.word	0x20000128
 800cdb4:	e000ef34 	.word	0xe000ef34

0800cdb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
	__asm volatile
 800cdbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc2:	f383 8811 	msr	BASEPRI, r3
 800cdc6:	f3bf 8f6f 	isb	sy
 800cdca:	f3bf 8f4f 	dsb	sy
 800cdce:	607b      	str	r3, [r7, #4]
}
 800cdd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdd2:	4b10      	ldr	r3, [pc, #64]	@ (800ce14 <vPortEnterCritical+0x5c>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	4a0e      	ldr	r2, [pc, #56]	@ (800ce14 <vPortEnterCritical+0x5c>)
 800cdda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cddc:	4b0d      	ldr	r3, [pc, #52]	@ (800ce14 <vPortEnterCritical+0x5c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d110      	bne.n	800ce06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cde4:	4b0c      	ldr	r3, [pc, #48]	@ (800ce18 <vPortEnterCritical+0x60>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00b      	beq.n	800ce06 <vPortEnterCritical+0x4e>
	__asm volatile
 800cdee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	603b      	str	r3, [r7, #0]
}
 800ce00:	bf00      	nop
 800ce02:	bf00      	nop
 800ce04:	e7fd      	b.n	800ce02 <vPortEnterCritical+0x4a>
	}
}
 800ce06:	bf00      	nop
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	20000128 	.word	0x20000128
 800ce18:	e000ed04 	.word	0xe000ed04

0800ce1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce22:	4b12      	ldr	r3, [pc, #72]	@ (800ce6c <vPortExitCritical+0x50>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d10b      	bne.n	800ce42 <vPortExitCritical+0x26>
	__asm volatile
 800ce2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	607b      	str	r3, [r7, #4]
}
 800ce3c:	bf00      	nop
 800ce3e:	bf00      	nop
 800ce40:	e7fd      	b.n	800ce3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce42:	4b0a      	ldr	r3, [pc, #40]	@ (800ce6c <vPortExitCritical+0x50>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	3b01      	subs	r3, #1
 800ce48:	4a08      	ldr	r2, [pc, #32]	@ (800ce6c <vPortExitCritical+0x50>)
 800ce4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce4c:	4b07      	ldr	r3, [pc, #28]	@ (800ce6c <vPortExitCritical+0x50>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d105      	bne.n	800ce60 <vPortExitCritical+0x44>
 800ce54:	2300      	movs	r3, #0
 800ce56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce60:	bf00      	nop
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	20000128 	.word	0x20000128

0800ce70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce70:	f3ef 8009 	mrs	r0, PSP
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	4b15      	ldr	r3, [pc, #84]	@ (800ced0 <pxCurrentTCBConst>)
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	f01e 0f10 	tst.w	lr, #16
 800ce80:	bf08      	it	eq
 800ce82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce8a:	6010      	str	r0, [r2, #0]
 800ce8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ce94:	f380 8811 	msr	BASEPRI, r0
 800ce98:	f3bf 8f4f 	dsb	sy
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f7ff fcbe 	bl	800c820 <vTaskSwitchContext>
 800cea4:	f04f 0000 	mov.w	r0, #0
 800cea8:	f380 8811 	msr	BASEPRI, r0
 800ceac:	bc09      	pop	{r0, r3}
 800ceae:	6819      	ldr	r1, [r3, #0]
 800ceb0:	6808      	ldr	r0, [r1, #0]
 800ceb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb6:	f01e 0f10 	tst.w	lr, #16
 800ceba:	bf08      	it	eq
 800cebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cec0:	f380 8809 	msr	PSP, r0
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	f3af 8000 	nop.w

0800ced0 <pxCurrentTCBConst>:
 800ced0:	20000cb4 	.word	0x20000cb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ced4:	bf00      	nop
 800ced6:	bf00      	nop

0800ced8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	607b      	str	r3, [r7, #4]
}
 800cef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cef2:	f7ff fbd7 	bl	800c6a4 <xTaskIncrementTick>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d003      	beq.n	800cf04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cefc:	4b06      	ldr	r3, [pc, #24]	@ (800cf18 <SysTick_Handler+0x40>)
 800cefe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	2300      	movs	r3, #0
 800cf06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	f383 8811 	msr	BASEPRI, r3
}
 800cf0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf10:	bf00      	nop
 800cf12:	3708      	adds	r7, #8
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	e000ed04 	.word	0xe000ed04

0800cf1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf20:	4b0b      	ldr	r3, [pc, #44]	@ (800cf50 <vPortSetupTimerInterrupt+0x34>)
 800cf22:	2200      	movs	r2, #0
 800cf24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf26:	4b0b      	ldr	r3, [pc, #44]	@ (800cf54 <vPortSetupTimerInterrupt+0x38>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf2c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf58 <vPortSetupTimerInterrupt+0x3c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a0a      	ldr	r2, [pc, #40]	@ (800cf5c <vPortSetupTimerInterrupt+0x40>)
 800cf32:	fba2 2303 	umull	r2, r3, r2, r3
 800cf36:	099b      	lsrs	r3, r3, #6
 800cf38:	4a09      	ldr	r2, [pc, #36]	@ (800cf60 <vPortSetupTimerInterrupt+0x44>)
 800cf3a:	3b01      	subs	r3, #1
 800cf3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf3e:	4b04      	ldr	r3, [pc, #16]	@ (800cf50 <vPortSetupTimerInterrupt+0x34>)
 800cf40:	2207      	movs	r2, #7
 800cf42:	601a      	str	r2, [r3, #0]
}
 800cf44:	bf00      	nop
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	e000e010 	.word	0xe000e010
 800cf54:	e000e018 	.word	0xe000e018
 800cf58:	2000000c 	.word	0x2000000c
 800cf5c:	10624dd3 	.word	0x10624dd3
 800cf60:	e000e014 	.word	0xe000e014

0800cf64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cf74 <vPortEnableVFP+0x10>
 800cf68:	6801      	ldr	r1, [r0, #0]
 800cf6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cf6e:	6001      	str	r1, [r0, #0]
 800cf70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf72:	bf00      	nop
 800cf74:	e000ed88 	.word	0xe000ed88

0800cf78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b08a      	sub	sp, #40	@ 0x28
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf80:	2300      	movs	r3, #0
 800cf82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf84:	f7ff fae2 	bl	800c54c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf88:	4b5a      	ldr	r3, [pc, #360]	@ (800d0f4 <pvPortMalloc+0x17c>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d101      	bne.n	800cf94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf90:	f000 f916 	bl	800d1c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf94:	4b58      	ldr	r3, [pc, #352]	@ (800d0f8 <pvPortMalloc+0x180>)
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	4013      	ands	r3, r2
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f040 8090 	bne.w	800d0c2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d01e      	beq.n	800cfe6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cfa8:	2208      	movs	r2, #8
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4413      	add	r3, r2
 800cfae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f003 0307 	and.w	r3, r3, #7
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d015      	beq.n	800cfe6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f023 0307 	bic.w	r3, r3, #7
 800cfc0:	3308      	adds	r3, #8
 800cfc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f003 0307 	and.w	r3, r3, #7
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00b      	beq.n	800cfe6 <pvPortMalloc+0x6e>
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	617b      	str	r3, [r7, #20]
}
 800cfe0:	bf00      	nop
 800cfe2:	bf00      	nop
 800cfe4:	e7fd      	b.n	800cfe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d06a      	beq.n	800d0c2 <pvPortMalloc+0x14a>
 800cfec:	4b43      	ldr	r3, [pc, #268]	@ (800d0fc <pvPortMalloc+0x184>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d865      	bhi.n	800d0c2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cff6:	4b42      	ldr	r3, [pc, #264]	@ (800d100 <pvPortMalloc+0x188>)
 800cff8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cffa:	4b41      	ldr	r3, [pc, #260]	@ (800d100 <pvPortMalloc+0x188>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d000:	e004      	b.n	800d00c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d004:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	429a      	cmp	r2, r3
 800d014:	d903      	bls.n	800d01e <pvPortMalloc+0xa6>
 800d016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1f1      	bne.n	800d002 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d01e:	4b35      	ldr	r3, [pc, #212]	@ (800d0f4 <pvPortMalloc+0x17c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d024:	429a      	cmp	r2, r3
 800d026:	d04c      	beq.n	800d0c2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d028:	6a3b      	ldr	r3, [r7, #32]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2208      	movs	r2, #8
 800d02e:	4413      	add	r3, r2
 800d030:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d03c:	685a      	ldr	r2, [r3, #4]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	1ad2      	subs	r2, r2, r3
 800d042:	2308      	movs	r3, #8
 800d044:	005b      	lsls	r3, r3, #1
 800d046:	429a      	cmp	r2, r3
 800d048:	d920      	bls.n	800d08c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d04a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	4413      	add	r3, r2
 800d050:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	f003 0307 	and.w	r3, r3, #7
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d00b      	beq.n	800d074 <pvPortMalloc+0xfc>
	__asm volatile
 800d05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d060:	f383 8811 	msr	BASEPRI, r3
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	f3bf 8f4f 	dsb	sy
 800d06c:	613b      	str	r3, [r7, #16]
}
 800d06e:	bf00      	nop
 800d070:	bf00      	nop
 800d072:	e7fd      	b.n	800d070 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d076:	685a      	ldr	r2, [r3, #4]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	1ad2      	subs	r2, r2, r3
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d086:	69b8      	ldr	r0, [r7, #24]
 800d088:	f000 f8fc 	bl	800d284 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d08c:	4b1b      	ldr	r3, [pc, #108]	@ (800d0fc <pvPortMalloc+0x184>)
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	1ad3      	subs	r3, r2, r3
 800d096:	4a19      	ldr	r2, [pc, #100]	@ (800d0fc <pvPortMalloc+0x184>)
 800d098:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d09a:	4b18      	ldr	r3, [pc, #96]	@ (800d0fc <pvPortMalloc+0x184>)
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	4b19      	ldr	r3, [pc, #100]	@ (800d104 <pvPortMalloc+0x18c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d203      	bcs.n	800d0ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0a6:	4b15      	ldr	r3, [pc, #84]	@ (800d0fc <pvPortMalloc+0x184>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a16      	ldr	r2, [pc, #88]	@ (800d104 <pvPortMalloc+0x18c>)
 800d0ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b0:	685a      	ldr	r2, [r3, #4]
 800d0b2:	4b11      	ldr	r3, [pc, #68]	@ (800d0f8 <pvPortMalloc+0x180>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	431a      	orrs	r2, r3
 800d0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0be:	2200      	movs	r2, #0
 800d0c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0c2:	f7ff fa51 	bl	800c568 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	f003 0307 	and.w	r3, r3, #7
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00b      	beq.n	800d0e8 <pvPortMalloc+0x170>
	__asm volatile
 800d0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d4:	f383 8811 	msr	BASEPRI, r3
 800d0d8:	f3bf 8f6f 	isb	sy
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	60fb      	str	r3, [r7, #12]
}
 800d0e2:	bf00      	nop
 800d0e4:	bf00      	nop
 800d0e6:	e7fd      	b.n	800d0e4 <pvPortMalloc+0x16c>
	return pvReturn;
 800d0e8:	69fb      	ldr	r3, [r7, #28]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3728      	adds	r7, #40	@ 0x28
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	200019f0 	.word	0x200019f0
 800d0f8:	200019fc 	.word	0x200019fc
 800d0fc:	200019f4 	.word	0x200019f4
 800d100:	200019e8 	.word	0x200019e8
 800d104:	200019f8 	.word	0x200019f8

0800d108 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d04a      	beq.n	800d1b0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d11a:	2308      	movs	r3, #8
 800d11c:	425b      	negs	r3, r3
 800d11e:	697a      	ldr	r2, [r7, #20]
 800d120:	4413      	add	r3, r2
 800d122:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	685a      	ldr	r2, [r3, #4]
 800d12c:	4b22      	ldr	r3, [pc, #136]	@ (800d1b8 <vPortFree+0xb0>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4013      	ands	r3, r2
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10b      	bne.n	800d14e <vPortFree+0x46>
	__asm volatile
 800d136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d13a:	f383 8811 	msr	BASEPRI, r3
 800d13e:	f3bf 8f6f 	isb	sy
 800d142:	f3bf 8f4f 	dsb	sy
 800d146:	60fb      	str	r3, [r7, #12]
}
 800d148:	bf00      	nop
 800d14a:	bf00      	nop
 800d14c:	e7fd      	b.n	800d14a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d00b      	beq.n	800d16e <vPortFree+0x66>
	__asm volatile
 800d156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d15a:	f383 8811 	msr	BASEPRI, r3
 800d15e:	f3bf 8f6f 	isb	sy
 800d162:	f3bf 8f4f 	dsb	sy
 800d166:	60bb      	str	r3, [r7, #8]
}
 800d168:	bf00      	nop
 800d16a:	bf00      	nop
 800d16c:	e7fd      	b.n	800d16a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	4b11      	ldr	r3, [pc, #68]	@ (800d1b8 <vPortFree+0xb0>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4013      	ands	r3, r2
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d019      	beq.n	800d1b0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d115      	bne.n	800d1b0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	685a      	ldr	r2, [r3, #4]
 800d188:	4b0b      	ldr	r3, [pc, #44]	@ (800d1b8 <vPortFree+0xb0>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	43db      	mvns	r3, r3
 800d18e:	401a      	ands	r2, r3
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d194:	f7ff f9da 	bl	800c54c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	685a      	ldr	r2, [r3, #4]
 800d19c:	4b07      	ldr	r3, [pc, #28]	@ (800d1bc <vPortFree+0xb4>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	4a06      	ldr	r2, [pc, #24]	@ (800d1bc <vPortFree+0xb4>)
 800d1a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1a6:	6938      	ldr	r0, [r7, #16]
 800d1a8:	f000 f86c 	bl	800d284 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d1ac:	f7ff f9dc 	bl	800c568 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1b0:	bf00      	nop
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	200019fc 	.word	0x200019fc
 800d1bc:	200019f4 	.word	0x200019f4

0800d1c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800d1ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1cc:	4b27      	ldr	r3, [pc, #156]	@ (800d26c <prvHeapInit+0xac>)
 800d1ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f003 0307 	and.w	r3, r3, #7
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00c      	beq.n	800d1f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	3307      	adds	r3, #7
 800d1de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f023 0307 	bic.w	r3, r3, #7
 800d1e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	1ad3      	subs	r3, r2, r3
 800d1ee:	4a1f      	ldr	r2, [pc, #124]	@ (800d26c <prvHeapInit+0xac>)
 800d1f0:	4413      	add	r3, r2
 800d1f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1f8:	4a1d      	ldr	r2, [pc, #116]	@ (800d270 <prvHeapInit+0xb0>)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d1fe:	4b1c      	ldr	r3, [pc, #112]	@ (800d270 <prvHeapInit+0xb0>)
 800d200:	2200      	movs	r2, #0
 800d202:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	68ba      	ldr	r2, [r7, #8]
 800d208:	4413      	add	r3, r2
 800d20a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d20c:	2208      	movs	r2, #8
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	1a9b      	subs	r3, r3, r2
 800d212:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f023 0307 	bic.w	r3, r3, #7
 800d21a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	4a15      	ldr	r2, [pc, #84]	@ (800d274 <prvHeapInit+0xb4>)
 800d220:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d222:	4b14      	ldr	r3, [pc, #80]	@ (800d274 <prvHeapInit+0xb4>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2200      	movs	r2, #0
 800d228:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d22a:	4b12      	ldr	r3, [pc, #72]	@ (800d274 <prvHeapInit+0xb4>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	2200      	movs	r2, #0
 800d230:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	1ad2      	subs	r2, r2, r3
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d240:	4b0c      	ldr	r3, [pc, #48]	@ (800d274 <prvHeapInit+0xb4>)
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	4a0a      	ldr	r2, [pc, #40]	@ (800d278 <prvHeapInit+0xb8>)
 800d24e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	4a09      	ldr	r2, [pc, #36]	@ (800d27c <prvHeapInit+0xbc>)
 800d256:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d258:	4b09      	ldr	r3, [pc, #36]	@ (800d280 <prvHeapInit+0xc0>)
 800d25a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d25e:	601a      	str	r2, [r3, #0]
}
 800d260:	bf00      	nop
 800d262:	3714      	adds	r7, #20
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	20000de8 	.word	0x20000de8
 800d270:	200019e8 	.word	0x200019e8
 800d274:	200019f0 	.word	0x200019f0
 800d278:	200019f8 	.word	0x200019f8
 800d27c:	200019f4 	.word	0x200019f4
 800d280:	200019fc 	.word	0x200019fc

0800d284 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d284:	b480      	push	{r7}
 800d286:	b085      	sub	sp, #20
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d28c:	4b28      	ldr	r3, [pc, #160]	@ (800d330 <prvInsertBlockIntoFreeList+0xac>)
 800d28e:	60fb      	str	r3, [r7, #12]
 800d290:	e002      	b.n	800d298 <prvInsertBlockIntoFreeList+0x14>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	60fb      	str	r3, [r7, #12]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d8f7      	bhi.n	800d292 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	68ba      	ldr	r2, [r7, #8]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d108      	bne.n	800d2c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	685a      	ldr	r2, [r3, #4]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	441a      	add	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	441a      	add	r2, r3
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d118      	bne.n	800d30c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	4b15      	ldr	r3, [pc, #84]	@ (800d334 <prvInsertBlockIntoFreeList+0xb0>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d00d      	beq.n	800d302 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	685a      	ldr	r2, [r3, #4]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	441a      	add	r2, r3
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	681a      	ldr	r2, [r3, #0]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	601a      	str	r2, [r3, #0]
 800d300:	e008      	b.n	800d314 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d302:	4b0c      	ldr	r3, [pc, #48]	@ (800d334 <prvInsertBlockIntoFreeList+0xb0>)
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	e003      	b.n	800d314 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d002      	beq.n	800d322 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d322:	bf00      	nop
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	200019e8 	.word	0x200019e8
 800d334:	200019f0 	.word	0x200019f0

0800d338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d33c:	2200      	movs	r2, #0
 800d33e:	4912      	ldr	r1, [pc, #72]	@ (800d388 <MX_USB_DEVICE_Init+0x50>)
 800d340:	4812      	ldr	r0, [pc, #72]	@ (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d342:	f7fd fd0b 	bl	800ad5c <USBD_Init>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d34c:	f7f3 fe0c 	bl	8000f68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d350:	490f      	ldr	r1, [pc, #60]	@ (800d390 <MX_USB_DEVICE_Init+0x58>)
 800d352:	480e      	ldr	r0, [pc, #56]	@ (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d354:	f7fd fd2d 	bl	800adb2 <USBD_RegisterClass>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d35e:	f7f3 fe03 	bl	8000f68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d362:	490c      	ldr	r1, [pc, #48]	@ (800d394 <MX_USB_DEVICE_Init+0x5c>)
 800d364:	4809      	ldr	r0, [pc, #36]	@ (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d366:	f7fd fc5b 	bl	800ac20 <USBD_CDC_RegisterInterface>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d370:	f7f3 fdfa 	bl	8000f68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d374:	4805      	ldr	r0, [pc, #20]	@ (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d376:	f7fd fd36 	bl	800ade6 <USBD_Start>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d380:	f7f3 fdf2 	bl	8000f68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d384:	bf00      	nop
 800d386:	bd80      	pop	{r7, pc}
 800d388:	2000013c 	.word	0x2000013c
 800d38c:	20001a00 	.word	0x20001a00
 800d390:	20000024 	.word	0x20000024
 800d394:	2000012c 	.word	0x2000012c

0800d398 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d39c:	2200      	movs	r2, #0
 800d39e:	4905      	ldr	r1, [pc, #20]	@ (800d3b4 <CDC_Init_FS+0x1c>)
 800d3a0:	4805      	ldr	r0, [pc, #20]	@ (800d3b8 <CDC_Init_FS+0x20>)
 800d3a2:	f7fd fc54 	bl	800ac4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d3a6:	4905      	ldr	r1, [pc, #20]	@ (800d3bc <CDC_Init_FS+0x24>)
 800d3a8:	4803      	ldr	r0, [pc, #12]	@ (800d3b8 <CDC_Init_FS+0x20>)
 800d3aa:	f7fd fc6a 	bl	800ac82 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d3ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	200020c4 	.word	0x200020c4
 800d3b8:	20001a00 	.word	0x20001a00
 800d3bc:	20001cc4 	.word	0x20001cc4

0800d3c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d3c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	6039      	str	r1, [r7, #0]
 800d3da:	71fb      	strb	r3, [r7, #7]
 800d3dc:	4613      	mov	r3, r2
 800d3de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d3e0:	79fb      	ldrb	r3, [r7, #7]
 800d3e2:	2b23      	cmp	r3, #35	@ 0x23
 800d3e4:	d84a      	bhi.n	800d47c <CDC_Control_FS+0xac>
 800d3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3ec <CDC_Control_FS+0x1c>)
 800d3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ec:	0800d47d 	.word	0x0800d47d
 800d3f0:	0800d47d 	.word	0x0800d47d
 800d3f4:	0800d47d 	.word	0x0800d47d
 800d3f8:	0800d47d 	.word	0x0800d47d
 800d3fc:	0800d47d 	.word	0x0800d47d
 800d400:	0800d47d 	.word	0x0800d47d
 800d404:	0800d47d 	.word	0x0800d47d
 800d408:	0800d47d 	.word	0x0800d47d
 800d40c:	0800d47d 	.word	0x0800d47d
 800d410:	0800d47d 	.word	0x0800d47d
 800d414:	0800d47d 	.word	0x0800d47d
 800d418:	0800d47d 	.word	0x0800d47d
 800d41c:	0800d47d 	.word	0x0800d47d
 800d420:	0800d47d 	.word	0x0800d47d
 800d424:	0800d47d 	.word	0x0800d47d
 800d428:	0800d47d 	.word	0x0800d47d
 800d42c:	0800d47d 	.word	0x0800d47d
 800d430:	0800d47d 	.word	0x0800d47d
 800d434:	0800d47d 	.word	0x0800d47d
 800d438:	0800d47d 	.word	0x0800d47d
 800d43c:	0800d47d 	.word	0x0800d47d
 800d440:	0800d47d 	.word	0x0800d47d
 800d444:	0800d47d 	.word	0x0800d47d
 800d448:	0800d47d 	.word	0x0800d47d
 800d44c:	0800d47d 	.word	0x0800d47d
 800d450:	0800d47d 	.word	0x0800d47d
 800d454:	0800d47d 	.word	0x0800d47d
 800d458:	0800d47d 	.word	0x0800d47d
 800d45c:	0800d47d 	.word	0x0800d47d
 800d460:	0800d47d 	.word	0x0800d47d
 800d464:	0800d47d 	.word	0x0800d47d
 800d468:	0800d47d 	.word	0x0800d47d
 800d46c:	0800d47d 	.word	0x0800d47d
 800d470:	0800d47d 	.word	0x0800d47d
 800d474:	0800d47d 	.word	0x0800d47d
 800d478:	0800d47d 	.word	0x0800d47d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d47c:	bf00      	nop
  }

  return (USBD_OK);
 800d47e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d480:	4618      	mov	r0, r3
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d496:	6879      	ldr	r1, [r7, #4]
 800d498:	4805      	ldr	r0, [pc, #20]	@ (800d4b0 <CDC_Receive_FS+0x24>)
 800d49a:	f7fd fbf2 	bl	800ac82 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d49e:	4804      	ldr	r0, [pc, #16]	@ (800d4b0 <CDC_Receive_FS+0x24>)
 800d4a0:	f7fd fc32 	bl	800ad08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d4a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	20001a00 	.word	0x20001a00

0800d4b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	460b      	mov	r3, r1
 800d4be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d4c4:	4b0d      	ldr	r3, [pc, #52]	@ (800d4fc <CDC_Transmit_FS+0x48>)
 800d4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d001      	beq.n	800d4da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e00b      	b.n	800d4f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d4da:	887b      	ldrh	r3, [r7, #2]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	6879      	ldr	r1, [r7, #4]
 800d4e0:	4806      	ldr	r0, [pc, #24]	@ (800d4fc <CDC_Transmit_FS+0x48>)
 800d4e2:	f7fd fbb4 	bl	800ac4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d4e6:	4805      	ldr	r0, [pc, #20]	@ (800d4fc <CDC_Transmit_FS+0x48>)
 800d4e8:	f7fd fbdf 	bl	800acaa <USBD_CDC_TransmitPacket>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20001a00 	.word	0x20001a00

0800d500 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	4603      	mov	r3, r0
 800d508:	6039      	str	r1, [r7, #0]
 800d50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	2212      	movs	r2, #18
 800d510:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d512:	4b03      	ldr	r3, [pc, #12]	@ (800d520 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d514:	4618      	mov	r0, r3
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	20000158 	.word	0x20000158

0800d524 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4603      	mov	r3, r0
 800d52c:	6039      	str	r1, [r7, #0]
 800d52e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	2204      	movs	r2, #4
 800d534:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d536:	4b03      	ldr	r3, [pc, #12]	@ (800d544 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d538:	4618      	mov	r0, r3
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr
 800d544:	2000016c 	.word	0x2000016c

0800d548 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	6039      	str	r1, [r7, #0]
 800d552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d554:	79fb      	ldrb	r3, [r7, #7]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d105      	bne.n	800d566 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d55a:	683a      	ldr	r2, [r7, #0]
 800d55c:	4907      	ldr	r1, [pc, #28]	@ (800d57c <USBD_FS_ProductStrDescriptor+0x34>)
 800d55e:	4808      	ldr	r0, [pc, #32]	@ (800d580 <USBD_FS_ProductStrDescriptor+0x38>)
 800d560:	f7fe fbbc 	bl	800bcdc <USBD_GetString>
 800d564:	e004      	b.n	800d570 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d566:	683a      	ldr	r2, [r7, #0]
 800d568:	4904      	ldr	r1, [pc, #16]	@ (800d57c <USBD_FS_ProductStrDescriptor+0x34>)
 800d56a:	4805      	ldr	r0, [pc, #20]	@ (800d580 <USBD_FS_ProductStrDescriptor+0x38>)
 800d56c:	f7fe fbb6 	bl	800bcdc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d570:	4b02      	ldr	r3, [pc, #8]	@ (800d57c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d572:	4618      	mov	r0, r3
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	200024c4 	.word	0x200024c4
 800d580:	0800ddfc 	.word	0x0800ddfc

0800d584 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	4603      	mov	r3, r0
 800d58c:	6039      	str	r1, [r7, #0]
 800d58e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d590:	683a      	ldr	r2, [r7, #0]
 800d592:	4904      	ldr	r1, [pc, #16]	@ (800d5a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d594:	4804      	ldr	r0, [pc, #16]	@ (800d5a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d596:	f7fe fba1 	bl	800bcdc <USBD_GetString>
  return USBD_StrDesc;
 800d59a:	4b02      	ldr	r3, [pc, #8]	@ (800d5a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3708      	adds	r7, #8
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	200024c4 	.word	0x200024c4
 800d5a8:	0800de14 	.word	0x0800de14

0800d5ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	6039      	str	r1, [r7, #0]
 800d5b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	221a      	movs	r2, #26
 800d5bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d5be:	f000 f843 	bl	800d648 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d5c2:	4b02      	ldr	r3, [pc, #8]	@ (800d5cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	20000170 	.word	0x20000170

0800d5d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	6039      	str	r1, [r7, #0]
 800d5da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d105      	bne.n	800d5ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5e2:	683a      	ldr	r2, [r7, #0]
 800d5e4:	4907      	ldr	r1, [pc, #28]	@ (800d604 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5e6:	4808      	ldr	r0, [pc, #32]	@ (800d608 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5e8:	f7fe fb78 	bl	800bcdc <USBD_GetString>
 800d5ec:	e004      	b.n	800d5f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5ee:	683a      	ldr	r2, [r7, #0]
 800d5f0:	4904      	ldr	r1, [pc, #16]	@ (800d604 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5f2:	4805      	ldr	r0, [pc, #20]	@ (800d608 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5f4:	f7fe fb72 	bl	800bcdc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5f8:	4b02      	ldr	r3, [pc, #8]	@ (800d604 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	200024c4 	.word	0x200024c4
 800d608:	0800de28 	.word	0x0800de28

0800d60c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	4603      	mov	r3, r0
 800d614:	6039      	str	r1, [r7, #0]
 800d616:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d618:	79fb      	ldrb	r3, [r7, #7]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d105      	bne.n	800d62a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d61e:	683a      	ldr	r2, [r7, #0]
 800d620:	4907      	ldr	r1, [pc, #28]	@ (800d640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d622:	4808      	ldr	r0, [pc, #32]	@ (800d644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d624:	f7fe fb5a 	bl	800bcdc <USBD_GetString>
 800d628:	e004      	b.n	800d634 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d62a:	683a      	ldr	r2, [r7, #0]
 800d62c:	4904      	ldr	r1, [pc, #16]	@ (800d640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d62e:	4805      	ldr	r0, [pc, #20]	@ (800d644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d630:	f7fe fb54 	bl	800bcdc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d634:	4b02      	ldr	r3, [pc, #8]	@ (800d640 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d636:	4618      	mov	r0, r3
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	200024c4 	.word	0x200024c4
 800d644:	0800de34 	.word	0x0800de34

0800d648 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d64e:	4b0f      	ldr	r3, [pc, #60]	@ (800d68c <Get_SerialNum+0x44>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d654:	4b0e      	ldr	r3, [pc, #56]	@ (800d690 <Get_SerialNum+0x48>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d65a:	4b0e      	ldr	r3, [pc, #56]	@ (800d694 <Get_SerialNum+0x4c>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4413      	add	r3, r2
 800d666:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d009      	beq.n	800d682 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d66e:	2208      	movs	r2, #8
 800d670:	4909      	ldr	r1, [pc, #36]	@ (800d698 <Get_SerialNum+0x50>)
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f000 f814 	bl	800d6a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d678:	2204      	movs	r2, #4
 800d67a:	4908      	ldr	r1, [pc, #32]	@ (800d69c <Get_SerialNum+0x54>)
 800d67c:	68b8      	ldr	r0, [r7, #8]
 800d67e:	f000 f80f 	bl	800d6a0 <IntToUnicode>
  }
}
 800d682:	bf00      	nop
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	1ffff7ac 	.word	0x1ffff7ac
 800d690:	1ffff7b0 	.word	0x1ffff7b0
 800d694:	1ffff7b4 	.word	0x1ffff7b4
 800d698:	20000172 	.word	0x20000172
 800d69c:	20000182 	.word	0x20000182

0800d6a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b087      	sub	sp, #28
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	75fb      	strb	r3, [r7, #23]
 800d6b6:	e027      	b.n	800d708 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	0f1b      	lsrs	r3, r3, #28
 800d6bc:	2b09      	cmp	r3, #9
 800d6be:	d80b      	bhi.n	800d6d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	0f1b      	lsrs	r3, r3, #28
 800d6c4:	b2da      	uxtb	r2, r3
 800d6c6:	7dfb      	ldrb	r3, [r7, #23]
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	440b      	add	r3, r1
 800d6d0:	3230      	adds	r2, #48	@ 0x30
 800d6d2:	b2d2      	uxtb	r2, r2
 800d6d4:	701a      	strb	r2, [r3, #0]
 800d6d6:	e00a      	b.n	800d6ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	0f1b      	lsrs	r3, r3, #28
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	7dfb      	ldrb	r3, [r7, #23]
 800d6e0:	005b      	lsls	r3, r3, #1
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	440b      	add	r3, r1
 800d6e8:	3237      	adds	r2, #55	@ 0x37
 800d6ea:	b2d2      	uxtb	r2, r2
 800d6ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	011b      	lsls	r3, r3, #4
 800d6f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	68ba      	ldr	r2, [r7, #8]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	2200      	movs	r2, #0
 800d700:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	3301      	adds	r3, #1
 800d706:	75fb      	strb	r3, [r7, #23]
 800d708:	7dfa      	ldrb	r2, [r7, #23]
 800d70a:	79fb      	ldrb	r3, [r7, #7]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d3d3      	bcc.n	800d6b8 <IntToUnicode+0x18>
  }
}
 800d710:	bf00      	nop
 800d712:	bf00      	nop
 800d714:	371c      	adds	r7, #28
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
	...

0800d720 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b08a      	sub	sp, #40	@ 0x28
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d728:	f107 0314 	add.w	r3, r7, #20
 800d72c:	2200      	movs	r2, #0
 800d72e:	601a      	str	r2, [r3, #0]
 800d730:	605a      	str	r2, [r3, #4]
 800d732:	609a      	str	r2, [r3, #8]
 800d734:	60da      	str	r2, [r3, #12]
 800d736:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a1c      	ldr	r2, [pc, #112]	@ (800d7b0 <HAL_PCD_MspInit+0x90>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d131      	bne.n	800d7a6 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d742:	4b1c      	ldr	r3, [pc, #112]	@ (800d7b4 <HAL_PCD_MspInit+0x94>)
 800d744:	695b      	ldr	r3, [r3, #20]
 800d746:	4a1b      	ldr	r2, [pc, #108]	@ (800d7b4 <HAL_PCD_MspInit+0x94>)
 800d748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d74c:	6153      	str	r3, [r2, #20]
 800d74e:	4b19      	ldr	r3, [pc, #100]	@ (800d7b4 <HAL_PCD_MspInit+0x94>)
 800d750:	695b      	ldr	r3, [r3, #20]
 800d752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d756:	613b      	str	r3, [r7, #16]
 800d758:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d75a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d75e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d760:	2302      	movs	r3, #2
 800d762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d764:	2300      	movs	r3, #0
 800d766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d768:	2303      	movs	r3, #3
 800d76a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800d76c:	230e      	movs	r3, #14
 800d76e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d770:	f107 0314 	add.w	r3, r7, #20
 800d774:	4619      	mov	r1, r3
 800d776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d77a:	f7f5 ff25 	bl	80035c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d77e:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b4 <HAL_PCD_MspInit+0x94>)
 800d780:	69db      	ldr	r3, [r3, #28]
 800d782:	4a0c      	ldr	r2, [pc, #48]	@ (800d7b4 <HAL_PCD_MspInit+0x94>)
 800d784:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d788:	61d3      	str	r3, [r2, #28]
 800d78a:	4b0a      	ldr	r3, [pc, #40]	@ (800d7b4 <HAL_PCD_MspInit+0x94>)
 800d78c:	69db      	ldr	r3, [r3, #28]
 800d78e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800d796:	2200      	movs	r2, #0
 800d798:	2105      	movs	r1, #5
 800d79a:	2014      	movs	r0, #20
 800d79c:	f7f5 fdc4 	bl	8003328 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800d7a0:	2014      	movs	r0, #20
 800d7a2:	f7f5 fddd 	bl	8003360 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d7a6:	bf00      	nop
 800d7a8:	3728      	adds	r7, #40	@ 0x28
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	40005c00 	.word	0x40005c00
 800d7b4:	40021000 	.word	0x40021000

0800d7b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	f7fd fb52 	bl	800ae78 <USBD_LL_SetupStage>
}
 800d7d4:	bf00      	nop
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800d7ee:	78fa      	ldrb	r2, [r7, #3]
 800d7f0:	6879      	ldr	r1, [r7, #4]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	4413      	add	r3, r2
 800d7f8:	00db      	lsls	r3, r3, #3
 800d7fa:	440b      	add	r3, r1
 800d7fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	78fb      	ldrb	r3, [r7, #3]
 800d804:	4619      	mov	r1, r3
 800d806:	f7fd fb84 	bl	800af12 <USBD_LL_DataOutStage>
}
 800d80a:	bf00      	nop
 800d80c:	3708      	adds	r7, #8
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b082      	sub	sp, #8
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
 800d81a:	460b      	mov	r3, r1
 800d81c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 800d824:	78fa      	ldrb	r2, [r7, #3]
 800d826:	6879      	ldr	r1, [r7, #4]
 800d828:	4613      	mov	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	00db      	lsls	r3, r3, #3
 800d830:	440b      	add	r3, r1
 800d832:	3324      	adds	r3, #36	@ 0x24
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	78fb      	ldrb	r3, [r7, #3]
 800d838:	4619      	mov	r1, r3
 800d83a:	f7fd fbdb 	bl	800aff4 <USBD_LL_DataInStage>
}
 800d83e:	bf00      	nop
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b082      	sub	sp, #8
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d854:	4618      	mov	r0, r3
 800d856:	f7fd fcee 	bl	800b236 <USBD_LL_SOF>
}
 800d85a:	bf00      	nop
 800d85c:	3708      	adds	r7, #8
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}

0800d862 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d862:	b580      	push	{r7, lr}
 800d864:	b084      	sub	sp, #16
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d86a:	2301      	movs	r3, #1
 800d86c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	795b      	ldrb	r3, [r3, #5]
 800d872:	2b02      	cmp	r3, #2
 800d874:	d001      	beq.n	800d87a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d876:	f7f3 fb77 	bl	8000f68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d880:	7bfa      	ldrb	r2, [r7, #15]
 800d882:	4611      	mov	r1, r2
 800d884:	4618      	mov	r0, r3
 800d886:	f7fd fc9b 	bl	800b1c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d890:	4618      	mov	r0, r3
 800d892:	f7fd fc54 	bl	800b13e <USBD_LL_Reset>
}
 800d896:	bf00      	nop
 800d898:	3710      	adds	r7, #16
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
	...

0800d8a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fd fc96 	bl	800b1e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	7a5b      	ldrb	r3, [r3, #9]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d005      	beq.n	800d8c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d8bc:	4b04      	ldr	r3, [pc, #16]	@ (800d8d0 <HAL_PCD_SuspendCallback+0x30>)
 800d8be:	691b      	ldr	r3, [r3, #16]
 800d8c0:	4a03      	ldr	r2, [pc, #12]	@ (800d8d0 <HAL_PCD_SuspendCallback+0x30>)
 800d8c2:	f043 0306 	orr.w	r3, r3, #6
 800d8c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d8c8:	bf00      	nop
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	e000ed00 	.word	0xe000ed00

0800d8d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fd fc91 	bl	800b20a <USBD_LL_Resume>
}
 800d8e8:	bf00      	nop
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d8f8:	4a28      	ldr	r2, [pc, #160]	@ (800d99c <USBD_LL_Init+0xac>)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4a26      	ldr	r2, [pc, #152]	@ (800d99c <USBD_LL_Init+0xac>)
 800d904:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d908:	4b24      	ldr	r3, [pc, #144]	@ (800d99c <USBD_LL_Init+0xac>)
 800d90a:	4a25      	ldr	r2, [pc, #148]	@ (800d9a0 <USBD_LL_Init+0xb0>)
 800d90c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d90e:	4b23      	ldr	r3, [pc, #140]	@ (800d99c <USBD_LL_Init+0xac>)
 800d910:	2208      	movs	r2, #8
 800d912:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d914:	4b21      	ldr	r3, [pc, #132]	@ (800d99c <USBD_LL_Init+0xac>)
 800d916:	2202      	movs	r2, #2
 800d918:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d91a:	4b20      	ldr	r3, [pc, #128]	@ (800d99c <USBD_LL_Init+0xac>)
 800d91c:	2202      	movs	r2, #2
 800d91e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d920:	4b1e      	ldr	r3, [pc, #120]	@ (800d99c <USBD_LL_Init+0xac>)
 800d922:	2200      	movs	r2, #0
 800d924:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d926:	4b1d      	ldr	r3, [pc, #116]	@ (800d99c <USBD_LL_Init+0xac>)
 800d928:	2200      	movs	r2, #0
 800d92a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d92c:	481b      	ldr	r0, [pc, #108]	@ (800d99c <USBD_LL_Init+0xac>)
 800d92e:	f7f6 fcaa 	bl	8004286 <HAL_PCD_Init>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d001      	beq.n	800d93c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d938:	f7f3 fb16 	bl	8000f68 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d942:	2318      	movs	r3, #24
 800d944:	2200      	movs	r2, #0
 800d946:	2100      	movs	r1, #0
 800d948:	f7f8 f923 	bl	8005b92 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d952:	2358      	movs	r3, #88	@ 0x58
 800d954:	2200      	movs	r2, #0
 800d956:	2180      	movs	r1, #128	@ 0x80
 800d958:	f7f8 f91b 	bl	8005b92 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d962:	23c0      	movs	r3, #192	@ 0xc0
 800d964:	2200      	movs	r2, #0
 800d966:	2181      	movs	r1, #129	@ 0x81
 800d968:	f7f8 f913 	bl	8005b92 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d972:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d976:	2200      	movs	r2, #0
 800d978:	2101      	movs	r1, #1
 800d97a:	f7f8 f90a 	bl	8005b92 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800d984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d988:	2200      	movs	r2, #0
 800d98a:	2182      	movs	r1, #130	@ 0x82
 800d98c:	f7f8 f901 	bl	8005b92 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	3708      	adds	r7, #8
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	200026c4 	.word	0x200026c4
 800d9a0:	40005c00 	.word	0x40005c00

0800d9a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7f6 fd2a 	bl	8004414 <HAL_PCD_Start>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9c4:	7bfb      	ldrb	r3, [r7, #15]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f000 f952 	bl	800dc70 <USBD_Get_USB_Status>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3710      	adds	r7, #16
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b084      	sub	sp, #16
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	4608      	mov	r0, r1
 800d9e4:	4611      	mov	r1, r2
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	70fb      	strb	r3, [r7, #3]
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	70bb      	strb	r3, [r7, #2]
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800da02:	78bb      	ldrb	r3, [r7, #2]
 800da04:	883a      	ldrh	r2, [r7, #0]
 800da06:	78f9      	ldrb	r1, [r7, #3]
 800da08:	f7f6 fe22 	bl	8004650 <HAL_PCD_EP_Open>
 800da0c:	4603      	mov	r3, r0
 800da0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da10:	7bfb      	ldrb	r3, [r7, #15]
 800da12:	4618      	mov	r0, r3
 800da14:	f000 f92c 	bl	800dc70 <USBD_Get_USB_Status>
 800da18:	4603      	mov	r3, r0
 800da1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b084      	sub	sp, #16
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	460b      	mov	r3, r1
 800da30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da36:	2300      	movs	r3, #0
 800da38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800da40:	78fa      	ldrb	r2, [r7, #3]
 800da42:	4611      	mov	r1, r2
 800da44:	4618      	mov	r0, r3
 800da46:	f7f6 fe60 	bl	800470a <HAL_PCD_EP_Close>
 800da4a:	4603      	mov	r3, r0
 800da4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da4e:	7bfb      	ldrb	r3, [r7, #15]
 800da50:	4618      	mov	r0, r3
 800da52:	f000 f90d 	bl	800dc70 <USBD_Get_USB_Status>
 800da56:	4603      	mov	r3, r0
 800da58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	460b      	mov	r3, r1
 800da6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da70:	2300      	movs	r3, #0
 800da72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da74:	2300      	movs	r3, #0
 800da76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800da7e:	78fa      	ldrb	r2, [r7, #3]
 800da80:	4611      	mov	r1, r2
 800da82:	4618      	mov	r0, r3
 800da84:	f7f6 ff09 	bl	800489a <HAL_PCD_EP_SetStall>
 800da88:	4603      	mov	r3, r0
 800da8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
 800da8e:	4618      	mov	r0, r3
 800da90:	f000 f8ee 	bl	800dc70 <USBD_Get_USB_Status>
 800da94:	4603      	mov	r3, r0
 800da96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da98:	7bbb      	ldrb	r3, [r7, #14]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b084      	sub	sp, #16
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	460b      	mov	r3, r1
 800daac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dabc:	78fa      	ldrb	r2, [r7, #3]
 800dabe:	4611      	mov	r1, r2
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7f6 ff3c 	bl	800493e <HAL_PCD_EP_ClrStall>
 800dac6:	4603      	mov	r3, r0
 800dac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daca:	7bfb      	ldrb	r3, [r7, #15]
 800dacc:	4618      	mov	r0, r3
 800dace:	f000 f8cf 	bl	800dc70 <USBD_Get_USB_Status>
 800dad2:	4603      	mov	r3, r0
 800dad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dad6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3710      	adds	r7, #16
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800daf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800daf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	da0b      	bge.n	800db14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dafc:	78fb      	ldrb	r3, [r7, #3]
 800dafe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db02:	68f9      	ldr	r1, [r7, #12]
 800db04:	4613      	mov	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4413      	add	r3, r2
 800db0a:	00db      	lsls	r3, r3, #3
 800db0c:	440b      	add	r3, r1
 800db0e:	3312      	adds	r3, #18
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	e00b      	b.n	800db2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db14:	78fb      	ldrb	r3, [r7, #3]
 800db16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db1a:	68f9      	ldr	r1, [r7, #12]
 800db1c:	4613      	mov	r3, r2
 800db1e:	009b      	lsls	r3, r3, #2
 800db20:	4413      	add	r3, r2
 800db22:	00db      	lsls	r3, r3, #3
 800db24:	440b      	add	r3, r1
 800db26:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800db2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3714      	adds	r7, #20
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db44:	2300      	movs	r3, #0
 800db46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db48:	2300      	movs	r3, #0
 800db4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800db52:	78fa      	ldrb	r2, [r7, #3]
 800db54:	4611      	mov	r1, r2
 800db56:	4618      	mov	r0, r3
 800db58:	f7f6 fd56 	bl	8004608 <HAL_PCD_SetAddress>
 800db5c:	4603      	mov	r3, r0
 800db5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db60:	7bfb      	ldrb	r3, [r7, #15]
 800db62:	4618      	mov	r0, r3
 800db64:	f000 f884 	bl	800dc70 <USBD_Get_USB_Status>
 800db68:	4603      	mov	r3, r0
 800db6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b086      	sub	sp, #24
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	60f8      	str	r0, [r7, #12]
 800db7e:	607a      	str	r2, [r7, #4]
 800db80:	461a      	mov	r2, r3
 800db82:	460b      	mov	r3, r1
 800db84:	72fb      	strb	r3, [r7, #11]
 800db86:	4613      	mov	r3, r2
 800db88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db8e:	2300      	movs	r3, #0
 800db90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800db98:	893b      	ldrh	r3, [r7, #8]
 800db9a:	7af9      	ldrb	r1, [r7, #11]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	f7f6 fe45 	bl	800482c <HAL_PCD_EP_Transmit>
 800dba2:	4603      	mov	r3, r0
 800dba4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dba6:	7dfb      	ldrb	r3, [r7, #23]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 f861 	bl	800dc70 <USBD_Get_USB_Status>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbb2:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3718      	adds	r7, #24
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	607a      	str	r2, [r7, #4]
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	460b      	mov	r3, r1
 800dbca:	72fb      	strb	r3, [r7, #11]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800dbde:	893b      	ldrh	r3, [r7, #8]
 800dbe0:	7af9      	ldrb	r1, [r7, #11]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	f7f6 fdd9 	bl	800479a <HAL_PCD_EP_Receive>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbec:	7dfb      	ldrb	r3, [r7, #23]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f000 f83e 	bl	800dc70 <USBD_Get_USB_Status>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3718      	adds	r7, #24
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b082      	sub	sp, #8
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800dc14:	78fa      	ldrb	r2, [r7, #3]
 800dc16:	4611      	mov	r1, r2
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7f6 fdef 	bl	80047fc <HAL_PCD_EP_GetRxCount>
 800dc1e:	4603      	mov	r3, r0
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc30:	4b03      	ldr	r3, [pc, #12]	@ (800dc40 <USBD_static_malloc+0x18>)
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	370c      	adds	r7, #12
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	20002998 	.word	0x20002998

0800dc44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b083      	sub	sp, #12
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]

}
 800dc4c:	bf00      	nop
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr

0800dc58 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	460b      	mov	r3, r1
 800dc62:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800dc64:	bf00      	nop
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr

0800dc70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	4603      	mov	r3, r0
 800dc78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc7e:	79fb      	ldrb	r3, [r7, #7]
 800dc80:	2b03      	cmp	r3, #3
 800dc82:	d817      	bhi.n	800dcb4 <USBD_Get_USB_Status+0x44>
 800dc84:	a201      	add	r2, pc, #4	@ (adr r2, 800dc8c <USBD_Get_USB_Status+0x1c>)
 800dc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc8a:	bf00      	nop
 800dc8c:	0800dc9d 	.word	0x0800dc9d
 800dc90:	0800dca3 	.word	0x0800dca3
 800dc94:	0800dca9 	.word	0x0800dca9
 800dc98:	0800dcaf 	.word	0x0800dcaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	73fb      	strb	r3, [r7, #15]
    break;
 800dca0:	e00b      	b.n	800dcba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dca2:	2302      	movs	r3, #2
 800dca4:	73fb      	strb	r3, [r7, #15]
    break;
 800dca6:	e008      	b.n	800dcba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	73fb      	strb	r3, [r7, #15]
    break;
 800dcac:	e005      	b.n	800dcba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcae:	2302      	movs	r3, #2
 800dcb0:	73fb      	strb	r3, [r7, #15]
    break;
 800dcb2:	e002      	b.n	800dcba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dcb4:	2302      	movs	r3, #2
 800dcb6:	73fb      	strb	r3, [r7, #15]
    break;
 800dcb8:	bf00      	nop
  }
  return usb_status;
 800dcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3714      	adds	r7, #20
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr

0800dcc8 <memset>:
 800dcc8:	4402      	add	r2, r0
 800dcca:	4603      	mov	r3, r0
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d100      	bne.n	800dcd2 <memset+0xa>
 800dcd0:	4770      	bx	lr
 800dcd2:	f803 1b01 	strb.w	r1, [r3], #1
 800dcd6:	e7f9      	b.n	800dccc <memset+0x4>

0800dcd8 <__libc_init_array>:
 800dcd8:	b570      	push	{r4, r5, r6, lr}
 800dcda:	4d0d      	ldr	r5, [pc, #52]	@ (800dd10 <__libc_init_array+0x38>)
 800dcdc:	4c0d      	ldr	r4, [pc, #52]	@ (800dd14 <__libc_init_array+0x3c>)
 800dcde:	1b64      	subs	r4, r4, r5
 800dce0:	10a4      	asrs	r4, r4, #2
 800dce2:	2600      	movs	r6, #0
 800dce4:	42a6      	cmp	r6, r4
 800dce6:	d109      	bne.n	800dcfc <__libc_init_array+0x24>
 800dce8:	4d0b      	ldr	r5, [pc, #44]	@ (800dd18 <__libc_init_array+0x40>)
 800dcea:	4c0c      	ldr	r4, [pc, #48]	@ (800dd1c <__libc_init_array+0x44>)
 800dcec:	f000 f818 	bl	800dd20 <_init>
 800dcf0:	1b64      	subs	r4, r4, r5
 800dcf2:	10a4      	asrs	r4, r4, #2
 800dcf4:	2600      	movs	r6, #0
 800dcf6:	42a6      	cmp	r6, r4
 800dcf8:	d105      	bne.n	800dd06 <__libc_init_array+0x2e>
 800dcfa:	bd70      	pop	{r4, r5, r6, pc}
 800dcfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd00:	4798      	blx	r3
 800dd02:	3601      	adds	r6, #1
 800dd04:	e7ee      	b.n	800dce4 <__libc_init_array+0xc>
 800dd06:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd0a:	4798      	blx	r3
 800dd0c:	3601      	adds	r6, #1
 800dd0e:	e7f2      	b.n	800dcf6 <__libc_init_array+0x1e>
 800dd10:	0800e480 	.word	0x0800e480
 800dd14:	0800e480 	.word	0x0800e480
 800dd18:	0800e480 	.word	0x0800e480
 800dd1c:	0800e484 	.word	0x0800e484

0800dd20 <_init>:
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	bf00      	nop
 800dd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd26:	bc08      	pop	{r3}
 800dd28:	469e      	mov	lr, r3
 800dd2a:	4770      	bx	lr

0800dd2c <_fini>:
 800dd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2e:	bf00      	nop
 800dd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd32:	bc08      	pop	{r3}
 800dd34:	469e      	mov	lr, r3
 800dd36:	4770      	bx	lr
