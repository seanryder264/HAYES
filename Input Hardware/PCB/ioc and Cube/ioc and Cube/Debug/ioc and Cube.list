
ioc and Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f00  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08006088  08006088  00007088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c8  080066c8  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  080066c8  080066c8  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066c8  080066c8  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c8  080066c8  000076c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066cc  080066cc  000076cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080066d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000800c  2**0
                  CONTENTS
 10 .bss          00000b7c  2000000c  2000000c  0000800c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b88  20000b88  0000800c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ce2  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003395  00000000  00000000  0001fd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  000230b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e5  00000000  00000000  00024678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b9f  00000000  00000000  0002575d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fe07  00000000  00000000  000462fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c89f2  00000000  00000000  00066103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012eaf5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c84  00000000  00000000  0012eb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  001347bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006070 	.word	0x08006070

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006070 	.word	0x08006070

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f001 fc07 	bl	80019e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f839 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 fc0d 	bl	80009f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 fbc9 	bl	8000970 <MX_DMA_Init>
  MX_ADC3_Init();
 80001de:	f000 f961 	bl	80004a4 <MX_ADC3_Init>
  MX_COMP3_Init();
 80001e2:	f000 fa2f 	bl	8000644 <MX_COMP3_Init>
  MX_COMP4_Init();
 80001e6:	f000 fa5b 	bl	80006a0 <MX_COMP4_Init>
  MX_COMP5_Init();
 80001ea:	f000 fa87 	bl	80006fc <MX_COMP5_Init>
  MX_COMP6_Init();
 80001ee:	f000 fab3 	bl	8000758 <MX_COMP6_Init>
  MX_USB_PCD_Init();
 80001f2:	f000 fb9b 	bl	800092c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80001f6:	f000 f887 	bl	8000308 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001fa:	f000 f8f5 	bl	80003e8 <MX_ADC2_Init>
  MX_ADC4_Init();
 80001fe:	f000 f9c3 	bl	8000588 <MX_ADC4_Init>
  MX_I2C2_Init();
 8000202:	f000 fad7 	bl	80007b4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000206:	f000 fb15 	bl	8000834 <MX_SPI1_Init>
  MX_SPI3_Init();
 800020a:	f000 fb51 	bl	80008b0 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800020e:	f001 f9e7 	bl	80015e0 <ssd1306_Init>
  ssd1306_Fill(White);
 8000212:	2001      	movs	r0, #1
 8000214:	f001 fa4e 	bl	80016b4 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000218:	f001 fa64 	bl	80016e4 <ssd1306_UpdateScreen>

  HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	@ 0x32
 800021e:	f001 fc15 	bl	8001a4c <HAL_Delay>

  ssd1306_SetCursor(10, 20);
 8000222:	2114      	movs	r1, #20
 8000224:	200a      	movs	r0, #10
 8000226:	f001 fb91 	bl	800194c <ssd1306_SetCursor>
  ssd1306_WriteString("HELLO WORLD", Font_6x8, Black);
 800022a:	4b05      	ldr	r3, [pc, #20]	@ (8000240 <main+0x78>)
 800022c:	2200      	movs	r2, #0
 800022e:	9200      	str	r2, [sp, #0]
 8000230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000232:	4804      	ldr	r0, [pc, #16]	@ (8000244 <main+0x7c>)
 8000234:	f001 fb64 	bl	8001900 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000238:	f001 fa54 	bl	80016e4 <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	bf00      	nop
 800023e:	e7fd      	b.n	800023c <main+0x74>
 8000240:	0800669c 	.word	0x0800669c
 8000244:	08006088 	.word	0x08006088

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b09e      	sub	sp, #120	@ 0x78
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000252:	2228      	movs	r2, #40	@ 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f005 fedd 	bl	8006016 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026c:	463b      	mov	r3, r7
 800026e:	223c      	movs	r2, #60	@ 0x3c
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f005 fecf 	bl	8006016 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000278:	2303      	movs	r3, #3
 800027a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800027c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000280:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000282:	2301      	movs	r3, #1
 8000284:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000286:	2301      	movs	r3, #1
 8000288:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028a:	2310      	movs	r3, #16
 800028c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000296:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000298:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800029c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002a2:	4618      	mov	r0, r3
 80002a4:	f003 ff04 	bl	80040b0 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ae:	f000 fc77 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2302      	movs	r3, #2
 80002b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f004 ff2c 	bl	800512c <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002da:	f000 fc61 	bl	8000ba0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C2;
 80002de:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <SystemClock_Config+0xbc>)
 80002e0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80002e2:	2300      	movs	r3, #0
 80002e4:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002e6:	2300      	movs	r3, #0
 80002e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ea:	463b      	mov	r3, r7
 80002ec:	4618      	mov	r0, r3
 80002ee:	f005 f94f 	bl	8005590 <HAL_RCCEx_PeriphCLKConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002f8:	f000 fc52 	bl	8000ba0 <Error_Handler>
  }
}
 80002fc:	bf00      	nop
 80002fe:	3778      	adds	r7, #120	@ 0x78
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	00020040 	.word	0x00020040

08000308 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08a      	sub	sp, #40	@ 0x28
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800030e:	f107 031c 	add.w	r3, r7, #28
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
 8000328:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800032a:	4b2e      	ldr	r3, [pc, #184]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 800032c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000330:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000332:	4b2c      	ldr	r3, [pc, #176]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 8000334:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000338:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800033a:	4b2a      	ldr	r3, [pc, #168]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000340:	4b28      	ldr	r3, [pc, #160]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000346:	4b27      	ldr	r3, [pc, #156]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 8000348:	2200      	movs	r2, #0
 800034a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034c:	4b25      	ldr	r3, [pc, #148]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 800034e:	2200      	movs	r2, #0
 8000350:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000354:	4b23      	ldr	r3, [pc, #140]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 8000356:	2200      	movs	r2, #0
 8000358:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800035a:	4b22      	ldr	r3, [pc, #136]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 800035c:	2201      	movs	r2, #1
 800035e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000360:	4b20      	ldr	r3, [pc, #128]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000366:	4b1f      	ldr	r3, [pc, #124]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 8000368:	2201      	movs	r2, #1
 800036a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800036c:	4b1d      	ldr	r3, [pc, #116]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 800036e:	2200      	movs	r2, #0
 8000370:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000374:	4b1b      	ldr	r3, [pc, #108]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 8000376:	2204      	movs	r2, #4
 8000378:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800037a:	4b1a      	ldr	r3, [pc, #104]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 800037c:	2200      	movs	r2, #0
 800037e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000380:	4b18      	ldr	r3, [pc, #96]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 8000382:	2200      	movs	r2, #0
 8000384:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000386:	4817      	ldr	r0, [pc, #92]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 8000388:	f001 fba2 	bl	8001ad0 <HAL_ADC_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000392:	f000 fc05 	bl	8000ba0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800039a:	f107 031c 	add.w	r3, r7, #28
 800039e:	4619      	mov	r1, r3
 80003a0:	4810      	ldr	r0, [pc, #64]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 80003a2:	f002 fb6d 	bl	8002a80 <HAL_ADCEx_MultiModeConfigChannel>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80003ac:	f000 fbf8 	bl	8000ba0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003b0:	2305      	movs	r3, #5
 80003b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b4:	2301      	movs	r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003b8:	2300      	movs	r3, #0
 80003ba:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	4619      	mov	r1, r3
 80003cc:	4805      	ldr	r0, [pc, #20]	@ (80003e4 <MX_ADC1_Init+0xdc>)
 80003ce:	f002 f86d 	bl	80024ac <HAL_ADC_ConfigChannel>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80003d8:	f000 fbe2 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003dc:	bf00      	nop
 80003de:	3728      	adds	r7, #40	@ 0x28
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000028 	.word	0x20000028

080003e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ee:	463b      	mov	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
 80003fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003fe:	4b27      	ldr	r3, [pc, #156]	@ (800049c <MX_ADC2_Init+0xb4>)
 8000400:	4a27      	ldr	r2, [pc, #156]	@ (80004a0 <MX_ADC2_Init+0xb8>)
 8000402:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000404:	4b25      	ldr	r3, [pc, #148]	@ (800049c <MX_ADC2_Init+0xb4>)
 8000406:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800040a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800040c:	4b23      	ldr	r3, [pc, #140]	@ (800049c <MX_ADC2_Init+0xb4>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000412:	4b22      	ldr	r3, [pc, #136]	@ (800049c <MX_ADC2_Init+0xb4>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000418:	4b20      	ldr	r3, [pc, #128]	@ (800049c <MX_ADC2_Init+0xb4>)
 800041a:	2200      	movs	r2, #0
 800041c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800041e:	4b1f      	ldr	r3, [pc, #124]	@ (800049c <MX_ADC2_Init+0xb4>)
 8000420:	2200      	movs	r2, #0
 8000422:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000426:	4b1d      	ldr	r3, [pc, #116]	@ (800049c <MX_ADC2_Init+0xb4>)
 8000428:	2200      	movs	r2, #0
 800042a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800042c:	4b1b      	ldr	r3, [pc, #108]	@ (800049c <MX_ADC2_Init+0xb4>)
 800042e:	2201      	movs	r2, #1
 8000430:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000432:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <MX_ADC2_Init+0xb4>)
 8000434:	2200      	movs	r2, #0
 8000436:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000438:	4b18      	ldr	r3, [pc, #96]	@ (800049c <MX_ADC2_Init+0xb4>)
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800043e:	4b17      	ldr	r3, [pc, #92]	@ (800049c <MX_ADC2_Init+0xb4>)
 8000440:	2200      	movs	r2, #0
 8000442:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000446:	4b15      	ldr	r3, [pc, #84]	@ (800049c <MX_ADC2_Init+0xb4>)
 8000448:	2204      	movs	r2, #4
 800044a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800044c:	4b13      	ldr	r3, [pc, #76]	@ (800049c <MX_ADC2_Init+0xb4>)
 800044e:	2200      	movs	r2, #0
 8000450:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000452:	4b12      	ldr	r3, [pc, #72]	@ (800049c <MX_ADC2_Init+0xb4>)
 8000454:	2200      	movs	r2, #0
 8000456:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000458:	4810      	ldr	r0, [pc, #64]	@ (800049c <MX_ADC2_Init+0xb4>)
 800045a:	f001 fb39 	bl	8001ad0 <HAL_ADC_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000464:	f000 fb9c 	bl	8000ba0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000468:	2303      	movs	r3, #3
 800046a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046c:	2301      	movs	r3, #1
 800046e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000478:	2300      	movs	r3, #0
 800047a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000480:	463b      	mov	r3, r7
 8000482:	4619      	mov	r1, r3
 8000484:	4805      	ldr	r0, [pc, #20]	@ (800049c <MX_ADC2_Init+0xb4>)
 8000486:	f002 f811 	bl	80024ac <HAL_ADC_ConfigChannel>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000490:	f000 fb86 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000494:	bf00      	nop
 8000496:	3718      	adds	r7, #24
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000078 	.word	0x20000078
 80004a0:	50000100 	.word	0x50000100

080004a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08a      	sub	sp, #40	@ 0x28
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004aa:	f107 031c 	add.w	r3, r7, #28
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]
 80004c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80004c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000580 <MX_ADC3_Init+0xdc>)
 80004c8:	4a2e      	ldr	r2, [pc, #184]	@ (8000584 <MX_ADC3_Init+0xe0>)
 80004ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000580 <MX_ADC3_Init+0xdc>)
 80004ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004d2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80004d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000580 <MX_ADC3_Init+0xdc>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004da:	4b29      	ldr	r3, [pc, #164]	@ (8000580 <MX_ADC3_Init+0xdc>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80004e0:	4b27      	ldr	r3, [pc, #156]	@ (8000580 <MX_ADC3_Init+0xdc>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80004e6:	4b26      	ldr	r3, [pc, #152]	@ (8000580 <MX_ADC3_Init+0xdc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004ee:	4b24      	ldr	r3, [pc, #144]	@ (8000580 <MX_ADC3_Init+0xdc>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f4:	4b22      	ldr	r3, [pc, #136]	@ (8000580 <MX_ADC3_Init+0xdc>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fa:	4b21      	ldr	r3, [pc, #132]	@ (8000580 <MX_ADC3_Init+0xdc>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000500:	4b1f      	ldr	r3, [pc, #124]	@ (8000580 <MX_ADC3_Init+0xdc>)
 8000502:	2201      	movs	r2, #1
 8000504:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000506:	4b1e      	ldr	r3, [pc, #120]	@ (8000580 <MX_ADC3_Init+0xdc>)
 8000508:	2200      	movs	r2, #0
 800050a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800050e:	4b1c      	ldr	r3, [pc, #112]	@ (8000580 <MX_ADC3_Init+0xdc>)
 8000510:	2204      	movs	r2, #4
 8000512:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000514:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <MX_ADC3_Init+0xdc>)
 8000516:	2200      	movs	r2, #0
 8000518:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800051a:	4b19      	ldr	r3, [pc, #100]	@ (8000580 <MX_ADC3_Init+0xdc>)
 800051c:	2200      	movs	r2, #0
 800051e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000520:	4817      	ldr	r0, [pc, #92]	@ (8000580 <MX_ADC3_Init+0xdc>)
 8000522:	f001 fad5 	bl	8001ad0 <HAL_ADC_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 800052c:	f000 fb38 	bl	8000ba0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000534:	f107 031c 	add.w	r3, r7, #28
 8000538:	4619      	mov	r1, r3
 800053a:	4811      	ldr	r0, [pc, #68]	@ (8000580 <MX_ADC3_Init+0xdc>)
 800053c:	f002 faa0 	bl	8002a80 <HAL_ADCEx_MultiModeConfigChannel>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 8000546:	f000 fb2b 	bl	8000ba0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800054a:	2301      	movs	r3, #1
 800054c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800054e:	2301      	movs	r3, #1
 8000550:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	4619      	mov	r1, r3
 8000566:	4806      	ldr	r0, [pc, #24]	@ (8000580 <MX_ADC3_Init+0xdc>)
 8000568:	f001 ffa0 	bl	80024ac <HAL_ADC_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000572:	f000 fb15 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	3728      	adds	r7, #40	@ 0x28
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000c8 	.word	0x200000c8
 8000584:	50000400 	.word	0x50000400

08000588 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	463b      	mov	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
 800059c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800059e:	4b27      	ldr	r3, [pc, #156]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005a0:	4a27      	ldr	r2, [pc, #156]	@ (8000640 <MX_ADC4_Init+0xb8>)
 80005a2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80005a4:	4b25      	ldr	r3, [pc, #148]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005aa:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80005ac:	4b23      	ldr	r3, [pc, #140]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b2:	4b22      	ldr	r3, [pc, #136]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80005b8:	4b20      	ldr	r3, [pc, #128]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80005be:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c6:	4b1d      	ldr	r3, [pc, #116]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005da:	2201      	movs	r2, #1
 80005dc:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005e8:	2204      	movs	r2, #4
 80005ea:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80005ec:	4b13      	ldr	r3, [pc, #76]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005f2:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80005f8:	4810      	ldr	r0, [pc, #64]	@ (800063c <MX_ADC4_Init+0xb4>)
 80005fa:	f001 fa69 	bl	8001ad0 <HAL_ADC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 8000604:	f000 facc 	bl	8000ba0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000608:	2303      	movs	r3, #3
 800060a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800060c:	2301      	movs	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_ADC4_Init+0xb4>)
 8000626:	f001 ff41 	bl	80024ac <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 8000630:	f000 fab6 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000118 	.word	0x20000118
 8000640:	50000500 	.word	0x50000500

08000644 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8000648:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <MX_COMP3_Init+0x54>)
 800064a:	4a14      	ldr	r2, [pc, #80]	@ (800069c <MX_COMP3_Init+0x58>)
 800064c:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 800064e:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_COMP3_Init+0x54>)
 8000650:	2240      	movs	r2, #64	@ 0x40
 8000652:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000654:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <MX_COMP3_Init+0x54>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_COMP3_Init+0x54>)
 800065c:	227f      	movs	r2, #127	@ 0x7f
 800065e:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000660:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <MX_COMP3_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000666:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <MX_COMP3_Init+0x54>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <MX_COMP3_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  hcomp3.Init.Mode = COMP_MODE_HIGHSPEED;
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <MX_COMP3_Init+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
  hcomp3.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <MX_COMP3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <MX_COMP3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <MX_COMP3_Init+0x54>)
 8000686:	f002 fb53 	bl	8002d30 <HAL_COMP_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_COMP3_Init+0x50>
  {
    Error_Handler();
 8000690:	f000 fa86 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000278 	.word	0x20000278
 800069c:	40010024 	.word	0x40010024

080006a0 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_COMP4_Init+0x54>)
 80006a6:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <MX_COMP4_Init+0x58>)
 80006a8:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <MX_COMP4_Init+0x54>)
 80006ac:	2270      	movs	r2, #112	@ 0x70
 80006ae:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80006b0:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_COMP4_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_NONE;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_COMP4_Init+0x54>)
 80006b8:	227f      	movs	r2, #127	@ 0x7f
 80006ba:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <MX_COMP4_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_COMP4_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <MX_COMP4_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_COMP4_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <MX_COMP4_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_COMP4_Init+0x54>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <MX_COMP4_Init+0x54>)
 80006e2:	f002 fb25 	bl	8002d30 <HAL_COMP_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_COMP4_Init+0x50>
  {
    Error_Handler();
 80006ec:	f000 fa58 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200002a8 	.word	0x200002a8
 80006f8:	40010028 	.word	0x40010028

080006fc <MX_COMP5_Init>:
  * @brief COMP5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP5_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END COMP5_Init 0 */

  /* USER CODE BEGIN COMP5_Init 1 */

  /* USER CODE END COMP5_Init 1 */
  hcomp5.Instance = COMP5;
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <MX_COMP5_Init+0x54>)
 8000702:	4a14      	ldr	r2, [pc, #80]	@ (8000754 <MX_COMP5_Init+0x58>)
 8000704:	601a      	str	r2, [r3, #0]
  hcomp5.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH2;
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_COMP5_Init+0x54>)
 8000708:	2250      	movs	r2, #80	@ 0x50
 800070a:	605a      	str	r2, [r3, #4]
  hcomp5.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 800070c:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_COMP5_Init+0x54>)
 800070e:	2280      	movs	r2, #128	@ 0x80
 8000710:	609a      	str	r2, [r3, #8]
  hcomp5.Init.Output = COMP_OUTPUT_NONE;
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_COMP5_Init+0x54>)
 8000714:	227f      	movs	r2, #127	@ 0x7f
 8000716:	60da      	str	r2, [r3, #12]
  hcomp5.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000718:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <MX_COMP5_Init+0x54>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hcomp5.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_COMP5_Init+0x54>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hcomp5.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <MX_COMP5_Init+0x54>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hcomp5.Init.Mode = COMP_MODE_HIGHSPEED;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_COMP5_Init+0x54>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hcomp5.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_COMP5_Init+0x54>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  hcomp5.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_COMP5_Init+0x54>)
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp5) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_COMP5_Init+0x54>)
 800073e:	f002 faf7 	bl	8002d30 <HAL_COMP_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_COMP5_Init+0x50>
  {
    Error_Handler();
 8000748:	f000 fa2a 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP5_Init 2 */

  /* USER CODE END COMP5_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200002d8 	.word	0x200002d8
 8000754:	4001002c 	.word	0x4001002c

08000758 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <MX_COMP6_Init+0x54>)
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <MX_COMP6_Init+0x58>)
 8000760:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_IO2;
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_COMP6_Init+0x54>)
 8000764:	2270      	movs	r2, #112	@ 0x70
 8000766:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8000768:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_COMP6_Init+0x54>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_NONE;
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_COMP6_Init+0x54>)
 8000770:	227f      	movs	r2, #127	@ 0x7f
 8000772:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000774:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_COMP6_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_COMP6_Init+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_COMP6_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcomp6.Init.Mode = COMP_MODE_HIGHSPEED;
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_COMP6_Init+0x54>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hcomp6.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_COMP6_Init+0x54>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_COMP6_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_COMP6_Init+0x54>)
 800079a:	f002 fac9 	bl	8002d30 <HAL_COMP_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_COMP6_Init+0x50>
  {
    Error_Handler();
 80007a4:	f000 f9fc 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000308 	.word	0x20000308
 80007b0:	40010030 	.word	0x40010030

080007b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	@ (800082c <MX_I2C2_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000830 <MX_I2C2_Init+0x7c>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007c4:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	@ (8000828 <MX_I2C2_Init+0x74>)
 80007f0:	f002 fee2 	bl	80035b8 <HAL_I2C_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007fa:	f000 f9d1 	bl	8000ba0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	@ (8000828 <MX_I2C2_Init+0x74>)
 8000802:	f003 faf7 	bl	8003df4 <HAL_I2CEx_ConfigAnalogFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800080c:	f000 f9c8 	bl	8000ba0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_I2C2_Init+0x74>)
 8000814:	f003 fb39 	bl	8003e8a <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 f9bf 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000338 	.word	0x20000338
 800082c:	40005800 	.word	0x40005800
 8000830:	00201d2b 	.word	0x00201d2b

08000834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_SPI1_Init+0x74>)
 800083a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ac <MX_SPI1_Init+0x78>)
 800083c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_SPI1_Init+0x74>)
 8000840:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800084c:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <MX_SPI1_Init+0x74>)
 800084e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000852:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_SPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085a:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_SPI1_Init+0x74>)
 8000862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000866:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_SPI1_Init+0x74>)
 800086a:	2208      	movs	r2, #8
 800086c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_SPI1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_SPI1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_SPI1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_SPI1_Init+0x74>)
 8000882:	2207      	movs	r2, #7
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_SPI1_Init+0x74>)
 800088e:	2208      	movs	r2, #8
 8000890:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_SPI1_Init+0x74>)
 8000894:	f005 f82c 	bl	80058f0 <HAL_SPI_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800089e:	f000 f97f 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000038c 	.word	0x2000038c
 80008ac:	40013000 	.word	0x40013000

080008b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <MX_SPI3_Init+0x74>)
 80008b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000928 <MX_SPI3_Init+0x78>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_SPI3_Init+0x74>)
 80008bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <MX_SPI3_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008c8:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MX_SPI3_Init+0x74>)
 80008ca:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80008ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d0:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <MX_SPI3_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d6:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <MX_SPI3_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MX_SPI3_Init+0x74>)
 80008de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_SPI3_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_SPI3_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_SPI3_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <MX_SPI3_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008fc:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_SPI3_Init+0x74>)
 80008fe:	2207      	movs	r2, #7
 8000900:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <MX_SPI3_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_SPI3_Init+0x74>)
 800090a:	2208      	movs	r2, #8
 800090c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_SPI3_Init+0x74>)
 8000910:	f004 ffee 	bl	80058f0 <HAL_SPI_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800091a:	f000 f941 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200003f0 	.word	0x200003f0
 8000928:	40003c00 	.word	0x40003c00

0800092c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000930:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <MX_USB_PCD_Init+0x3c>)
 8000932:	4a0e      	ldr	r2, [pc, #56]	@ (800096c <MX_USB_PCD_Init+0x40>)
 8000934:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_USB_PCD_Init+0x3c>)
 8000938:	2208      	movs	r2, #8
 800093a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_USB_PCD_Init+0x3c>)
 800093e:	2202      	movs	r2, #2
 8000940:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_USB_PCD_Init+0x3c>)
 8000944:	2202      	movs	r2, #2
 8000946:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <MX_USB_PCD_Init+0x3c>)
 800094a:	2200      	movs	r2, #0
 800094c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_USB_PCD_Init+0x3c>)
 8000950:	2200      	movs	r2, #0
 8000952:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_USB_PCD_Init+0x3c>)
 8000956:	f003 fae4 	bl	8003f22 <HAL_PCD_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000960:	f000 f91e 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000454 	.word	0x20000454
 800096c:	40005c00 	.word	0x40005c00

08000970 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_DMA_Init+0x80>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	4a1d      	ldr	r2, [pc, #116]	@ (80009f0 <MX_DMA_Init+0x80>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6153      	str	r3, [r2, #20]
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_DMA_Init+0x80>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_DMA_Init+0x80>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	4a17      	ldr	r2, [pc, #92]	@ (80009f0 <MX_DMA_Init+0x80>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6153      	str	r3, [r2, #20]
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <MX_DMA_Init+0x80>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	200b      	movs	r0, #11
 80009ac:	f002 fb22 	bl	8002ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009b0:	200b      	movs	r0, #11
 80009b2:	f002 fb3b 	bl	800302c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2038      	movs	r0, #56	@ 0x38
 80009bc:	f002 fb1a 	bl	8002ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80009c0:	2038      	movs	r0, #56	@ 0x38
 80009c2:	f002 fb33 	bl	800302c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2039      	movs	r0, #57	@ 0x39
 80009cc:	f002 fb12 	bl	8002ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80009d0:	2039      	movs	r0, #57	@ 0x39
 80009d2:	f002 fb2b 	bl	800302c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	203c      	movs	r0, #60	@ 0x3c
 80009dc:	f002 fb0a 	bl	8002ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80009e0:	203c      	movs	r0, #60	@ 0x3c
 80009e2:	f002 fb23 	bl	800302c <HAL_NVIC_EnableIRQ>

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b58      	ldr	r3, [pc, #352]	@ (8000b6c <MX_GPIO_Init+0x178>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a57      	ldr	r2, [pc, #348]	@ (8000b6c <MX_GPIO_Init+0x178>)
 8000a10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b55      	ldr	r3, [pc, #340]	@ (8000b6c <MX_GPIO_Init+0x178>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	4b52      	ldr	r3, [pc, #328]	@ (8000b6c <MX_GPIO_Init+0x178>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a51      	ldr	r2, [pc, #324]	@ (8000b6c <MX_GPIO_Init+0x178>)
 8000a28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a2c:	6153      	str	r3, [r2, #20]
 8000a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8000b6c <MX_GPIO_Init+0x178>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b6c <MX_GPIO_Init+0x178>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a4b      	ldr	r2, [pc, #300]	@ (8000b6c <MX_GPIO_Init+0x178>)
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a44:	6153      	str	r3, [r2, #20]
 8000a46:	4b49      	ldr	r3, [pc, #292]	@ (8000b6c <MX_GPIO_Init+0x178>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b46      	ldr	r3, [pc, #280]	@ (8000b6c <MX_GPIO_Init+0x178>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a45      	ldr	r2, [pc, #276]	@ (8000b6c <MX_GPIO_Init+0x178>)
 8000a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a5c:	6153      	str	r3, [r2, #20]
 8000a5e:	4b43      	ldr	r3, [pc, #268]	@ (8000b6c <MX_GPIO_Init+0x178>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INPUT_COM_GPIO_Port, INPUT_COM_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4840      	ldr	r0, [pc, #256]	@ (8000b70 <MX_GPIO_Init+0x17c>)
 8000a70:	f002 fd8a 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUTPUT_COM_Pin|TP906_Pin|TP907_Pin|MUX_A_Pin
 8000a74:	2200      	movs	r2, #0
 8000a76:	f640 31f1 	movw	r1, #3057	@ 0xbf1
 8000a7a:	483e      	ldr	r0, [pc, #248]	@ (8000b74 <MX_GPIO_Init+0x180>)
 8000a7c:	f002 fd84 	bl	8003588 <HAL_GPIO_WritePin>
                          |MUX_B_Pin|MUX_C_Pin|MUX_INHIBIT_Pin|UI_RCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP908_Pin|TX_SLEEP_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8a:	f002 fd7d 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP909_Pin|PUSH_2_Pin|TX_RCLK_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000a94:	4838      	ldr	r0, [pc, #224]	@ (8000b78 <MX_GPIO_Init+0x184>)
 8000a96:	f002 fd77 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OFFSET_CENTER_Pin OFFSET_RIGHT_Pin OFFSET_UP_Pin SCALE_B_Pin
                           SCALE_A_Pin SCALE_PUSH_Pin */
  GPIO_InitStruct.Pin = OFFSET_CENTER_Pin|OFFSET_RIGHT_Pin|OFFSET_UP_Pin|SCALE_B_Pin
 8000a9a:	f24e 030e 	movw	r3, #57358	@ 0xe00e
 8000a9e:	617b      	str	r3, [r7, #20]
                          |SCALE_A_Pin|SCALE_PUSH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4831      	ldr	r0, [pc, #196]	@ (8000b74 <MX_GPIO_Init+0x180>)
 8000ab0:	f002 fbf0 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_COM_Pin */
  GPIO_InitStruct.Pin = INPUT_COM_Pin;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INPUT_COM_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4829      	ldr	r0, [pc, #164]	@ (8000b70 <MX_GPIO_Init+0x17c>)
 8000acc:	f002 fbe2 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_COM_Pin TP906_Pin TP907_Pin MUX_A_Pin
                           MUX_B_Pin MUX_C_Pin MUX_INHIBIT_Pin UI_RCLK_Pin */
  GPIO_InitStruct.Pin = OUTPUT_COM_Pin|TP906_Pin|TP907_Pin|MUX_A_Pin
 8000ad0:	f640 33f1 	movw	r3, #3057	@ 0xbf1
 8000ad4:	617b      	str	r3, [r7, #20]
                          |MUX_B_Pin|MUX_C_Pin|MUX_INHIBIT_Pin|UI_RCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4822      	ldr	r0, [pc, #136]	@ (8000b74 <MX_GPIO_Init+0x180>)
 8000aea:	f002 fbd3 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP908_Pin TX_SLEEP_Pin */
  GPIO_InitStruct.Pin = TP908_Pin|TX_SLEEP_Pin;
 8000aee:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0a:	f002 fbc3 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP909_Pin PUSH_2_Pin TX_RCLK_Pin */
  GPIO_InitStruct.Pin = TP909_Pin|PUSH_2_Pin|TX_RCLK_Pin;
 8000b0e:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4814      	ldr	r0, [pc, #80]	@ (8000b78 <MX_GPIO_Init+0x184>)
 8000b28:	f002 fbb4 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_1_Pin */
  GPIO_InitStruct.Pin = PUSH_1_Pin;
 8000b2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_1_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b44:	f002 fba6 	bl	8003294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUSH_3_Pin OFFSET_UPB8_Pin OFFSET_DOWN_Pin */
  GPIO_InitStruct.Pin = PUSH_3_Pin|OFFSET_UPB8_Pin|OFFSET_DOWN_Pin;
 8000b48:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4806      	ldr	r0, [pc, #24]	@ (8000b78 <MX_GPIO_Init+0x184>)
 8000b5e:	f002 fb99 	bl	8003294 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	@ 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	48001400 	.word	0x48001400
 8000b74:	48000800 	.word	0x48000800
 8000b78:	48000400 	.word	0x48000400

08000b7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d101      	bne.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8e:	f000 ff3d 	bl	8001a0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40012c00 	.word	0x40012c00

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <Error_Handler+0x8>

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6193      	str	r3, [r2, #24]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd4:	61d3      	str	r3, [r2, #28]
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b090      	sub	sp, #64	@ 0x40
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c14:	d15e      	bne.n	8000cd4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c16:	4b94      	ldr	r3, [pc, #592]	@ (8000e68 <HAL_ADC_MspInit+0x274>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	4a92      	ldr	r2, [pc, #584]	@ (8000e68 <HAL_ADC_MspInit+0x274>)
 8000c1e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c20:	4b91      	ldr	r3, [pc, #580]	@ (8000e68 <HAL_ADC_MspInit+0x274>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d10b      	bne.n	8000c40 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c28:	4b90      	ldr	r3, [pc, #576]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	4a8f      	ldr	r2, [pc, #572]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c32:	6153      	str	r3, [r2, #20]
 8000c34:	4b8d      	ldr	r3, [pc, #564]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c40:	4b8a      	ldr	r3, [pc, #552]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	4a89      	ldr	r2, [pc, #548]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000c46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c4a:	6153      	str	r3, [r2, #20]
 8000c4c:	4b87      	ldr	r3, [pc, #540]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = RX1_ADC_Pin;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX1_ADC_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4881      	ldr	r0, [pc, #516]	@ (8000e70 <HAL_ADC_MspInit+0x27c>)
 8000c6c:	f002 fb12 	bl	8003294 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c70:	4b80      	ldr	r3, [pc, #512]	@ (8000e74 <HAL_ADC_MspInit+0x280>)
 8000c72:	4a81      	ldr	r2, [pc, #516]	@ (8000e78 <HAL_ADC_MspInit+0x284>)
 8000c74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c76:	4b7f      	ldr	r3, [pc, #508]	@ (8000e74 <HAL_ADC_MspInit+0x280>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7c:	4b7d      	ldr	r3, [pc, #500]	@ (8000e74 <HAL_ADC_MspInit+0x280>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	4b7c      	ldr	r3, [pc, #496]	@ (8000e74 <HAL_ADC_MspInit+0x280>)
 8000c84:	2280      	movs	r2, #128	@ 0x80
 8000c86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c88:	4b7a      	ldr	r3, [pc, #488]	@ (8000e74 <HAL_ADC_MspInit+0x280>)
 8000c8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c90:	4b78      	ldr	r3, [pc, #480]	@ (8000e74 <HAL_ADC_MspInit+0x280>)
 8000c92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c98:	4b76      	ldr	r3, [pc, #472]	@ (8000e74 <HAL_ADC_MspInit+0x280>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c9e:	4b75      	ldr	r3, [pc, #468]	@ (8000e74 <HAL_ADC_MspInit+0x280>)
 8000ca0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ca4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ca6:	4873      	ldr	r0, [pc, #460]	@ (8000e74 <HAL_ADC_MspInit+0x280>)
 8000ca8:	f002 f9ce 	bl	8003048 <HAL_DMA_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000cb2:	f7ff ff75 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8000e74 <HAL_ADC_MspInit+0x280>)
 8000cba:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cbc:	4a6d      	ldr	r2, [pc, #436]	@ (8000e74 <HAL_ADC_MspInit+0x280>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2012      	movs	r0, #18
 8000cc8:	f002 f994 	bl	8002ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ccc:	2012      	movs	r0, #18
 8000cce:	f002 f9ad 	bl	800302c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000cd2:	e147      	b.n	8000f64 <HAL_ADC_MspInit+0x370>
  else if(hadc->Instance==ADC2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a68      	ldr	r2, [pc, #416]	@ (8000e7c <HAL_ADC_MspInit+0x288>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d15f      	bne.n	8000d9e <HAL_ADC_MspInit+0x1aa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cde:	4b62      	ldr	r3, [pc, #392]	@ (8000e68 <HAL_ADC_MspInit+0x274>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a60      	ldr	r2, [pc, #384]	@ (8000e68 <HAL_ADC_MspInit+0x274>)
 8000ce6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ce8:	4b5f      	ldr	r3, [pc, #380]	@ (8000e68 <HAL_ADC_MspInit+0x274>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d10b      	bne.n	8000d08 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cf0:	4b5e      	ldr	r3, [pc, #376]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	4a5d      	ldr	r2, [pc, #372]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cfa:	6153      	str	r3, [r2, #20]
 8000cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d04:	623b      	str	r3, [r7, #32]
 8000d06:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b58      	ldr	r3, [pc, #352]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	4a57      	ldr	r2, [pc, #348]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d12:	6153      	str	r3, [r2, #20]
 8000d14:	4b55      	ldr	r3, [pc, #340]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = RX3_ADC_Pin;
 8000d20:	2340      	movs	r3, #64	@ 0x40
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d24:	2303      	movs	r3, #3
 8000d26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX3_ADC_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d36:	f002 faad 	bl	8003294 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8000d3a:	4b51      	ldr	r3, [pc, #324]	@ (8000e80 <HAL_ADC_MspInit+0x28c>)
 8000d3c:	4a51      	ldr	r2, [pc, #324]	@ (8000e84 <HAL_ADC_MspInit+0x290>)
 8000d3e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d40:	4b4f      	ldr	r3, [pc, #316]	@ (8000e80 <HAL_ADC_MspInit+0x28c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d46:	4b4e      	ldr	r3, [pc, #312]	@ (8000e80 <HAL_ADC_MspInit+0x28c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8000e80 <HAL_ADC_MspInit+0x28c>)
 8000d4e:	2280      	movs	r2, #128	@ 0x80
 8000d50:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d52:	4b4b      	ldr	r3, [pc, #300]	@ (8000e80 <HAL_ADC_MspInit+0x28c>)
 8000d54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d58:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d5a:	4b49      	ldr	r3, [pc, #292]	@ (8000e80 <HAL_ADC_MspInit+0x28c>)
 8000d5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d60:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000d62:	4b47      	ldr	r3, [pc, #284]	@ (8000e80 <HAL_ADC_MspInit+0x28c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d68:	4b45      	ldr	r3, [pc, #276]	@ (8000e80 <HAL_ADC_MspInit+0x28c>)
 8000d6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d70:	4843      	ldr	r0, [pc, #268]	@ (8000e80 <HAL_ADC_MspInit+0x28c>)
 8000d72:	f002 f969 	bl	8003048 <HAL_DMA_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 8000d7c:	f7ff ff10 	bl	8000ba0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a3f      	ldr	r2, [pc, #252]	@ (8000e80 <HAL_ADC_MspInit+0x28c>)
 8000d84:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d86:	4a3e      	ldr	r2, [pc, #248]	@ (8000e80 <HAL_ADC_MspInit+0x28c>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2012      	movs	r0, #18
 8000d92:	f002 f92f 	bl	8002ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d96:	2012      	movs	r0, #18
 8000d98:	f002 f948 	bl	800302c <HAL_NVIC_EnableIRQ>
}
 8000d9c:	e0e2      	b.n	8000f64 <HAL_ADC_MspInit+0x370>
  else if(hadc->Instance==ADC3)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a39      	ldr	r2, [pc, #228]	@ (8000e88 <HAL_ADC_MspInit+0x294>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d179      	bne.n	8000e9c <HAL_ADC_MspInit+0x2a8>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000da8:	4b38      	ldr	r3, [pc, #224]	@ (8000e8c <HAL_ADC_MspInit+0x298>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a37      	ldr	r2, [pc, #220]	@ (8000e8c <HAL_ADC_MspInit+0x298>)
 8000db0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000db2:	4b36      	ldr	r3, [pc, #216]	@ (8000e8c <HAL_ADC_MspInit+0x298>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d10b      	bne.n	8000dd2 <HAL_ADC_MspInit+0x1de>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000dba:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000dc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b29      	ldr	r3, [pc, #164]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b26      	ldr	r3, [pc, #152]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a25      	ldr	r2, [pc, #148]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000dd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ddc:	6153      	str	r3, [r2, #20]
 8000dde:	4b23      	ldr	r3, [pc, #140]	@ (8000e6c <HAL_ADC_MspInit+0x278>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RX2_ADC_Pin;
 8000dea:	2302      	movs	r3, #2
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dee:	2303      	movs	r3, #3
 8000df0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX2_ADC_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4824      	ldr	r0, [pc, #144]	@ (8000e90 <HAL_ADC_MspInit+0x29c>)
 8000dfe:	f002 fa49 	bl	8003294 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8000e02:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <HAL_ADC_MspInit+0x2a0>)
 8000e04:	4a24      	ldr	r2, [pc, #144]	@ (8000e98 <HAL_ADC_MspInit+0x2a4>)
 8000e06:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <HAL_ADC_MspInit+0x2a0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <HAL_ADC_MspInit+0x2a0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <HAL_ADC_MspInit+0x2a0>)
 8000e16:	2280      	movs	r2, #128	@ 0x80
 8000e18:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <HAL_ADC_MspInit+0x2a0>)
 8000e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e20:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <HAL_ADC_MspInit+0x2a0>)
 8000e24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e28:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <HAL_ADC_MspInit+0x2a0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e30:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <HAL_ADC_MspInit+0x2a0>)
 8000e32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000e38:	4816      	ldr	r0, [pc, #88]	@ (8000e94 <HAL_ADC_MspInit+0x2a0>)
 8000e3a:	f002 f905 	bl	8003048 <HAL_DMA_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_ADC_MspInit+0x254>
      Error_Handler();
 8000e44:	f7ff feac 	bl	8000ba0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <HAL_ADC_MspInit+0x2a0>)
 8000e4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e4e:	4a11      	ldr	r2, [pc, #68]	@ (8000e94 <HAL_ADC_MspInit+0x2a0>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	202f      	movs	r0, #47	@ 0x2f
 8000e5a:	f002 f8cb 	bl	8002ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000e5e:	202f      	movs	r0, #47	@ 0x2f
 8000e60:	f002 f8e4 	bl	800302c <HAL_NVIC_EnableIRQ>
}
 8000e64:	e07e      	b.n	8000f64 <HAL_ADC_MspInit+0x370>
 8000e66:	bf00      	nop
 8000e68:	20000728 	.word	0x20000728
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48001400 	.word	0x48001400
 8000e74:	20000168 	.word	0x20000168
 8000e78:	40020008 	.word	0x40020008
 8000e7c:	50000100 	.word	0x50000100
 8000e80:	200001ac 	.word	0x200001ac
 8000e84:	40020408 	.word	0x40020408
 8000e88:	50000400 	.word	0x50000400
 8000e8c:	2000072c 	.word	0x2000072c
 8000e90:	48000400 	.word	0x48000400
 8000e94:	200001f0 	.word	0x200001f0
 8000e98:	40020458 	.word	0x40020458
  else if(hadc->Instance==ADC4)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a32      	ldr	r2, [pc, #200]	@ (8000f6c <HAL_ADC_MspInit+0x378>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d15e      	bne.n	8000f64 <HAL_ADC_MspInit+0x370>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000ea6:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <HAL_ADC_MspInit+0x37c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a30      	ldr	r2, [pc, #192]	@ (8000f70 <HAL_ADC_MspInit+0x37c>)
 8000eae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f70 <HAL_ADC_MspInit+0x37c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d10b      	bne.n	8000ed0 <HAL_ADC_MspInit+0x2dc>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f74 <HAL_ADC_MspInit+0x380>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8000f74 <HAL_ADC_MspInit+0x380>)
 8000ebe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000ec2:	6153      	str	r3, [r2, #20]
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f74 <HAL_ADC_MspInit+0x380>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <HAL_ADC_MspInit+0x380>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	4a27      	ldr	r2, [pc, #156]	@ (8000f74 <HAL_ADC_MspInit+0x380>)
 8000ed6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eda:	6153      	str	r3, [r2, #20]
 8000edc:	4b25      	ldr	r3, [pc, #148]	@ (8000f74 <HAL_ADC_MspInit+0x380>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX4_ADC_Pin;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX4_ADC_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efa:	4619      	mov	r1, r3
 8000efc:	481e      	ldr	r0, [pc, #120]	@ (8000f78 <HAL_ADC_MspInit+0x384>)
 8000efe:	f002 f9c9 	bl	8003294 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <HAL_ADC_MspInit+0x388>)
 8000f04:	4a1e      	ldr	r2, [pc, #120]	@ (8000f80 <HAL_ADC_MspInit+0x38c>)
 8000f06:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f08:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <HAL_ADC_MspInit+0x388>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <HAL_ADC_MspInit+0x388>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000f14:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <HAL_ADC_MspInit+0x388>)
 8000f16:	2280      	movs	r2, #128	@ 0x80
 8000f18:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_ADC_MspInit+0x388>)
 8000f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f20:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f22:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <HAL_ADC_MspInit+0x388>)
 8000f24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f28:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <HAL_ADC_MspInit+0x388>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_ADC_MspInit+0x388>)
 8000f32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000f38:	4810      	ldr	r0, [pc, #64]	@ (8000f7c <HAL_ADC_MspInit+0x388>)
 8000f3a:	f002 f885 	bl	8003048 <HAL_DMA_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_ADC_MspInit+0x354>
      Error_Handler();
 8000f44:	f7ff fe2c 	bl	8000ba0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f7c <HAL_ADC_MspInit+0x388>)
 8000f4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <HAL_ADC_MspInit+0x388>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	203d      	movs	r0, #61	@ 0x3d
 8000f5a:	f002 f84b 	bl	8002ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000f5e:	203d      	movs	r0, #61	@ 0x3d
 8000f60:	f002 f864 	bl	800302c <HAL_NVIC_EnableIRQ>
}
 8000f64:	bf00      	nop
 8000f66:	3740      	adds	r7, #64	@ 0x40
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	50000500 	.word	0x50000500
 8000f70:	2000072c 	.word	0x2000072c
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	20000234 	.word	0x20000234
 8000f80:	4002041c 	.word	0x4002041c

08000f84 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08e      	sub	sp, #56	@ 0x38
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP3)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a56      	ldr	r2, [pc, #344]	@ (80010fc <HAL_COMP_MspInit+0x178>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d132      	bne.n	800100c <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP3_MspInit 0 */

  /* USER CODE END COMP3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b56      	ldr	r3, [pc, #344]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a55      	ldr	r2, [pc, #340]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b53      	ldr	r3, [pc, #332]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fba:	623b      	str	r3, [r7, #32]
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b50      	ldr	r3, [pc, #320]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	4a4f      	ldr	r2, [pc, #316]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8000fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fc8:	6153      	str	r3, [r2, #20]
 8000fca:	4b4d      	ldr	r3, [pc, #308]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
    /**COMP3 GPIO Configuration
    PA4     ------> COMP3_INM
    PB14     ------> COMP3_INP
    */
    GPIO_InitStruct.Pin = RX1_COMP_Pin;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RX1_COMP_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f002 f952 	bl	8003294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VREFB14_Pin;
 8000ff0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VREFB14_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001002:	4619      	mov	r1, r3
 8001004:	483f      	ldr	r0, [pc, #252]	@ (8001104 <HAL_COMP_MspInit+0x180>)
 8001006:	f002 f945 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 800100a:	e073      	b.n	80010f4 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP4)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a3d      	ldr	r2, [pc, #244]	@ (8001108 <HAL_COMP_MspInit+0x184>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d118      	bne.n	8001048 <HAL_COMP_MspInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b3a      	ldr	r3, [pc, #232]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a39      	ldr	r2, [pc, #228]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b37      	ldr	r3, [pc, #220]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RX2_COMP_Pin|VREF_Pin;
 800102e:	2305      	movs	r3, #5
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001032:	2303      	movs	r3, #3
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	4830      	ldr	r0, [pc, #192]	@ (8001104 <HAL_COMP_MspInit+0x180>)
 8001042:	f002 f927 	bl	8003294 <HAL_GPIO_Init>
}
 8001046:	e055      	b.n	80010f4 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP5)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a2f      	ldr	r2, [pc, #188]	@ (800110c <HAL_COMP_MspInit+0x188>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d132      	bne.n	80010b8 <HAL_COMP_MspInit+0x134>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b2b      	ldr	r3, [pc, #172]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a2a      	ldr	r2, [pc, #168]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8001058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b28      	ldr	r3, [pc, #160]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a24      	ldr	r2, [pc, #144]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RX3_COMP_Pin;
 8001082:	2320      	movs	r3, #32
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001086:	2303      	movs	r3, #3
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RX3_COMP_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001098:	f002 f8fc 	bl	8003294 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VREFB13_Pin;
 800109c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a2:	2303      	movs	r3, #3
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(VREFB13_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	4814      	ldr	r0, [pc, #80]	@ (8001104 <HAL_COMP_MspInit+0x180>)
 80010b2:	f002 f8ef 	bl	8003294 <HAL_GPIO_Init>
}
 80010b6:	e01d      	b.n	80010f4 <HAL_COMP_MspInit+0x170>
  else if(hcomp->Instance==COMP6)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <HAL_COMP_MspInit+0x18c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d118      	bne.n	80010f4 <HAL_COMP_MspInit+0x170>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <HAL_COMP_MspInit+0x17c>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX4_COMP_Pin|VREFB15_Pin;
 80010da:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e0:	2303      	movs	r3, #3
 80010e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ec:	4619      	mov	r1, r3
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <HAL_COMP_MspInit+0x180>)
 80010f0:	f002 f8d0 	bl	8003294 <HAL_GPIO_Init>
}
 80010f4:	bf00      	nop
 80010f6:	3738      	adds	r7, #56	@ 0x38
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40010024 	.word	0x40010024
 8001100:	40021000 	.word	0x40021000
 8001104:	48000400 	.word	0x48000400
 8001108:	40010028 	.word	0x40010028
 800110c:	4001002c 	.word	0x4001002c
 8001110:	40010030 	.word	0x40010030

08001114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <HAL_I2C_MspInit+0x80>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d129      	bne.n	800118a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <HAL_I2C_MspInit+0x84>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a17      	ldr	r2, [pc, #92]	@ (8001198 <HAL_I2C_MspInit+0x84>)
 800113c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001140:	6153      	str	r3, [r2, #20]
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <HAL_I2C_MspInit+0x84>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 800114e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001154:	2312      	movs	r3, #18
 8001156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001160:	2304      	movs	r3, #4
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116e:	f002 f891 	bl	8003294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <HAL_I2C_MspInit+0x84>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_I2C_MspInit+0x84>)
 8001178:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800117c:	61d3      	str	r3, [r2, #28]
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_I2C_MspInit+0x84>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	@ 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40005800 	.word	0x40005800
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	@ 0x30
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001274 <HAL_SPI_MspInit+0xd8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d128      	bne.n	8001210 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011be:	4b2e      	ldr	r3, [pc, #184]	@ (8001278 <HAL_SPI_MspInit+0xdc>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001278 <HAL_SPI_MspInit+0xdc>)
 80011c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011c8:	6193      	str	r3, [r2, #24]
 80011ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001278 <HAL_SPI_MspInit+0xdc>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <HAL_SPI_MspInit+0xdc>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	4a27      	ldr	r2, [pc, #156]	@ (8001278 <HAL_SPI_MspInit+0xdc>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <HAL_SPI_MspInit+0xdc>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TX_CLK_Pin|TX_MOSI_Pin;
 80011ee:	2328      	movs	r3, #40	@ 0x28
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011fe:	2305      	movs	r3, #5
 8001200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	481c      	ldr	r0, [pc, #112]	@ (800127c <HAL_SPI_MspInit+0xe0>)
 800120a:	f002 f843 	bl	8003294 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800120e:	e02d      	b.n	800126c <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a1a      	ldr	r2, [pc, #104]	@ (8001280 <HAL_SPI_MspInit+0xe4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d128      	bne.n	800126c <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <HAL_SPI_MspInit+0xdc>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a16      	ldr	r2, [pc, #88]	@ (8001278 <HAL_SPI_MspInit+0xdc>)
 8001220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <HAL_SPI_MspInit+0xdc>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <HAL_SPI_MspInit+0xdc>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4a10      	ldr	r2, [pc, #64]	@ (8001278 <HAL_SPI_MspInit+0xdc>)
 8001238:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800123c:	6153      	str	r3, [r2, #20]
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <HAL_SPI_MspInit+0xdc>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UI_SCK_Pin|UI_MOSI_Pin;
 800124a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800124e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800125c:	2306      	movs	r3, #6
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	4807      	ldr	r0, [pc, #28]	@ (8001284 <HAL_SPI_MspInit+0xe8>)
 8001268:	f002 f814 	bl	8003294 <HAL_GPIO_Init>
}
 800126c:	bf00      	nop
 800126e:	3730      	adds	r7, #48	@ 0x30
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40013000 	.word	0x40013000
 8001278:	40021000 	.word	0x40021000
 800127c:	48000400 	.word	0x48000400
 8001280:	40003c00 	.word	0x40003c00
 8001284:	48000800 	.word	0x48000800

08001288 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a18      	ldr	r2, [pc, #96]	@ (8001308 <HAL_PCD_MspInit+0x80>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d129      	bne.n	80012fe <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <HAL_PCD_MspInit+0x84>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	4a17      	ldr	r2, [pc, #92]	@ (800130c <HAL_PCD_MspInit+0x84>)
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	6153      	str	r3, [r2, #20]
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_PCD_MspInit+0x84>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80012d4:	230e      	movs	r3, #14
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e2:	f001 ffd7 	bl	8003294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_PCD_MspInit+0x84>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a08      	ldr	r2, [pc, #32]	@ (800130c <HAL_PCD_MspInit+0x84>)
 80012ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <HAL_PCD_MspInit+0x84>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	@ 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40005c00 	.word	0x40005c00
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08c      	sub	sp, #48	@ 0x30
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001320:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <HAL_InitTick+0xcc>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a2d      	ldr	r2, [pc, #180]	@ (80013dc <HAL_InitTick+0xcc>)
 8001326:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <HAL_InitTick+0xcc>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001338:	f107 020c 	add.w	r2, r7, #12
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f004 f8f2 	bl	800552c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001348:	f004 f8ce 	bl	80054e8 <HAL_RCC_GetPCLK2Freq>
 800134c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800134e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001350:	4a23      	ldr	r2, [pc, #140]	@ (80013e0 <HAL_InitTick+0xd0>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	0c9b      	lsrs	r3, r3, #18
 8001358:	3b01      	subs	r3, #1
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800135c:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <HAL_InitTick+0xd4>)
 800135e:	4a22      	ldr	r2, [pc, #136]	@ (80013e8 <HAL_InitTick+0xd8>)
 8001360:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <HAL_InitTick+0xd4>)
 8001364:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001368:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800136a:	4a1e      	ldr	r2, [pc, #120]	@ (80013e4 <HAL_InitTick+0xd4>)
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <HAL_InitTick+0xd4>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <HAL_InitTick+0xd4>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <HAL_InitTick+0xd4>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001382:	4818      	ldr	r0, [pc, #96]	@ (80013e4 <HAL_InitTick+0xd4>)
 8001384:	f004 fb5f 	bl	8005a46 <HAL_TIM_Base_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800138e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001392:	2b00      	cmp	r3, #0
 8001394:	d11b      	bne.n	80013ce <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001396:	4813      	ldr	r0, [pc, #76]	@ (80013e4 <HAL_InitTick+0xd4>)
 8001398:	f004 fbb6 	bl	8005b08 <HAL_TIM_Base_Start_IT>
 800139c:	4603      	mov	r3, r0
 800139e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80013a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d111      	bne.n	80013ce <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013aa:	2019      	movs	r0, #25
 80013ac:	f001 fe3e 	bl	800302c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	d808      	bhi.n	80013c8 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80013b6:	2200      	movs	r2, #0
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	2019      	movs	r0, #25
 80013bc:	f001 fe1a 	bl	8002ff4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c0:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <HAL_InitTick+0xdc>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e002      	b.n	80013ce <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3730      	adds	r7, #48	@ 0x30
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	431bde83 	.word	0x431bde83
 80013e4:	20000730 	.word	0x20000730
 80013e8:	40012c00 	.word	0x40012c00
 80013ec:	20000004 	.word	0x20000004

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <NMI_Handler+0x4>

080013f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <MemManage_Handler+0x4>

08001408 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <UsageFault_Handler+0x4>

08001418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <DMA1_Channel1_IRQHandler+0x10>)
 8001456:	f001 fe3e 	bl	80030d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000168 	.word	0x20000168

08001464 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <ADC1_2_IRQHandler+0x14>)
 800146a:	f000 fd11 	bl	8001e90 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800146e:	4803      	ldr	r0, [pc, #12]	@ (800147c <ADC1_2_IRQHandler+0x18>)
 8001470:	f000 fd0e 	bl	8001e90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000028 	.word	0x20000028
 800147c:	20000078 	.word	0x20000078

08001480 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001484:	4802      	ldr	r0, [pc, #8]	@ (8001490 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001486:	f004 fba9 	bl	8005bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000730 	.word	0x20000730

08001494 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <ADC3_IRQHandler+0x10>)
 800149a:	f000 fcf9 	bl	8001e90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200000c8 	.word	0x200000c8

080014a8 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <DMA2_Channel1_IRQHandler+0x10>)
 80014ae:	f001 fe12 	bl	80030d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200001ac 	.word	0x200001ac

080014bc <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80014c0:	4802      	ldr	r0, [pc, #8]	@ (80014cc <DMA2_Channel2_IRQHandler+0x10>)
 80014c2:	f001 fe08 	bl	80030d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000234 	.word	0x20000234

080014d0 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <DMA2_Channel5_IRQHandler+0x10>)
 80014d6:	f001 fdfe 	bl	80030d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200001f0 	.word	0x200001f0

080014e4 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 interrupt.
  */
void ADC4_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <ADC4_IRQHandler+0x10>)
 80014ea:	f000 fcd1 	bl	8001e90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000118 	.word	0x20000118

080014f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <SystemInit+0x20>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <SystemInit+0x20>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001554 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001520:	f7ff ffea 	bl	80014f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <LoopForever+0x6>)
  ldr r1, =_edata
 8001526:	490d      	ldr	r1, [pc, #52]	@ (800155c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001528:	4a0d      	ldr	r2, [pc, #52]	@ (8001560 <LoopForever+0xe>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800153c:	4c0a      	ldr	r4, [pc, #40]	@ (8001568 <LoopForever+0x16>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154a:	f004 fd6d 	bl	8006028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800154e:	f7fe fe3b 	bl	80001c8 <main>

08001552 <LoopForever>:

LoopForever:
    b LoopForever
 8001552:	e7fe      	b.n	8001552 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001554:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001560:	080066d0 	.word	0x080066d0
  ldr r2, =_sbss
 8001564:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001568:	20000b88 	.word	0x20000b88

0800156c <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800156c:	e7fe      	b.n	800156c <CAN_RX1_IRQHandler>

0800156e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af04      	add	r7, sp, #16
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2301      	movs	r3, #1
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	1dfb      	adds	r3, r7, #7
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2301      	movs	r3, #1
 8001596:	2200      	movs	r2, #0
 8001598:	2178      	movs	r1, #120	@ 0x78
 800159a:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <ssd1306_WriteCommand+0x2c>)
 800159c:	f002 f8a8 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000338 	.word	0x20000338

080015ac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af04      	add	r7, sp, #16
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	f04f 32ff 	mov.w	r2, #4294967295
 80015be:	9202      	str	r2, [sp, #8]
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2301      	movs	r3, #1
 80015c8:	2240      	movs	r2, #64	@ 0x40
 80015ca:	2178      	movs	r1, #120	@ 0x78
 80015cc:	4803      	ldr	r0, [pc, #12]	@ (80015dc <ssd1306_WriteData+0x30>)
 80015ce:	f002 f88f 	bl	80036f0 <HAL_I2C_Mem_Write>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000338 	.word	0x20000338

080015e0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80015e4:	f7ff ffc3 	bl	800156e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80015e8:	2064      	movs	r0, #100	@ 0x64
 80015ea:	f000 fa2f 	bl	8001a4c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 f9d8 	bl	80019a4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80015f4:	2020      	movs	r0, #32
 80015f6:	f7ff ffc1 	bl	800157c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff ffbe 	bl	800157c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001600:	20b0      	movs	r0, #176	@ 0xb0
 8001602:	f7ff ffbb 	bl	800157c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8001606:	20c0      	movs	r0, #192	@ 0xc0
 8001608:	f7ff ffb8 	bl	800157c <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ffb5 	bl	800157c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001612:	2010      	movs	r0, #16
 8001614:	f7ff ffb2 	bl	800157c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001618:	2040      	movs	r0, #64	@ 0x40
 800161a:	f7ff ffaf 	bl	800157c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800161e:	20ff      	movs	r0, #255	@ 0xff
 8001620:	f000 f9ac 	bl	800197c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001624:	20a1      	movs	r0, #161	@ 0xa1
 8001626:	f7ff ffa9 	bl	800157c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800162a:	20a6      	movs	r0, #166	@ 0xa6
 800162c:	f7ff ffa6 	bl	800157c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001630:	20a8      	movs	r0, #168	@ 0xa8
 8001632:	f7ff ffa3 	bl	800157c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001636:	203f      	movs	r0, #63	@ 0x3f
 8001638:	f7ff ffa0 	bl	800157c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800163c:	20a4      	movs	r0, #164	@ 0xa4
 800163e:	f7ff ff9d 	bl	800157c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001642:	20d3      	movs	r0, #211	@ 0xd3
 8001644:	f7ff ff9a 	bl	800157c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff ff97 	bl	800157c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800164e:	20d5      	movs	r0, #213	@ 0xd5
 8001650:	f7ff ff94 	bl	800157c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001654:	20f0      	movs	r0, #240	@ 0xf0
 8001656:	f7ff ff91 	bl	800157c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800165a:	20d9      	movs	r0, #217	@ 0xd9
 800165c:	f7ff ff8e 	bl	800157c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001660:	2022      	movs	r0, #34	@ 0x22
 8001662:	f7ff ff8b 	bl	800157c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001666:	20da      	movs	r0, #218	@ 0xda
 8001668:	f7ff ff88 	bl	800157c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800166c:	2012      	movs	r0, #18
 800166e:	f7ff ff85 	bl	800157c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001672:	20db      	movs	r0, #219	@ 0xdb
 8001674:	f7ff ff82 	bl	800157c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001678:	2020      	movs	r0, #32
 800167a:	f7ff ff7f 	bl	800157c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800167e:	208d      	movs	r0, #141	@ 0x8d
 8001680:	f7ff ff7c 	bl	800157c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001684:	2014      	movs	r0, #20
 8001686:	f7ff ff79 	bl	800157c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800168a:	2001      	movs	r0, #1
 800168c:	f000 f98a 	bl	80019a4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001690:	2000      	movs	r0, #0
 8001692:	f000 f80f 	bl	80016b4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001696:	f000 f825 	bl	80016e4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800169a:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <ssd1306_Init+0xd0>)
 800169c:	2200      	movs	r2, #0
 800169e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80016a0:	4b03      	ldr	r3, [pc, #12]	@ (80016b0 <ssd1306_Init+0xd0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80016a6:	4b02      	ldr	r3, [pc, #8]	@ (80016b0 <ssd1306_Init+0xd0>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	711a      	strb	r2, [r3, #4]
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000b7c 	.word	0x20000b7c

080016b4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <ssd1306_Fill+0x14>
 80016c4:	2300      	movs	r3, #0
 80016c6:	e000      	b.n	80016ca <ssd1306_Fill+0x16>
 80016c8:	23ff      	movs	r3, #255	@ 0xff
 80016ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ce:	4619      	mov	r1, r3
 80016d0:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <ssd1306_Fill+0x2c>)
 80016d2:	f004 fca0 	bl	8006016 <memset>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000077c 	.word	0x2000077c

080016e4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016ea:	2300      	movs	r3, #0
 80016ec:	71fb      	strb	r3, [r7, #7]
 80016ee:	e016      	b.n	800171e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	3b50      	subs	r3, #80	@ 0x50
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff40 	bl	800157c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff ff3d 	bl	800157c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001702:	2010      	movs	r0, #16
 8001704:	f7ff ff3a 	bl	800157c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	01db      	lsls	r3, r3, #7
 800170c:	4a08      	ldr	r2, [pc, #32]	@ (8001730 <ssd1306_UpdateScreen+0x4c>)
 800170e:	4413      	add	r3, r2
 8001710:	2180      	movs	r1, #128	@ 0x80
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff4a 	bl	80015ac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	3301      	adds	r3, #1
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b07      	cmp	r3, #7
 8001722:	d9e5      	bls.n	80016f0 <ssd1306_UpdateScreen+0xc>
    }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000077c 	.word	0x2000077c

08001734 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	460b      	mov	r3, r1
 8001740:	71bb      	strb	r3, [r7, #6]
 8001742:	4613      	mov	r3, r2
 8001744:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db3d      	blt.n	80017ca <ssd1306_DrawPixel+0x96>
 800174e:	79bb      	ldrb	r3, [r7, #6]
 8001750:	2b3f      	cmp	r3, #63	@ 0x3f
 8001752:	d83a      	bhi.n	80017ca <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001754:	797b      	ldrb	r3, [r7, #5]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d11a      	bne.n	8001790 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800175a:	79fa      	ldrb	r2, [r7, #7]
 800175c:	79bb      	ldrb	r3, [r7, #6]
 800175e:	08db      	lsrs	r3, r3, #3
 8001760:	b2d8      	uxtb	r0, r3
 8001762:	4603      	mov	r3, r0
 8001764:	01db      	lsls	r3, r3, #7
 8001766:	4413      	add	r3, r2
 8001768:	4a1b      	ldr	r2, [pc, #108]	@ (80017d8 <ssd1306_DrawPixel+0xa4>)
 800176a:	5cd3      	ldrb	r3, [r2, r3]
 800176c:	b25a      	sxtb	r2, r3
 800176e:	79bb      	ldrb	r3, [r7, #6]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	2101      	movs	r1, #1
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	b25b      	sxtb	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	b259      	sxtb	r1, r3
 8001780:	79fa      	ldrb	r2, [r7, #7]
 8001782:	4603      	mov	r3, r0
 8001784:	01db      	lsls	r3, r3, #7
 8001786:	4413      	add	r3, r2
 8001788:	b2c9      	uxtb	r1, r1
 800178a:	4a13      	ldr	r2, [pc, #76]	@ (80017d8 <ssd1306_DrawPixel+0xa4>)
 800178c:	54d1      	strb	r1, [r2, r3]
 800178e:	e01d      	b.n	80017cc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001790:	79fa      	ldrb	r2, [r7, #7]
 8001792:	79bb      	ldrb	r3, [r7, #6]
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	b2d8      	uxtb	r0, r3
 8001798:	4603      	mov	r3, r0
 800179a:	01db      	lsls	r3, r3, #7
 800179c:	4413      	add	r3, r2
 800179e:	4a0e      	ldr	r2, [pc, #56]	@ (80017d8 <ssd1306_DrawPixel+0xa4>)
 80017a0:	5cd3      	ldrb	r3, [r2, r3]
 80017a2:	b25a      	sxtb	r2, r3
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	2101      	movs	r1, #1
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	4013      	ands	r3, r2
 80017b8:	b259      	sxtb	r1, r3
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	4603      	mov	r3, r0
 80017be:	01db      	lsls	r3, r3, #7
 80017c0:	4413      	add	r3, r2
 80017c2:	b2c9      	uxtb	r1, r1
 80017c4:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <ssd1306_DrawPixel+0xa4>)
 80017c6:	54d1      	strb	r1, [r2, r3]
 80017c8:	e000      	b.n	80017cc <ssd1306_DrawPixel+0x98>
        return;
 80017ca:	bf00      	nop
    }
}
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	2000077c 	.word	0x2000077c

080017dc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4604      	mov	r4, r0
 80017e4:	4638      	mov	r0, r7
 80017e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80017ea:	4623      	mov	r3, r4
 80017ec:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b1f      	cmp	r3, #31
 80017f2:	d902      	bls.n	80017fa <ssd1306_WriteChar+0x1e>
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	2b7e      	cmp	r3, #126	@ 0x7e
 80017f8:	d901      	bls.n	80017fe <ssd1306_WriteChar+0x22>
        return 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e079      	b.n	80018f2 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <ssd1306_WriteChar+0x34>
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	3b20      	subs	r3, #32
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	e000      	b.n	8001812 <ssd1306_WriteChar+0x36>
 8001810:	783b      	ldrb	r3, [r7, #0]
 8001812:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001814:	4b39      	ldr	r3, [pc, #228]	@ (80018fc <ssd1306_WriteChar+0x120>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	4413      	add	r3, r2
 800181e:	2b80      	cmp	r3, #128	@ 0x80
 8001820:	dc06      	bgt.n	8001830 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001822:	4b36      	ldr	r3, [pc, #216]	@ (80018fc <ssd1306_WriteChar+0x120>)
 8001824:	885b      	ldrh	r3, [r3, #2]
 8001826:	461a      	mov	r2, r3
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800182c:	2b40      	cmp	r3, #64	@ 0x40
 800182e:	dd01      	ble.n	8001834 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001830:	2300      	movs	r3, #0
 8001832:	e05e      	b.n	80018f2 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	e04d      	b.n	80018d6 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	3b20      	subs	r3, #32
 8001840:	7879      	ldrb	r1, [r7, #1]
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4619      	mov	r1, r3
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	440b      	add	r3, r1
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	e036      	b.n	80018c8 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d013      	beq.n	8001892 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800186a:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <ssd1306_WriteChar+0x120>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4413      	add	r3, r2
 8001876:	b2d8      	uxtb	r0, r3
 8001878:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <ssd1306_WriteChar+0x120>)
 800187a:	885b      	ldrh	r3, [r3, #2]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	4413      	add	r3, r2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff ff52 	bl	8001734 <ssd1306_DrawPixel>
 8001890:	e017      	b.n	80018c2 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001892:	4b1a      	ldr	r3, [pc, #104]	@ (80018fc <ssd1306_WriteChar+0x120>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	b2d8      	uxtb	r0, r3
 80018a0:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <ssd1306_WriteChar+0x120>)
 80018a2:	885b      	ldrh	r3, [r3, #2]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	b2d9      	uxtb	r1, r3
 80018ae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	f7ff ff39 	bl	8001734 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	3301      	adds	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d3c4      	bcc.n	800185a <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	3301      	adds	r3, #1
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	787b      	ldrb	r3, [r7, #1]
 80018d8:	461a      	mov	r2, r3
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	4293      	cmp	r3, r2
 80018de:	d3ac      	bcc.n	800183a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <ssd1306_WriteChar+0x120>)
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <ssd1306_WriteChar+0x120>)
 80018ee:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	@ 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000b7c 	.word	0x20000b7c

08001900 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af02      	add	r7, sp, #8
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	4638      	mov	r0, r7
 800190a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800190e:	e013      	b.n	8001938 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	7818      	ldrb	r0, [r3, #0]
 8001914:	7e3b      	ldrb	r3, [r7, #24]
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	463b      	mov	r3, r7
 800191a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800191c:	f7ff ff5e 	bl	80017dc <ssd1306_WriteChar>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d002      	beq.n	8001932 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	e008      	b.n	8001944 <ssd1306_WriteString+0x44>
        }
        str++;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3301      	adds	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e7      	bne.n	8001910 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	781b      	ldrb	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	460a      	mov	r2, r1
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	4613      	mov	r3, r2
 800195a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <ssd1306_SetCursor+0x2c>)
 8001962:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <ssd1306_SetCursor+0x2c>)
 800196a:	805a      	strh	r2, [r3, #2]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	20000b7c 	.word	0x20000b7c

0800197c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001986:	2381      	movs	r3, #129	@ 0x81
 8001988:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fdf5 	bl	800157c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fdf1 	bl	800157c <ssd1306_WriteCommand>
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80019b4:	23af      	movs	r3, #175	@ 0xaf
 80019b6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <ssd1306_SetDisplayOn+0x38>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	715a      	strb	r2, [r3, #5]
 80019be:	e004      	b.n	80019ca <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80019c0:	23ae      	movs	r3, #174	@ 0xae
 80019c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <ssd1306_SetDisplayOn+0x38>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fdd5 	bl	800157c <ssd1306_WriteCommand>
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000b7c 	.word	0x20000b7c

080019e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_Init+0x28>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	@ (8001a08 <HAL_Init+0x28>)
 80019ea:	f043 0310 	orr.w	r3, r3, #16
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f0:	2003      	movs	r0, #3
 80019f2:	f001 faf4 	bl	8002fde <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f6:	200f      	movs	r0, #15
 80019f8:	f7ff fc8a 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019fc:	f7ff f8d6 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40022000 	.word	0x40022000

08001a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	20000b84 	.word	0x20000b84

08001a34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000b84 	.word	0x20000b84

08001a4c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff ffee 	bl	8001a34 <HAL_GetTick>
 8001a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d005      	beq.n	8001a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a66:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <HAL_Delay+0x44>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a72:	bf00      	nop
 8001a74:	f7ff ffde 	bl	8001a34 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d8f7      	bhi.n	8001a74 <HAL_Delay+0x28>
  {
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008

08001a94 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b09a      	sub	sp, #104	@ 0x68
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e1c9      	b.n	8001e84 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d176      	bne.n	8001bf0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d152      	bne.n	8001bb0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff f865 	bl	8000bf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d13b      	bne.n	8001bb0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f001 f893 	bl	8002c64 <ADC_Disable>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d12f      	bne.n	8001bb0 <HAL_ADC_Init+0xe0>
 8001b50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d12b      	bne.n	8001bb0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b60:	f023 0302 	bic.w	r3, r3, #2
 8001b64:	f043 0202 	orr.w	r2, r3, #2
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b7a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001b8a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8c:	4b86      	ldr	r3, [pc, #536]	@ (8001da8 <HAL_ADC_Init+0x2d8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a86      	ldr	r2, [pc, #536]	@ (8001dac <HAL_ADC_Init+0x2dc>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0c9a      	lsrs	r2, r3, #18
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ba2:	e002      	b.n	8001baa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f9      	bne.n	8001ba4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bcc:	d110      	bne.n	8001bf0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f023 0312 	bic.w	r3, r3, #18
 8001bd6:	f043 0210 	orr.w	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 8136 	bne.w	8001e6a <HAL_ADC_Init+0x39a>
 8001bfe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 8131 	bne.w	8001e6a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 8129 	bne.w	8001e6a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c20:	f043 0202 	orr.w	r2, r3, #2
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c30:	d004      	beq.n	8001c3c <HAL_ADC_Init+0x16c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a5e      	ldr	r2, [pc, #376]	@ (8001db0 <HAL_ADC_Init+0x2e0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_Init+0x170>
 8001c3c:	4b5d      	ldr	r3, [pc, #372]	@ (8001db4 <HAL_ADC_Init+0x2e4>)
 8001c3e:	e000      	b.n	8001c42 <HAL_ADC_Init+0x172>
 8001c40:	4b5d      	ldr	r3, [pc, #372]	@ (8001db8 <HAL_ADC_Init+0x2e8>)
 8001c42:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c4c:	d102      	bne.n	8001c54 <HAL_ADC_Init+0x184>
 8001c4e:	4b58      	ldr	r3, [pc, #352]	@ (8001db0 <HAL_ADC_Init+0x2e0>)
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	e01a      	b.n	8001c8a <HAL_ADC_Init+0x1ba>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a55      	ldr	r2, [pc, #340]	@ (8001db0 <HAL_ADC_Init+0x2e0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d103      	bne.n	8001c66 <HAL_ADC_Init+0x196>
 8001c5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	e011      	b.n	8001c8a <HAL_ADC_Init+0x1ba>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a54      	ldr	r2, [pc, #336]	@ (8001dbc <HAL_ADC_Init+0x2ec>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d102      	bne.n	8001c76 <HAL_ADC_Init+0x1a6>
 8001c70:	4b53      	ldr	r3, [pc, #332]	@ (8001dc0 <HAL_ADC_Init+0x2f0>)
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e009      	b.n	8001c8a <HAL_ADC_Init+0x1ba>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a51      	ldr	r2, [pc, #324]	@ (8001dc0 <HAL_ADC_Init+0x2f0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d102      	bne.n	8001c86 <HAL_ADC_Init+0x1b6>
 8001c80:	4b4e      	ldr	r3, [pc, #312]	@ (8001dbc <HAL_ADC_Init+0x2ec>)
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	e001      	b.n	8001c8a <HAL_ADC_Init+0x1ba>
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d108      	bne.n	8001caa <HAL_ADC_Init+0x1da>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x1da>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_ADC_Init+0x1dc>
 8001caa:	2300      	movs	r3, #0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d11c      	bne.n	8001cea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d010      	beq.n	8001cd8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_ADC_Init+0x202>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_Init+0x202>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_ADC_Init+0x204>
 8001cd2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d108      	bne.n	8001cea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ce8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7e5b      	ldrb	r3, [r3, #25]
 8001cee:	035b      	lsls	r3, r3, #13
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cf4:	2a01      	cmp	r2, #1
 8001cf6:	d002      	beq.n	8001cfe <HAL_ADC_Init+0x22e>
 8001cf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cfc:	e000      	b.n	8001d00 <HAL_ADC_Init+0x230>
 8001cfe:	2200      	movs	r2, #0
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d10:	4313      	orrs	r3, r2
 8001d12:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d11b      	bne.n	8001d56 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7e5b      	ldrb	r3, [r3, #25]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	045a      	lsls	r2, r3, #17
 8001d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d36:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d38:	e00d      	b.n	8001d56 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001d42:	f043 0220 	orr.w	r2, r3, #32
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	f043 0201 	orr.w	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d03a      	beq.n	8001dd4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a16      	ldr	r2, [pc, #88]	@ (8001dbc <HAL_ADC_Init+0x2ec>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d004      	beq.n	8001d72 <HAL_ADC_Init+0x2a2>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a14      	ldr	r2, [pc, #80]	@ (8001dc0 <HAL_ADC_Init+0x2f0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d128      	bne.n	8001dc4 <HAL_ADC_Init+0x2f4>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d76:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001d7a:	d012      	beq.n	8001da2 <HAL_ADC_Init+0x2d2>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d84:	d00a      	beq.n	8001d9c <HAL_ADC_Init+0x2cc>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001d8e:	d002      	beq.n	8001d96 <HAL_ADC_Init+0x2c6>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	e018      	b.n	8001dc8 <HAL_ADC_Init+0x2f8>
 8001d96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d9a:	e015      	b.n	8001dc8 <HAL_ADC_Init+0x2f8>
 8001d9c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001da0:	e012      	b.n	8001dc8 <HAL_ADC_Init+0x2f8>
 8001da2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001da6:	e00f      	b.n	8001dc8 <HAL_ADC_Init+0x2f8>
 8001da8:	20000000 	.word	0x20000000
 8001dac:	431bde83 	.word	0x431bde83
 8001db0:	50000100 	.word	0x50000100
 8001db4:	50000300 	.word	0x50000300
 8001db8:	50000700 	.word	0x50000700
 8001dbc:	50000400 	.word	0x50000400
 8001dc0:	50000500 	.word	0x50000500
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d114      	bne.n	8001e0c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001df0:	f023 0302 	bic.w	r3, r3, #2
 8001df4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7e1b      	ldrb	r3, [r3, #24]
 8001dfa:	039a      	lsls	r2, r3, #14
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4313      	orrs	r3, r2
 8001e06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <HAL_ADC_Init+0x3bc>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d10c      	bne.n	8001e42 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	f023 010f 	bic.w	r1, r3, #15
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	1e5a      	subs	r2, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e40:	e007      	b.n	8001e52 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 020f 	bic.w	r2, r2, #15
 8001e50:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	f023 0303 	bic.w	r3, r3, #3
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e68:	e00a      	b.n	8001e80 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f023 0312 	bic.w	r3, r3, #18
 8001e72:	f043 0210 	orr.w	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001e80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3768      	adds	r7, #104	@ 0x68
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	fff0c007 	.word	0xfff0c007

08001e90 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d004      	beq.n	8001ec8 <HAL_ADC_IRQHandler+0x38>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10b      	bne.n	8001ee0 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80bc 	beq.w	800204c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80b6 	beq.w	800204c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d105      	bne.n	8001ef8 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f00:	d004      	beq.n	8001f0c <HAL_ADC_IRQHandler+0x7c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a90      	ldr	r2, [pc, #576]	@ (8002148 <HAL_ADC_IRQHandler+0x2b8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d106      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x8a>
 8001f0c:	4b8f      	ldr	r3, [pc, #572]	@ (800214c <HAL_ADC_IRQHandler+0x2bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d03e      	beq.n	8001f96 <HAL_ADC_IRQHandler+0x106>
 8001f18:	e005      	b.n	8001f26 <HAL_ADC_IRQHandler+0x96>
 8001f1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002150 <HAL_ADC_IRQHandler+0x2c0>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d037      	beq.n	8001f96 <HAL_ADC_IRQHandler+0x106>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f2e:	d004      	beq.n	8001f3a <HAL_ADC_IRQHandler+0xaa>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a84      	ldr	r2, [pc, #528]	@ (8002148 <HAL_ADC_IRQHandler+0x2b8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d106      	bne.n	8001f48 <HAL_ADC_IRQHandler+0xb8>
 8001f3a:	4b84      	ldr	r3, [pc, #528]	@ (800214c <HAL_ADC_IRQHandler+0x2bc>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	d027      	beq.n	8001f96 <HAL_ADC_IRQHandler+0x106>
 8001f46:	e005      	b.n	8001f54 <HAL_ADC_IRQHandler+0xc4>
 8001f48:	4b81      	ldr	r3, [pc, #516]	@ (8002150 <HAL_ADC_IRQHandler+0x2c0>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d020      	beq.n	8001f96 <HAL_ADC_IRQHandler+0x106>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f5c:	d004      	beq.n	8001f68 <HAL_ADC_IRQHandler+0xd8>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a79      	ldr	r2, [pc, #484]	@ (8002148 <HAL_ADC_IRQHandler+0x2b8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d106      	bne.n	8001f76 <HAL_ADC_IRQHandler+0xe6>
 8001f68:	4b78      	ldr	r3, [pc, #480]	@ (800214c <HAL_ADC_IRQHandler+0x2bc>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	2b09      	cmp	r3, #9
 8001f72:	d010      	beq.n	8001f96 <HAL_ADC_IRQHandler+0x106>
 8001f74:	e005      	b.n	8001f82 <HAL_ADC_IRQHandler+0xf2>
 8001f76:	4b76      	ldr	r3, [pc, #472]	@ (8002150 <HAL_ADC_IRQHandler+0x2c0>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2b09      	cmp	r3, #9
 8001f80:	d009      	beq.n	8001f96 <HAL_ADC_IRQHandler+0x106>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f8a:	d004      	beq.n	8001f96 <HAL_ADC_IRQHandler+0x106>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a70      	ldr	r2, [pc, #448]	@ (8002154 <HAL_ADC_IRQHandler+0x2c4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d104      	bne.n	8001fa0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	e00f      	b.n	8001fc0 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fa8:	d004      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x124>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a66      	ldr	r2, [pc, #408]	@ (8002148 <HAL_ADC_IRQHandler+0x2b8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d102      	bne.n	8001fba <HAL_ADC_IRQHandler+0x12a>
 8001fb4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001fb8:	e000      	b.n	8001fbc <HAL_ADC_IRQHandler+0x12c>
 8001fba:	4b66      	ldr	r3, [pc, #408]	@ (8002154 <HAL_ADC_IRQHandler+0x2c4>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d137      	bne.n	800203e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d132      	bne.n	800203e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d02d      	beq.n	800203e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d11a      	bne.n	8002026 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 020c 	bic.w	r2, r2, #12
 8001ffe:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d112      	bne.n	800203e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	641a      	str	r2, [r3, #64]	@ 0x40
 8002024:	e00b      	b.n	800203e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fd28 	bl	8001a94 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	220c      	movs	r2, #12
 800204a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d004      	beq.n	8002060 <HAL_ADC_IRQHandler+0x1d0>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10b      	bne.n	8002078 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8138 	beq.w	80022dc <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8132 	beq.w	80022dc <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800208c:	d004      	beq.n	8002098 <HAL_ADC_IRQHandler+0x208>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a2d      	ldr	r2, [pc, #180]	@ (8002148 <HAL_ADC_IRQHandler+0x2b8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d106      	bne.n	80020a6 <HAL_ADC_IRQHandler+0x216>
 8002098:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <HAL_ADC_IRQHandler+0x2bc>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d03e      	beq.n	8002122 <HAL_ADC_IRQHandler+0x292>
 80020a4:	e005      	b.n	80020b2 <HAL_ADC_IRQHandler+0x222>
 80020a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <HAL_ADC_IRQHandler+0x2c0>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d037      	beq.n	8002122 <HAL_ADC_IRQHandler+0x292>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ba:	d004      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x236>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a21      	ldr	r2, [pc, #132]	@ (8002148 <HAL_ADC_IRQHandler+0x2b8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d106      	bne.n	80020d4 <HAL_ADC_IRQHandler+0x244>
 80020c6:	4b21      	ldr	r3, [pc, #132]	@ (800214c <HAL_ADC_IRQHandler+0x2bc>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	d027      	beq.n	8002122 <HAL_ADC_IRQHandler+0x292>
 80020d2:	e005      	b.n	80020e0 <HAL_ADC_IRQHandler+0x250>
 80020d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002150 <HAL_ADC_IRQHandler+0x2c0>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d020      	beq.n	8002122 <HAL_ADC_IRQHandler+0x292>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020e8:	d004      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x264>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a16      	ldr	r2, [pc, #88]	@ (8002148 <HAL_ADC_IRQHandler+0x2b8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d106      	bne.n	8002102 <HAL_ADC_IRQHandler+0x272>
 80020f4:	4b15      	ldr	r3, [pc, #84]	@ (800214c <HAL_ADC_IRQHandler+0x2bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	2b09      	cmp	r3, #9
 80020fe:	d010      	beq.n	8002122 <HAL_ADC_IRQHandler+0x292>
 8002100:	e005      	b.n	800210e <HAL_ADC_IRQHandler+0x27e>
 8002102:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <HAL_ADC_IRQHandler+0x2c0>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	2b09      	cmp	r3, #9
 800210c:	d009      	beq.n	8002122 <HAL_ADC_IRQHandler+0x292>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002116:	d004      	beq.n	8002122 <HAL_ADC_IRQHandler+0x292>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0d      	ldr	r2, [pc, #52]	@ (8002154 <HAL_ADC_IRQHandler+0x2c4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d104      	bne.n	800212c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	e018      	b.n	800215e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002134:	d004      	beq.n	8002140 <HAL_ADC_IRQHandler+0x2b0>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a03      	ldr	r2, [pc, #12]	@ (8002148 <HAL_ADC_IRQHandler+0x2b8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d10b      	bne.n	8002158 <HAL_ADC_IRQHandler+0x2c8>
 8002140:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002144:	e009      	b.n	800215a <HAL_ADC_IRQHandler+0x2ca>
 8002146:	bf00      	nop
 8002148:	50000100 	.word	0x50000100
 800214c:	50000300 	.word	0x50000300
 8002150:	50000700 	.word	0x50000700
 8002154:	50000400 	.word	0x50000400
 8002158:	4b92      	ldr	r3, [pc, #584]	@ (80023a4 <HAL_ADC_IRQHandler+0x514>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002164:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002168:	2b00      	cmp	r3, #0
 800216a:	f040 80b0 	bne.w	80022ce <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 80a3 	bne.w	80022ce <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	f040 809d 	bne.w	80022ce <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8097 	beq.w	80022ce <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021a8:	d004      	beq.n	80021b4 <HAL_ADC_IRQHandler+0x324>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7e      	ldr	r2, [pc, #504]	@ (80023a8 <HAL_ADC_IRQHandler+0x518>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d106      	bne.n	80021c2 <HAL_ADC_IRQHandler+0x332>
 80021b4:	4b7d      	ldr	r3, [pc, #500]	@ (80023ac <HAL_ADC_IRQHandler+0x51c>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d03e      	beq.n	800223e <HAL_ADC_IRQHandler+0x3ae>
 80021c0:	e005      	b.n	80021ce <HAL_ADC_IRQHandler+0x33e>
 80021c2:	4b7b      	ldr	r3, [pc, #492]	@ (80023b0 <HAL_ADC_IRQHandler+0x520>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d037      	beq.n	800223e <HAL_ADC_IRQHandler+0x3ae>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021d6:	d004      	beq.n	80021e2 <HAL_ADC_IRQHandler+0x352>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a72      	ldr	r2, [pc, #456]	@ (80023a8 <HAL_ADC_IRQHandler+0x518>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d106      	bne.n	80021f0 <HAL_ADC_IRQHandler+0x360>
 80021e2:	4b72      	ldr	r3, [pc, #456]	@ (80023ac <HAL_ADC_IRQHandler+0x51c>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d027      	beq.n	800223e <HAL_ADC_IRQHandler+0x3ae>
 80021ee:	e005      	b.n	80021fc <HAL_ADC_IRQHandler+0x36c>
 80021f0:	4b6f      	ldr	r3, [pc, #444]	@ (80023b0 <HAL_ADC_IRQHandler+0x520>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2b06      	cmp	r3, #6
 80021fa:	d020      	beq.n	800223e <HAL_ADC_IRQHandler+0x3ae>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002204:	d004      	beq.n	8002210 <HAL_ADC_IRQHandler+0x380>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a67      	ldr	r2, [pc, #412]	@ (80023a8 <HAL_ADC_IRQHandler+0x518>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d106      	bne.n	800221e <HAL_ADC_IRQHandler+0x38e>
 8002210:	4b66      	ldr	r3, [pc, #408]	@ (80023ac <HAL_ADC_IRQHandler+0x51c>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	2b07      	cmp	r3, #7
 800221a:	d010      	beq.n	800223e <HAL_ADC_IRQHandler+0x3ae>
 800221c:	e005      	b.n	800222a <HAL_ADC_IRQHandler+0x39a>
 800221e:	4b64      	ldr	r3, [pc, #400]	@ (80023b0 <HAL_ADC_IRQHandler+0x520>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	2b07      	cmp	r3, #7
 8002228:	d009      	beq.n	800223e <HAL_ADC_IRQHandler+0x3ae>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002232:	d004      	beq.n	800223e <HAL_ADC_IRQHandler+0x3ae>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a5a      	ldr	r2, [pc, #360]	@ (80023a4 <HAL_ADC_IRQHandler+0x514>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d104      	bne.n	8002248 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e00f      	b.n	8002268 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002250:	d004      	beq.n	800225c <HAL_ADC_IRQHandler+0x3cc>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a54      	ldr	r2, [pc, #336]	@ (80023a8 <HAL_ADC_IRQHandler+0x518>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d102      	bne.n	8002262 <HAL_ADC_IRQHandler+0x3d2>
 800225c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002260:	e000      	b.n	8002264 <HAL_ADC_IRQHandler+0x3d4>
 8002262:	4b50      	ldr	r3, [pc, #320]	@ (80023a4 <HAL_ADC_IRQHandler+0x514>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d12d      	bne.n	80022ce <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d11a      	bne.n	80022b6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800228e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d112      	bne.n	80022ce <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80022b4:	e00b      	b.n	80022ce <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f043 0210 	orr.w	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f8c4 	bl	800245c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2260      	movs	r2, #96	@ 0x60
 80022da:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d011      	beq.n	800230a <HAL_ADC_IRQHandler+0x47a>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00c      	beq.n	800230a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fbd3 	bl	8001aa8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2280      	movs	r2, #128	@ 0x80
 8002308:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d012      	beq.n	800233a <HAL_ADC_IRQHandler+0x4aa>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00d      	beq.n	800233a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f8aa 	bl	8002484 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002338:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002340:	2b00      	cmp	r3, #0
 8002342:	d012      	beq.n	800236a <HAL_ADC_IRQHandler+0x4da>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f89c 	bl	8002498 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002368:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b00      	cmp	r3, #0
 8002372:	d04f      	beq.n	8002414 <HAL_ADC_IRQHandler+0x584>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	d04a      	beq.n	8002414 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002382:	2b01      	cmp	r3, #1
 8002384:	d102      	bne.n	800238c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002386:	2301      	movs	r3, #1
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	e02d      	b.n	80023e8 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002394:	d004      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x510>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a03      	ldr	r2, [pc, #12]	@ (80023a8 <HAL_ADC_IRQHandler+0x518>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d109      	bne.n	80023b4 <HAL_ADC_IRQHandler+0x524>
 80023a0:	4b02      	ldr	r3, [pc, #8]	@ (80023ac <HAL_ADC_IRQHandler+0x51c>)
 80023a2:	e008      	b.n	80023b6 <HAL_ADC_IRQHandler+0x526>
 80023a4:	50000400 	.word	0x50000400
 80023a8:	50000100 	.word	0x50000100
 80023ac:	50000300 	.word	0x50000300
 80023b0:	50000700 	.word	0x50000700
 80023b4:	4b28      	ldr	r3, [pc, #160]	@ (8002458 <HAL_ADC_IRQHandler+0x5c8>)
 80023b6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d109      	bne.n	80023d8 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10a      	bne.n	80023e8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80023d2:	2301      	movs	r3, #1
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e007      	b.n	80023e8 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80023e4:	2301      	movs	r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10e      	bne.n	800240c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	f043 0202 	orr.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fb58 	bl	8001abc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2210      	movs	r2, #16
 8002412:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241a:	2b00      	cmp	r3, #0
 800241c:	d018      	beq.n	8002450 <HAL_ADC_IRQHandler+0x5c0>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002438:	f043 0208 	orr.w	r2, r3, #8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002448:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f810 	bl	8002470 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002450:	bf00      	nop
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	50000700 	.word	0x50000700

0800245c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b09b      	sub	sp, #108	@ 0x6c
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x22>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e2c8      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x5b4>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f040 82ac 	bne.w	8002a3e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d81c      	bhi.n	8002528 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	461a      	mov	r2, r3
 8002502:	231f      	movs	r3, #31
 8002504:	4093      	lsls	r3, r2
 8002506:	43db      	mvns	r3, r3
 8002508:	4019      	ands	r1, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa00 f203 	lsl.w	r2, r0, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	631a      	str	r2, [r3, #48]	@ 0x30
 8002526:	e063      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b09      	cmp	r3, #9
 800252e:	d81e      	bhi.n	800256e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	3b1e      	subs	r3, #30
 8002544:	221f      	movs	r2, #31
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	4019      	ands	r1, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	3b1e      	subs	r3, #30
 8002560:	fa00 f203 	lsl.w	r2, r0, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	635a      	str	r2, [r3, #52]	@ 0x34
 800256c:	e040      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b0e      	cmp	r3, #14
 8002574:	d81e      	bhi.n	80025b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	3b3c      	subs	r3, #60	@ 0x3c
 800258a:	221f      	movs	r2, #31
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	4019      	ands	r1, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	3b3c      	subs	r3, #60	@ 0x3c
 80025a6:	fa00 f203 	lsl.w	r2, r0, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80025b2:	e01d      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	3b5a      	subs	r3, #90	@ 0x5a
 80025c8:	221f      	movs	r2, #31
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	4019      	ands	r1, r3
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	3b5a      	subs	r3, #90	@ 0x5a
 80025e4:	fa00 f203 	lsl.w	r2, r0, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 80e5 	bne.w	80027ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b09      	cmp	r3, #9
 8002606:	d91c      	bls.n	8002642 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6999      	ldr	r1, [r3, #24]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	3b1e      	subs	r3, #30
 800261a:	2207      	movs	r2, #7
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	4019      	ands	r1, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6898      	ldr	r0, [r3, #8]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	3b1e      	subs	r3, #30
 8002634:	fa00 f203 	lsl.w	r2, r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	619a      	str	r2, [r3, #24]
 8002640:	e019      	b.n	8002676 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6959      	ldr	r1, [r3, #20]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	2207      	movs	r2, #7
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	4019      	ands	r1, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6898      	ldr	r0, [r3, #8]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	fa00 f203 	lsl.w	r2, r0, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	08db      	lsrs	r3, r3, #3
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	3b01      	subs	r3, #1
 8002694:	2b03      	cmp	r3, #3
 8002696:	d84f      	bhi.n	8002738 <HAL_ADC_ConfigChannel+0x28c>
 8002698:	a201      	add	r2, pc, #4	@ (adr r2, 80026a0 <HAL_ADC_ConfigChannel+0x1f4>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026b1 	.word	0x080026b1
 80026a4:	080026d3 	.word	0x080026d3
 80026a8:	080026f5 	.word	0x080026f5
 80026ac:	08002717 	.word	0x08002717
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026b6:	4b99      	ldr	r3, [pc, #612]	@ (800291c <HAL_ADC_ConfigChannel+0x470>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	0691      	lsls	r1, r2, #26
 80026c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026c2:	430a      	orrs	r2, r1
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80026ce:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026d0:	e07b      	b.n	80027ca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80026d8:	4b90      	ldr	r3, [pc, #576]	@ (800291c <HAL_ADC_ConfigChannel+0x470>)
 80026da:	4013      	ands	r3, r2
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	0691      	lsls	r1, r2, #26
 80026e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80026e4:	430a      	orrs	r2, r1
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80026f0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026f2:	e06a      	b.n	80027ca <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80026fa:	4b88      	ldr	r3, [pc, #544]	@ (800291c <HAL_ADC_ConfigChannel+0x470>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	0691      	lsls	r1, r2, #26
 8002704:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002706:	430a      	orrs	r2, r1
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002712:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002714:	e059      	b.n	80027ca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800271c:	4b7f      	ldr	r3, [pc, #508]	@ (800291c <HAL_ADC_ConfigChannel+0x470>)
 800271e:	4013      	ands	r3, r2
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	0691      	lsls	r1, r2, #26
 8002726:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002728:	430a      	orrs	r2, r1
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002734:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002736:	e048      	b.n	80027ca <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	069b      	lsls	r3, r3, #26
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800275a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002762:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	069b      	lsls	r3, r3, #26
 800276c:	429a      	cmp	r2, r3
 800276e:	d107      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800277e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002786:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	069b      	lsls	r3, r3, #26
 8002790:	429a      	cmp	r2, r3
 8002792:	d107      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027a2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	069b      	lsls	r3, r3, #26
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d107      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80027c6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80027c8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d108      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x33e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x33e>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_ADC_ConfigChannel+0x340>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f040 8131 	bne.w	8002a54 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d00f      	beq.n	800281a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2201      	movs	r2, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43da      	mvns	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	400a      	ands	r2, r1
 8002814:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002818:	e049      	b.n	80028ae <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2201      	movs	r2, #1
 8002828:	409a      	lsls	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b09      	cmp	r3, #9
 800283a:	d91c      	bls.n	8002876 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6999      	ldr	r1, [r3, #24]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	3b1b      	subs	r3, #27
 800284e:	2207      	movs	r2, #7
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	4019      	ands	r1, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6898      	ldr	r0, [r3, #8]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	3b1b      	subs	r3, #27
 8002868:	fa00 f203 	lsl.w	r2, r0, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	619a      	str	r2, [r3, #24]
 8002874:	e01b      	b.n	80028ae <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6959      	ldr	r1, [r3, #20]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	2207      	movs	r2, #7
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	4019      	ands	r1, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6898      	ldr	r0, [r3, #8]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	fa00 f203 	lsl.w	r2, r0, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028b6:	d004      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0x416>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a18      	ldr	r2, [pc, #96]	@ (8002920 <HAL_ADC_ConfigChannel+0x474>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x41a>
 80028c2:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <HAL_ADC_ConfigChannel+0x478>)
 80028c4:	e000      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x41c>
 80028c6:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <HAL_ADC_ConfigChannel+0x47c>)
 80028c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d105      	bne.n	80028de <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d015      	beq.n	800290a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028e2:	2b11      	cmp	r3, #17
 80028e4:	d105      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028f6:	2b12      	cmp	r3, #18
 80028f8:	f040 80ac 	bne.w	8002a54 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80028fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002904:	2b00      	cmp	r3, #0
 8002906:	f040 80a5 	bne.w	8002a54 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002912:	d10b      	bne.n	800292c <HAL_ADC_ConfigChannel+0x480>
 8002914:	4b02      	ldr	r3, [pc, #8]	@ (8002920 <HAL_ADC_ConfigChannel+0x474>)
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	e023      	b.n	8002962 <HAL_ADC_ConfigChannel+0x4b6>
 800291a:	bf00      	nop
 800291c:	83fff000 	.word	0x83fff000
 8002920:	50000100 	.word	0x50000100
 8002924:	50000300 	.word	0x50000300
 8002928:	50000700 	.word	0x50000700
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a4e      	ldr	r2, [pc, #312]	@ (8002a6c <HAL_ADC_ConfigChannel+0x5c0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d103      	bne.n	800293e <HAL_ADC_ConfigChannel+0x492>
 8002936:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e011      	b.n	8002962 <HAL_ADC_ConfigChannel+0x4b6>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a4b      	ldr	r2, [pc, #300]	@ (8002a70 <HAL_ADC_ConfigChannel+0x5c4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d102      	bne.n	800294e <HAL_ADC_ConfigChannel+0x4a2>
 8002948:	4b4a      	ldr	r3, [pc, #296]	@ (8002a74 <HAL_ADC_ConfigChannel+0x5c8>)
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	e009      	b.n	8002962 <HAL_ADC_ConfigChannel+0x4b6>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a48      	ldr	r2, [pc, #288]	@ (8002a74 <HAL_ADC_ConfigChannel+0x5c8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d102      	bne.n	800295e <HAL_ADC_ConfigChannel+0x4b2>
 8002958:	4b45      	ldr	r3, [pc, #276]	@ (8002a70 <HAL_ADC_ConfigChannel+0x5c4>)
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e001      	b.n	8002962 <HAL_ADC_ConfigChannel+0x4b6>
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d108      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x4d6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x4d6>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_ADC_ConfigChannel+0x4d8>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d150      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002988:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800298a:	2b00      	cmp	r3, #0
 800298c:	d010      	beq.n	80029b0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d107      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x4fe>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x4fe>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_ADC_ConfigChannel+0x500>
 80029aa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d13c      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d11d      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x548>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c0:	d118      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80029c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029cc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002a78 <HAL_ADC_ConfigChannel+0x5cc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2a      	ldr	r2, [pc, #168]	@ (8002a7c <HAL_ADC_ConfigChannel+0x5d0>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	0c9a      	lsrs	r2, r3, #18
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029e4:	e002      	b.n	80029ec <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029f2:	e02e      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b11      	cmp	r3, #17
 80029fa:	d10b      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x568>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a04:	d106      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a10:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a12:	e01e      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b12      	cmp	r3, #18
 8002a1a:	d11a      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002a1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a26:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a28:	e013      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	f043 0220 	orr.w	r2, r3, #32
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002a3c:	e00a      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	f043 0220 	orr.w	r2, r3, #32
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002a50:	e000      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a52:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	376c      	adds	r7, #108	@ 0x6c
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	50000100 	.word	0x50000100
 8002a70:	50000400 	.word	0x50000400
 8002a74:	50000500 	.word	0x50000500
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	431bde83 	.word	0x431bde83

08002a80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b099      	sub	sp, #100	@ 0x64
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a98:	d102      	bne.n	8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002a9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	e01a      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a6a      	ldr	r2, [pc, #424]	@ (8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d103      	bne.n	8002ab2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002aaa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	e011      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a67      	ldr	r2, [pc, #412]	@ (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d102      	bne.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002abc:	4b66      	ldr	r3, [pc, #408]	@ (8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	e009      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a64      	ldr	r2, [pc, #400]	@ (8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d102      	bne.n	8002ad2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002acc:	4b61      	ldr	r3, [pc, #388]	@ (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	e001      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0b0      	b.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e0a9      	b.n	8002c42 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f040 808d 	bne.w	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 8086 	bne.w	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b1c:	d004      	beq.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a4b      	ldr	r2, [pc, #300]	@ (8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d101      	bne.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002b28:	4b4c      	ldr	r3, [pc, #304]	@ (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002b2a:	e000      	b.n	8002b2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d040      	beq.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b4a:	035b      	lsls	r3, r3, #13
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b52:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d108      	bne.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d15c      	bne.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002b96:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d14b      	bne.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ba4:	f023 030f 	bic.w	r3, r3, #15
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	6811      	ldr	r1, [r2, #0]
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	6892      	ldr	r2, [r2, #8]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bb6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bb8:	e03c      	b.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bc4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d108      	bne.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d123      	bne.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d107      	bne.n	8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002c08:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d112      	bne.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c16:	f023 030f 	bic.w	r3, r3, #15
 8002c1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c1c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c1e:	e009      	b.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002c32:	e000      	b.n	8002c36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c34:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002c42:	4618      	mov	r0, r3
 8002c44:	3764      	adds	r7, #100	@ 0x64
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	50000100 	.word	0x50000100
 8002c54:	50000400 	.word	0x50000400
 8002c58:	50000500 	.word	0x50000500
 8002c5c:	50000300 	.word	0x50000300
 8002c60:	50000700 	.word	0x50000700

08002c64 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d108      	bne.n	8002c90 <ADC_Disable+0x2c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <ADC_Disable+0x2c>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <ADC_Disable+0x2e>
 8002c90:	2300      	movs	r3, #0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d047      	beq.n	8002d26 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 030d 	and.w	r3, r3, #13
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10f      	bne.n	8002cc4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0202 	orr.w	r2, r2, #2
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe feba 	bl	8001a34 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cc2:	e029      	b.n	8002d18 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	f043 0210 	orr.w	r2, r3, #16
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e023      	b.n	8002d28 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ce0:	f7fe fea8 	bl	8001a34 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d914      	bls.n	8002d18 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d10d      	bne.n	8002d18 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d00:	f043 0210 	orr.w	r2, r3, #16
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	f043 0201 	orr.w	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d0dc      	beq.n	8002ce0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_COMP_Init+0x26>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_COMP_Init+0x2c>
  {
    status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	77fb      	strb	r3, [r7, #31]
 8002d5a:	e088      	b.n	8002e6e <HAL_COMP_Init+0x13e>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5c:	4b46      	ldr	r3, [pc, #280]	@ (8002e78 <HAL_COMP_Init+0x148>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	4a45      	ldr	r2, [pc, #276]	@ (8002e78 <HAL_COMP_Init+0x148>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6193      	str	r3, [r2, #24]
 8002d68:	4b43      	ldr	r3, [pc, #268]	@ (8002e78 <HAL_COMP_Init+0x148>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7fe f905 	bl	8000f84 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d84:	61bb      	str	r3, [r7, #24]

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0282 	bic.w	r2, r3, #130	@ 0x82
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f023 020c 	bic.w	r2, r3, #12
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_COMPxINSEL_1 | COMP_CSR_COMPxINSEL_0)) != 0UL) &&
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d016      	beq.n	8002e66 <HAL_COMP_Init+0x136>
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d113      	bne.n	8002e66 <HAL_COMP_Init+0x136>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e7c <HAL_COMP_Init+0x14c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	099b      	lsrs	r3, r3, #6
 8002e44:	4a0e      	ldr	r2, [pc, #56]	@ (8002e80 <HAL_COMP_Init+0x150>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002e58:	e002      	b.n	8002e60 <HAL_COMP_Init+0x130>
      {
        wait_loop_index--;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	617b      	str	r3, [r7, #20]
      while (wait_loop_index != 0UL)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f9      	bne.n	8002e5a <HAL_COMP_Init+0x12a>
      }
    }

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  }

  return status;
 8002e6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	053e2d63 	.word	0x053e2d63

08002e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	@ (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed0:	4b04      	ldr	r3, [pc, #16]	@ (8002ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 0307 	and.w	r3, r3, #7
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	db0b      	blt.n	8002f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	4907      	ldr	r1, [pc, #28]	@ (8002f20 <__NVIC_EnableIRQ+0x38>)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2001      	movs	r0, #1
 8002f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000e100 	.word	0xe000e100

08002f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	6039      	str	r1, [r7, #0]
 8002f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	db0a      	blt.n	8002f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	490c      	ldr	r1, [pc, #48]	@ (8002f70 <__NVIC_SetPriority+0x4c>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	440b      	add	r3, r1
 8002f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f4c:	e00a      	b.n	8002f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4908      	ldr	r1, [pc, #32]	@ (8002f74 <__NVIC_SetPriority+0x50>)
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	3b04      	subs	r3, #4
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	440b      	add	r3, r1
 8002f62:	761a      	strb	r2, [r3, #24]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000e100 	.word	0xe000e100
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	@ 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f1c3 0307 	rsb	r3, r3, #7
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	bf28      	it	cs
 8002f96:	2304      	movcs	r3, #4
 8002f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d902      	bls.n	8002fa8 <NVIC_EncodePriority+0x30>
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3b03      	subs	r3, #3
 8002fa6:	e000      	b.n	8002faa <NVIC_EncodePriority+0x32>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	401a      	ands	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43d9      	mvns	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	4313      	orrs	r3, r2
         );
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff ff4c 	bl	8002e84 <__NVIC_SetPriorityGrouping>
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003006:	f7ff ff61 	bl	8002ecc <__NVIC_GetPriorityGrouping>
 800300a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	6978      	ldr	r0, [r7, #20]
 8003012:	f7ff ffb1 	bl	8002f78 <NVIC_EncodePriority>
 8003016:	4602      	mov	r2, r0
 8003018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff80 	bl	8002f24 <__NVIC_SetPriority>
}
 8003024:	bf00      	nop
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff54 	bl	8002ee8 <__NVIC_EnableIRQ>
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e037      	b.n	80030ce <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003074:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003078:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003082:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f8b3 	bl	800321c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	2204      	movs	r2, #4
 80030f4:	409a      	lsls	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d024      	beq.n	8003148 <HAL_DMA_IRQHandler+0x72>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01f      	beq.n	8003148 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d107      	bne.n	8003126 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0204 	bic.w	r2, r2, #4
 8003124:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312e:	2104      	movs	r1, #4
 8003130:	fa01 f202 	lsl.w	r2, r1, r2
 8003134:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d06a      	beq.n	8003214 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003146:	e065      	b.n	8003214 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	2202      	movs	r2, #2
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d02c      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xdc>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d027      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10b      	bne.n	8003188 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 020a 	bic.w	r2, r2, #10
 800317e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003190:	2102      	movs	r1, #2
 8003192:	fa01 f202 	lsl.w	r2, r1, r2
 8003196:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d035      	beq.n	8003214 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80031b0:	e030      	b.n	8003214 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	2208      	movs	r2, #8
 80031b8:	409a      	lsls	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d028      	beq.n	8003214 <HAL_DMA_IRQHandler+0x13e>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d023      	beq.n	8003214 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 020e 	bic.w	r2, r2, #14
 80031da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e4:	2101      	movs	r1, #1
 80031e6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	2b00      	cmp	r3, #0
 8003208:	d004      	beq.n	8003214 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
    }
  }
}
 8003212:	e7ff      	b.n	8003214 <HAL_DMA_IRQHandler+0x13e>
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	4b14      	ldr	r3, [pc, #80]	@ (800327c <DMA_CalcBaseAndBitshift+0x60>)
 800322c:	429a      	cmp	r2, r3
 800322e:	d80f      	bhi.n	8003250 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	4b12      	ldr	r3, [pc, #72]	@ (8003280 <DMA_CalcBaseAndBitshift+0x64>)
 8003238:	4413      	add	r3, r2
 800323a:	4a12      	ldr	r2, [pc, #72]	@ (8003284 <DMA_CalcBaseAndBitshift+0x68>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	009a      	lsls	r2, r3, #2
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a0f      	ldr	r2, [pc, #60]	@ (8003288 <DMA_CalcBaseAndBitshift+0x6c>)
 800324c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800324e:	e00e      	b.n	800326e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	4b0d      	ldr	r3, [pc, #52]	@ (800328c <DMA_CalcBaseAndBitshift+0x70>)
 8003258:	4413      	add	r3, r2
 800325a:	4a0a      	ldr	r2, [pc, #40]	@ (8003284 <DMA_CalcBaseAndBitshift+0x68>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	009a      	lsls	r2, r3, #2
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a09      	ldr	r2, [pc, #36]	@ (8003290 <DMA_CalcBaseAndBitshift+0x74>)
 800326c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40020407 	.word	0x40020407
 8003280:	bffdfff8 	.word	0xbffdfff8
 8003284:	cccccccd 	.word	0xcccccccd
 8003288:	40020000 	.word	0x40020000
 800328c:	bffdfbf8 	.word	0xbffdfbf8
 8003290:	40020400 	.word	0x40020400

08003294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a2:	e154      	b.n	800354e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	2101      	movs	r1, #1
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	4013      	ands	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8146 	beq.w	8003548 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d005      	beq.n	80032d4 <HAL_GPIO_Init+0x40>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d130      	bne.n	8003336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	2203      	movs	r2, #3
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800330a:	2201      	movs	r2, #1
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 0201 	and.w	r2, r3, #1
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b03      	cmp	r3, #3
 8003340:	d017      	beq.n	8003372 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	2203      	movs	r2, #3
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d123      	bne.n	80033c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	08da      	lsrs	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3208      	adds	r2, #8
 8003386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	08da      	lsrs	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3208      	adds	r2, #8
 80033c0:	6939      	ldr	r1, [r7, #16]
 80033c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	2203      	movs	r2, #3
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0203 	and.w	r2, r3, #3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80a0 	beq.w	8003548 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003408:	4b58      	ldr	r3, [pc, #352]	@ (800356c <HAL_GPIO_Init+0x2d8>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	4a57      	ldr	r2, [pc, #348]	@ (800356c <HAL_GPIO_Init+0x2d8>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6193      	str	r3, [r2, #24]
 8003414:	4b55      	ldr	r3, [pc, #340]	@ (800356c <HAL_GPIO_Init+0x2d8>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003420:	4a53      	ldr	r2, [pc, #332]	@ (8003570 <HAL_GPIO_Init+0x2dc>)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	089b      	lsrs	r3, r3, #2
 8003426:	3302      	adds	r3, #2
 8003428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	220f      	movs	r2, #15
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800344a:	d019      	beq.n	8003480 <HAL_GPIO_Init+0x1ec>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a49      	ldr	r2, [pc, #292]	@ (8003574 <HAL_GPIO_Init+0x2e0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_GPIO_Init+0x1e8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a48      	ldr	r2, [pc, #288]	@ (8003578 <HAL_GPIO_Init+0x2e4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00d      	beq.n	8003478 <HAL_GPIO_Init+0x1e4>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a47      	ldr	r2, [pc, #284]	@ (800357c <HAL_GPIO_Init+0x2e8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d007      	beq.n	8003474 <HAL_GPIO_Init+0x1e0>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a46      	ldr	r2, [pc, #280]	@ (8003580 <HAL_GPIO_Init+0x2ec>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_GPIO_Init+0x1dc>
 800346c:	2304      	movs	r3, #4
 800346e:	e008      	b.n	8003482 <HAL_GPIO_Init+0x1ee>
 8003470:	2305      	movs	r3, #5
 8003472:	e006      	b.n	8003482 <HAL_GPIO_Init+0x1ee>
 8003474:	2303      	movs	r3, #3
 8003476:	e004      	b.n	8003482 <HAL_GPIO_Init+0x1ee>
 8003478:	2302      	movs	r3, #2
 800347a:	e002      	b.n	8003482 <HAL_GPIO_Init+0x1ee>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_GPIO_Init+0x1ee>
 8003480:	2300      	movs	r3, #0
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	f002 0203 	and.w	r2, r2, #3
 8003488:	0092      	lsls	r2, r2, #2
 800348a:	4093      	lsls	r3, r2
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003492:	4937      	ldr	r1, [pc, #220]	@ (8003570 <HAL_GPIO_Init+0x2dc>)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034a0:	4b38      	ldr	r3, [pc, #224]	@ (8003584 <HAL_GPIO_Init+0x2f0>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003584 <HAL_GPIO_Init+0x2f0>)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003584 <HAL_GPIO_Init+0x2f0>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4013      	ands	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80034ee:	4a25      	ldr	r2, [pc, #148]	@ (8003584 <HAL_GPIO_Init+0x2f0>)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034f4:	4b23      	ldr	r3, [pc, #140]	@ (8003584 <HAL_GPIO_Init+0x2f0>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003518:	4a1a      	ldr	r2, [pc, #104]	@ (8003584 <HAL_GPIO_Init+0x2f0>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800351e:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <HAL_GPIO_Init+0x2f0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003542:	4a10      	ldr	r2, [pc, #64]	@ (8003584 <HAL_GPIO_Init+0x2f0>)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	3301      	adds	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	f47f aea3 	bne.w	80032a4 <HAL_GPIO_Init+0x10>
  }
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40021000 	.word	0x40021000
 8003570:	40010000 	.word	0x40010000
 8003574:	48000400 	.word	0x48000400
 8003578:	48000800 	.word	0x48000800
 800357c:	48000c00 	.word	0x48000c00
 8003580:	48001000 	.word	0x48001000
 8003584:	40010400 	.word	0x40010400

08003588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
 8003594:	4613      	mov	r3, r2
 8003596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003598:	787b      	ldrb	r3, [r7, #1]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035a4:	e002      	b.n	80035ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e08d      	b.n	80036e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd fd98 	bl	8001114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2224      	movs	r2, #36	@ 0x24
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003608:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003618:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	e006      	b.n	8003640 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800363e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2b02      	cmp	r3, #2
 8003646:	d108      	bne.n	800365a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	e007      	b.n	800366a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003668:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800367c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800368c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69d9      	ldr	r1, [r3, #28]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1a      	ldr	r2, [r3, #32]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	460b      	mov	r3, r1
 8003704:	813b      	strh	r3, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b20      	cmp	r3, #32
 8003714:	f040 80f9 	bne.w	800390a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_I2C_Mem_Write+0x34>
 800371e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800372a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0ed      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_I2C_Mem_Write+0x4e>
 800373a:	2302      	movs	r3, #2
 800373c:	e0e6      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003746:	f7fe f975 	bl	8001a34 <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2319      	movs	r3, #25
 8003752:	2201      	movs	r2, #1
 8003754:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f955 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0d1      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2221      	movs	r2, #33	@ 0x21
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2240      	movs	r2, #64	@ 0x40
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003788:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003790:	88f8      	ldrh	r0, [r7, #6]
 8003792:	893a      	ldrh	r2, [r7, #8]
 8003794:	8979      	ldrh	r1, [r7, #10]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4603      	mov	r3, r0
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f8b9 	bl	8003918 <I2C_RequestMemoryWrite>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0a9      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2bff      	cmp	r3, #255	@ 0xff
 80037c0:	d90e      	bls.n	80037e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	22ff      	movs	r2, #255	@ 0xff
 80037c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	8979      	ldrh	r1, [r7, #10]
 80037d0:	2300      	movs	r3, #0
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fad9 	bl	8003d90 <I2C_TransferConfig>
 80037de:	e00f      	b.n	8003800 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	8979      	ldrh	r1, [r7, #10]
 80037f2:	2300      	movs	r3, #0
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fac8 	bl	8003d90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f958 	bl	8003aba <I2C_WaitOnTXISFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e07b      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d034      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x1c8>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d130      	bne.n	80038b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385c:	2200      	movs	r2, #0
 800385e:	2180      	movs	r1, #128	@ 0x80
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f8d1 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e04d      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	2bff      	cmp	r3, #255	@ 0xff
 8003878:	d90e      	bls.n	8003898 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	22ff      	movs	r2, #255	@ 0xff
 800387e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003884:	b2da      	uxtb	r2, r3
 8003886:	8979      	ldrh	r1, [r7, #10]
 8003888:	2300      	movs	r3, #0
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fa7d 	bl	8003d90 <I2C_TransferConfig>
 8003896:	e00f      	b.n	80038b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	8979      	ldrh	r1, [r7, #10]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fa6c 	bl	8003d90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d19e      	bne.n	8003800 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f93e 	bl	8003b48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e01a      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2220      	movs	r2, #32
 80038dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003914 <HAL_I2C_Mem_Write+0x224>)
 80038ea:	400b      	ands	r3, r1
 80038ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	fe00e800 	.word	0xfe00e800

08003918 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	4608      	mov	r0, r1
 8003922:	4611      	mov	r1, r2
 8003924:	461a      	mov	r2, r3
 8003926:	4603      	mov	r3, r0
 8003928:	817b      	strh	r3, [r7, #10]
 800392a:	460b      	mov	r3, r1
 800392c:	813b      	strh	r3, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	8979      	ldrh	r1, [r7, #10]
 8003938:	4b20      	ldr	r3, [pc, #128]	@ (80039bc <I2C_RequestMemoryWrite+0xa4>)
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fa25 	bl	8003d90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f8b5 	bl	8003aba <I2C_WaitOnTXISFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e02c      	b.n	80039b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d105      	bne.n	800396c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003960:	893b      	ldrh	r3, [r7, #8]
 8003962:	b2da      	uxtb	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	629a      	str	r2, [r3, #40]	@ 0x28
 800396a:	e015      	b.n	8003998 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800396c:	893b      	ldrh	r3, [r7, #8]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	b29b      	uxth	r3, r3
 8003972:	b2da      	uxtb	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	69b9      	ldr	r1, [r7, #24]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f89b 	bl	8003aba <I2C_WaitOnTXISFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e012      	b.n	80039b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800398e:	893b      	ldrh	r3, [r7, #8]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2200      	movs	r2, #0
 80039a0:	2180      	movs	r1, #128	@ 0x80
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f830 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	80002000 	.word	0x80002000

080039c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d103      	bne.n	80039de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2200      	movs	r2, #0
 80039dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d007      	beq.n	80039fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	619a      	str	r2, [r3, #24]
  }
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a18:	e03b      	b.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	6839      	ldr	r1, [r7, #0]
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f8d6 	bl	8003bd0 <I2C_IsErrorOccurred>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e041      	b.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d02d      	beq.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a36:	f7fd fffd 	bl	8001a34 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d302      	bcc.n	8003a4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d122      	bne.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4013      	ands	r3, r2
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d113      	bne.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e00f      	b.n	8003ab2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	bf0c      	ite	eq
 8003aa2:	2301      	moveq	r3, #1
 8003aa4:	2300      	movne	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d0b4      	beq.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ac6:	e033      	b.n	8003b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f87f 	bl	8003bd0 <I2C_IsErrorOccurred>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e031      	b.n	8003b40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d025      	beq.n	8003b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae4:	f7fd ffa6 	bl	8001a34 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d302      	bcc.n	8003afa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11a      	bne.n	8003b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d013      	beq.n	8003b30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e007      	b.n	8003b40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d1c4      	bne.n	8003ac8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b54:	e02f      	b.n	8003bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f838 	bl	8003bd0 <I2C_IsErrorOccurred>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e02d      	b.n	8003bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6a:	f7fd ff63 	bl	8001a34 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d302      	bcc.n	8003b80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d11a      	bne.n	8003bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d013      	beq.n	8003bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f043 0220 	orr.w	r2, r3, #32
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e007      	b.n	8003bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d1c8      	bne.n	8003b56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	@ 0x28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d068      	beq.n	8003cce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2210      	movs	r2, #16
 8003c02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c04:	e049      	b.n	8003c9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d045      	beq.n	8003c9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c0e:	f7fd ff11 	bl	8001a34 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d302      	bcc.n	8003c24 <I2C_IsErrorOccurred+0x54>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d13a      	bne.n	8003c9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c46:	d121      	bne.n	8003c8c <I2C_IsErrorOccurred+0xbc>
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c4e:	d01d      	beq.n	8003c8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c50:	7cfb      	ldrb	r3, [r7, #19]
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d01a      	beq.n	8003c8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c66:	f7fd fee5 	bl	8001a34 <HAL_GetTick>
 8003c6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c6c:	e00e      	b.n	8003c8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c6e:	f7fd fee1 	bl	8001a34 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b19      	cmp	r3, #25
 8003c7a:	d907      	bls.n	8003c8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	f043 0320 	orr.w	r3, r3, #32
 8003c82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c8a:	e006      	b.n	8003c9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d1e9      	bne.n	8003c6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d003      	beq.n	8003cb0 <I2C_IsErrorOccurred+0xe0>
 8003ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0aa      	beq.n	8003c06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d103      	bne.n	8003cc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f043 0304 	orr.w	r3, r3, #4
 8003cc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00b      	beq.n	8003cf8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	f043 0308 	orr.w	r3, r3, #8
 8003d08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	f043 0302 	orr.w	r3, r3, #2
 8003d2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01c      	beq.n	8003d7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff fe3b 	bl	80039c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <I2C_IsErrorOccurred+0x1bc>)
 8003d56:	400b      	ands	r3, r1
 8003d58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3728      	adds	r7, #40	@ 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	fe00e800 	.word	0xfe00e800

08003d90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	817b      	strh	r3, [r7, #10]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003da2:	897b      	ldrh	r3, [r7, #10]
 8003da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003da8:	7a7b      	ldrb	r3, [r7, #9]
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003db0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	0d5b      	lsrs	r3, r3, #21
 8003dca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003dce:	4b08      	ldr	r3, [pc, #32]	@ (8003df0 <I2C_TransferConfig+0x60>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	ea02 0103 	and.w	r1, r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	03ff63ff 	.word	0x03ff63ff

08003df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d138      	bne.n	8003e7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e032      	b.n	8003e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2224      	movs	r2, #36	@ 0x24
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6819      	ldr	r1, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d139      	bne.n	8003f14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e033      	b.n	8003f16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2224      	movs	r2, #36	@ 0x24
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003edc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0b9      	b.n	80040a8 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d106      	bne.n	8003f4e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7fd f99d 	bl	8001288 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2203      	movs	r2, #3
 8003f52:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f002 f822 	bl	8005fa4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f60:	2300      	movs	r3, #0
 8003f62:	73fb      	strb	r3, [r7, #15]
 8003f64:	e03e      	b.n	8003fe4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	440b      	add	r3, r1
 8003f74:	3311      	adds	r3, #17
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	440b      	add	r3, r1
 8003f88:	3310      	adds	r3, #16
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3313      	adds	r3, #19
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fa2:	7bfa      	ldrb	r2, [r7, #15]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	440b      	add	r3, r1
 8003fb0:	3320      	adds	r3, #32
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fb6:	7bfa      	ldrb	r2, [r7, #15]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	440b      	add	r3, r1
 8003fc4:	3324      	adds	r3, #36	@ 0x24
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	440b      	add	r3, r1
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	791b      	ldrb	r3, [r3, #4]
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d3bb      	bcc.n	8003f66 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fee:	2300      	movs	r3, #0
 8003ff0:	73fb      	strb	r3, [r7, #15]
 8003ff2:	e044      	b.n	800407e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	440b      	add	r3, r1
 8004002:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	440b      	add	r3, r1
 8004018:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004020:	7bfa      	ldrb	r2, [r7, #15]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	440b      	add	r3, r1
 800402e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800404c:	7bfa      	ldrb	r2, [r7, #15]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	440b      	add	r3, r1
 800405a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	440b      	add	r3, r1
 8004070:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	3301      	adds	r3, #1
 800407c:	73fb      	strb	r3, [r7, #15]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	791b      	ldrb	r3, [r3, #4]
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	429a      	cmp	r2, r3
 8004086:	d3b5      	bcc.n	8003ff4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004094:	f001 ffa1 	bl	8005fda <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f001 b823 	b.w	800511c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 817d 	beq.w	80043e6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80040ec:	4bbc      	ldr	r3, [pc, #752]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 030c 	and.w	r3, r3, #12
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d00c      	beq.n	8004112 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040f8:	4bb9      	ldr	r3, [pc, #740]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 030c 	and.w	r3, r3, #12
 8004100:	2b08      	cmp	r3, #8
 8004102:	d15c      	bne.n	80041be <HAL_RCC_OscConfig+0x10e>
 8004104:	4bb6      	ldr	r3, [pc, #728]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004110:	d155      	bne.n	80041be <HAL_RCC_OscConfig+0x10e>
 8004112:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004116:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004126:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d102      	bne.n	8004144 <HAL_RCC_OscConfig+0x94>
 800413e:	4ba8      	ldr	r3, [pc, #672]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	e015      	b.n	8004170 <HAL_RCC_OscConfig+0xc0>
 8004144:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004148:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004150:	fa93 f3a3 	rbit	r3, r3
 8004154:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004158:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800415c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004160:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004164:	fa93 f3a3 	rbit	r3, r3
 8004168:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800416c:	4b9c      	ldr	r3, [pc, #624]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004174:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004178:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800417c:	fa92 f2a2 	rbit	r2, r2
 8004180:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004184:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004188:	fab2 f282 	clz	r2, r2
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	f042 0220 	orr.w	r2, r2, #32
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	f002 021f 	and.w	r2, r2, #31
 8004198:	2101      	movs	r1, #1
 800419a:	fa01 f202 	lsl.w	r2, r1, r2
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 811f 	beq.w	80043e4 <HAL_RCC_OscConfig+0x334>
 80041a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f040 8116 	bne.w	80043e4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f000 bfaf 	b.w	800511c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ce:	d106      	bne.n	80041de <HAL_RCC_OscConfig+0x12e>
 80041d0:	4b83      	ldr	r3, [pc, #524]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a82      	ldr	r2, [pc, #520]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 80041d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e036      	b.n	800424c <HAL_RCC_OscConfig+0x19c>
 80041de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10c      	bne.n	8004208 <HAL_RCC_OscConfig+0x158>
 80041ee:	4b7c      	ldr	r3, [pc, #496]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a7b      	ldr	r2, [pc, #492]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 80041f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	4b79      	ldr	r3, [pc, #484]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a78      	ldr	r2, [pc, #480]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 8004200:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e021      	b.n	800424c <HAL_RCC_OscConfig+0x19c>
 8004208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800420c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0x184>
 800421a:	4b71      	ldr	r3, [pc, #452]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a70      	ldr	r2, [pc, #448]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 8004220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b6e      	ldr	r3, [pc, #440]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6d      	ldr	r2, [pc, #436]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0x19c>
 8004234:	4b6a      	ldr	r3, [pc, #424]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a69      	ldr	r2, [pc, #420]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 800423a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4b67      	ldr	r3, [pc, #412]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a66      	ldr	r2, [pc, #408]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 8004246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800424a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800424c:	4b64      	ldr	r3, [pc, #400]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	f023 020f 	bic.w	r2, r3, #15
 8004254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004258:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	495f      	ldr	r1, [pc, #380]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 8004262:	4313      	orrs	r3, r2
 8004264:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d059      	beq.n	800432a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004276:	f7fd fbdd 	bl	8001a34 <HAL_GetTick>
 800427a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004280:	f7fd fbd8 	bl	8001a34 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b64      	cmp	r3, #100	@ 0x64
 800428e:	d902      	bls.n	8004296 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	f000 bf43 	b.w	800511c <HAL_RCC_OscConfig+0x106c>
 8004296:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800429a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80042aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d102      	bne.n	80042c8 <HAL_RCC_OscConfig+0x218>
 80042c2:	4b47      	ldr	r3, [pc, #284]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	e015      	b.n	80042f4 <HAL_RCC_OscConfig+0x244>
 80042c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042cc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80042d4:	fa93 f3a3 	rbit	r3, r3
 80042d8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80042dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042e0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80042e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80042e8:	fa93 f3a3 	rbit	r3, r3
 80042ec:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80042f0:	4b3b      	ldr	r3, [pc, #236]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042f8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80042fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004300:	fa92 f2a2 	rbit	r2, r2
 8004304:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004308:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800430c:	fab2 f282 	clz	r2, r2
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	f042 0220 	orr.w	r2, r2, #32
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	f002 021f 	and.w	r2, r2, #31
 800431c:	2101      	movs	r1, #1
 800431e:	fa01 f202 	lsl.w	r2, r1, r2
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ab      	beq.n	8004280 <HAL_RCC_OscConfig+0x1d0>
 8004328:	e05d      	b.n	80043e6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fd fb83 	bl	8001a34 <HAL_GetTick>
 800432e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004332:	e00a      	b.n	800434a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004334:	f7fd fb7e 	bl	8001a34 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b64      	cmp	r3, #100	@ 0x64
 8004342:	d902      	bls.n	800434a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	f000 bee9 	b.w	800511c <HAL_RCC_OscConfig+0x106c>
 800434a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800434e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800435e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	fab3 f383 	clz	r3, r3
 8004366:	b2db      	uxtb	r3, r3
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f043 0301 	orr.w	r3, r3, #1
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d102      	bne.n	800437c <HAL_RCC_OscConfig+0x2cc>
 8004376:	4b1a      	ldr	r3, [pc, #104]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	e015      	b.n	80043a8 <HAL_RCC_OscConfig+0x2f8>
 800437c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004380:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004388:	fa93 f3a3 	rbit	r3, r3
 800438c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004390:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004394:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004398:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80043a4:	4b0e      	ldr	r3, [pc, #56]	@ (80043e0 <HAL_RCC_OscConfig+0x330>)
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043ac:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80043b0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80043b4:	fa92 f2a2 	rbit	r2, r2
 80043b8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80043bc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80043c0:	fab2 f282 	clz	r2, r2
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	f042 0220 	orr.w	r2, r2, #32
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	f002 021f 	and.w	r2, r2, #31
 80043d0:	2101      	movs	r1, #1
 80043d2:	fa01 f202 	lsl.w	r2, r1, r2
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1ab      	bne.n	8004334 <HAL_RCC_OscConfig+0x284>
 80043dc:	e003      	b.n	80043e6 <HAL_RCC_OscConfig+0x336>
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 817d 	beq.w	80046f6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80043fc:	4ba6      	ldr	r3, [pc, #664]	@ (8004698 <HAL_RCC_OscConfig+0x5e8>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00b      	beq.n	8004420 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004408:	4ba3      	ldr	r3, [pc, #652]	@ (8004698 <HAL_RCC_OscConfig+0x5e8>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b08      	cmp	r3, #8
 8004412:	d172      	bne.n	80044fa <HAL_RCC_OscConfig+0x44a>
 8004414:	4ba0      	ldr	r3, [pc, #640]	@ (8004698 <HAL_RCC_OscConfig+0x5e8>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d16c      	bne.n	80044fa <HAL_RCC_OscConfig+0x44a>
 8004420:	2302      	movs	r3, #2
 8004422:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004432:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004436:	fab3 f383 	clz	r3, r3
 800443a:	b2db      	uxtb	r3, r3
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	b2db      	uxtb	r3, r3
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d102      	bne.n	8004450 <HAL_RCC_OscConfig+0x3a0>
 800444a:	4b93      	ldr	r3, [pc, #588]	@ (8004698 <HAL_RCC_OscConfig+0x5e8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	e013      	b.n	8004478 <HAL_RCC_OscConfig+0x3c8>
 8004450:	2302      	movs	r3, #2
 8004452:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004462:	2302      	movs	r3, #2
 8004464:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004468:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004474:	4b88      	ldr	r3, [pc, #544]	@ (8004698 <HAL_RCC_OscConfig+0x5e8>)
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	2202      	movs	r2, #2
 800447a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800447e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004482:	fa92 f2a2 	rbit	r2, r2
 8004486:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800448a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800448e:	fab2 f282 	clz	r2, r2
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	f042 0220 	orr.w	r2, r2, #32
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	f002 021f 	and.w	r2, r2, #31
 800449e:	2101      	movs	r1, #1
 80044a0:	fa01 f202 	lsl.w	r2, r1, r2
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCC_OscConfig+0x410>
 80044aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d002      	beq.n	80044c0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f000 be2e 	b.w	800511c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c0:	4b75      	ldr	r3, [pc, #468]	@ (8004698 <HAL_RCC_OscConfig+0x5e8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	21f8      	movs	r1, #248	@ 0xf8
 80044d6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044da:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80044de:	fa91 f1a1 	rbit	r1, r1
 80044e2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80044e6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80044ea:	fab1 f181 	clz	r1, r1
 80044ee:	b2c9      	uxtb	r1, r1
 80044f0:	408b      	lsls	r3, r1
 80044f2:	4969      	ldr	r1, [pc, #420]	@ (8004698 <HAL_RCC_OscConfig+0x5e8>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f8:	e0fd      	b.n	80046f6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8088 	beq.w	800461c <HAL_RCC_OscConfig+0x56c>
 800450c:	2301      	movs	r3, #1
 800450e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004516:	fa93 f3a3 	rbit	r3, r3
 800451a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800451e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004522:	fab3 f383 	clz	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800452c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	461a      	mov	r2, r3
 8004534:	2301      	movs	r3, #1
 8004536:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004538:	f7fd fa7c 	bl	8001a34 <HAL_GetTick>
 800453c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004540:	e00a      	b.n	8004558 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004542:	f7fd fa77 	bl	8001a34 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d902      	bls.n	8004558 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	f000 bde2 	b.w	800511c <HAL_RCC_OscConfig+0x106c>
 8004558:	2302      	movs	r3, #2
 800455a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004562:	fa93 f3a3 	rbit	r3, r3
 8004566:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800456a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b01      	cmp	r3, #1
 8004580:	d102      	bne.n	8004588 <HAL_RCC_OscConfig+0x4d8>
 8004582:	4b45      	ldr	r3, [pc, #276]	@ (8004698 <HAL_RCC_OscConfig+0x5e8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	e013      	b.n	80045b0 <HAL_RCC_OscConfig+0x500>
 8004588:	2302      	movs	r3, #2
 800458a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004592:	fa93 f3a3 	rbit	r3, r3
 8004596:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800459a:	2302      	movs	r3, #2
 800459c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80045a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80045ac:	4b3a      	ldr	r3, [pc, #232]	@ (8004698 <HAL_RCC_OscConfig+0x5e8>)
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	2202      	movs	r2, #2
 80045b2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80045b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80045ba:	fa92 f2a2 	rbit	r2, r2
 80045be:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80045c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80045c6:	fab2 f282 	clz	r2, r2
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	f042 0220 	orr.w	r2, r2, #32
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	f002 021f 	and.w	r2, r2, #31
 80045d6:	2101      	movs	r1, #1
 80045d8:	fa01 f202 	lsl.w	r2, r1, r2
 80045dc:	4013      	ands	r3, r2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0af      	beq.n	8004542 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004698 <HAL_RCC_OscConfig+0x5e8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	21f8      	movs	r1, #248	@ 0xf8
 80045f8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004600:	fa91 f1a1 	rbit	r1, r1
 8004604:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004608:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800460c:	fab1 f181 	clz	r1, r1
 8004610:	b2c9      	uxtb	r1, r1
 8004612:	408b      	lsls	r3, r1
 8004614:	4920      	ldr	r1, [pc, #128]	@ (8004698 <HAL_RCC_OscConfig+0x5e8>)
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
 800461a:	e06c      	b.n	80046f6 <HAL_RCC_OscConfig+0x646>
 800461c:	2301      	movs	r3, #1
 800461e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004622:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004626:	fa93 f3a3 	rbit	r3, r3
 800462a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800462e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800463c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	461a      	mov	r2, r3
 8004644:	2300      	movs	r3, #0
 8004646:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fd f9f4 	bl	8001a34 <HAL_GetTick>
 800464c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004650:	e00a      	b.n	8004668 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004652:	f7fd f9ef 	bl	8001a34 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d902      	bls.n	8004668 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	f000 bd5a 	b.w	800511c <HAL_RCC_OscConfig+0x106c>
 8004668:	2302      	movs	r3, #2
 800466a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800467a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d104      	bne.n	800469c <HAL_RCC_OscConfig+0x5ec>
 8004692:	4b01      	ldr	r3, [pc, #4]	@ (8004698 <HAL_RCC_OscConfig+0x5e8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	e015      	b.n	80046c4 <HAL_RCC_OscConfig+0x614>
 8004698:	40021000 	.word	0x40021000
 800469c:	2302      	movs	r3, #2
 800469e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80046a6:	fa93 f3a3 	rbit	r3, r3
 80046aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80046ae:	2302      	movs	r3, #2
 80046b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80046b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80046b8:	fa93 f3a3 	rbit	r3, r3
 80046bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80046c0:	4bc8      	ldr	r3, [pc, #800]	@ (80049e4 <HAL_RCC_OscConfig+0x934>)
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	2202      	movs	r2, #2
 80046c6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80046ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80046ce:	fa92 f2a2 	rbit	r2, r2
 80046d2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80046d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80046da:	fab2 f282 	clz	r2, r2
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	f042 0220 	orr.w	r2, r2, #32
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	f002 021f 	and.w	r2, r2, #31
 80046ea:	2101      	movs	r1, #1
 80046ec:	fa01 f202 	lsl.w	r2, r1, r2
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1ad      	bne.n	8004652 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8110 	beq.w	800492c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800470c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004710:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d079      	beq.n	8004810 <HAL_RCC_OscConfig+0x760>
 800471c:	2301      	movs	r3, #1
 800471e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004722:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004726:	fa93 f3a3 	rbit	r3, r3
 800472a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800472e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	4bab      	ldr	r3, [pc, #684]	@ (80049e8 <HAL_RCC_OscConfig+0x938>)
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	461a      	mov	r2, r3
 8004742:	2301      	movs	r3, #1
 8004744:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004746:	f7fd f975 	bl	8001a34 <HAL_GetTick>
 800474a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474e:	e00a      	b.n	8004766 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004750:	f7fd f970 	bl	8001a34 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d902      	bls.n	8004766 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	f000 bcdb 	b.w	800511c <HAL_RCC_OscConfig+0x106c>
 8004766:	2302      	movs	r3, #2
 8004768:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800477c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004780:	2202      	movs	r2, #2
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004788:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	fa93 f2a3 	rbit	r2, r3
 8004792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047a4:	2202      	movs	r2, #2
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	fa93 f2a3 	rbit	r2, r3
 80047b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80047be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c0:	4b88      	ldr	r3, [pc, #544]	@ (80049e4 <HAL_RCC_OscConfig+0x934>)
 80047c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80047cc:	2102      	movs	r1, #2
 80047ce:	6019      	str	r1, [r3, #0]
 80047d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	fa93 f1a3 	rbit	r1, r3
 80047de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80047e6:	6019      	str	r1, [r3, #0]
  return result;
 80047e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	2101      	movs	r1, #1
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0a0      	beq.n	8004750 <HAL_RCC_OscConfig+0x6a0>
 800480e:	e08d      	b.n	800492c <HAL_RCC_OscConfig+0x87c>
 8004810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004814:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004818:	2201      	movs	r2, #1
 800481a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004820:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	fa93 f2a3 	rbit	r2, r3
 800482a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800482e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004832:	601a      	str	r2, [r3, #0]
  return result;
 8004834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004838:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800483c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800483e:	fab3 f383 	clz	r3, r3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	4b68      	ldr	r3, [pc, #416]	@ (80049e8 <HAL_RCC_OscConfig+0x938>)
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	461a      	mov	r2, r3
 800484e:	2300      	movs	r3, #0
 8004850:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004852:	f7fd f8ef 	bl	8001a34 <HAL_GetTick>
 8004856:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485a:	e00a      	b.n	8004872 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800485c:	f7fd f8ea 	bl	8001a34 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d902      	bls.n	8004872 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	f000 bc55 	b.w	800511c <HAL_RCC_OscConfig+0x106c>
 8004872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004876:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800487a:	2202      	movs	r2, #2
 800487c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004882:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	fa93 f2a3 	rbit	r2, r3
 800488c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004890:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800489a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800489e:	2202      	movs	r2, #2
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	fa93 f2a3 	rbit	r2, r3
 80048b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80048c2:	2202      	movs	r2, #2
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	fa93 f2a3 	rbit	r2, r3
 80048d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80048dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048de:	4b41      	ldr	r3, [pc, #260]	@ (80049e4 <HAL_RCC_OscConfig+0x934>)
 80048e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80048ea:	2102      	movs	r1, #2
 80048ec:	6019      	str	r1, [r3, #0]
 80048ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	fa93 f1a3 	rbit	r1, r3
 80048fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004900:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004904:	6019      	str	r1, [r3, #0]
  return result;
 8004906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800490a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	fab3 f383 	clz	r3, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	2101      	movs	r1, #1
 8004922:	fa01 f303 	lsl.w	r3, r1, r3
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d197      	bne.n	800485c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800492c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004930:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 81a1 	beq.w	8004c84 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004942:	2300      	movs	r3, #0
 8004944:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004948:	4b26      	ldr	r3, [pc, #152]	@ (80049e4 <HAL_RCC_OscConfig+0x934>)
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d116      	bne.n	8004982 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004954:	4b23      	ldr	r3, [pc, #140]	@ (80049e4 <HAL_RCC_OscConfig+0x934>)
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	4a22      	ldr	r2, [pc, #136]	@ (80049e4 <HAL_RCC_OscConfig+0x934>)
 800495a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800495e:	61d3      	str	r3, [r2, #28]
 8004960:	4b20      	ldr	r3, [pc, #128]	@ (80049e4 <HAL_RCC_OscConfig+0x934>)
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004976:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800497a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004982:	4b1a      	ldr	r3, [pc, #104]	@ (80049ec <HAL_RCC_OscConfig+0x93c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d11a      	bne.n	80049c4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800498e:	4b17      	ldr	r3, [pc, #92]	@ (80049ec <HAL_RCC_OscConfig+0x93c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a16      	ldr	r2, [pc, #88]	@ (80049ec <HAL_RCC_OscConfig+0x93c>)
 8004994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004998:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499a:	f7fd f84b 	bl	8001a34 <HAL_GetTick>
 800499e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a2:	e009      	b.n	80049b8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a4:	f7fd f846 	bl	8001a34 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b64      	cmp	r3, #100	@ 0x64
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e3b1      	b.n	800511c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b8:	4b0c      	ldr	r3, [pc, #48]	@ (80049ec <HAL_RCC_OscConfig+0x93c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0ef      	beq.n	80049a4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d10d      	bne.n	80049f0 <HAL_RCC_OscConfig+0x940>
 80049d4:	4b03      	ldr	r3, [pc, #12]	@ (80049e4 <HAL_RCC_OscConfig+0x934>)
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	4a02      	ldr	r2, [pc, #8]	@ (80049e4 <HAL_RCC_OscConfig+0x934>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6213      	str	r3, [r2, #32]
 80049e0:	e03c      	b.n	8004a5c <HAL_RCC_OscConfig+0x9ac>
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
 80049e8:	10908120 	.word	0x10908120
 80049ec:	40007000 	.word	0x40007000
 80049f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10c      	bne.n	8004a1a <HAL_RCC_OscConfig+0x96a>
 8004a00:	4bc1      	ldr	r3, [pc, #772]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	4ac0      	ldr	r2, [pc, #768]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	6213      	str	r3, [r2, #32]
 8004a0c:	4bbe      	ldr	r3, [pc, #760]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	4abd      	ldr	r2, [pc, #756]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004a12:	f023 0304 	bic.w	r3, r3, #4
 8004a16:	6213      	str	r3, [r2, #32]
 8004a18:	e020      	b.n	8004a5c <HAL_RCC_OscConfig+0x9ac>
 8004a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b05      	cmp	r3, #5
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCC_OscConfig+0x994>
 8004a2a:	4bb7      	ldr	r3, [pc, #732]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	4ab6      	ldr	r2, [pc, #728]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004a30:	f043 0304 	orr.w	r3, r3, #4
 8004a34:	6213      	str	r3, [r2, #32]
 8004a36:	4bb4      	ldr	r3, [pc, #720]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	4ab3      	ldr	r2, [pc, #716]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	6213      	str	r3, [r2, #32]
 8004a42:	e00b      	b.n	8004a5c <HAL_RCC_OscConfig+0x9ac>
 8004a44:	4bb0      	ldr	r3, [pc, #704]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	4aaf      	ldr	r2, [pc, #700]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004a4a:	f023 0301 	bic.w	r3, r3, #1
 8004a4e:	6213      	str	r3, [r2, #32]
 8004a50:	4bad      	ldr	r3, [pc, #692]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	4aac      	ldr	r2, [pc, #688]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004a56:	f023 0304 	bic.w	r3, r3, #4
 8004a5a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8081 	beq.w	8004b70 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a6e:	f7fc ffe1 	bl	8001a34 <HAL_GetTick>
 8004a72:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a78:	f7fc ffdc 	bl	8001a34 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e345      	b.n	800511c <HAL_RCC_OscConfig+0x106c>
 8004a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a94:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004a98:	2202      	movs	r2, #2
 8004a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	fa93 f2a3 	rbit	r2, r3
 8004aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004abc:	2202      	movs	r2, #2
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	fa93 f2a3 	rbit	r2, r3
 8004ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ad2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004ad6:	601a      	str	r2, [r3, #0]
  return result;
 8004ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004adc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004ae0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae2:	fab3 f383 	clz	r3, r3
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f043 0302 	orr.w	r3, r3, #2
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d102      	bne.n	8004afc <HAL_RCC_OscConfig+0xa4c>
 8004af6:	4b84      	ldr	r3, [pc, #528]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	e013      	b.n	8004b24 <HAL_RCC_OscConfig+0xa74>
 8004afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b00:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b04:	2202      	movs	r2, #2
 8004b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	fa93 f2a3 	rbit	r2, r3
 8004b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b1a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	4b79      	ldr	r3, [pc, #484]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b28:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004b2c:	2102      	movs	r1, #2
 8004b2e:	6011      	str	r1, [r2, #0]
 8004b30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b34:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	fa92 f1a2 	rbit	r1, r2
 8004b3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b42:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004b46:	6011      	str	r1, [r2, #0]
  return result;
 8004b48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b4c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	fab2 f282 	clz	r2, r2
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	f002 021f 	and.w	r2, r2, #31
 8004b62:	2101      	movs	r1, #1
 8004b64:	fa01 f202 	lsl.w	r2, r1, r2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d084      	beq.n	8004a78 <HAL_RCC_OscConfig+0x9c8>
 8004b6e:	e07f      	b.n	8004c70 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b70:	f7fc ff60 	bl	8001a34 <HAL_GetTick>
 8004b74:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b78:	e00b      	b.n	8004b92 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b7a:	f7fc ff5b 	bl	8001a34 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e2c4      	b.n	800511c <HAL_RCC_OscConfig+0x106c>
 8004b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b96:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	fa93 f2a3 	rbit	r2, r3
 8004bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	fa93 f2a3 	rbit	r2, r3
 8004bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004bd8:	601a      	str	r2, [r3, #0]
  return result;
 8004bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bde:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004be2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be4:	fab3 f383 	clz	r3, r3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f043 0302 	orr.w	r3, r3, #2
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d102      	bne.n	8004bfe <HAL_RCC_OscConfig+0xb4e>
 8004bf8:	4b43      	ldr	r3, [pc, #268]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	e013      	b.n	8004c26 <HAL_RCC_OscConfig+0xb76>
 8004bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c02:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c06:	2202      	movs	r2, #2
 8004c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c0e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	fa93 f2a3 	rbit	r2, r3
 8004c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c1c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	4b39      	ldr	r3, [pc, #228]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c2a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004c2e:	2102      	movs	r1, #2
 8004c30:	6011      	str	r1, [r2, #0]
 8004c32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c36:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	fa92 f1a2 	rbit	r1, r2
 8004c40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c44:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004c48:	6011      	str	r1, [r2, #0]
  return result;
 8004c4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c4e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	fab2 f282 	clz	r2, r2
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	f002 021f 	and.w	r2, r2, #31
 8004c64:	2101      	movs	r1, #1
 8004c66:	fa01 f202 	lsl.w	r2, r1, r2
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d184      	bne.n	8004b7a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c70:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d105      	bne.n	8004c84 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c78:	4b23      	ldr	r3, [pc, #140]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	4a22      	ldr	r2, [pc, #136]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c82:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69db      	ldr	r3, [r3, #28]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8242 	beq.w	800511a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c96:	4b1c      	ldr	r3, [pc, #112]	@ (8004d08 <HAL_RCC_OscConfig+0xc58>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	f000 8213 	beq.w	80050ca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ca8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	f040 8162 	bne.w	8004f7a <HAL_RCC_OscConfig+0xeca>
 8004cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cba:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004cbe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	fa93 f2a3 	rbit	r2, r3
 8004cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004cda:	601a      	str	r2, [r3, #0]
  return result;
 8004cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004ce4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004cf0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fc fe9a 	bl	8001a34 <HAL_GetTick>
 8004d00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d04:	e00c      	b.n	8004d20 <HAL_RCC_OscConfig+0xc70>
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fc fe92 	bl	8001a34 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e1fd      	b.n	800511c <HAL_RCC_OscConfig+0x106c>
 8004d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d24:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004d28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d32:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	fa93 f2a3 	rbit	r2, r3
 8004d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d40:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004d44:	601a      	str	r2, [r3, #0]
  return result;
 8004d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d4a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004d4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d50:	fab3 f383 	clz	r3, r3
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d102      	bne.n	8004d6a <HAL_RCC_OscConfig+0xcba>
 8004d64:	4bb0      	ldr	r3, [pc, #704]	@ (8005028 <HAL_RCC_OscConfig+0xf78>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	e027      	b.n	8004dba <HAL_RCC_OscConfig+0xd0a>
 8004d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d6e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004d72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d7c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	fa93 f2a3 	rbit	r2, r3
 8004d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d8a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d94:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004d98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004da2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	fa93 f2a3 	rbit	r2, r3
 8004dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004db0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	4b9c      	ldr	r3, [pc, #624]	@ (8005028 <HAL_RCC_OscConfig+0xf78>)
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dbe:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004dc2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004dc6:	6011      	str	r1, [r2, #0]
 8004dc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dcc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	fa92 f1a2 	rbit	r1, r2
 8004dd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dda:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004dde:	6011      	str	r1, [r2, #0]
  return result;
 8004de0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004de4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	fab2 f282 	clz	r2, r2
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	f042 0220 	orr.w	r2, r2, #32
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	f002 021f 	and.w	r2, r2, #31
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8004e00:	4013      	ands	r3, r2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d182      	bne.n	8004d0c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e06:	4b88      	ldr	r3, [pc, #544]	@ (8005028 <HAL_RCC_OscConfig+0xf78>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	430b      	orrs	r3, r1
 8004e28:	497f      	ldr	r1, [pc, #508]	@ (8005028 <HAL_RCC_OscConfig+0xf78>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	604b      	str	r3, [r1, #4]
 8004e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e32:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004e36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e40:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	fa93 f2a3 	rbit	r2, r3
 8004e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e4e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004e52:	601a      	str	r2, [r3, #0]
  return result;
 8004e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e58:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004e5c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004e68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	461a      	mov	r2, r3
 8004e70:	2301      	movs	r3, #1
 8004e72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e74:	f7fc fdde 	bl	8001a34 <HAL_GetTick>
 8004e78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e7c:	e009      	b.n	8004e92 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e7e:	f7fc fdd9 	bl	8001a34 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e144      	b.n	800511c <HAL_RCC_OscConfig+0x106c>
 8004e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e96:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004e9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ea4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	fa93 f2a3 	rbit	r2, r3
 8004eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eb2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004eb6:	601a      	str	r2, [r3, #0]
  return result;
 8004eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ebc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004ec0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ec2:	fab3 f383 	clz	r3, r3
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d102      	bne.n	8004edc <HAL_RCC_OscConfig+0xe2c>
 8004ed6:	4b54      	ldr	r3, [pc, #336]	@ (8005028 <HAL_RCC_OscConfig+0xf78>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	e027      	b.n	8004f2c <HAL_RCC_OscConfig+0xe7c>
 8004edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004ee4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eee:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	fa93 f2a3 	rbit	r2, r3
 8004ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004efc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f06:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004f0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f14:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	fa93 f2a3 	rbit	r2, r3
 8004f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f22:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	4b3f      	ldr	r3, [pc, #252]	@ (8005028 <HAL_RCC_OscConfig+0xf78>)
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f30:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004f34:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004f38:	6011      	str	r1, [r2, #0]
 8004f3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f3e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	fa92 f1a2 	rbit	r1, r2
 8004f48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f4c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004f50:	6011      	str	r1, [r2, #0]
  return result;
 8004f52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f56:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	fab2 f282 	clz	r2, r2
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	f042 0220 	orr.w	r2, r2, #32
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	f002 021f 	and.w	r2, r2, #31
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d082      	beq.n	8004e7e <HAL_RCC_OscConfig+0xdce>
 8004f78:	e0cf      	b.n	800511a <HAL_RCC_OscConfig+0x106a>
 8004f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f7e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f8c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	fa93 f2a3 	rbit	r2, r3
 8004f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f9a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004f9e:	601a      	str	r2, [r3, #0]
  return result;
 8004fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fa4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004fa8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004faa:	fab3 f383 	clz	r3, r3
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004fb4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fc fd38 	bl	8001a34 <HAL_GetTick>
 8004fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fc8:	e009      	b.n	8004fde <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fca:	f7fc fd33 	bl	8001a34 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e09e      	b.n	800511c <HAL_RCC_OscConfig+0x106c>
 8004fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004fe6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ff0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	fa93 f2a3 	rbit	r2, r3
 8004ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ffe:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005002:	601a      	str	r2, [r3, #0]
  return result;
 8005004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005008:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800500c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800500e:	fab3 f383 	clz	r3, r3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	b2db      	uxtb	r3, r3
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b01      	cmp	r3, #1
 8005020:	d104      	bne.n	800502c <HAL_RCC_OscConfig+0xf7c>
 8005022:	4b01      	ldr	r3, [pc, #4]	@ (8005028 <HAL_RCC_OscConfig+0xf78>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	e029      	b.n	800507c <HAL_RCC_OscConfig+0xfcc>
 8005028:	40021000 	.word	0x40021000
 800502c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005030:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005034:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800503e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	fa93 f2a3 	rbit	r2, r3
 8005048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800504c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005056:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800505a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005064:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	fa93 f2a3 	rbit	r2, r3
 800506e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005072:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	4b2b      	ldr	r3, [pc, #172]	@ (8005128 <HAL_RCC_OscConfig+0x1078>)
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005080:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005084:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005088:	6011      	str	r1, [r2, #0]
 800508a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800508e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	fa92 f1a2 	rbit	r1, r2
 8005098:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800509c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80050a0:	6011      	str	r1, [r2, #0]
  return result;
 80050a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050a6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	fab2 f282 	clz	r2, r2
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	f042 0220 	orr.w	r2, r2, #32
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	f002 021f 	and.w	r2, r2, #31
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f202 	lsl.w	r2, r1, r2
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d180      	bne.n	8004fca <HAL_RCC_OscConfig+0xf1a>
 80050c8:	e027      	b.n	800511a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e01e      	b.n	800511c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050de:	4b12      	ldr	r3, [pc, #72]	@ (8005128 <HAL_RCC_OscConfig+0x1078>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80050e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80050ea:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80050ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d10b      	bne.n	8005116 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80050fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005102:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800510a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005112:	429a      	cmp	r2, r3
 8005114:	d001      	beq.n	800511a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000

0800512c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b09e      	sub	sp, #120	@ 0x78
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e162      	b.n	800540a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005144:	4b90      	ldr	r3, [pc, #576]	@ (8005388 <HAL_RCC_ClockConfig+0x25c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d910      	bls.n	8005174 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005152:	4b8d      	ldr	r3, [pc, #564]	@ (8005388 <HAL_RCC_ClockConfig+0x25c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 0207 	bic.w	r2, r3, #7
 800515a:	498b      	ldr	r1, [pc, #556]	@ (8005388 <HAL_RCC_ClockConfig+0x25c>)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005162:	4b89      	ldr	r3, [pc, #548]	@ (8005388 <HAL_RCC_ClockConfig+0x25c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e14a      	b.n	800540a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005180:	4b82      	ldr	r3, [pc, #520]	@ (800538c <HAL_RCC_ClockConfig+0x260>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	497f      	ldr	r1, [pc, #508]	@ (800538c <HAL_RCC_ClockConfig+0x260>)
 800518e:	4313      	orrs	r3, r2
 8005190:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 80dc 	beq.w	8005358 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d13c      	bne.n	8005222 <HAL_RCC_ClockConfig+0xf6>
 80051a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051ac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051b0:	fa93 f3a3 	rbit	r3, r3
 80051b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80051b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b8:	fab3 f383 	clz	r3, r3
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d102      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xa6>
 80051cc:	4b6f      	ldr	r3, [pc, #444]	@ (800538c <HAL_RCC_ClockConfig+0x260>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	e00f      	b.n	80051f2 <HAL_RCC_ClockConfig+0xc6>
 80051d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051da:	fa93 f3a3 	rbit	r3, r3
 80051de:	667b      	str	r3, [r7, #100]	@ 0x64
 80051e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80051e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051e8:	fa93 f3a3 	rbit	r3, r3
 80051ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051ee:	4b67      	ldr	r3, [pc, #412]	@ (800538c <HAL_RCC_ClockConfig+0x260>)
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80051f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051fa:	fa92 f2a2 	rbit	r2, r2
 80051fe:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005200:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005202:	fab2 f282 	clz	r2, r2
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	f042 0220 	orr.w	r2, r2, #32
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	f002 021f 	and.w	r2, r2, #31
 8005212:	2101      	movs	r1, #1
 8005214:	fa01 f202 	lsl.w	r2, r1, r2
 8005218:	4013      	ands	r3, r2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d17b      	bne.n	8005316 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e0f3      	b.n	800540a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b02      	cmp	r3, #2
 8005228:	d13c      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x178>
 800522a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800522e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005232:	fa93 f3a3 	rbit	r3, r3
 8005236:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	fab3 f383 	clz	r3, r3
 800523e:	b2db      	uxtb	r3, r3
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b01      	cmp	r3, #1
 800524c:	d102      	bne.n	8005254 <HAL_RCC_ClockConfig+0x128>
 800524e:	4b4f      	ldr	r3, [pc, #316]	@ (800538c <HAL_RCC_ClockConfig+0x260>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	e00f      	b.n	8005274 <HAL_RCC_ClockConfig+0x148>
 8005254:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005258:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800525c:	fa93 f3a3 	rbit	r3, r3
 8005260:	647b      	str	r3, [r7, #68]	@ 0x44
 8005262:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005266:	643b      	str	r3, [r7, #64]	@ 0x40
 8005268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800526a:	fa93 f3a3 	rbit	r3, r3
 800526e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005270:	4b46      	ldr	r3, [pc, #280]	@ (800538c <HAL_RCC_ClockConfig+0x260>)
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005278:	63ba      	str	r2, [r7, #56]	@ 0x38
 800527a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800527c:	fa92 f2a2 	rbit	r2, r2
 8005280:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005282:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005284:	fab2 f282 	clz	r2, r2
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	f042 0220 	orr.w	r2, r2, #32
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	f002 021f 	and.w	r2, r2, #31
 8005294:	2101      	movs	r1, #1
 8005296:	fa01 f202 	lsl.w	r2, r1, r2
 800529a:	4013      	ands	r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d13a      	bne.n	8005316 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0b2      	b.n	800540a <HAL_RCC_ClockConfig+0x2de>
 80052a4:	2302      	movs	r3, #2
 80052a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052aa:	fa93 f3a3 	rbit	r3, r3
 80052ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80052b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b2:	fab3 f383 	clz	r3, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f043 0301 	orr.w	r3, r3, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d102      	bne.n	80052cc <HAL_RCC_ClockConfig+0x1a0>
 80052c6:	4b31      	ldr	r3, [pc, #196]	@ (800538c <HAL_RCC_ClockConfig+0x260>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	e00d      	b.n	80052e8 <HAL_RCC_ClockConfig+0x1bc>
 80052cc:	2302      	movs	r3, #2
 80052ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d2:	fa93 f3a3 	rbit	r3, r3
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d8:	2302      	movs	r3, #2
 80052da:	623b      	str	r3, [r7, #32]
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	fa93 f3a3 	rbit	r3, r3
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	4b29      	ldr	r3, [pc, #164]	@ (800538c <HAL_RCC_ClockConfig+0x260>)
 80052e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e8:	2202      	movs	r2, #2
 80052ea:	61ba      	str	r2, [r7, #24]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	fa92 f2a2 	rbit	r2, r2
 80052f2:	617a      	str	r2, [r7, #20]
  return result;
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	fab2 f282 	clz	r2, r2
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	f042 0220 	orr.w	r2, r2, #32
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	f002 021f 	and.w	r2, r2, #31
 8005306:	2101      	movs	r1, #1
 8005308:	fa01 f202 	lsl.w	r2, r1, r2
 800530c:	4013      	ands	r3, r2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e079      	b.n	800540a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005316:	4b1d      	ldr	r3, [pc, #116]	@ (800538c <HAL_RCC_ClockConfig+0x260>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f023 0203 	bic.w	r2, r3, #3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	491a      	ldr	r1, [pc, #104]	@ (800538c <HAL_RCC_ClockConfig+0x260>)
 8005324:	4313      	orrs	r3, r2
 8005326:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005328:	f7fc fb84 	bl	8001a34 <HAL_GetTick>
 800532c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532e:	e00a      	b.n	8005346 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005330:	f7fc fb80 	bl	8001a34 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800533e:	4293      	cmp	r3, r2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e061      	b.n	800540a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005346:	4b11      	ldr	r3, [pc, #68]	@ (800538c <HAL_RCC_ClockConfig+0x260>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f003 020c 	and.w	r2, r3, #12
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	429a      	cmp	r2, r3
 8005356:	d1eb      	bne.n	8005330 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005358:	4b0b      	ldr	r3, [pc, #44]	@ (8005388 <HAL_RCC_ClockConfig+0x25c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d214      	bcs.n	8005390 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005366:	4b08      	ldr	r3, [pc, #32]	@ (8005388 <HAL_RCC_ClockConfig+0x25c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 0207 	bic.w	r2, r3, #7
 800536e:	4906      	ldr	r1, [pc, #24]	@ (8005388 <HAL_RCC_ClockConfig+0x25c>)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b04      	ldr	r3, [pc, #16]	@ (8005388 <HAL_RCC_ClockConfig+0x25c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d005      	beq.n	8005390 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e040      	b.n	800540a <HAL_RCC_ClockConfig+0x2de>
 8005388:	40022000 	.word	0x40022000
 800538c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800539c:	4b1d      	ldr	r3, [pc, #116]	@ (8005414 <HAL_RCC_ClockConfig+0x2e8>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	491a      	ldr	r1, [pc, #104]	@ (8005414 <HAL_RCC_ClockConfig+0x2e8>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ba:	4b16      	ldr	r3, [pc, #88]	@ (8005414 <HAL_RCC_ClockConfig+0x2e8>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4912      	ldr	r1, [pc, #72]	@ (8005414 <HAL_RCC_ClockConfig+0x2e8>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80053ce:	f000 f829 	bl	8005424 <HAL_RCC_GetSysClockFreq>
 80053d2:	4601      	mov	r1, r0
 80053d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005414 <HAL_RCC_ClockConfig+0x2e8>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053dc:	22f0      	movs	r2, #240	@ 0xf0
 80053de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	fa92 f2a2 	rbit	r2, r2
 80053e6:	60fa      	str	r2, [r7, #12]
  return result;
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	fab2 f282 	clz	r2, r2
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	40d3      	lsrs	r3, r2
 80053f2:	4a09      	ldr	r2, [pc, #36]	@ (8005418 <HAL_RCC_ClockConfig+0x2ec>)
 80053f4:	5cd3      	ldrb	r3, [r2, r3]
 80053f6:	fa21 f303 	lsr.w	r3, r1, r3
 80053fa:	4a08      	ldr	r2, [pc, #32]	@ (800541c <HAL_RCC_ClockConfig+0x2f0>)
 80053fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80053fe:	4b08      	ldr	r3, [pc, #32]	@ (8005420 <HAL_RCC_ClockConfig+0x2f4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f7fb ff84 	bl	8001310 <HAL_InitTick>
  
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3778      	adds	r7, #120	@ 0x78
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
 8005418:	08006094 	.word	0x08006094
 800541c:	20000000 	.word	0x20000000
 8005420:	20000004 	.word	0x20000004

08005424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	2300      	movs	r3, #0
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	2300      	movs	r3, #0
 8005438:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800543e:	4b1e      	ldr	r3, [pc, #120]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b04      	cmp	r3, #4
 800544c:	d002      	beq.n	8005454 <HAL_RCC_GetSysClockFreq+0x30>
 800544e:	2b08      	cmp	r3, #8
 8005450:	d003      	beq.n	800545a <HAL_RCC_GetSysClockFreq+0x36>
 8005452:	e026      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005454:	4b19      	ldr	r3, [pc, #100]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x98>)
 8005456:	613b      	str	r3, [r7, #16]
      break;
 8005458:	e026      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	0c9b      	lsrs	r3, r3, #18
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	4a17      	ldr	r2, [pc, #92]	@ (80054c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005464:	5cd3      	ldrb	r3, [r2, r3]
 8005466:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005468:	4b13      	ldr	r3, [pc, #76]	@ (80054b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800546a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	4a14      	ldr	r2, [pc, #80]	@ (80054c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005472:	5cd3      	ldrb	r3, [r2, r3]
 8005474:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005480:	4a0e      	ldr	r2, [pc, #56]	@ (80054bc <HAL_RCC_GetSysClockFreq+0x98>)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	fbb2 f2f3 	udiv	r2, r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	fb02 f303 	mul.w	r3, r2, r3
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	e004      	b.n	800549c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a0c      	ldr	r2, [pc, #48]	@ (80054c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005496:	fb02 f303 	mul.w	r3, r2, r3
 800549a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	613b      	str	r3, [r7, #16]
      break;
 80054a0:	e002      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054a2:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <HAL_RCC_GetSysClockFreq+0xa8>)
 80054a4:	613b      	str	r3, [r7, #16]
      break;
 80054a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054a8:	693b      	ldr	r3, [r7, #16]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000
 80054bc:	00f42400 	.word	0x00f42400
 80054c0:	080066a8 	.word	0x080066a8
 80054c4:	080066b8 	.word	0x080066b8
 80054c8:	003d0900 	.word	0x003d0900
 80054cc:	007a1200 	.word	0x007a1200

080054d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054d4:	4b03      	ldr	r3, [pc, #12]	@ (80054e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054d6:	681b      	ldr	r3, [r3, #0]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000000 	.word	0x20000000

080054e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80054ee:	f7ff ffef 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
 80054f2:	4601      	mov	r1, r0
 80054f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005524 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80054fc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005500:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	fa92 f2a2 	rbit	r2, r2
 8005508:	603a      	str	r2, [r7, #0]
  return result;
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	fab2 f282 	clz	r2, r2
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	40d3      	lsrs	r3, r2
 8005514:	4a04      	ldr	r2, [pc, #16]	@ (8005528 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005516:	5cd3      	ldrb	r3, [r2, r3]
 8005518:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40021000 	.word	0x40021000
 8005528:	080060a4 	.word	0x080060a4

0800552c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	220f      	movs	r2, #15
 800553a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800553c:	4b12      	ldr	r3, [pc, #72]	@ (8005588 <HAL_RCC_GetClockConfig+0x5c>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f003 0203 	and.w	r2, r3, #3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005548:	4b0f      	ldr	r3, [pc, #60]	@ (8005588 <HAL_RCC_GetClockConfig+0x5c>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005554:	4b0c      	ldr	r3, [pc, #48]	@ (8005588 <HAL_RCC_GetClockConfig+0x5c>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005560:	4b09      	ldr	r3, [pc, #36]	@ (8005588 <HAL_RCC_GetClockConfig+0x5c>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	08db      	lsrs	r3, r3, #3
 8005566:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800556e:	4b07      	ldr	r3, [pc, #28]	@ (800558c <HAL_RCC_GetClockConfig+0x60>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0207 	and.w	r2, r3, #7
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	601a      	str	r2, [r3, #0]
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40021000 	.word	0x40021000
 800558c:	40022000 	.word	0x40022000

08005590 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b092      	sub	sp, #72	@ 0x48
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 80d4 	beq.w	800575c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b4:	4b4e      	ldr	r3, [pc, #312]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10e      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c0:	4b4b      	ldr	r3, [pc, #300]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	4a4a      	ldr	r2, [pc, #296]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ca:	61d3      	str	r3, [r2, #28]
 80055cc:	4b48      	ldr	r3, [pc, #288]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055de:	4b45      	ldr	r3, [pc, #276]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d118      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ea:	4b42      	ldr	r3, [pc, #264]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a41      	ldr	r2, [pc, #260]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f6:	f7fc fa1d 	bl	8001a34 <HAL_GetTick>
 80055fa:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fc:	e008      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fe:	f7fc fa19 	bl	8001a34 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b64      	cmp	r3, #100	@ 0x64
 800560a:	d901      	bls.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e169      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005610:	4b38      	ldr	r3, [pc, #224]	@ (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800561c:	4b34      	ldr	r3, [pc, #208]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005624:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8084 	beq.w	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005636:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005638:	429a      	cmp	r2, r3
 800563a:	d07c      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800563c:	4b2c      	ldr	r3, [pc, #176]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005646:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800564a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	fa93 f3a3 	rbit	r3, r3
 8005652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005656:	fab3 f383 	clz	r3, r3
 800565a:	b2db      	uxtb	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	4b26      	ldr	r3, [pc, #152]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	461a      	mov	r2, r3
 8005666:	2301      	movs	r3, #1
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800566e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005672:	fa93 f3a3 	rbit	r3, r3
 8005676:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800567a:	fab3 f383 	clz	r3, r3
 800567e:	b2db      	uxtb	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	4b1d      	ldr	r3, [pc, #116]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	461a      	mov	r2, r3
 800568a:	2300      	movs	r3, #0
 800568c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800568e:	4a18      	ldr	r2, [pc, #96]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005692:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d04b      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569e:	f7fc f9c9 	bl	8001a34 <HAL_GetTick>
 80056a2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a4:	e00a      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a6:	f7fc f9c5 	bl	8001a34 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d901      	bls.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e113      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80056bc:	2302      	movs	r3, #2
 80056be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c2:	fa93 f3a3 	rbit	r3, r3
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c8:	2302      	movs	r3, #2
 80056ca:	623b      	str	r3, [r7, #32]
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	fa93 f3a3 	rbit	r3, r3
 80056d2:	61fb      	str	r3, [r7, #28]
  return result;
 80056d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d6:	fab3 f383 	clz	r3, r3
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	f043 0302 	orr.w	r3, r3, #2
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d108      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80056ea:	4b01      	ldr	r3, [pc, #4]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	e00d      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80056f0:	40021000 	.word	0x40021000
 80056f4:	40007000 	.word	0x40007000
 80056f8:	10908100 	.word	0x10908100
 80056fc:	2302      	movs	r3, #2
 80056fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	fa93 f3a3 	rbit	r3, r3
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	4b78      	ldr	r3, [pc, #480]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	2202      	movs	r2, #2
 800570e:	613a      	str	r2, [r7, #16]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	fa92 f2a2 	rbit	r2, r2
 8005716:	60fa      	str	r2, [r7, #12]
  return result;
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	fab2 f282 	clz	r2, r2
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	f002 021f 	and.w	r2, r2, #31
 800572a:	2101      	movs	r1, #1
 800572c:	fa01 f202 	lsl.w	r2, r1, r2
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0b7      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005736:	4b6d      	ldr	r3, [pc, #436]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	496a      	ldr	r1, [pc, #424]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005744:	4313      	orrs	r3, r2
 8005746:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005748:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800574c:	2b01      	cmp	r3, #1
 800574e:	d105      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005750:	4b66      	ldr	r3, [pc, #408]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	4a65      	ldr	r2, [pc, #404]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800575a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005768:	4b60      	ldr	r3, [pc, #384]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800576a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576c:	f023 0203 	bic.w	r2, r3, #3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	495d      	ldr	r1, [pc, #372]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005776:	4313      	orrs	r3, r2
 8005778:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d008      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005786:	4b59      	ldr	r3, [pc, #356]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	4956      	ldr	r1, [pc, #344]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057a4:	4b51      	ldr	r3, [pc, #324]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	494e      	ldr	r1, [pc, #312]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c2:	4b4a      	ldr	r3, [pc, #296]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c6:	f023 0210 	bic.w	r2, r3, #16
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	4947      	ldr	r1, [pc, #284]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80057e0:	4b42      	ldr	r3, [pc, #264]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ec:	493f      	ldr	r1, [pc, #252]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057fe:	4b3b      	ldr	r3, [pc, #236]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005802:	f023 0220 	bic.w	r2, r3, #32
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	4938      	ldr	r1, [pc, #224]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800580c:	4313      	orrs	r3, r2
 800580e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800581c:	4b33      	ldr	r3, [pc, #204]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800581e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005820:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	4930      	ldr	r1, [pc, #192]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800582a:	4313      	orrs	r3, r2
 800582c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800583a:	4b2c      	ldr	r3, [pc, #176]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	4929      	ldr	r1, [pc, #164]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005848:	4313      	orrs	r3, r2
 800584a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005858:	4b24      	ldr	r3, [pc, #144]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005864:	4921      	ldr	r1, [pc, #132]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005866:	4313      	orrs	r3, r2
 8005868:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005876:	4b1d      	ldr	r3, [pc, #116]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005882:	491a      	ldr	r1, [pc, #104]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005884:	4313      	orrs	r3, r2
 8005886:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005890:	2b00      	cmp	r3, #0
 8005892:	d008      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005894:	4b15      	ldr	r3, [pc, #84]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005898:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a0:	4912      	ldr	r1, [pc, #72]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d008      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80058b2:	4b0e      	ldr	r3, [pc, #56]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058be:	490b      	ldr	r1, [pc, #44]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80058d0:	4b06      	ldr	r3, [pc, #24]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058dc:	4903      	ldr	r1, [pc, #12]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3748      	adds	r7, #72	@ 0x48
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40021000 	.word	0x40021000

080058f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e09d      	b.n	8005a3e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d108      	bne.n	800591c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005912:	d009      	beq.n	8005928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	61da      	str	r2, [r3, #28]
 800591a:	e005      	b.n	8005928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fb fc2a 	bl	800119c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800595e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005968:	d902      	bls.n	8005970 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	e002      	b.n	8005976 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005974:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800597e:	d007      	beq.n	8005990 <HAL_SPI_Init+0xa0>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005988:	d002      	beq.n	8005990 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d2:	ea42 0103 	orr.w	r1, r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	0c1b      	lsrs	r3, r3, #16
 80059ec:	f003 0204 	and.w	r2, r3, #4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a0c:	ea42 0103 	orr.w	r1, r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e049      	b.n	8005aec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f841 	bl	8005af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3304      	adds	r3, #4
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f000 f9d3 	bl	8005e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d001      	beq.n	8005b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e04a      	b.n	8005bb6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a21      	ldr	r2, [pc, #132]	@ (8005bc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d018      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x6c>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b4a:	d013      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x6c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00e      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x6c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bcc <HAL_TIM_Base_Start_IT+0xc4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d009      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x6c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x6c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a19      	ldr	r2, [pc, #100]	@ (8005bd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d115      	bne.n	8005ba0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	4b17      	ldr	r3, [pc, #92]	@ (8005bd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b06      	cmp	r3, #6
 8005b84:	d015      	beq.n	8005bb2 <HAL_TIM_Base_Start_IT+0xaa>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b8c:	d011      	beq.n	8005bb2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9e:	e008      	b.n	8005bb2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	e000      	b.n	8005bb4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800
 8005bd0:	40013400 	.word	0x40013400
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	00010007 	.word	0x00010007

08005bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d020      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0202 	mvn.w	r2, #2
 8005c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f8e4 	bl	8005df4 <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f8d6 	bl	8005de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f8e7 	bl	8005e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d020      	beq.n	8005c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01b      	beq.n	8005c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0204 	mvn.w	r2, #4
 8005c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2202      	movs	r2, #2
 8005c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f8be 	bl	8005df4 <HAL_TIM_IC_CaptureCallback>
 8005c78:	e005      	b.n	8005c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f8b0 	bl	8005de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f8c1 	bl	8005e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d020      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01b      	beq.n	8005cd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0208 	mvn.w	r2, #8
 8005ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2204      	movs	r2, #4
 8005cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f898 	bl	8005df4 <HAL_TIM_IC_CaptureCallback>
 8005cc4:	e005      	b.n	8005cd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f88a 	bl	8005de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f89b 	bl	8005e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d020      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01b      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0210 	mvn.w	r2, #16
 8005cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f872 	bl	8005df4 <HAL_TIM_IC_CaptureCallback>
 8005d10:	e005      	b.n	8005d1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f864 	bl	8005de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f875 	bl	8005e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00c      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0201 	mvn.w	r2, #1
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fa ff1a 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00c      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f908 	bl	8005f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00c      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f900 	bl	8005f90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00c      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f834 	bl	8005e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00c      	beq.n	8005dd8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d007      	beq.n	8005dd8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0220 	mvn.w	r2, #32
 8005dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f8c8 	bl	8005f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dd8:	bf00      	nop
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a42      	ldr	r2, [pc, #264]	@ (8005f4c <TIM_Base_SetConfig+0x11c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00f      	beq.n	8005e68 <TIM_Base_SetConfig+0x38>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e4e:	d00b      	beq.n	8005e68 <TIM_Base_SetConfig+0x38>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a3f      	ldr	r2, [pc, #252]	@ (8005f50 <TIM_Base_SetConfig+0x120>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d007      	beq.n	8005e68 <TIM_Base_SetConfig+0x38>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a3e      	ldr	r2, [pc, #248]	@ (8005f54 <TIM_Base_SetConfig+0x124>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_Base_SetConfig+0x38>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a3d      	ldr	r2, [pc, #244]	@ (8005f58 <TIM_Base_SetConfig+0x128>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d108      	bne.n	8005e7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a33      	ldr	r2, [pc, #204]	@ (8005f4c <TIM_Base_SetConfig+0x11c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d01b      	beq.n	8005eba <TIM_Base_SetConfig+0x8a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e88:	d017      	beq.n	8005eba <TIM_Base_SetConfig+0x8a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a30      	ldr	r2, [pc, #192]	@ (8005f50 <TIM_Base_SetConfig+0x120>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <TIM_Base_SetConfig+0x8a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2f      	ldr	r2, [pc, #188]	@ (8005f54 <TIM_Base_SetConfig+0x124>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00f      	beq.n	8005eba <TIM_Base_SetConfig+0x8a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005f58 <TIM_Base_SetConfig+0x128>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <TIM_Base_SetConfig+0x8a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8005f5c <TIM_Base_SetConfig+0x12c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d007      	beq.n	8005eba <TIM_Base_SetConfig+0x8a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a2c      	ldr	r2, [pc, #176]	@ (8005f60 <TIM_Base_SetConfig+0x130>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_Base_SetConfig+0x8a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8005f64 <TIM_Base_SetConfig+0x134>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d108      	bne.n	8005ecc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a16      	ldr	r2, [pc, #88]	@ (8005f4c <TIM_Base_SetConfig+0x11c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00f      	beq.n	8005f18 <TIM_Base_SetConfig+0xe8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a17      	ldr	r2, [pc, #92]	@ (8005f58 <TIM_Base_SetConfig+0x128>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00b      	beq.n	8005f18 <TIM_Base_SetConfig+0xe8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a16      	ldr	r2, [pc, #88]	@ (8005f5c <TIM_Base_SetConfig+0x12c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d007      	beq.n	8005f18 <TIM_Base_SetConfig+0xe8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a15      	ldr	r2, [pc, #84]	@ (8005f60 <TIM_Base_SetConfig+0x130>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_Base_SetConfig+0xe8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a14      	ldr	r2, [pc, #80]	@ (8005f64 <TIM_Base_SetConfig+0x134>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d103      	bne.n	8005f20 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d105      	bne.n	8005f3e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f023 0201 	bic.w	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	611a      	str	r2, [r3, #16]
  }
}
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40013400 	.word	0x40013400
 8005f5c:	40014000 	.word	0x40014000
 8005f60:	40014400 	.word	0x40014400
 8005f64:	40014800 	.word	0x40014800

08005f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fac:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005fb0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	1d3b      	adds	r3, r7, #4
 8005fe4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <memset>:
 8006016:	4402      	add	r2, r0
 8006018:	4603      	mov	r3, r0
 800601a:	4293      	cmp	r3, r2
 800601c:	d100      	bne.n	8006020 <memset+0xa>
 800601e:	4770      	bx	lr
 8006020:	f803 1b01 	strb.w	r1, [r3], #1
 8006024:	e7f9      	b.n	800601a <memset+0x4>
	...

08006028 <__libc_init_array>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	4d0d      	ldr	r5, [pc, #52]	@ (8006060 <__libc_init_array+0x38>)
 800602c:	4c0d      	ldr	r4, [pc, #52]	@ (8006064 <__libc_init_array+0x3c>)
 800602e:	1b64      	subs	r4, r4, r5
 8006030:	10a4      	asrs	r4, r4, #2
 8006032:	2600      	movs	r6, #0
 8006034:	42a6      	cmp	r6, r4
 8006036:	d109      	bne.n	800604c <__libc_init_array+0x24>
 8006038:	4d0b      	ldr	r5, [pc, #44]	@ (8006068 <__libc_init_array+0x40>)
 800603a:	4c0c      	ldr	r4, [pc, #48]	@ (800606c <__libc_init_array+0x44>)
 800603c:	f000 f818 	bl	8006070 <_init>
 8006040:	1b64      	subs	r4, r4, r5
 8006042:	10a4      	asrs	r4, r4, #2
 8006044:	2600      	movs	r6, #0
 8006046:	42a6      	cmp	r6, r4
 8006048:	d105      	bne.n	8006056 <__libc_init_array+0x2e>
 800604a:	bd70      	pop	{r4, r5, r6, pc}
 800604c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006050:	4798      	blx	r3
 8006052:	3601      	adds	r6, #1
 8006054:	e7ee      	b.n	8006034 <__libc_init_array+0xc>
 8006056:	f855 3b04 	ldr.w	r3, [r5], #4
 800605a:	4798      	blx	r3
 800605c:	3601      	adds	r6, #1
 800605e:	e7f2      	b.n	8006046 <__libc_init_array+0x1e>
 8006060:	080066c8 	.word	0x080066c8
 8006064:	080066c8 	.word	0x080066c8
 8006068:	080066c8 	.word	0x080066c8
 800606c:	080066cc 	.word	0x080066cc

08006070 <_init>:
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006072:	bf00      	nop
 8006074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006076:	bc08      	pop	{r3}
 8006078:	469e      	mov	lr, r3
 800607a:	4770      	bx	lr

0800607c <_fini>:
 800607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607e:	bf00      	nop
 8006080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006082:	bc08      	pop	{r3}
 8006084:	469e      	mov	lr, r3
 8006086:	4770      	bx	lr
